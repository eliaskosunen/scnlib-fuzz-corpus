_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  17.0M|{
 3807|  17.0M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  17.0M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  17.0M|    }
 3810|  17.0M|    else if constexpr (sizeof(U) == 2) {
 3811|  17.0M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  17.0M|    }
 3813|  17.0M|    else {
 3814|       |        // utf-32
 3815|  17.0M|        static_assert(sizeof(U) == 4);
 3816|  17.0M|        SCN_UNUSED(ch);
 3817|  17.0M|        return 1;
 3818|  17.0M|    }
 3819|  17.0M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  17.0M|{
 3771|  17.0M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  17.0M|    SCN_GCC_COMPAT_PUSH
 3774|  17.0M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  17.0M|    constexpr char lengths[] =
 3776|  17.0M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  17.0M|        "\1\1\1\1\1\1\1\1"
 3778|  17.0M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  17.0M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  17.0M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  17.0M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  17.0M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  17.0M|    SCN_GCC_COMPAT_POP
 3785|  17.0M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  15.6M|{
 4013|  15.6M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  15.6M|        return decode_utf8_code_point_exhaustive(input);
 4015|  15.6M|    }
 4016|  15.6M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  15.6M|        return decode_utf16_code_point_exhaustive(input);
 4018|  15.6M|    }
 4019|  15.6M|    else {
 4020|  15.6M|        SCN_EXPECT(input.size() == 1);
 4021|  15.6M|        auto cp = static_cast<char32_t>(input.front());
 4022|  15.6M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  15.6M|            return invalid_code_point;
 4024|  15.6M|        }
 4025|  15.6M|        return cp;
 4026|  15.6M|    }
 4027|  15.6M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  15.6M|{
 3826|  15.6M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  15.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  15.6M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  15.6M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  15.6M|    };
 3831|       |
 3832|  15.6M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 14.1M, False: 1.52M]
  ------------------
 3833|  14.1M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 186, False: 14.1M]
  ------------------
 3834|    186|            SCN_UNLIKELY_ATTR
 3835|    186|            return invalid_code_point;
 3836|    186|        }
 3837|  14.1M|        return static_cast<char32_t>(input[0]);
 3838|  14.1M|    }
 3839|       |
 3840|  1.52M|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 1.45M, False: 75.9k]
  ------------------
 3841|  1.45M|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 78, False: 1.45M]
  ------------------
 3842|     78|            SCN_UNLIKELY_ATTR
 3843|     78|            return invalid_code_point;
 3844|     78|        }
 3845|  1.45M|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 29.9k, False: 1.42M]
  ------------------
 3846|  29.9k|            SCN_UNLIKELY_ATTR
 3847|  29.9k|            return invalid_code_point;
 3848|  29.9k|        }
 3849|       |
 3850|  1.42M|        char32_t cp{};
 3851|  1.42M|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  1.42M|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  1.42M|        return cp;
 3854|  1.45M|    }
 3855|       |
 3856|  75.9k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 55.3k, False: 20.5k]
  ------------------
 3857|  55.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 6, False: 55.3k]
  ------------------
 3858|      6|            SCN_UNLIKELY_ATTR
 3859|      6|            return invalid_code_point;
 3860|      6|        }
 3861|  55.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 18.2k, False: 37.1k]
  ------------------
 3862|  55.3k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 2.11k, False: 34.9k]
  ------------------
 3863|  20.3k|            SCN_UNLIKELY_ATTR
 3864|  20.3k|            return invalid_code_point;
 3865|  20.3k|        }
 3866|       |
 3867|  34.9k|        char32_t cp{};
 3868|  34.9k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  34.9k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  34.9k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  34.9k|        return cp;
 3872|  55.3k|    }
 3873|       |
 3874|  20.5k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 20.5k, False: 0]
  ------------------
 3875|  20.5k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 20.5k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  20.5k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 7.69k, False: 12.8k]
  ------------------
 3880|  7.69k|            SCN_UNLIKELY_ATTR
 3881|  7.69k|            return invalid_code_point;
 3882|  7.69k|        }
 3883|  12.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 2.56k, False: 10.3k]
  ------------------
 3884|  12.8k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 1.07k, False: 9.25k]
  ------------------
 3885|  12.8k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 768, False: 8.48k]
  ------------------
 3886|  4.41k|            SCN_UNLIKELY_ATTR
 3887|  4.41k|            return invalid_code_point;
 3888|  4.41k|        }
 3889|       |
 3890|  8.48k|        char32_t cp{};
 3891|  8.48k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  8.48k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  8.48k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  8.48k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  8.48k|        return cp;
 3896|  12.8k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  1.57M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  1.57M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  1.57M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  7.39M|{
 3699|  7.39M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  7.39M|                                          decltype(first), decltype(last)> &&
 3701|  7.39M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  7.39M|        return {first, last};
 3703|  7.39M|    }
 3704|  7.39M|    else {
 3705|  7.39M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  7.39M|                                       to_address(first), to_address(last)))};
 3707|  7.39M|    }
 3708|  7.39M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  22.3M|{
  326|  22.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  22.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  22.3M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  22.3M|{
  304|  22.3M|    return p;
  305|  22.3M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  5.32M|{
 3730|  5.32M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  5.32M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  5.32M|                      decltype(it)> &&
 3733|  5.32M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  5.32M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  5.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  5.32M|        return it;
 3736|  5.32M|    }
 3737|  5.32M|    else {
 3738|  5.32M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  5.32M|    }
 3740|  5.32M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  28.1k|{
 5135|  28.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.1k|                  "Scan argument types must be default constructible");
 5137|  28.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.1k|                  "Scan argument types must be Destructible");
 5139|  28.1k|    static_assert(
 5140|  28.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.1k|        "Scan argument types must not be references");
 5142|  28.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  28.1k|    {
 4988|  28.1k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  28.1k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  28.1k|            return val;
 4991|  28.1k|        }
 4992|  28.1k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  28.1k|            return unscannable_disabled{val};
 4994|  28.1k|        }
 4995|  28.1k|        else {
 4996|  28.1k|            SCN_UNUSED(val);
 4997|  28.1k|            return unscannable_char{};
 4998|  28.1k|        }
 4999|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  28.1k|{
 5089|  28.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.1k|    constexpr bool scannable_char =
 5093|  28.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.1k|    static_assert(scannable_char,
 5095|  28.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.1k|    constexpr bool scannable_const =
 5099|  28.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.1k|    constexpr bool scannable_disabled =
 5103|  28.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.1k|    static_assert(scannable_disabled,
 5105|  28.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.1k|    static_assert(
 5110|  28.1k|        scannable,
 5111|  28.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.1k|    return arg_value{arg};
 5115|  28.1k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  28.1k|    {
 4902|  28.1k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   126k|{
 8654|   126k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   126k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   126k|{
 8591|   126k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   126k|    auto result = vscan_impl(buffer, format, args);
 8594|   126k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 2.12k]
  |  |  ------------------
  ------------------
 8595|   124k|        return unexpected(result.error());
 8596|   124k|    }
 8597|  2.12k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   126k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|   253k|{
 4720|   253k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   253k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   253k|                  "\n"
 4724|   253k|                  "Unsupported range type given as input to a scanning "
 4725|   253k|                  "function.\n"
 4726|   253k|                  "A range needs to have a character type (value type) "
 4727|   253k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   253k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   253k|                  "to be included.\n"
 4730|   253k|                  "See the scnlib documentation for more details.");
 4731|   253k|    static_assert(
 4732|   253k|        !std::is_same_v<T, custom_char_traits>,
 4733|   253k|        "\n"
 4734|   253k|        "Unsupported range type given as input to a scanning "
 4735|   253k|        "function.\n"
 4736|   253k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   253k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   253k|        "not supported.");
 4739|   253k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   253k|                  "\n"
 4741|   253k|                  "Unsupported range type given as input to a scanning "
 4742|   253k|                  "function.\n"
 4743|   253k|                  "file_marker_found cannot be used as an "
 4744|   253k|                  "source range type to scn::scan.\n"
 4745|   253k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   253k|                  "and do not provide an explicit source range, "
 4747|   253k|                  "or use scn::scan with a FILE* directly.");
 4748|   253k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   253k|                  "\n"
 4750|   253k|                  "Unsupported range type given as input to a scanning "
 4751|   253k|                  "function.\n"
 4752|   253k|                  "In order to be scannable, a range needs to satisfy "
 4753|   253k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   253k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   253k|                  "\n"
 4756|   253k|                  "Unsupported range type given as input to a scanning "
 4757|   253k|                  "function.\n"
 4758|   253k|                  "A range needs to model forward_range and have a valid "
 4759|   253k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   253k|                  "Examples of scannable ranges are std::string, "
 4761|   253k|                  "std::string_view, "
 4762|   253k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   253k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   253k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   253k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   253k|{
 4612|   253k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   253k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   253k|    }
 4616|   253k|    else {
 4617|   253k|        return invalid_char_type{};
 4618|   253k|    }
 4619|   253k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   763k|    {
 1598|   763k|        return has_value();
 1599|   763k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.52M|    {
  485|  1.52M|        return m_has_value;
  486|  1.52M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   758k|    {
 1604|   758k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   758k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   758k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   758k|        return this->get_unexpected().error();
 1606|   758k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   758k|    {
  468|   758k|        return m_unexpected;
  469|   758k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  4.61M|    {
  361|  4.61M|        return m_unexpected;
  362|  4.61M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  2.60M|    {
  347|  2.60M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.60M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   248k|    {
 1476|   248k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   248k|    {
  447|   248k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  2.69M|    {
  356|  2.69M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.69M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.69M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   253k|    {
 1177|   253k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  4.25k|{
 5923|  4.25k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  4.25k|                      ranges::iterator_t<SourceRange>>) {
 5925|  4.25k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  4.25k|    }
 5927|  4.25k|    else {
 5928|  4.25k|        auto it = ranges::begin(source);
 5929|  4.25k|        while (n > 0) {
 5930|  4.25k|            --n;
 5931|  4.25k|            ++it;
 5932|  4.25k|        }
 5933|  4.25k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  4.25k|    }
 5935|  4.25k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.25k|    {
 2724|  4.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.25k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.25k|    {
 2705|  4.25k|        return decay_copy(t.begin());
 2706|  4.25k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  78.5k|{
 1949|  78.5k|    return SCN_FWD(t);
  ------------------
  |  |  930|  78.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  78.5k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  4.25k|{
 5910|  4.25k|    return ranges::end(source);
 5911|  4.25k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.25k|    {
 2781|  4.25k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.25k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.25k|    {
 2763|  4.25k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.25k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.90M|    {
 3316|  1.90M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  5.36k|    {
 1653|  5.36k|        return value();
 1654|  5.36k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  5.36k|    {
 1627|  5.36k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.36k|        return this->get_value();
 1629|  5.36k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.36k|    {
  451|  5.36k|        return m_value;
  452|  5.36k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  4.25k|    {
 1430|  4.25k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  4.25k|    {
  437|  4.25k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   253k|    {
 5478|   253k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 216]
  |  |  ------------------
  ------------------
 8821|  27.9k|        return unexpected(result.error());
 8822|  27.9k|    }
 8823|    216|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   253k|    {
 1598|   253k|        return has_value();
 1599|   253k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   506k|    {
  485|   506k|        return m_has_value;
  486|   506k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   248k|    {
 1604|   248k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   248k|        return this->get_unexpected().error();
 1606|   248k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   248k|    {
  468|   248k|        return m_unexpected;
  469|   248k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.9k|    {
 1476|  27.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.9k|    {
  447|  27.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  4.25k|    {
 1653|  4.25k|        return value();
 1654|  4.25k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.25k|    {
 1627|  4.25k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.25k|        return this->get_value();
 1629|  4.25k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.25k|    {
  451|  4.25k|        return m_value;
  452|  4.25k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    216|    {
 5830|    216|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  4.25k|    {
 5681|  4.25k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    216|    {
 5616|    216|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    216|    {
 1430|    216|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    216|    {
  437|    216|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   253k|{
 7691|   253k|    return s;
 7692|   253k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   253k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   126k|{
 8672|   126k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   126k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   126k|{
 8607|   126k|#if !SCN_DISABLE_LOCALE
 8608|   126k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   126k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   126k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   126k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   126k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124k, False: 2.12k]
  |  |  ------------------
  ------------------
 8615|   124k|        return unexpected(result.error());
 8616|   124k|    }
 8617|  2.12k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   126k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  84.4k|{
 5135|  84.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  84.4k|                  "Scan argument types must be default constructible");
 5137|  84.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  84.4k|                  "Scan argument types must be Destructible");
 5139|  84.4k|    static_assert(
 5140|  84.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  84.4k|        "Scan argument types must not be references");
 5142|  84.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  28.1k|    {                                                                        \
 4959|  28.1k|        return val;                                                          \
 4960|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  84.4k|{
 5089|  84.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  84.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  84.4k|    constexpr bool scannable_char =
 5093|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  84.4k|    static_assert(scannable_char,
 5095|  84.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  84.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  84.4k|    constexpr bool scannable_const =
 5099|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  84.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  84.4k|    constexpr bool scannable_disabled =
 5103|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  84.4k|    static_assert(scannable_disabled,
 5105|  84.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  84.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  84.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  84.4k|    static_assert(
 5110|  84.4k|        scannable,
 5111|  84.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  84.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  84.4k|    return arg_value{arg};
 5115|  84.4k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  84.4k|    {
 4902|  84.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  28.1k|        return unexpected(result.error());
 8822|  28.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  28.1k|    {
 1476|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  28.1k|    {
  447|  28.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  84.4k|{
 5135|  84.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  84.4k|                  "Scan argument types must be default constructible");
 5137|  84.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  84.4k|                  "Scan argument types must be Destructible");
 5139|  84.4k|    static_assert(
 5140|  84.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  84.4k|        "Scan argument types must not be references");
 5142|  84.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  28.1k|    {                                                                        \
 4959|  28.1k|        return val;                                                          \
 4960|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  84.4k|{
 5089|  84.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  84.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  84.4k|    constexpr bool scannable_char =
 5093|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  84.4k|    static_assert(scannable_char,
 5095|  84.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  84.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  84.4k|    constexpr bool scannable_const =
 5099|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  84.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  84.4k|    constexpr bool scannable_disabled =
 5103|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  84.4k|    static_assert(scannable_disabled,
 5105|  84.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  84.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  84.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  84.4k|    static_assert(
 5110|  84.4k|        scannable,
 5111|  84.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  84.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  84.4k|    return arg_value{arg};
 5115|  84.4k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  84.4k|    {
 4902|  84.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  28.1k|        return unexpected(result.error());
 8822|  28.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  28.1k|    {
 1476|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  28.1k|    {
  447|  28.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  84.4k|{
 5135|  84.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  84.4k|                  "Scan argument types must be default constructible");
 5137|  84.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  84.4k|                  "Scan argument types must be Destructible");
 5139|  84.4k|    static_assert(
 5140|  84.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  84.4k|        "Scan argument types must not be references");
 5142|  84.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  28.1k|    {                                                                        \
 4959|  28.1k|        return val;                                                          \
 4960|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  84.4k|{
 5089|  84.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  84.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  84.4k|    constexpr bool scannable_char =
 5093|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  84.4k|    static_assert(scannable_char,
 5095|  84.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  84.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  84.4k|    constexpr bool scannable_const =
 5099|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  84.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  84.4k|    constexpr bool scannable_disabled =
 5103|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  84.4k|    static_assert(scannable_disabled,
 5105|  84.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  84.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  84.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  84.4k|    static_assert(
 5110|  84.4k|        scannable,
 5111|  84.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  84.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  84.4k|    return arg_value{arg};
 5115|  84.4k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  84.4k|    {
 4902|  84.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  28.1k|        return unexpected(result.error());
 8822|  28.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  28.1k|    {
 1476|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  28.1k|    {
  447|  28.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  84.4k|{
 5135|  84.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  84.4k|                  "Scan argument types must be default constructible");
 5137|  84.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  84.4k|                  "Scan argument types must be Destructible");
 5139|  84.4k|    static_assert(
 5140|  84.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  84.4k|        "Scan argument types must not be references");
 5142|  84.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  28.1k|    {                                                                        \
 4959|  28.1k|        return val;                                                          \
 4960|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  84.4k|{
 5089|  84.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  84.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  84.4k|    constexpr bool scannable_char =
 5093|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  84.4k|    static_assert(scannable_char,
 5095|  84.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  84.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  84.4k|    constexpr bool scannable_const =
 5099|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  84.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  84.4k|    constexpr bool scannable_disabled =
 5103|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  84.4k|    static_assert(scannable_disabled,
 5105|  84.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  84.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  84.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  84.4k|    static_assert(
 5110|  84.4k|        scannable,
 5111|  84.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  84.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  84.4k|    return arg_value{arg};
 5115|  84.4k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  84.4k|    {
 4902|  84.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  28.1k|        return unexpected(result.error());
 8822|  28.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  28.1k|    {
 1476|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  28.1k|    {
  447|  28.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  84.4k|{
 5135|  84.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  84.4k|                  "Scan argument types must be default constructible");
 5137|  84.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  84.4k|                  "Scan argument types must be Destructible");
 5139|  84.4k|    static_assert(
 5140|  84.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  84.4k|        "Scan argument types must not be references");
 5142|  84.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  28.1k|    {                                                                        \
 4959|  28.1k|        return val;                                                          \
 4960|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  84.4k|{
 5089|  84.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  84.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  84.4k|    constexpr bool scannable_char =
 5093|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  84.4k|    static_assert(scannable_char,
 5095|  84.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  84.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  84.4k|    constexpr bool scannable_const =
 5099|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  84.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  84.4k|    constexpr bool scannable_disabled =
 5103|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  84.4k|    static_assert(scannable_disabled,
 5105|  84.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  84.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  84.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  84.4k|    static_assert(
 5110|  84.4k|        scannable,
 5111|  84.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  84.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  84.4k|    return arg_value{arg};
 5115|  84.4k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  84.4k|    {
 4902|  84.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  28.1k|        return unexpected(result.error());
 8822|  28.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  28.1k|    {
 1476|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  28.1k|    {
  447|  28.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  84.4k|{
 5135|  84.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  84.4k|                  "Scan argument types must be default constructible");
 5137|  84.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  84.4k|                  "Scan argument types must be Destructible");
 5139|  84.4k|    static_assert(
 5140|  84.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  84.4k|        "Scan argument types must not be references");
 5142|  84.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  28.1k|    {                                                                        \
 4959|  28.1k|        return val;                                                          \
 4960|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  84.4k|{
 5089|  84.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  84.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  84.4k|    constexpr bool scannable_char =
 5093|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  84.4k|    static_assert(scannable_char,
 5095|  84.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  84.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  84.4k|    constexpr bool scannable_const =
 5099|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  84.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  84.4k|    constexpr bool scannable_disabled =
 5103|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  84.4k|    static_assert(scannable_disabled,
 5105|  84.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  84.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  84.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  84.4k|    static_assert(
 5110|  84.4k|        scannable,
 5111|  84.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  84.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  84.4k|    return arg_value{arg};
 5115|  84.4k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  84.4k|    {
 4902|  84.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 1.34k]
  |  |  ------------------
  ------------------
 8821|  26.7k|        return unexpected(result.error());
 8822|  26.7k|    }
 8823|  1.34k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.34k|    static_cast<    \
  |  |  929|  1.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.34k|    static_cast<    \
  |  |  929|  1.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  26.7k|    {
  626|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  26.7k|    {
  689|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.7k|                                  std::forward<Args>(args)...);
  691|  26.7k|        m_has_value = false;
  692|  26.7k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   165k|{
  392|   165k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   165k|        T(std::forward<Args>(args)...);
  394|   165k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  53.5k|    {
  718|  53.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  53.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  53.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  53.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.34k|    {
 5830|  1.34k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.68k|    {
 5616|  1.68k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.34k|    {
 1430|  1.34k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.34k|    {
  616|  1.34k|        construct(std::forward<Args>(args)...);
  617|  1.34k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.34k|    {
  682|  1.34k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.34k|        m_has_value = true;
  684|  1.34k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.34k|{
  392|  1.34k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.34k|        T(std::forward<Args>(args)...);
  394|  1.34k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|  1.34k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.69k|    {
  706|  2.69k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.69k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.69k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  2.69k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  28.1k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  28.1k|    {
  631|  28.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.34k, False: 26.7k]
  ------------------
  632|  1.34k|            destroy_value();
  633|  1.34k|        }
  634|  26.7k|        else {
  635|  26.7k|            destroy_unexpected();
  636|  26.7k|        }
  637|  28.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  28.1k|    {
  675|  28.1k|        return m_has_value;
  676|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.34k|    {
  696|  1.34k|        scn::detail::destroy_at(value_ptr());
  697|  1.34k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.34k|{
  398|  1.34k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.34k|        for (auto& elem : *p) {
  400|  1.34k|            scn::detail::destroy_at(&elem);
  401|  1.34k|        }
  402|  1.34k|    }
  403|  1.34k|    else {
  404|  1.34k|        p->~T();
  405|  1.34k|    }
  406|  1.34k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.7k|    {
  700|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.7k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   165k|{
  398|   165k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   165k|        for (auto& elem : *p) {
  400|   165k|            scn::detail::destroy_at(&elem);
  401|   165k|        }
  402|   165k|    }
  403|   165k|    else {
  404|   165k|        p->~T();
  405|   165k|    }
  406|   165k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  84.4k|{
 5135|  84.4k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  84.4k|                  "Scan argument types must be default constructible");
 5137|  84.4k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  84.4k|                  "Scan argument types must be Destructible");
 5139|  84.4k|    static_assert(
 5140|  84.4k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  84.4k|        "Scan argument types must not be references");
 5142|  84.4k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  28.1k|    {                                                                        \
 4959|  28.1k|        return val;                                                          \
 4960|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  84.4k|{
 5089|  84.4k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  84.4k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  84.4k|    constexpr bool scannable_char =
 5093|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  84.4k|    static_assert(scannable_char,
 5095|  84.4k|                  "Cannot scan an argument of an unsupported character "
 5096|  84.4k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  84.4k|    constexpr bool scannable_const =
 5099|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  84.4k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  84.4k|    constexpr bool scannable_disabled =
 5103|  84.4k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  84.4k|    static_assert(scannable_disabled,
 5105|  84.4k|                  "Cannot scan an argument that has been disabled by "
 5106|  84.4k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  84.4k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  84.4k|    static_assert(
 5110|  84.4k|        scannable,
 5111|  84.4k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  84.4k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  84.4k|    return arg_value{arg};
 5115|  84.4k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  84.4k|    {
 4902|  84.4k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 1.34k]
  |  |  ------------------
  ------------------
 8821|  26.7k|        return unexpected(result.error());
 8822|  26.7k|    }
 8823|  1.34k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.34k|    static_cast<    \
  |  |  929|  1.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.34k|    static_cast<    \
  |  |  929|  1.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  26.7k|    {
  626|  26.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  26.7k|    {
  689|  26.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  26.7k|                                  std::forward<Args>(args)...);
  691|  26.7k|        m_has_value = false;
  692|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  53.5k|    {
  718|  53.5k|        return reinterpret_cast<unexpected<E>*>(
  719|  53.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  53.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  53.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.34k|    {
 5830|  1.34k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.68k|    {
 5616|  1.68k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.34k|    {
 1430|  1.34k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.34k|    {
  616|  1.34k|        construct(std::forward<Args>(args)...);
  617|  1.34k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.34k|    {
  682|  1.34k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.34k|        m_has_value = true;
  684|  1.34k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.34k|{
  392|  1.34k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.34k|        T(std::forward<Args>(args)...);
  394|  1.34k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  1.34k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.69k|    {
  706|  2.69k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.69k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.69k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  2.69k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  28.1k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  28.1k|    {
  631|  28.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.34k, False: 26.7k]
  ------------------
  632|  1.34k|            destroy_value();
  633|  1.34k|        }
  634|  26.7k|        else {
  635|  26.7k|            destroy_unexpected();
  636|  26.7k|        }
  637|  28.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  28.1k|    {
  675|  28.1k|        return m_has_value;
  676|  28.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.34k|    {
  696|  1.34k|        scn::detail::destroy_at(value_ptr());
  697|  1.34k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.34k|{
  398|  1.34k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.34k|        for (auto& elem : *p) {
  400|  1.34k|            scn::detail::destroy_at(&elem);
  401|  1.34k|        }
  402|  1.34k|    }
  403|  1.34k|    else {
  404|  1.34k|        p->~T();
  405|  1.34k|    }
  406|  1.34k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  26.7k|    {
  700|  26.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  26.7k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  14.0k|{
 8867|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  14.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  28.1k|{
 5396|  28.1k|    detail::check_scan_arg_types<Args...>();
 5397|  28.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  28.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  28.1k|{
 5135|  28.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  28.1k|                  "Scan argument types must be default constructible");
 5137|  28.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  28.1k|                  "Scan argument types must be Destructible");
 5139|  28.1k|    static_assert(
 5140|  28.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  28.1k|        "Scan argument types must not be references");
 5142|  28.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  28.1k|    {
 5349|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  28.1k|    {
 5360|  28.1k|        return {detail::make_arg<
 5361|  28.1k|            kind, Context,
 5362|  28.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  28.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  28.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  28.1k|{
 5170|  28.1k|    return make_value<Context>(value).ref_value;
 5171|  28.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  28.1k|{
 5120|  28.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  28.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  28.1k|                                  needs_context_tag>) {
 5124|  28.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  28.1k|    }
 5126|  28.1k|    else {
 5127|  28.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  28.1k|            value, context_tag<Context>{}));
 5129|  28.1k|    }
 5130|  28.1k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  28.1k|    {                                                                        \
 4959|  28.1k|        return val;                                                          \
 4960|  28.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  28.1k|{
 5089|  28.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  28.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  28.1k|    constexpr bool scannable_char =
 5093|  28.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  28.1k|    static_assert(scannable_char,
 5095|  28.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  28.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  28.1k|    constexpr bool scannable_const =
 5099|  28.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  28.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  28.1k|    constexpr bool scannable_disabled =
 5103|  28.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  28.1k|    static_assert(scannable_disabled,
 5105|  28.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  28.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  28.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  28.1k|    static_assert(
 5110|  28.1k|        scannable,
 5111|  28.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  28.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  28.1k|    return arg_value{arg};
 5115|  28.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  28.1k|    {
 4902|  28.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  28.1k|    {
 7975|  28.1k|        return m_str;
 7976|  28.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  28.1k|    {
 5426|  28.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  28.1k|    {
 5379|  28.1k|        return m_argptrs;
 5380|  28.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  28.1k|{
 8820|  28.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  28.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 1.34k]
  |  |  ------------------
  ------------------
 8821|  26.7k|        return unexpected(result.error());
 8822|  26.7k|    }
 8823|  1.34k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.34k|    static_cast<    \
  |  |  929|  1.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.34k|    static_cast<    \
  |  |  929|  1.34k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  28.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  26.7k|    {
 1476|  26.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  26.7k|    {
  447|  26.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  28.1k|    {
 1177|  28.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  1.34k|    {
 5830|  1.34k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  1.34k|    {
 5616|  1.34k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  1.34k|    {
 1430|  1.34k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  1.34k|    {
  437|  1.34k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  28.1k|    {
 5374|  28.1k|        return m_args;
 5375|  28.1k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  28.1k|    {
 7971|  28.1k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  14.0k|{
 8934|  14.0k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  14.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  14.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  14.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  56.2k|{
 5135|  56.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.2k|                  "Scan argument types must be default constructible");
 5137|  56.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.2k|                  "Scan argument types must be Destructible");
 5139|  56.2k|    static_assert(
 5140|  56.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.2k|        "Scan argument types must not be references");
 5142|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  56.2k|{
 5089|  56.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.2k|    constexpr bool scannable_char =
 5093|  56.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.2k|    static_assert(scannable_char,
 5095|  56.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.2k|    constexpr bool scannable_const =
 5099|  56.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.2k|    constexpr bool scannable_disabled =
 5103|  56.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.2k|    static_assert(scannable_disabled,
 5105|  56.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.2k|    static_assert(
 5110|  56.2k|        scannable,
 5111|  56.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.2k|    return arg_value{arg};
 5115|  56.2k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  56.2k|    {
 4902|  56.2k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   253k|{
 8591|   253k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   253k|    auto result = vscan_impl(buffer, format, args);
 8594|   253k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 252k, False: 555]
  |  |  ------------------
  ------------------
 8595|   252k|        return unexpected(result.error());
 8596|   252k|    }
 8597|    555|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    555|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   253k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   506k|{
 4720|   506k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   506k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   506k|                  "\n"
 4724|   506k|                  "Unsupported range type given as input to a scanning "
 4725|   506k|                  "function.\n"
 4726|   506k|                  "A range needs to have a character type (value type) "
 4727|   506k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   506k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   506k|                  "to be included.\n"
 4730|   506k|                  "See the scnlib documentation for more details.");
 4731|   506k|    static_assert(
 4732|   506k|        !std::is_same_v<T, custom_char_traits>,
 4733|   506k|        "\n"
 4734|   506k|        "Unsupported range type given as input to a scanning "
 4735|   506k|        "function.\n"
 4736|   506k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   506k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   506k|        "not supported.");
 4739|   506k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   506k|                  "\n"
 4741|   506k|                  "Unsupported range type given as input to a scanning "
 4742|   506k|                  "function.\n"
 4743|   506k|                  "file_marker_found cannot be used as an "
 4744|   506k|                  "source range type to scn::scan.\n"
 4745|   506k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   506k|                  "and do not provide an explicit source range, "
 4747|   506k|                  "or use scn::scan with a FILE* directly.");
 4748|   506k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   506k|                  "\n"
 4750|   506k|                  "Unsupported range type given as input to a scanning "
 4751|   506k|                  "function.\n"
 4752|   506k|                  "In order to be scannable, a range needs to satisfy "
 4753|   506k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   506k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   506k|                  "\n"
 4756|   506k|                  "Unsupported range type given as input to a scanning "
 4757|   506k|                  "function.\n"
 4758|   506k|                  "A range needs to model forward_range and have a valid "
 4759|   506k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   506k|                  "Examples of scannable ranges are std::string, "
 4761|   506k|                  "std::string_view, "
 4762|   506k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   506k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   506k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   506k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   506k|{
 4612|   506k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   506k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   506k|    }
 4616|   506k|    else {
 4617|   506k|        return invalid_char_type{};
 4618|   506k|    }
 4619|   506k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   505k|    {
 1476|   505k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   505k|    {
  447|   505k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   506k|    {
 1177|   506k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  1.11k|{
 5923|  1.11k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.11k|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.11k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.11k|    }
 5927|  1.11k|    else {
 5928|  1.11k|        auto it = ranges::begin(source);
 5929|  1.11k|        while (n > 0) {
 5930|  1.11k|            --n;
 5931|  1.11k|            ++it;
 5932|  1.11k|        }
 5933|  1.11k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.11k|    }
 5935|  1.11k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.11k|    {
 2724|  1.11k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.11k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.11k|    {
 2705|  1.11k|        return decay_copy(t.begin());
 2706|  1.11k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  47.4k|{
 1949|  47.4k|    return SCN_FWD(t);
  ------------------
  |  |  930|  47.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  47.4k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|  1.11k|{
 5910|  1.11k|    return ranges::end(source);
 5911|  1.11k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.11k|    {
 2781|  1.11k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.11k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.11k|    {
 2763|  1.11k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.11k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   871k|    {
 3316|   871k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.11k|    {
 1430|  1.11k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  1.11k|    {
  437|  1.11k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   506k|    {
 5478|   506k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.1k, False: 108]
  |  |  ------------------
  ------------------
 8821|  56.1k|        return unexpected(result.error());
 8822|  56.1k|    }
 8823|    108|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    108|    static_cast<    \
  |  |  929|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    108|    static_cast<    \
  |  |  929|    108|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   506k|    {
 1598|   506k|        return has_value();
 1599|   506k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   505k|    {
 1604|   505k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   505k|        return this->get_unexpected().error();
 1606|   505k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   505k|    {
  468|   505k|        return m_unexpected;
  469|   505k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  56.1k|    {
 1476|  56.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  56.1k|    {
  447|  56.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  1.11k|    {
 1653|  1.11k|        return value();
 1654|  1.11k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.11k|    {
 1627|  1.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11k|        return this->get_value();
 1629|  1.11k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.11k|    {
  451|  1.11k|        return m_value;
  452|  1.11k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|    108|    {
 5830|    108|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  1.11k|    {
 5681|  1.11k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|    108|    {
 5616|    108|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    108|    {
 1430|    108|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    108|    {
  437|    108|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   506k|{
 7696|   506k|    return s;
 7697|   506k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   506k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   253k|{
 8607|   253k|#if !SCN_DISABLE_LOCALE
 8608|   253k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   253k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   253k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   253k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   253k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 252k, False: 555]
  |  |  ------------------
  ------------------
 8615|   252k|        return unexpected(result.error());
 8616|   252k|    }
 8617|    555|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    555|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   253k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  56.2k|        return unexpected(result.error());
 8822|  56.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  56.2k|    {
 1476|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  56.2k|    {
  447|  56.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  56.2k|        return unexpected(result.error());
 8822|  56.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  56.2k|    {
 1476|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  56.2k|    {
  447|  56.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  56.2k|        return unexpected(result.error());
 8822|  56.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  56.2k|    {
 1476|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  56.2k|    {
  447|  56.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  56.2k|        return unexpected(result.error());
 8822|  56.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  56.2k|    {
 1476|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  56.2k|    {
  447|  56.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.2k, False: 0]
  |  |  ------------------
  ------------------
 8821|  56.2k|        return unexpected(result.error());
 8822|  56.2k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  56.2k|    {
 1476|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  56.2k|    {
  447|  56.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.9k, False: 334]
  |  |  ------------------
  ------------------
 8821|  55.9k|        return unexpected(result.error());
 8822|  55.9k|    }
 8823|    334|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  55.9k|    {
  626|  55.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  55.9k|    {
  689|  55.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  55.9k|                                  std::forward<Args>(args)...);
  691|  55.9k|        m_has_value = false;
  692|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   111k|    {
  718|   111k|        return reinterpret_cast<unexpected<E>*>(
  719|   111k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   111k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   111k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    334|    {
 5830|    334|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    334|    {
 1430|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    334|    {
  616|    334|        construct(std::forward<Args>(args)...);
  617|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    334|    {
  682|    334|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    334|        m_has_value = true;
  684|    334|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    334|{
  392|    334|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    334|        T(std::forward<Args>(args)...);
  394|    334|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    334|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    668|    {
  706|    668|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    668|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    668|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    668|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  56.2k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  56.2k|    {
  631|  56.2k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 334, False: 55.9k]
  ------------------
  632|    334|            destroy_value();
  633|    334|        }
  634|  55.9k|        else {
  635|  55.9k|            destroy_unexpected();
  636|  55.9k|        }
  637|  56.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  56.2k|    {
  675|  56.2k|        return m_has_value;
  676|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    334|    {
  696|    334|        scn::detail::destroy_at(value_ptr());
  697|    334|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    334|{
  398|    334|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    334|        for (auto& elem : *p) {
  400|    334|            scn::detail::destroy_at(&elem);
  401|    334|        }
  402|    334|    }
  403|    334|    else {
  404|    334|        p->~T();
  405|    334|    }
  406|    334|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  55.9k|    {
  700|  55.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  55.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.9k, False: 334]
  |  |  ------------------
  ------------------
 8821|  55.9k|        return unexpected(result.error());
 8822|  55.9k|    }
 8823|    334|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  55.9k|    {
  626|  55.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  55.9k|    {
  689|  55.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  55.9k|                                  std::forward<Args>(args)...);
  691|  55.9k|        m_has_value = false;
  692|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   111k|    {
  718|   111k|        return reinterpret_cast<unexpected<E>*>(
  719|   111k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   111k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   111k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    334|    {
 5830|    334|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    334|    {
 1430|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    334|    {
  616|    334|        construct(std::forward<Args>(args)...);
  617|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    334|    {
  682|    334|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    334|        m_has_value = true;
  684|    334|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    334|{
  392|    334|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    334|        T(std::forward<Args>(args)...);
  394|    334|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    334|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    668|    {
  706|    668|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    668|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    668|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    668|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  56.2k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  56.2k|    {
  631|  56.2k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 334, False: 55.9k]
  ------------------
  632|    334|            destroy_value();
  633|    334|        }
  634|  55.9k|        else {
  635|  55.9k|            destroy_unexpected();
  636|  55.9k|        }
  637|  56.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  56.2k|    {
  675|  56.2k|        return m_has_value;
  676|  56.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    334|    {
  696|    334|        scn::detail::destroy_at(value_ptr());
  697|    334|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    334|{
  398|    334|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    334|        for (auto& elem : *p) {
  400|    334|            scn::detail::destroy_at(&elem);
  401|    334|        }
  402|    334|    }
  403|    334|    else {
  404|    334|        p->~T();
  405|    334|    }
  406|    334|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  55.9k|    {
  700|  55.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  55.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  56.2k|{
 5396|  56.2k|    detail::check_scan_arg_types<Args...>();
 5397|  56.2k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  56.2k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  56.2k|{
 5135|  56.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  56.2k|                  "Scan argument types must be default constructible");
 5137|  56.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  56.2k|                  "Scan argument types must be Destructible");
 5139|  56.2k|    static_assert(
 5140|  56.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  56.2k|        "Scan argument types must not be references");
 5142|  56.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  56.2k|    {
 5349|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  56.2k|    {
 5360|  56.2k|        return {detail::make_arg<
 5361|  56.2k|            kind, Context,
 5362|  56.2k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  56.2k|                                 typename Context::char_type>::value>(args)...};
 5364|  56.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  56.2k|{
 5170|  56.2k|    return make_value<Context>(value).ref_value;
 5171|  56.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  56.2k|{
 5120|  56.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  56.2k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  56.2k|                                  needs_context_tag>) {
 5124|  56.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  56.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  56.2k|    }
 5126|  56.2k|    else {
 5127|  56.2k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  56.2k|            value, context_tag<Context>{}));
 5129|  56.2k|    }
 5130|  56.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  56.2k|    {                                                                        \
 4959|  56.2k|        return val;                                                          \
 4960|  56.2k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  56.2k|{
 5089|  56.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  56.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  56.2k|    constexpr bool scannable_char =
 5093|  56.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  56.2k|    static_assert(scannable_char,
 5095|  56.2k|                  "Cannot scan an argument of an unsupported character "
 5096|  56.2k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  56.2k|    constexpr bool scannable_const =
 5099|  56.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  56.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  56.2k|    constexpr bool scannable_disabled =
 5103|  56.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  56.2k|    static_assert(scannable_disabled,
 5105|  56.2k|                  "Cannot scan an argument that has been disabled by "
 5106|  56.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  56.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  56.2k|    static_assert(
 5110|  56.2k|        scannable,
 5111|  56.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  56.2k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  56.2k|    return arg_value{arg};
 5115|  56.2k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  56.2k|    {
 4902|  56.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  56.2k|    {
 7975|  56.2k|        return m_str;
 7976|  56.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  56.2k|    {
 5426|  56.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  56.2k|    {
 5379|  56.2k|        return m_argptrs;
 5380|  56.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  56.2k|{
 8820|  56.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.9k, False: 334]
  |  |  ------------------
  ------------------
 8821|  55.9k|        return unexpected(result.error());
 8822|  55.9k|    }
 8823|    334|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    334|    static_cast<    \
  |  |  929|    334|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  56.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  55.9k|    {
 1476|  55.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  55.9k|    {
  447|  55.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  56.2k|    {
 1177|  56.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    334|    {
 5830|    334|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    334|    {
 5616|    334|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    334|    {
 1430|    334|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    334|    {
  437|    334|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  56.2k|    {
 5374|  56.2k|        return m_args;
 5375|  56.2k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  56.2k|    {
 7971|  56.2k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  1.44M|    {
 3568|  1.44M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  1.44M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  1.44M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  9.18M|    {
 3574|  9.18M|        return m_code == good;
 3575|  9.18M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   224k|    {
 3585|   224k|        return m_code;
 3586|   224k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  9.14k|    {
 6181|  9.14k|        return m_size;
 6182|  9.14k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  5.73k|    {
 6222|  5.73k|        SCN_GCC_COMPAT_PUSH
 6223|  5.73k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  5.73k|        switch (type) {
 6225|  2.65k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 2.65k, False: 3.08k]
  ------------------
 6226|  2.65k|                return 10;
 6227|     54|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 54, False: 5.68k]
  ------------------
 6228|     54|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 5.73k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 38, False: 5.70k]
  ------------------
 6233|     38|                return 2;
 6234|    132|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 132, False: 5.60k]
  ------------------
 6235|    132|                return 8;
 6236|     38|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 38, False: 5.70k]
  ------------------
 6237|    102|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 64, False: 5.67k]
  ------------------
 6238|    102|                return 10;
 6239|  2.76k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.76k, False: 2.97k]
  ------------------
 6240|  2.76k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 5.73k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  5.73k|        }
 6246|  5.73k|        SCN_GCC_COMPAT_POP
 6247|  5.73k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|   237k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  26.5k|    {
 6263|  26.5k|        m_specs.align = align;
 6264|  26.5k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    736|    {
 6272|    736|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    736|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    736|            m_specs.localized = true;
 6274|    736|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    736|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  78.9k|    {
 6282|  78.9k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 78.9k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  78.9k|        m_specs.width = width;
 6289|  78.9k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  22.7k|    {
 6292|  22.7k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 82, False: 22.6k]
  ------------------
 6293|       |            // clang-format off
 6294|     82|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     82|        }
 6297|       |
 6298|  22.6k|        m_specs.precision = prec;
 6299|  22.6k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|   345k|    {
 6303|   345k|        m_specs.type = type;
 6304|   345k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  5.43M|    {
 6308|  5.43M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  5.43M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  5.43M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.73M, False: 703k]
  |  |  ------------------
  ------------------
 6310|  4.73M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  4.73M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  4.73M|        }
 6313|   703k|        else {
 6314|   703k|            m_specs.charset_has_nonascii = true;
 6315|   703k|        }
 6316|  5.43M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  32.4k|    {
 6320|  32.4k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  32.4k|        const auto end_value = static_cast<unsigned>(end);
 6322|  32.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  32.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  32.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  32.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 21.9k, False: 10.5k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  21.9k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  21.9k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|  1.34M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 1.32M, False: 21.9k]
  ------------------
 6329|  1.32M|                m_specs.charset_literals[v / 8] |=
 6330|  1.32M|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|  1.32M|            }
 6332|  21.9k|        }
 6333|  10.5k|        else {
 6334|  10.5k|            m_specs.charset_has_nonascii = true;
 6335|  10.5k|        }
 6336|  32.4k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  5.06k|    {
 6340|  5.06k|        m_specs.charset_is_inverted = true;
 6341|  5.06k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|   183k|    {
 6359|   183k|        m_specs.regexp_flags = flags;
 6360|   183k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  14.1k|    {
 6365|  14.1k|        SCN_UNLIKELY_ATTR
 6366|  14.1k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  14.1k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  5.73M|    {
 6376|  5.73M|        return static_cast<bool>(m_error);
 6377|  5.73M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   224k|{
 3609|   224k|    return a.code() == b;
 3610|   224k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   224k|{
 3613|   224k|    return !(a == b);
 3614|   224k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   493k|{
 3908|   493k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   493k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   493k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   493k|    };
 3913|       |
 3914|   493k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 437k, False: 56.4k]
  ------------------
 3915|   437k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   437k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   437k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   437k|        return static_cast<char32_t>(input[0]);
 3917|   437k|    }
 3918|       |
 3919|  56.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 54.3k, False: 2.11k]
  ------------------
 3920|  54.3k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  54.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  54.3k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  54.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  54.3k|        char32_t cp{};
 3924|  54.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  54.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  54.3k|        return cp;
 3927|  54.3k|    }
 3928|       |
 3929|  2.11k|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 1.78k, False: 336]
  ------------------
 3930|  1.78k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|  1.78k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|  1.78k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  1.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|  1.78k|        char32_t cp{};
 3935|  1.78k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|  1.78k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|  1.78k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|  1.78k|        return cp;
 3939|  1.78k|    }
 3940|       |
 3941|    336|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 336, False: 0]
  ------------------
 3942|    336|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    336|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    336|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    336|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    336|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    336|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    336|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    336|        char32_t cp{};
 3949|    336|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    336|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    336|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    336|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    336|        return cp;
 3954|    336|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|   269k|{
 6111|   269k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|   269k|                                    static_cast<unsigned>(b));
 6113|   269k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  33.7k|{
 6116|  33.7k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  33.7k|                                    static_cast<unsigned>(b));
 6118|  33.7k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  33.7k|{
 6131|  33.7k|    return a = a | b;
 6132|  33.7k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.78k|{
 7063|  1.78k|    switch (type) {
 7064|    126|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 126, False: 1.66k]
  ------------------
 7065|    126|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.78k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.78k]
  ------------------
 7069|    184|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 184, False: 1.60k]
  ------------------
 7070|    184|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.78k]
  ------------------
 7071|    184|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.78k]
  ------------------
 7072|    184|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.78k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.78k]
  ------------------
 7076|    184|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 184, False: 1.60k]
  ------------------
 7077|    184|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.78k]
  ------------------
 7078|    184|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.78k]
  ------------------
 7079|    184|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|    184|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 184, False: 1.60k]
  ------------------
 7082|    184|            return arg_type_category::pointer;
 7083|    184|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 184, False: 1.60k]
  ------------------
 7084|    184|            return arg_type_category::boolean;
 7085|     98|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 98, False: 1.69k]
  ------------------
 7086|    184|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 86, False: 1.70k]
  ------------------
 7087|    184|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.78k]
  ------------------
 7088|    184|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 1.78k]
  ------------------
 7091|    184|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 184, False: 1.60k]
  ------------------
 7092|    184|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.78k]
  ------------------
 7093|    184|            return arg_type_category::floating;
 7094|       |
 7095|     98|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 98, False: 1.69k]
  ------------------
 7096|    284|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 186, False: 1.60k]
  ------------------
 7097|    372|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 88, False: 1.70k]
  ------------------
 7098|    558|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 186, False: 1.60k]
  ------------------
 7099|    558|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.78k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.78k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.78k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.78k|            SCN_CLANG_POP
 7110|  1.78k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.78k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.87k|{
 3654|  1.87k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.87k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  50.9k|{
 7149|  50.9k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.9k, False: 3.02k]
  |  |  ------------------
  ------------------
 7150|  47.9k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  47.9k|    }
 7152|  3.02k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 208, False: 2.81k]
  ------------------
 7153|    208|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 196]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|     12|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|     12|            return;
 7158|     12|        }
 7159|    196|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 196]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    196|    }
 7165|  3.02k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  4.42k|{
 3654|  4.42k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  4.42k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  25.4k|{
 7193|  25.4k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 24.1k, False: 1.34k]
  ------------------
 7194|  25.4k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 168, False: 23.9k]
  ------------------
 7195|  24.1k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 23.8k, False: 164]
  ------------------
 7196|  23.9k|        SCN_UNLIKELY_ATTR
 7197|  23.9k|        return handler.on_error("Invalid type specifier for float type");
 7198|  23.9k|    }
 7199|  25.4k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|   118k|    {
  485|   118k|        return m_has_value;
  486|   118k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  59.0k|    {
 1598|  59.0k|        return has_value();
 1599|  59.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.0k|    {
  451|  59.0k|        return m_value;
  452|  59.0k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  59.0k|    {
 1627|  59.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.0k|        return this->get_value();
 1629|  59.0k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  59.0k|    {
 1663|  59.0k|        return std::move(value());
 1664|  59.0k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  32.4k|{
 3654|  32.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  32.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  19.6k|{
 3654|  19.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  19.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    582|{
 3654|    582|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    582|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|  2.10k|{
 3654|  2.10k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.10k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  2.21k|{
 3654|  2.21k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.21k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  75.9k|{
 7205|  75.9k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 3.90k, False: 72.0k]
  ------------------
 7206|  75.9k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 786, False: 71.2k]
  ------------------
 7207|  75.9k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 9.15k, False: 62.1k]
  ------------------
 7208|  75.9k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 55.3k, False: 6.72k]
  ------------------
 7209|  75.9k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 5.80k, False: 918]
  ------------------
 7210|  75.0k|        return;
 7211|  75.0k|    }
 7212|    918|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 192, False: 726]
  ------------------
 7213|    192|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 180]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    180|        return;
 7219|    192|    }
 7220|    726|    SCN_UNLIKELY_ATTR
 7221|    726|    handler.on_error("Invalid type specifier for string");
 7222|    726|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  5.79k|{
 3654|  5.79k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.79k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     68|{
 3654|     68|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     68|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  25.4k|{
 7239|  25.4k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 24.1k, False: 1.34k]
  ------------------
 7240|  25.4k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 23.8k, False: 288]
  ------------------
 7241|  25.4k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 23.8k, False: 22]
  ------------------
 7242|  25.4k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 23.8k, False: 32]
  ------------------
 7243|  25.4k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 23.7k, False: 20]
  ------------------
 7244|  25.4k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 23.7k, False: 22]
  ------------------
 7245|  25.4k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 23.7k, False: 56]
  ------------------
 7246|  25.4k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 23.6k, False: 16]
  ------------------
 7247|  23.6k|        SCN_UNLIKELY_ATTR
 7248|  23.6k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  23.6k|    }
 7250|  25.4k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  25.3k|{
 7171|  25.3k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 23.9k, False: 1.40k]
  ------------------
 7172|  25.3k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.40k]
  ------------------
 7173|  23.9k|        SCN_UNLIKELY_ATTR
 7174|  23.9k|        return handler.on_error("Invalid type specifier for character type");
 7175|  23.9k|    }
 7176|  25.3k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  25.3k|{
 7228|  25.3k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 24.0k, False: 1.30k]
  ------------------
 7229|  25.3k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 24.0k, False: 12]
  ------------------
 7230|  24.0k|        SCN_UNLIKELY_ATTR
 7231|  24.0k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  24.0k|    }
 7233|  25.3k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|    144|{
 3654|    144|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    144|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   205k|{
 3715|   205k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   205k|                                          const CharT*, const CharT*>) {
 3717|   205k|        return {first, last};
 3718|   205k|    }
 3719|   205k|    else {
 3720|   205k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   205k|    }
 3722|   205k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   378k|{
 3715|   378k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   378k|                                          const CharT*, const CharT*>) {
 3717|   378k|        return {first, last};
 3718|   378k|    }
 3719|   378k|    else {
 3720|   378k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   378k|    }
 3722|   378k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  4.59M|    {
 3330|  4.59M|        return m_iterator;
 3331|  4.59M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  5.08M|    {
 3334|  5.08M|        return m_sentinel;
 3335|  5.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  1.28M|    {
 3330|  1.28M|        return m_iterator;
 3331|  1.28M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   996k|    {
 3334|   996k|        return m_sentinel;
 3335|   996k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   391k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    134|{
 1211|    134|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    134|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.73k|    {
  361|  2.73k|        return m_unexpected;
  362|  2.73k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  6.24k|{
 3654|  6.24k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  6.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  6.24k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  77.6k|    {
  347|  77.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  77.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  77.6k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   235k|    {
 1476|   235k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   236k|    {
  447|   236k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   283k|    {
 1177|   283k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  42.5k|    {
 1430|  42.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  42.5k|    {
  437|  42.5k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   284k|    {
 1598|   284k|        return has_value();
 1599|   284k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   566k|    {
  485|   566k|        return m_has_value;
  486|   566k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   235k|    {
 1604|   235k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   235k|        return this->get_unexpected().error();
 1606|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   235k|    {
  468|   235k|        return m_unexpected;
  469|   235k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  29.5k|    {
 1663|  29.5k|        return std::move(value());
 1664|  29.5k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  45.9k|    {
 1627|  45.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  45.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  45.9k|        return this->get_value();
 1629|  45.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  45.9k|    {
  451|  45.9k|        return m_value;
  452|  45.9k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   168k|    {
 1476|   168k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   170k|    {
  447|   170k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   202k|    {
 1177|   202k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  31.0k|    {
 1430|  31.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  31.0k|    {
  437|  31.0k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   203k|    {
 1598|   203k|        return has_value();
 1599|   203k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   403k|    {
  485|   403k|        return m_has_value;
  486|   403k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   168k|    {
 1604|   168k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   168k|        return this->get_unexpected().error();
 1606|   168k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   168k|    {
  468|   168k|        return m_unexpected;
  469|   168k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  25.2k|    {
 1663|  25.2k|        return std::move(value());
 1664|  25.2k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  31.0k|    {
 1627|  31.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  31.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  31.0k|        return this->get_value();
 1629|  31.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  31.0k|    {
  451|  31.0k|        return m_value;
  452|  31.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  9.86k|    {
 1837|  9.86k|        return detail::transform_error_impl(std::move(*this),
 1838|  9.86k|                                            std::forward<F>(f));
 1839|  9.86k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  9.86k|{
 1323|  9.86k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  9.86k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  9.86k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  9.86k|            return result(*std::forward<Exp>(exp));
 1327|  9.86k|        }
 1328|       |
 1329|  9.86k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  9.86k|        return result(unexpect, monostate{});
 1331|  9.86k|    }
 1332|  9.86k|    else {
 1333|  9.86k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  9.86k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.86k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.86k, False: 0]
  |  |  ------------------
  ------------------
 1335|  9.86k|                   ? result(*std::forward<Exp>(exp))
 1336|  9.86k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  9.86k|    }
 1340|  9.86k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   158k|    {
  485|   158k|        return m_has_value;
  486|   158k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  11.9k|    {
 1663|  11.9k|        return std::move(value());
 1664|  11.9k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  75.8k|    {
 1627|  75.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  75.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  75.8k|        return this->get_value();
 1629|  75.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  75.8k|    {
  451|  75.8k|        return m_value;
  452|  75.8k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.07k|    {
 1486|  1.07k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  1.12M|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  7.51k|    {
 6187|  7.51k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  7.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  7.51k|        CharT r{};
 6189|  7.51k|        std::memcpy(&r, m_data, m_size);
 6190|  7.51k|        return r;
 6191|  7.51k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.72k|    {
  347|  1.72k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.72k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.72k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.86k|    {
  356|  1.86k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.86k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.86k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    588|    {
 6196|    588|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    588|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    134|    {
  347|    134|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    134|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    134|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  24.2k|    {
  361|  24.2k|        return m_unexpected;
  362|  24.2k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  4.35k|    {
  356|  4.35k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.35k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  4.35k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  37.1k|    {
  347|  37.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  37.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  37.1k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  37.1k|    {
  361|  37.1k|        return m_unexpected;
  362|  37.1k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  37.1k|    {
  356|  37.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  37.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  37.1k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    744|{
 1211|    744|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    744|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.60k|    {
  347|  3.60k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.60k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.60k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  2.06k|{
 1211|  2.06k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.06k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  19.9k|{
  326|  19.9k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  19.9k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|   124k|    {
 3346|   124k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|   124k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    976|    {
 1476|    976|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    976|    {
  447|    976|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  83.0k|    {
 1177|  83.0k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  82.0k|    {
 1430|  82.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  82.0k|    {
  437|  82.0k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  70.9k|    {
 1598|  70.9k|        return has_value();
 1599|  70.9k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  63.9k|    {
 1653|  63.9k|        return value();
 1654|  63.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  8.46k|    {
 1430|  8.46k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  8.46k|    {
  437|  8.46k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.83k|    {
 1177|  8.83k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    372|    {
 1476|    372|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    372|    {
  447|    372|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.39k|    {
 1598|  4.39k|        return has_value();
 1599|  4.39k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  14.8k|    {
  485|  14.8k|        return m_has_value;
  486|  14.8k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.53k|    {
 1653|  1.53k|        return value();
 1654|  1.53k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  5.63k|    {
 1627|  5.63k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.63k|        return this->get_value();
 1629|  5.63k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  5.63k|    {
  451|  5.63k|        return m_value;
  452|  5.63k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    134|    {
 1476|    134|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    134|    {
  447|    134|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.76k|    {
 1177|  8.76k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  8.63k|    {
 1430|  8.63k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  8.63k|    {
  437|  8.63k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.46k|    {
 1837|  1.46k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.46k|                                            std::forward<F>(f));
 1839|  1.46k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.46k|{
 1323|  1.46k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.46k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.46k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.46k|            return result(*std::forward<Exp>(exp));
 1327|  1.46k|        }
 1328|       |
 1329|  1.46k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.46k|        return result(unexpect, monostate{});
 1331|  1.46k|    }
 1332|  1.46k|    else {
 1333|  1.46k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.46k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.46k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.46k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.46k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.46k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.46k|    }
 1340|  1.46k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  4.09k|    {
 1663|  4.09k|        return std::move(value());
 1664|  4.09k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  3.96k|    {
 1430|  3.96k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  3.96k|    {
  437|  3.96k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  18.3k|    {
 1177|  18.3k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    342|    {
 1614|    342|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    342|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    342|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    342|        return std::move(this->get_unexpected().error());
 1616|    342|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    342|    {
  468|    342|        return m_unexpected;
  469|    342|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.34k|    {
 1486|  2.34k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  12.4k|    {
  447|  12.4k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.26k|    {
 2724|  3.26k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.26k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.26k|    {
 2705|  3.26k|        return decay_copy(t.begin());
 2706|  3.26k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  6.98k|{
 1949|  6.98k|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.98k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  3.26k|    {
 3330|  3.26k|        return m_iterator;
 3331|  3.26k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.26k|    {
 2781|  3.26k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.26k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.26k|    {
 2763|  3.26k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.26k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  3.26k|    {
 3334|  3.26k|        return m_sentinel;
 3335|  3.26k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  3.26k|    {
 3316|  3.26k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  8.76k|    {
 1598|  8.76k|        return has_value();
 1599|  8.76k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  17.5k|    {
  485|  17.5k|        return m_has_value;
  486|  17.5k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    134|    {
 1604|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    134|        return this->get_unexpected().error();
 1606|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  8.63k|    {
 1663|  8.63k|        return std::move(value());
 1664|  8.63k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  8.63k|    {
 1627|  8.63k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  8.63k|        return this->get_value();
 1629|  8.63k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  8.63k|    {
  451|  8.63k|        return m_value;
  452|  8.63k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  51.4k|    {
 1177|  51.4k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  51.4k|    {
 1430|  51.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  51.4k|    {
  437|  51.4k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  51.4k|    {
 1598|  51.4k|        return has_value();
 1599|  51.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   102k|    {
  485|   102k|        return m_has_value;
  486|   102k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  51.4k|    {
 1663|  51.4k|        return std::move(value());
 1664|  51.4k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  51.4k|    {
 1627|  51.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  51.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  51.4k|        return this->get_value();
 1629|  51.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  51.4k|    {
  451|  51.4k|        return m_value;
  452|  51.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  10.0k|    {
 1476|  10.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    814|    {
 1476|    814|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.15k|    {
  447|  1.15k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.1k|    {
 1177|  11.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  7.41k|    {
 1476|  7.41k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  7.41k|    {
  447|  7.41k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  10.2k|    {
 1598|  10.2k|        return has_value();
 1599|  10.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  20.2k|    {
  485|  20.2k|        return m_has_value;
  486|  20.2k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  3.65k|    {
 1604|  3.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.65k|        return this->get_unexpected().error();
 1606|  3.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  5.05k|    {
  468|  5.05k|        return m_unexpected;
  469|  5.05k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.89k|    {
 1430|  1.89k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.89k|    {
  437|  1.89k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.89k|    {
 1177|  1.89k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  2.62k|    {
 1627|  2.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.62k|        return this->get_value();
 1629|  2.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  2.62k|    {
  451|  2.62k|        return m_value;
  452|  2.62k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|  1.42k|    {
 1598|  1.42k|        return has_value();
 1599|  1.42k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  3.78k|    {
  485|  3.78k|        return m_has_value;
  486|  3.78k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.42k|    {
 1177|  1.42k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.89k|    {
 1663|  1.89k|        return std::move(value());
 1664|  1.89k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.89k|    {
 1627|  1.89k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.89k|        return this->get_value();
 1629|  1.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.89k|    {
  451|  1.89k|        return m_value;
  452|  1.89k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|   356k|    {
 3334|   356k|        return m_sentinel;
 3335|   356k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  2.97k|    {
 1837|  2.97k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.97k|                                            std::forward<F>(f));
 1839|  2.97k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  2.97k|{
 1323|  2.97k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.97k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.97k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.97k|            return result(*std::forward<Exp>(exp));
 1327|  2.97k|        }
 1328|       |
 1329|  2.97k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.97k|        return result(unexpect, monostate{});
 1331|  2.97k|    }
 1332|  2.97k|    else {
 1333|  2.97k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.97k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.62k, False: 342]
  |  |  ------------------
  ------------------
 1335|  2.97k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.97k|                   : result(unexpect,
 1337|    342|                            trivial_invoke(std::forward<F>(f),
 1338|    342|                                           std::forward<Exp>(exp).error()));
 1339|  2.97k|    }
 1340|  2.97k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  2.62k|    {
 1430|  2.62k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.62k|    {
  437|  2.62k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    342|    {
 1486|    342|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.62k|    {
 1663|  2.62k|        return std::move(value());
 1664|  2.62k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   680k|    {
 3330|   680k|        return m_iterator;
 3331|   680k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|  1.42k|    {
 1430|  1.42k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.42k|    {
  437|  1.42k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|  1.42k|    {
 1837|  1.42k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.42k|                                            std::forward<F>(f));
 1839|  1.42k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.42k|{
 1323|  1.42k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.42k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.42k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.42k|            return result(*std::forward<Exp>(exp));
 1327|  1.42k|        }
 1328|       |
 1329|  1.42k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.42k|        return result(unexpect, monostate{});
 1331|  1.42k|    }
 1332|  1.42k|    else {
 1333|  1.42k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.42k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.42k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.42k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.42k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.42k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.42k|    }
 1340|  1.42k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.84k|    {
  485|  2.84k|        return m_has_value;
  486|  2.84k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.42k|    {
 1663|  1.42k|        return std::move(value());
 1664|  1.42k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.42k|    {
 1627|  1.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.42k|        return this->get_value();
 1629|  1.42k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.42k|    {
  451|  1.42k|        return m_value;
  452|  1.42k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|  1.42k|    {
 1430|  1.42k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.42k|    {
  437|  1.42k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.42k|    {
 1177|  1.42k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|  1.42k|    {
 1598|  1.42k|        return has_value();
 1599|  1.42k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.84k|    {
  485|  2.84k|        return m_has_value;
  486|  2.84k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.42k|    {
 1663|  1.42k|        return std::move(value());
 1664|  1.42k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.42k|    {
 1627|  1.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.42k|        return this->get_value();
 1629|  1.42k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.42k|    {
  451|  1.42k|        return m_value;
  452|  1.42k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.40k|    {
 1837|  1.40k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.40k|                                            std::forward<F>(f));
 1839|  1.40k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|  1.40k|{
 1323|  1.40k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.40k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.40k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.40k|            return result(*std::forward<Exp>(exp));
 1327|  1.40k|        }
 1328|       |
 1329|  1.40k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.40k|        return result(unexpect, monostate{});
 1331|  1.40k|    }
 1332|  1.40k|    else {
 1333|  1.40k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.40k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.40k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.40k]
  |  |  ------------------
  ------------------
 1335|  1.40k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.40k|                   : result(unexpect,
 1337|  1.40k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.40k|                                           std::forward<Exp>(exp).error()));
 1339|  1.40k|    }
 1340|  1.40k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|  1.40k|    {
 1614|  1.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  1.40k|        return std::move(this->get_unexpected().error());
 1616|  1.40k|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  2.34k|    {
 3648|  2.34k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|   244k|    {
 3316|   244k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     16|    {
 1476|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     16|    {
  626|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     16|    {
  689|     16|        scn::detail::construct_at(unexpected_ptr(),
  690|     16|                                  std::forward<Args>(args)...);
  691|     16|        m_has_value = false;
  692|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     48|    {
  718|     48|        return reinterpret_cast<unexpected<E>*>(
  719|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     16|    {
 1177|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     16|    {
 1598|     16|        return has_value();
 1599|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     48|    {
  675|     48|        return m_has_value;
  676|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     16|    {
 1604|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     16|        return this->get_unexpected().error();
 1606|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     16|    {
  658|     16|        return *unexpected_ptr();
  659|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     16|    {
  631|     16|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 16]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     16|        else {
  635|     16|            destroy_unexpected();
  636|     16|        }
  637|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     16|    {
  700|     16|        scn::detail::destroy_at(unexpected_ptr());
  701|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  18.7k|    {
 1598|  18.7k|        return has_value();
 1599|  18.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  36.6k|    {
  485|  36.6k|        return m_has_value;
  486|  36.6k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  11.9k|    {
 1604|  11.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.9k|        return this->get_unexpected().error();
 1606|  11.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.9k|    {
  468|  11.9k|        return m_unexpected;
  469|  11.9k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  3.96k|    {
 1663|  3.96k|        return std::move(value());
 1664|  3.96k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  5.92k|    {
 1627|  5.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.92k|        return this->get_value();
 1629|  5.92k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.92k|    {
  451|  5.92k|        return m_value;
  452|  5.92k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.15k|    {
 1476|  1.15k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.25k|    {
  447|  1.25k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.0k|    {
 1177|  16.0k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  12.6k|    {
 1476|  12.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  12.6k|    {
  447|  12.6k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  17.0k|    {
 1598|  17.0k|        return has_value();
 1599|  17.0k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  26.5k|    {
  485|  26.5k|        return m_has_value;
  486|  26.5k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  6.32k|    {
 1604|  6.32k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.32k|        return this->get_unexpected().error();
 1606|  6.32k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.32k|    {
  468|  6.32k|        return m_unexpected;
  469|  6.32k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  4.10k|    {
 1430|  4.10k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  4.10k|    {
  437|  4.10k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.10k|    {
 1177|  4.10k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  2.07k|    {
 1627|  2.07k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.07k|        return this->get_value();
 1629|  2.07k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.07k|    {
  451|  2.07k|        return m_value;
  452|  2.07k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.05k|    {
 1598|  3.05k|        return has_value();
 1599|  3.05k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  8.20k|    {
  485|  8.20k|        return m_has_value;
  486|  8.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.05k|    {
 1177|  3.05k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.10k|    {
 1663|  4.10k|        return std::move(value());
 1664|  4.10k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.10k|    {
 1627|  4.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.10k|        return this->get_value();
 1629|  4.10k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  4.10k|    {
  451|  4.10k|        return m_value;
  452|  4.10k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  72.6k|    {
 3221|  72.6k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 2.69k, False: 69.9k]
  ------------------
 3222|  72.6k|                   ? nullptr
 3223|  72.6k|                   : std::addressof(*ranges::begin(derived()));
 3224|  72.6k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  72.6k|    {
 3005|  72.6k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  72.6k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  72.6k|    {
 2978|  72.6k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  72.6k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  72.6k|    {
 3339|  72.6k|        return m_iterator == m_sentinel;
 3340|  72.6k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   142k|    {
 3180|   142k|        return static_cast<D&>(*this);
 3181|   142k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  69.9k|    {
 2724|  69.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  69.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  69.9k|    {
 2705|  69.9k|        return decay_copy(t.begin());
 2706|  69.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  2.07k|    {
 1430|  2.07k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.07k|    {
  437|  2.07k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  3.05k|    {
 1430|  3.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.05k|    {
  437|  3.05k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.05k|    {
 1837|  3.05k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.05k|                                            std::forward<F>(f));
 1839|  3.05k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  3.05k|{
 1323|  3.05k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.05k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.05k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.05k|            return result(*std::forward<Exp>(exp));
 1327|  3.05k|        }
 1328|       |
 1329|  3.05k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.05k|        return result(unexpect, monostate{});
 1331|  3.05k|    }
 1332|  3.05k|    else {
 1333|  3.05k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.05k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.05k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.05k, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.05k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.05k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.05k|    }
 1340|  3.05k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  6.11k|    {
  485|  6.11k|        return m_has_value;
  486|  6.11k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.05k|    {
 1663|  3.05k|        return std::move(value());
 1664|  3.05k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.05k|    {
 1627|  3.05k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.05k|        return this->get_value();
 1629|  3.05k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.05k|    {
  451|  3.05k|        return m_value;
  452|  3.05k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.05k|    {
 1430|  3.05k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.05k|    {
  437|  3.05k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.05k|    {
 1177|  3.05k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  3.05k|    {
 1598|  3.05k|        return has_value();
 1599|  3.05k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.11k|    {
  485|  6.11k|        return m_has_value;
  486|  6.11k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.05k|    {
 1663|  3.05k|        return std::move(value());
 1664|  3.05k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.05k|    {
 1627|  3.05k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.05k|        return this->get_value();
 1629|  3.05k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.05k|    {
  451|  3.05k|        return m_value;
  452|  3.05k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     72|    {
 1476|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     72|    {
  626|     72|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     72|    {
  689|     72|        scn::detail::construct_at(unexpected_ptr(),
  690|     72|                                  std::forward<Args>(args)...);
  691|     72|        m_has_value = false;
  692|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    216|    {
  718|    216|        return reinterpret_cast<unexpected<E>*>(
  719|    216|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    216|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    216|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     72|    {
 1177|     72|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     72|    {
 1598|     72|        return has_value();
 1599|     72|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    216|    {
  675|    216|        return m_has_value;
  676|    216|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     72|    {
  658|     72|        return *unexpected_ptr();
  659|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     72|    {
  631|     72|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 72]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     72|        else {
  635|     72|            destroy_unexpected();
  636|     72|        }
  637|     72|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     72|    {
  700|     72|        scn::detail::destroy_at(unexpected_ptr());
  701|     72|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  41.7k|    {
 2855|  41.7k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  41.7k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  41.7k|    {
 2836|  41.7k|        return t.data();
 2837|  41.7k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   758k|    {
 1476|   758k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   758k|    {
  447|   758k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   763k|    {
 1177|   763k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  5.36k|    {
 1430|  5.36k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  5.36k|    {
  437|  5.36k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.61k|{
 1211|  3.61k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.61k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    472|    {
 1837|    472|        return detail::transform_error_impl(std::move(*this),
 1838|    472|                                            std::forward<F>(f));
 1839|    472|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    472|{
 1323|    472|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    472|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    472|        if (SCN_LIKELY(exp.has_value())) {
 1326|    472|            return result(*std::forward<Exp>(exp));
 1327|    472|        }
 1328|       |
 1329|    472|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    472|        return result(unexpect, monostate{});
 1331|    472|    }
 1332|    472|    else {
 1333|    472|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    472|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    472|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 472, False: 0]
  |  |  ------------------
  ------------------
 1335|    472|                   ? result(*std::forward<Exp>(exp))
 1336|    472|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    472|    }
 1340|    472|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    472|    {
 1430|    472|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    472|    {
  437|    472|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    472|    {
 1177|    472|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    472|    {
 1598|    472|        return has_value();
 1599|    472|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    944|    {
  485|    944|        return m_has_value;
  486|    944|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    472|    {
 1663|    472|        return std::move(value());
 1664|    472|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    472|    {
 1627|    472|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    472|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    472|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    472|        return this->get_value();
 1629|    472|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    472|    {
  451|    472|        return m_value;
  452|    472|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    944|    {
 1823|    944|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    944|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    944|{
 1323|    944|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    944|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    944|        if (SCN_LIKELY(exp.has_value())) {
 1326|    944|            return result(*std::forward<Exp>(exp));
 1327|    944|        }
 1328|       |
 1329|    944|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    944|        return result(unexpect, monostate{});
 1331|    944|    }
 1332|    944|    else {
 1333|    944|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    944|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    944|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 944]
  |  |  ------------------
  ------------------
 1335|    944|                   ? result(*std::forward<Exp>(exp))
 1336|    944|                   : result(unexpect,
 1337|    944|                            trivial_invoke(std::forward<F>(f),
 1338|    944|                                           std::forward<Exp>(exp).error()));
 1339|    944|    }
 1340|    944|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.95k|    {
 1653|  1.95k|        return value();
 1654|  1.95k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    466|    {
 2724|    466|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    466|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    466|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    466|    {
 2705|    466|        return decay_copy(t.begin());
 2706|    466|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    448|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.04k|    {
 1837|  1.04k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.04k|                                            std::forward<F>(f));
 1839|  1.04k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.04k|{
 1323|  1.04k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.04k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.04k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.04k|            return result(*std::forward<Exp>(exp));
 1327|  1.04k|        }
 1328|       |
 1329|  1.04k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.04k|        return result(unexpect, monostate{});
 1331|  1.04k|    }
 1332|  1.04k|    else {
 1333|  1.04k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.04k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.04k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.04k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.04k|    }
 1340|  1.04k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.04k|    {
 1430|  1.04k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.04k|    {
  437|  1.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.04k|    {
 1177|  1.04k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.04k|    {
 1598|  1.04k|        return has_value();
 1599|  1.04k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.09k|    {
  485|  2.09k|        return m_has_value;
  486|  2.09k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.04k|    {
 1663|  1.04k|        return std::move(value());
 1664|  1.04k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.04k|    {
 1627|  1.04k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.04k|        return this->get_value();
 1629|  1.04k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.04k|    {
  451|  1.04k|        return m_value;
  452|  1.04k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.07k|    {
 1823|  1.07k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.07k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.07k|{
 1323|  1.07k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.07k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.07k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.07k|            return result(*std::forward<Exp>(exp));
 1327|  1.07k|        }
 1328|       |
 1329|  1.07k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.07k|        return result(unexpect, monostate{});
 1331|  1.07k|    }
 1332|  1.07k|    else {
 1333|  1.07k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.07k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
 1335|  1.07k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.07k|                   : result(unexpect,
 1337|  1.07k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.07k|                                           std::forward<Exp>(exp).error()));
 1339|  1.07k|    }
 1340|  1.07k|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.07k|    {
 3648|  1.07k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  16.4k|    {
 1653|  16.4k|        return value();
 1654|  16.4k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  6.66k|{
 6697|  6.66k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  6.66k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  6.66k|    auto start = begin;
 6701|  6.66k|    ++begin;
 6702|       |
 6703|  6.66k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.66k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  6.66k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 564, False: 6.10k]
  ------------------
 6710|    564|        handler.on_charset_inverted();
 6711|    564|        ++begin;
 6712|    564|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 564]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    564|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 558]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    564|    }
 6723|  6.10k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 6.10k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  1.81M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 1.81M, False: 0]
  ------------------
 6728|  1.81M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  1.81M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 6.66k, False: 1.80M]
  ------------------
 6733|  6.66k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  6.66k|        }
 6735|       |
 6736|  1.80M|        parse_presentation_set_literal(begin, end, handler);
 6737|  1.80M|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  6.66k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  1.80M|{
 6661|  1.80M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  1.80M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  1.80M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.80M]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  1.80M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 1.80M, False: 0]
  |  Branch (6668:25): [True: 10.1k, False: 1.79M]
  |  Branch (6668:49): [True: 10.1k, False: 0]
  ------------------
 6669|  1.80M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 10.0k, False: 156]
  ------------------
 6670|  10.0k|        ++begin;
 6671|       |
 6672|  10.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  10.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  10.0k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  10.0k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  10.0k|        return;
 6686|  10.0k|    }
 6687|       |
 6688|  1.79M|    handler.on_charset_single(cp_first);
 6689|  1.79M|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  1.81M|{
 6637|  1.81M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  1.81M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  1.81M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  3.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  |  Branch (859:45): [True: 0, False: 1.81M]
  |  |  |  Branch (859:45): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  1.81M|    const auto cp =
 6646|  1.81M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  1.81M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  1.81M|    begin += len;
 6653|  1.81M|    return cp;
 6654|  1.81M|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.0k|    {
 1177|  59.0k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  59.0k|    {
 1430|  59.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  59.0k|    {
  437|  59.0k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  42.2k|    {
 6252|  42.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  42.2k|                charset_string_size};
 6254|  42.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|  1.95k|    {
 1430|  1.95k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.95k|    {
  437|  1.95k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  4.41k|    {
 1430|  4.41k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.41k|    {
  437|  4.41k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   493k|{
 4033|   493k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   493k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   493k|    }
 4036|   493k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   493k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   493k|    }
 4039|   493k|    else {
 4040|   493k|        SCN_EXPECT(input.size() == 1);
 4041|   493k|        return static_cast<char32_t>(input.front());
 4042|   493k|    }
 4043|   493k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  58.8k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  58.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  58.8k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|  1.04k|    {
 6187|  1.04k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  1.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  1.04k|        CharT r{};
 6189|  1.04k|        std::memcpy(&r, m_data, m_size);
 6190|  1.04k|        return r;
 6191|  1.04k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   656k|{
 3807|   656k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   656k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   656k|    }
 3810|   656k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   656k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   656k|    }
 3813|   656k|    else {
 3814|       |        // utf-32
 3815|   656k|        static_assert(sizeof(U) == 4);
 3816|   656k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   656k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   656k|        return 1;
 3818|   656k|    }
 3819|   656k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   595k|{
 4013|   595k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   595k|        return decode_utf8_code_point_exhaustive(input);
 4015|   595k|    }
 4016|   595k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   595k|        return decode_utf16_code_point_exhaustive(input);
 4018|   595k|    }
 4019|   595k|    else {
 4020|   595k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   595k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   595k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   595k|        auto cp = static_cast<char32_t>(input.front());
 4022|   595k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 278k, False: 317k]
  |  |  ------------------
  ------------------
 4023|   278k|            return invalid_code_point;
 4024|   278k|        }
 4025|   317k|        return cp;
 4026|   595k|    }
 4027|   595k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  77.1k|{
 3699|  77.1k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  77.1k|                                          decltype(first), decltype(last)> &&
 3701|  77.1k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  77.1k|        return {first, last};
 3703|  77.1k|    }
 3704|  77.1k|    else {
 3705|  77.1k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  77.1k|                                       to_address(first), to_address(last)))};
 3707|  77.1k|    }
 3708|  77.1k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   328k|{
  326|   328k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   328k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   328k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   331k|{
  304|   331k|    return p;
  305|   331k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.35k|{
 3730|  7.35k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.35k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.35k|                      decltype(it)> &&
 3733|  7.35k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.35k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.35k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.35k|        return it;
 3736|  7.35k|    }
 3737|  7.35k|    else {
 3738|  7.35k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.35k|    }
 3740|  7.35k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.59k|{
  326|  2.59k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.59k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  40.0k|    {
 3346|  40.0k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  40.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    136|    {
 1476|    136|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    136|    {
  447|    136|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  25.0k|    {
 1177|  25.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  24.8k|    {
 1430|  24.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  24.8k|    {
  437|  24.8k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  6.68k|    {
 1598|  6.68k|        return has_value();
 1599|  6.68k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  43.3k|    {
  485|  43.3k|        return m_has_value;
  486|  43.3k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  18.1k|    {
 1627|  18.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  18.1k|        return this->get_value();
 1629|  18.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  18.1k|    {
  451|  18.1k|        return m_value;
  452|  18.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  3.13k|    {
 1430|  3.13k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  3.13k|    {
  437|  3.13k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.30k|    {
 1177|  3.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    164|    {
 1476|    164|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    164|    {
  447|    164|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.47k|    {
 1598|  1.47k|        return has_value();
 1599|  1.47k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.12k|    {
  485|  5.12k|        return m_has_value;
  486|  5.12k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.66k|    {
 1627|  1.66k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.66k|        return this->get_value();
 1629|  1.66k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.66k|    {
  451|  1.66k|        return m_value;
  452|  1.66k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.30k|    {
 1177|  2.30k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  2.30k|    {
 1430|  2.30k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  2.30k|    {
  437|  2.30k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    352|    {
 1837|    352|        return detail::transform_error_impl(std::move(*this),
 1838|    352|                                            std::forward<F>(f));
 1839|    352|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    352|{
 1323|    352|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    352|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    352|        if (SCN_LIKELY(exp.has_value())) {
 1326|    352|            return result(*std::forward<Exp>(exp));
 1327|    352|        }
 1328|       |
 1329|    352|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    352|        return result(unexpect, monostate{});
 1331|    352|    }
 1332|    352|    else {
 1333|    352|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    352|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    352|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 352, False: 0]
  |  |  ------------------
  ------------------
 1335|    352|                   ? result(*std::forward<Exp>(exp))
 1336|    352|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    352|    }
 1340|    352|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.66k|    {
 1663|  1.66k|        return std::move(value());
 1664|  1.66k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    882|    {
 1430|    882|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    882|    {
  437|    882|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.73k|    {
 1177|  4.73k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    164|    {
 1614|    164|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    164|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    164|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    164|        return std::move(this->get_unexpected().error());
 1616|    164|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    164|    {
  468|    164|        return m_unexpected;
  469|    164|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.14k|    {
 1486|  1.14k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  3.85k|    {
  447|  3.85k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    526|    {
 2724|    526|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    526|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    526|    {
 2705|    526|        return decay_copy(t.begin());
 2706|    526|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.28k|{
 1949|  1.28k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.28k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    526|    {
 3330|    526|        return m_iterator;
 3331|    526|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    526|    {
 2781|    526|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    526|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    526|    {
 2763|    526|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    526|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    526|    {
 3334|    526|        return m_sentinel;
 3335|    526|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    526|    {
 3316|    526|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  2.30k|    {
 1598|  2.30k|        return has_value();
 1599|  2.30k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.60k|    {
  485|  4.60k|        return m_has_value;
  486|  4.60k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.30k|    {
 1663|  2.30k|        return std::move(value());
 1664|  2.30k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  2.30k|    {
 1627|  2.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.30k|        return this->get_value();
 1629|  2.30k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.30k|    {
  451|  2.30k|        return m_value;
  452|  2.30k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  34.4k|    {
 1177|  34.4k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  34.4k|    {
 1430|  34.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  34.4k|    {
  437|  34.4k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  11.5k|    {
 1837|  11.5k|        return detail::transform_error_impl(std::move(*this),
 1838|  11.5k|                                            std::forward<F>(f));
 1839|  11.5k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  11.5k|{
 1323|  11.5k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  11.5k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  11.5k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  11.5k|            return result(*std::forward<Exp>(exp));
 1327|  11.5k|        }
 1328|       |
 1329|  11.5k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  11.5k|        return result(unexpect, monostate{});
 1331|  11.5k|    }
 1332|  11.5k|    else {
 1333|  11.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  11.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  11.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.5k, False: 0]
  |  |  ------------------
  ------------------
 1335|  11.5k|                   ? result(*std::forward<Exp>(exp))
 1336|  11.5k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  11.5k|    }
 1340|  11.5k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  18.1k|    {
 1663|  18.1k|        return std::move(value());
 1664|  18.1k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    136|    {
 1614|    136|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    136|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    136|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    136|        return std::move(this->get_unexpected().error());
 1616|    136|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    136|    {
  468|    136|        return m_unexpected;
  469|    136|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.11k|    {
 1486|  1.11k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  34.4k|    {
 1598|  34.4k|        return has_value();
 1599|  34.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  68.9k|    {
  485|  68.9k|        return m_has_value;
  486|  68.9k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  34.4k|    {
 1663|  34.4k|        return std::move(value());
 1664|  34.4k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  34.4k|    {
 1627|  34.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  34.4k|        return this->get_value();
 1629|  34.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  34.4k|    {
  451|  34.4k|        return m_value;
  452|  34.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.70k|    {
 1476|  2.70k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    406|    {
 1476|    406|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    570|    {
  447|    570|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.61k|    {
 1177|  5.61k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  3.73k|    {
 1476|  3.73k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  3.73k|    {
  447|  3.73k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  5.18k|    {
 1598|  5.18k|        return has_value();
 1599|  5.18k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  10.1k|    {
  485|  10.1k|        return m_has_value;
  486|  10.1k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.84k|    {
 1604|  1.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.84k|        return this->get_unexpected().error();
 1606|  1.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.50k|    {
  468|  2.50k|        return m_unexpected;
  469|  2.50k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    950|    {
 1430|    950|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    950|    {
  437|    950|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    950|    {
 1177|    950|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.30k|    {
 1627|  1.30k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.30k|        return this->get_value();
 1629|  1.30k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.30k|    {
  451|  1.30k|        return m_value;
  452|  1.30k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    708|    {
 1598|    708|        return has_value();
 1599|    708|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.90k|    {
  485|  1.90k|        return m_has_value;
  486|  1.90k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    708|    {
 1177|    708|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    950|    {
 1663|    950|        return std::move(value());
 1664|    950|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    950|    {
 1627|    950|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    950|        return this->get_value();
 1629|    950|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    950|    {
  451|    950|        return m_value;
  452|    950|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  90.1k|    {
 3334|  90.1k|        return m_sentinel;
 3335|  90.1k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.47k|    {
 1837|  1.47k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.47k|                                            std::forward<F>(f));
 1839|  1.47k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.47k|{
 1323|  1.47k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.47k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.47k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.47k|            return result(*std::forward<Exp>(exp));
 1327|  1.47k|        }
 1328|       |
 1329|  1.47k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.47k|        return result(unexpect, monostate{});
 1331|  1.47k|    }
 1332|  1.47k|    else {
 1333|  1.47k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.47k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.47k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.30k, False: 164]
  |  |  ------------------
  ------------------
 1335|  1.47k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.47k|                   : result(unexpect,
 1337|    164|                            trivial_invoke(std::forward<F>(f),
 1338|    164|                                           std::forward<Exp>(exp).error()));
 1339|  1.47k|    }
 1340|  1.47k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.30k|    {
 1430|  1.30k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.30k|    {
  437|  1.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    164|    {
 1486|    164|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.30k|    {
 1663|  1.30k|        return std::move(value());
 1664|  1.30k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  92.2k|    {
 3330|  92.2k|        return m_iterator;
 3331|  92.2k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    708|    {
 1430|    708|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    708|    {
  437|    708|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    708|    {
 1837|    708|        return detail::transform_error_impl(std::move(*this),
 1838|    708|                                            std::forward<F>(f));
 1839|    708|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    708|{
 1323|    708|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    708|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    708|        if (SCN_LIKELY(exp.has_value())) {
 1326|    708|            return result(*std::forward<Exp>(exp));
 1327|    708|        }
 1328|       |
 1329|    708|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    708|        return result(unexpect, monostate{});
 1331|    708|    }
 1332|    708|    else {
 1333|    708|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    708|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    708|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 708, False: 0]
  |  |  ------------------
  ------------------
 1335|    708|                   ? result(*std::forward<Exp>(exp))
 1336|    708|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    708|    }
 1340|    708|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.41k|    {
  485|  1.41k|        return m_has_value;
  486|  1.41k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    708|    {
 1663|    708|        return std::move(value());
 1664|    708|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    708|    {
 1627|    708|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    708|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    708|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    708|        return this->get_value();
 1629|    708|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    708|    {
  451|    708|        return m_value;
  452|    708|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    708|    {
 1430|    708|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    708|    {
  437|    708|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    708|    {
 1177|    708|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    708|    {
 1598|    708|        return has_value();
 1599|    708|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.41k|    {
  485|  1.41k|        return m_has_value;
  486|  1.41k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    708|    {
 1663|    708|        return std::move(value());
 1664|    708|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    708|    {
 1627|    708|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    708|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    708|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    708|        return this->get_value();
 1629|    708|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    708|    {
  451|    708|        return m_value;
  452|    708|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    664|    {
 1837|    664|        return detail::transform_error_impl(std::move(*this),
 1838|    664|                                            std::forward<F>(f));
 1839|    664|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    664|{
 1323|    664|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    664|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    664|        if (SCN_LIKELY(exp.has_value())) {
 1326|    664|            return result(*std::forward<Exp>(exp));
 1327|    664|        }
 1328|       |
 1329|    664|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    664|        return result(unexpect, monostate{});
 1331|    664|    }
 1332|    664|    else {
 1333|    664|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    664|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    664|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 664]
  |  |  ------------------
  ------------------
 1335|    664|                   ? result(*std::forward<Exp>(exp))
 1336|    664|                   : result(unexpect,
 1337|    664|                            trivial_invoke(std::forward<F>(f),
 1338|    664|                                           std::forward<Exp>(exp).error()));
 1339|    664|    }
 1340|    664|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    664|    {
 1614|    664|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    664|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    664|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    664|        return std::move(this->get_unexpected().error());
 1616|    664|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.14k|    {
 3648|  1.14k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  31.2k|    {
 3316|  31.2k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     44|    {
 1476|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     44|    {
  626|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     44|    {
  689|     44|        scn::detail::construct_at(unexpected_ptr(),
  690|     44|                                  std::forward<Args>(args)...);
  691|     44|        m_has_value = false;
  692|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    132|    {
  718|    132|        return reinterpret_cast<unexpected<E>*>(
  719|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    132|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     44|    {
 1177|     44|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     44|    {
 1598|     44|        return has_value();
 1599|     44|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    132|    {
  675|    132|        return m_has_value;
  676|    132|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     44|    {
 1604|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     44|        return this->get_unexpected().error();
 1606|     44|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     44|    {
  658|     44|        return *unexpected_ptr();
  659|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     44|    {
  631|     44|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 44]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     44|        else {
  635|     44|            destroy_unexpected();
  636|     44|        }
  637|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     44|    {
  700|     44|        scn::detail::destroy_at(unexpected_ptr());
  701|     44|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  4.97k|    {
 1598|  4.97k|        return has_value();
 1599|  4.97k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.47k|    {
  485|  9.47k|        return m_has_value;
  486|  9.47k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  3.61k|    {
 1604|  3.61k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.61k|        return this->get_unexpected().error();
 1606|  3.61k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.61k|    {
  468|  3.61k|        return m_unexpected;
  469|  3.61k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    882|    {
 1663|    882|        return std::move(value());
 1664|    882|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    882|    {
 1627|    882|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    882|        return this->get_value();
 1629|    882|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    882|    {
  451|    882|        return m_value;
  452|    882|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.23k|    {
 1476|  1.23k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.37k|    {
  447|  1.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  21.3k|    {
 1177|  21.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  13.3k|    {
 1476|  13.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  13.3k|    {
  447|  13.3k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  22.4k|    {
 1598|  22.4k|        return has_value();
 1599|  22.4k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  36.8k|    {
  485|  36.8k|        return m_has_value;
  486|  36.8k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  6.77k|    {
 1604|  6.77k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.77k|        return this->get_unexpected().error();
 1606|  6.77k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.77k|    {
  468|  6.77k|        return m_unexpected;
  469|  6.77k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  4.42k|    {
 1430|  4.42k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  4.42k|    {
  437|  4.42k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.42k|    {
 1177|  4.42k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  6.60k|    {
 1627|  6.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.60k|        return this->get_value();
 1629|  6.60k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.60k|    {
  451|  6.60k|        return m_value;
  452|  6.60k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.32k|    {
 1598|  3.32k|        return has_value();
 1599|  3.32k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  8.84k|    {
  485|  8.84k|        return m_has_value;
  486|  8.84k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.32k|    {
 1177|  3.32k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.42k|    {
 1663|  4.42k|        return std::move(value());
 1664|  4.42k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.42k|    {
 1627|  4.42k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.42k|        return this->get_value();
 1629|  4.42k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  4.42k|    {
  451|  4.42k|        return m_value;
  452|  4.42k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  6.74k|    {
 1837|  6.74k|        return detail::transform_error_impl(std::move(*this),
 1838|  6.74k|                                            std::forward<F>(f));
 1839|  6.74k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  6.74k|{
 1323|  6.74k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  6.74k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  6.74k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  6.74k|            return result(*std::forward<Exp>(exp));
 1327|  6.74k|        }
 1328|       |
 1329|  6.74k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  6.74k|        return result(unexpect, monostate{});
 1331|  6.74k|    }
 1332|  6.74k|    else {
 1333|  6.74k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  6.74k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.74k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.60k, False: 136]
  |  |  ------------------
  ------------------
 1335|  6.74k|                   ? result(*std::forward<Exp>(exp))
 1336|  6.74k|                   : result(unexpect,
 1337|    136|                            trivial_invoke(std::forward<F>(f),
 1338|    136|                                           std::forward<Exp>(exp).error()));
 1339|  6.74k|    }
 1340|  6.74k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  6.60k|    {
 1430|  6.60k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  6.60k|    {
  437|  6.60k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    136|    {
 1486|    136|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  6.60k|    {
 1663|  6.60k|        return std::move(value());
 1664|  6.60k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  3.32k|    {
 1430|  3.32k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.32k|    {
  437|  3.32k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.32k|    {
 1837|  3.32k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.32k|                                            std::forward<F>(f));
 1839|  3.32k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  3.32k|{
 1323|  3.32k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.32k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.32k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.32k|            return result(*std::forward<Exp>(exp));
 1327|  3.32k|        }
 1328|       |
 1329|  3.32k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.32k|        return result(unexpect, monostate{});
 1331|  3.32k|    }
 1332|  3.32k|    else {
 1333|  3.32k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.32k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.32k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.32k, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.32k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.32k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.32k|    }
 1340|  3.32k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  6.64k|    {
  485|  6.64k|        return m_has_value;
  486|  6.64k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.32k|    {
 1663|  3.32k|        return std::move(value());
 1664|  3.32k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.32k|    {
 1627|  3.32k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.32k|        return this->get_value();
 1629|  3.32k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.32k|    {
  451|  3.32k|        return m_value;
  452|  3.32k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.32k|    {
 1430|  3.32k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.32k|    {
  437|  3.32k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.32k|    {
 1177|  3.32k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  3.32k|    {
 1598|  3.32k|        return has_value();
 1599|  3.32k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.64k|    {
  485|  6.64k|        return m_has_value;
  486|  6.64k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.32k|    {
 1663|  3.32k|        return std::move(value());
 1664|  3.32k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.32k|    {
 1627|  3.32k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.32k|        return this->get_value();
 1629|  3.32k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.32k|    {
  451|  3.32k|        return m_value;
  452|  3.32k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     64|    {
 1476|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     64|    {
  626|     64|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     64|    {
  689|     64|        scn::detail::construct_at(unexpected_ptr(),
  690|     64|                                  std::forward<Args>(args)...);
  691|     64|        m_has_value = false;
  692|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    192|    {
  718|    192|        return reinterpret_cast<unexpected<E>*>(
  719|    192|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    192|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    192|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     64|    {
 1177|     64|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     64|    {
 1598|     64|        return has_value();
 1599|     64|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    192|    {
  675|    192|        return m_has_value;
  676|    192|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     64|    {
 1604|     64|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     64|        return this->get_unexpected().error();
 1606|     64|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     64|    {
  658|     64|        return *unexpected_ptr();
  659|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     64|    {
  631|     64|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 64]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     64|        else {
  635|     64|            destroy_unexpected();
  636|     64|        }
  637|     64|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     64|    {
  700|     64|        scn::detail::destroy_at(unexpected_ptr());
  701|     64|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  18.1k|    {
 2855|  18.1k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  18.1k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  18.1k|    {
 2836|  18.1k|        return t.data();
 2837|  18.1k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  51.1k|    {
 3221|  51.1k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 5.96k, False: 45.2k]
  ------------------
 3222|  51.1k|                   ? nullptr
 3223|  51.1k|                   : std::addressof(*ranges::begin(derived()));
 3224|  51.1k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  51.1k|    {
 3005|  51.1k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  51.1k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  51.1k|    {
 2978|  51.1k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  51.1k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  51.1k|    {
 3339|  51.1k|        return m_iterator == m_sentinel;
 3340|  51.1k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  96.4k|    {
 3180|  96.4k|        return static_cast<D&>(*this);
 3181|  96.4k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  45.2k|    {
 2724|  45.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  45.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  45.2k|    {
 2705|  45.2k|        return decay_copy(t.begin());
 2706|  45.2k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    242|    {
 1837|    242|        return detail::transform_error_impl(std::move(*this),
 1838|    242|                                            std::forward<F>(f));
 1839|    242|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    242|{
 1323|    242|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    242|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    242|        if (SCN_LIKELY(exp.has_value())) {
 1326|    242|            return result(*std::forward<Exp>(exp));
 1327|    242|        }
 1328|       |
 1329|    242|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    242|        return result(unexpect, monostate{});
 1331|    242|    }
 1332|    242|    else {
 1333|    242|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    242|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    242|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 242, False: 0]
  |  |  ------------------
  ------------------
 1335|    242|                   ? result(*std::forward<Exp>(exp))
 1336|    242|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    242|    }
 1340|    242|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    242|    {
 1430|    242|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    242|    {
  437|    242|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    242|    {
 1177|    242|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    242|    {
 1598|    242|        return has_value();
 1599|    242|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    484|    {
  485|    484|        return m_has_value;
  486|    484|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    242|    {
 1663|    242|        return std::move(value());
 1664|    242|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    242|    {
 1627|    242|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    242|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    242|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    242|        return this->get_value();
 1629|    242|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    242|    {
  451|    242|        return m_value;
  452|    242|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    484|    {
 1823|    484|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    484|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    484|{
 1323|    484|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    484|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    484|        if (SCN_LIKELY(exp.has_value())) {
 1326|    484|            return result(*std::forward<Exp>(exp));
 1327|    484|        }
 1328|       |
 1329|    484|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    484|        return result(unexpect, monostate{});
 1331|    484|    }
 1332|    484|    else {
 1333|    484|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    484|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    484|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 484]
  |  |  ------------------
  ------------------
 1335|    484|                   ? result(*std::forward<Exp>(exp))
 1336|    484|                   : result(unexpect,
 1337|    484|                            trivial_invoke(std::forward<F>(f),
 1338|    484|                                           std::forward<Exp>(exp).error()));
 1339|    484|    }
 1340|    484|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    230|    {
 2724|    230|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    230|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    230|    {
 2705|    230|        return decay_copy(t.begin());
 2706|    230|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    210|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.10k|    {
 1837|  1.10k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.10k|                                            std::forward<F>(f));
 1839|  1.10k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.10k|{
 1323|  1.10k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.10k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.10k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.10k|            return result(*std::forward<Exp>(exp));
 1327|  1.10k|        }
 1328|       |
 1329|  1.10k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.10k|        return result(unexpect, monostate{});
 1331|  1.10k|    }
 1332|  1.10k|    else {
 1333|  1.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.10k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.10k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.10k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.10k|    }
 1340|  1.10k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.10k|    {
 1430|  1.10k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.10k|    {
  437|  1.10k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.10k|    {
 1177|  1.10k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.10k|    {
 1598|  1.10k|        return has_value();
 1599|  1.10k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.20k|    {
  485|  2.20k|        return m_has_value;
  486|  2.20k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.10k|    {
 1663|  1.10k|        return std::move(value());
 1664|  1.10k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.10k|    {
 1627|  1.10k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.10k|        return this->get_value();
 1629|  1.10k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.10k|    {
  451|  1.10k|        return m_value;
  452|  1.10k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|  1.11k|    {
 1823|  1.11k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.11k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.11k|{
 1323|  1.11k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.11k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.11k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.11k|            return result(*std::forward<Exp>(exp));
 1327|  1.11k|        }
 1328|       |
 1329|  1.11k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.11k|        return result(unexpect, monostate{});
 1331|  1.11k|    }
 1332|  1.11k|    else {
 1333|  1.11k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.11k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.11k]
  |  |  ------------------
  ------------------
 1335|  1.11k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.11k|                   : result(unexpect,
 1337|  1.11k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.11k|                                           std::forward<Exp>(exp).error()));
 1339|  1.11k|    }
 1340|  1.11k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.11k|    {
 3648|  1.11k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  5.76k|    {
 1653|  5.76k|        return value();
 1654|  5.76k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    864|{
 6697|    864|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    864|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    864|    auto start = begin;
 6701|    864|    ++begin;
 6702|       |
 6703|    864|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 864]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    864|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 198, False: 666]
  ------------------
 6710|    198|        handler.on_charset_inverted();
 6711|    198|        ++begin;
 6712|    198|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 198]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    198|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 198]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|    198|    }
 6723|    666|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 666]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  13.9k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 13.9k, False: 0]
  ------------------
 6728|  13.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  13.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 864, False: 13.0k]
  ------------------
 6733|    864|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    864|        }
 6735|       |
 6736|  13.0k|        parse_presentation_set_literal(begin, end, handler);
 6737|  13.0k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    864|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  13.0k|{
 6661|  13.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  13.0k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  13.0k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.0k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  13.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 13.0k, False: 0]
  |  Branch (6668:25): [True: 246, False: 12.8k]
  |  Branch (6668:49): [True: 246, False: 0]
  ------------------
 6669|  13.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 180, False: 66]
  ------------------
 6670|    180|        ++begin;
 6671|       |
 6672|    180|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    180|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 180]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|    180|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 180]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|    180|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    180|        return;
 6686|    180|    }
 6687|       |
 6688|  12.8k|    handler.on_charset_single(cp_first);
 6689|  12.8k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  13.2k|{
 6637|  13.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  13.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  13.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  |  Branch (859:45): [True: 0, False: 13.2k]
  |  |  |  Branch (859:45): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  13.2k|    const auto cp =
 6646|  13.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  13.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  13.2k|    begin += len;
 6653|  13.2k|    return cp;
 6654|  13.2k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  26.4k|    {
 6252|  26.4k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  26.4k|                charset_string_size};
 6254|  26.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.06k|    {
 1430|  1.06k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.06k|    {
  437|  1.06k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  2.11k|{
 3654|  2.11k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.11k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  9.41k|    {
 2855|  9.41k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  9.41k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  9.41k|    {
 2836|  9.41k|        return t.data();
 2837|  9.41k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   253k|    {
 5466|   253k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 253k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   253k|        return static_cast<std::size_t>(m_desc &
 5471|   253k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   253k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   404k|    {
 5491|   404k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   404k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   151k|    {
 5434|   151k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   151k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 151k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|   151k|        const auto t = type(id);
 5446|   151k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.59k, False: 150k]
  |  |  ------------------
  ------------------
 5447|  1.59k|            return {};
 5448|  1.59k|        }
 5449|       |
 5450|   150k|        basic_scan_arg<Context> arg;
 5451|   150k|        arg.m_type = t;
 5452|   150k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 150k, False: 0]
  ------------------
 5453|   150k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   150k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   150k|        return arg;
 5459|   151k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   151k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|   250k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   151k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   151k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   151k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   151k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   151k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   150k|    {
 5495|   150k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   150k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   298k|    {
 5247|   298k|        return m_type != detail::arg_type::none_type;
 5248|   298k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.64k|{
 8417|  6.64k|#define SCN_VISIT(Type)                                         \
 8418|  6.64k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.64k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.64k|    }                                                           \
 8421|  6.64k|    else {                                                      \
 8422|  6.64k|        return vis(monostate_val);                              \
 8423|  6.64k|    }
 8424|       |
 8425|  6.64k|    monostate monostate_val{};
 8426|       |
 8427|  6.64k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.64k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.64k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    738|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 738, False: 5.90k]
  ------------------
 8433|    738|            SCN_VISIT(int);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.64k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.64k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.64k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.64k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    738|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 738, False: 5.90k]
  ------------------
 8443|    738|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.64k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.64k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    738|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 738, False: 5.90k]
  ------------------
 8449|    738|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8450|    738|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 738, False: 5.90k]
  ------------------
 8451|    738|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8452|    738|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 738, False: 5.90k]
  ------------------
 8453|    738|            SCN_VISIT(char);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 6.64k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.64k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.64k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    738|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 738, False: 5.90k]
  ------------------
 8461|    738|            SCN_VISIT(double);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.64k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    738|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 738, False: 5.90k]
  ------------------
 8465|    738|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8466|    738|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 738, False: 5.90k]
  ------------------
 8467|    738|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 6.64k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    738|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 738, False: 5.90k]
  ------------------
 8471|    738|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    738|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    738|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    738|    }                                                           \
  |  | 8421|    738|    else {                                                      \
  |  | 8422|    738|        return vis(monostate_val);                              \
  |  | 8423|    738|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.64k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.64k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.64k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.64k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.64k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.64k|            SCN_CLANG_POP
 8495|  6.64k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.18k|    {
 1837|  2.18k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.18k|                                            std::forward<F>(f));
 1839|  2.18k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.18k|{
 1323|  2.18k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.18k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.18k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.18k|            return result(*std::forward<Exp>(exp));
 1327|  2.18k|        }
 1328|       |
 1329|  2.18k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.18k|        return result(unexpect, monostate{});
 1331|  2.18k|    }
 1332|  2.18k|    else {
 1333|  2.18k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.18k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.07k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.18k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.18k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.18k|    }
 1340|  2.18k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.07k|    {
 1663|  2.07k|        return std::move(value());
 1664|  2.07k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   253k|    {
 5545|   253k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   253k|    {
 8056|   253k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   253k|{
 7044|   253k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   253k|    handler.check_args_exhausted();
 7046|   253k|    return handler.get_error();
 7047|   253k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   253k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   253k|    auto begin = format.data();
 7013|   253k|    auto it = begin;
 7014|   253k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   632k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 621k, False: 10.7k]
  ------------------
 7017|   621k|        const auto ch = *it++;
 7018|   621k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 258k, False: 363k]
  ------------------
 7019|   258k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   258k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   258k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 239k, False: 18.7k]
  ------------------
 7023|   239k|                return;
 7024|   239k|            }
 7025|   258k|        }
 7026|   363k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 4.09k, False: 359k]
  ------------------
 7027|  4.09k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  7.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.75k, False: 1.34k]
  |  |  |  Branch (859:45): [True: 580, False: 3.51k]
  |  |  |  Branch (859:45): [True: 2.17k, False: 1.34k]
  |  |  ------------------
  ------------------
 7028|  2.75k|                handler.on_error("Unmatched '}' in format string");
 7029|  2.75k|                return;
 7030|  2.75k|            }
 7031|       |
 7032|  1.34k|            handler.on_literal_text(begin, it);
 7033|  1.34k|            begin = ++it;
 7034|  1.34k|        }
 7035|   621k|    }
 7036|       |
 7037|  10.7k|    handler.on_literal_text(begin, end);
 7038|  10.7k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   258k|{
 6942|   258k|    struct id_adapter {
 6943|   258k|        constexpr void operator()()
 6944|   258k|        {
 6945|   258k|            arg_id = handler.on_arg_id();
 6946|   258k|        }
 6947|   258k|        constexpr void operator()(std::size_t id)
 6948|   258k|        {
 6949|   258k|            arg_id = handler.on_arg_id(id);
 6950|   258k|        }
 6951|       |
 6952|   258k|        constexpr void on_error(const char* msg)
 6953|   258k|        {
 6954|   258k|            SCN_UNLIKELY_ATTR
 6955|   258k|            handler.on_error(msg);
 6956|   258k|        }
 6957|       |
 6958|   258k|        Handler& handler;
 6959|   258k|        std::size_t arg_id;
 6960|   258k|    };
 6961|       |
 6962|   258k|    ++begin;
 6963|   258k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 258k]
  |  |  ------------------
  ------------------
 6964|    116|        handler.on_error("Unexpected end of replacement field");
 6965|    116|        return begin;
 6966|    116|    }
 6967|       |
 6968|   258k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 6.65k, False: 251k]
  ------------------
 6969|  6.65k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  6.65k|    }
 6971|   251k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 7.00k, False: 244k]
  ------------------
 6972|  7.00k|        handler.on_literal_text(begin, begin + 1);
 6973|  7.00k|    }
 6974|   244k|    else {
 6975|   244k|        auto adapter = id_adapter{handler, 0};
 6976|   244k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   244k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 244k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|   244k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 244k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|   244k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 144k, False: 99.3k]
  ------------------
 6987|   144k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 144k]
  |  |  ------------------
  ------------------
 6988|     92|                handler.on_error("Unexpected end of replacement field");
 6989|     92|                return begin;
 6990|     92|            }
 6991|   144k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   144k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.30k, False: 140k]
  |  |  |  Branch (859:45): [True: 0, False: 144k]
  |  |  |  Branch (859:45): [True: 4.30k, False: 140k]
  |  |  ------------------
  ------------------
 6993|  4.30k|                handler.on_error("Unknown format specifier");
 6994|  4.30k|                return begin;
 6995|  4.30k|            }
 6996|   144k|        }
 6997|  99.3k|        else {
 6998|  99.3k|            SCN_UNLIKELY_ATTR
 6999|  99.3k|            handler.on_error("Missing '}' in format string");
 7000|  99.3k|            return begin;
 7001|  99.3k|        }
 7002|   244k|    }
 7003|   154k|    return begin + 1;
 7004|   258k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   151k|    {
 8039|   151k|        return m_args.get(id);
 8040|   151k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  6.79k|    {
 8044|  6.79k|        return m_args;
 8045|  6.79k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   146k|    {
 8049|   146k|        return m_locale;
 8050|   146k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   141k|    {
 5566|   141k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 141k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|   141k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   141k|        do_check_arg_id(id);
 5574|   141k|        return id;
 5575|   141k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    122|    {
 5590|    122|        return detail::handle_error(
 5591|    122|            scan_error{scan_error::invalid_format_string, msg});
 5592|    122|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   151k|{
 6054|   151k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   151k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   151k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   244k|{
 6443|   244k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   244k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   244k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   244k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 244k, False: 0]
  |  Branch (6444:26): [True: 109k, False: 135k]
  ------------------
 6445|   109k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|   109k|    }
 6447|       |
 6448|   135k|    handler();
 6449|   135k|    return begin;
 6450|   244k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|   109k|{
 6413|   109k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   109k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   109k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|   109k|    CharT c = *begin;
 6416|   109k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 98.9k, False: 10.3k]
  |  Branch (6416:27): [True: 362, False: 10.0k]
  ------------------
 6417|  99.2k|        handler.on_error("Invalid argument ID");
 6418|  99.2k|        return begin;
 6419|  99.2k|    }
 6420|       |
 6421|  10.0k|    int idx = 0;
 6422|  10.0k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 354, False: 9.65k]
  ------------------
 6423|    354|        idx = parse_simple_int(begin, end);
 6424|    354|    }
 6425|  9.65k|    else {
 6426|  9.65k|        ++begin;
 6427|  9.65k|    }
 6428|       |
 6429|  10.0k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 9.90k]
  |  Branch (6429:26): [True: 9.76k, False: 140]
  |  Branch (6429:50): [True: 102, False: 9.66k]
  ------------------
 6430|    212|        handler.on_error("Invalid argument ID");
 6431|    212|        return begin;
 6432|    212|    }
 6433|  9.80k|    handler(idx);
 6434|       |
 6435|  9.80k|    return begin;
 6436|  10.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  99.4k|        {
 6954|  99.4k|            SCN_UNLIKELY_ATTR
 6955|  99.4k|            handler.on_error(msg);
 6956|  99.4k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  26.8k|{
 6392|  26.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  26.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  26.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  26.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  26.8k|    unsigned long long value = 0;
 6396|  99.4k|    do {
 6397|  99.4k|        value *= 10;
 6398|  99.4k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  99.4k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 99.2k]
  ------------------
 6400|  99.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  99.2k|        ++begin;
 6404|  99.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 98.9k, False: 312]
  |  Branch (6404:30): [True: 87.9k, False: 11.0k]
  |  Branch (6404:47): [True: 72.6k, False: 15.2k]
  ------------------
 6405|  26.6k|    return static_cast<int>(value);
 6406|  26.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  9.80k|        {
 6949|  9.80k|            arg_id = handler.on_arg_id(id);
 6950|  9.80k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  9.80k|    {
 5579|  9.80k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  9.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 9.72k]
  |  |  ------------------
  ------------------
 5580|     80|            on_error(
 5581|     80|                "Cannot switch from manual to automatic argument indexing");
 5582|     80|            return;
 5583|     80|        }
 5584|  9.72k|        m_next_arg_id = -1;
 5585|  9.72k|        do_check_arg_id(id);
 5586|  9.72k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   135k|        {
 6945|   135k|            arg_id = handler.on_arg_id();
 6946|   135k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   289k|    {
 5252|   289k|        return m_type;
 5253|   289k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   140k|    {
 5561|   140k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   140k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   285k|    {
 5550|   285k|        return m_format.data();
 5551|   285k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   144k|    {
 7122|   144k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   144k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   144k|{
 6858|   144k|    auto do_presentation = [&]() -> const CharT* {
 6859|   144k|        if (*begin == CharT{'['}) {
 6860|   144k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   144k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   144k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   144k|                return begin;
 6866|   144k|            }
 6867|   144k|            handler.on_character_set_string(set);
 6868|   144k|            return begin;
 6869|   144k|        }
 6870|   144k|        if (*begin == CharT{'/'}) {
 6871|   144k|            return parse_presentation_regex(begin, end, handler);
 6872|   144k|        }
 6873|   144k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   144k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   144k|            handler.on_error("Invalid type specifier in format string");
 6876|   144k|            return begin;
 6877|   144k|        }
 6878|   144k|        handler.on_type(type);
 6879|   144k|        return begin;
 6880|   144k|    };
 6881|       |
 6882|   144k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 143k, False: 1.10k]
  |  Branch (6882:28): [True: 2.43k, False: 141k]
  ------------------
 6883|   144k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 896, False: 1.54k]
  |  Branch (6883:36): [True: 844, False: 52]
  ------------------
 6884|    844|        return do_presentation();
 6885|    844|    }
 6886|       |
 6887|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   144k|    begin = parse_align(begin, end, handler);
 6893|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 143k]
  |  |  ------------------
  ------------------
 6894|    124|        handler.on_error("Unexpected end of format string");
 6895|    124|        return begin;
 6896|    124|    }
 6897|       |
 6898|   143k|    begin = parse_width(begin, end, handler);
 6899|   143k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 143k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|   143k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 18.7k, False: 125k]
  ------------------
 6905|  18.7k|        ++begin;
 6906|  18.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 18.7k]
  |  |  ------------------
  ------------------
 6907|     40|            handler.on_error("Unexpected end of format string");
 6908|     40|            return begin;
 6909|     40|        }
 6910|  18.7k|        begin = parse_precision(begin, end, handler);
 6911|  18.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 18.6k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  18.7k|    }
 6916|       |
 6917|   143k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 932, False: 142k]
  ------------------
 6918|    932|        handler.on_localized();
 6919|    932|        ++begin;
 6920|    932|    }
 6921|   143k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 143k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|   143k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 143k, False: 0]
  |  Branch (6926:25): [True: 137k, False: 6.40k]
  ------------------
 6927|   137k|        do_presentation();
 6928|   137k|    }
 6929|   143k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.36k, False: 141k]
  |  |  ------------------
  ------------------
 6930|  2.36k|        handler.on_error("Unexpected end of format string");
 6931|  2.36k|        return begin;
 6932|  2.36k|    }
 6933|       |
 6934|   141k|    return begin;
 6935|   143k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.43k|{
 6507|  2.43k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 842, False: 1.59k]
  |  Branch (6507:33): [True: 790, False: 52]
  ------------------
 6508|  2.43k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 286, False: 1.36k]
  |  Branch (6508:33): [True: 106, False: 180]
  ------------------
 6509|  2.43k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   138k|    auto do_presentation = [&]() -> const CharT* {
 6859|   138k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 24.4k, False: 113k]
  ------------------
 6860|  24.4k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  24.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 818, False: 23.6k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    818|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    818|                return begin;
 6866|    818|            }
 6867|  23.6k|            handler.on_character_set_string(set);
 6868|  23.6k|            return begin;
 6869|  24.4k|        }
 6870|   113k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 107k, False: 5.63k]
  ------------------
 6871|   107k|            return parse_presentation_regex(begin, end, handler);
 6872|   107k|        }
 6873|  5.63k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  5.63k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  5.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10k, False: 4.53k]
  |  |  ------------------
  ------------------
 6875|  1.10k|            handler.on_error("Invalid type specifier in format string");
 6876|  1.10k|            return begin;
 6877|  1.10k|        }
 6878|  4.53k|        handler.on_type(type);
 6879|  4.53k|        return begin;
 6880|  5.63k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  24.4k|{
 6697|  24.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  24.4k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  24.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  24.4k|    auto start = begin;
 6701|  24.4k|    ++begin;
 6702|       |
 6703|  24.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 24.4k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  24.4k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 3.64k, False: 20.8k]
  ------------------
 6710|  3.64k|        handler.on_charset_inverted();
 6711|  3.64k|        ++begin;
 6712|  3.64k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 3.61k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  3.61k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 3.56k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  3.61k|    }
 6723|  20.8k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 20.7k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  5.44M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 5.44M, False: 484]
  ------------------
 6728|  5.44M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  5.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 5.44M]
  |  |  ------------------
  ------------------
 6729|    224|            break;
 6730|    224|        }
 6731|       |
 6732|  5.44M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 23.6k, False: 5.42M]
  ------------------
 6733|  23.6k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  23.6k|        }
 6735|       |
 6736|  5.42M|        parse_presentation_set_literal(begin, end, handler);
 6737|  5.42M|    }
 6738|       |
 6739|    708|    SCN_UNLIKELY_ATTR
 6740|    708|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    708|    return {};
 6742|  24.3k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  5.42M|{
 6661|  5.42M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  5.42M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  5.42M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 5.42M]
  |  |  ------------------
  ------------------
 6665|    112|        return;
 6666|    112|    }
 6667|       |
 6668|  5.42M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 5.42M, False: 188]
  |  Branch (6668:25): [True: 32.2k, False: 5.39M]
  |  Branch (6668:49): [True: 32.1k, False: 34]
  ------------------
 6669|  5.42M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 31.6k, False: 502]
  ------------------
 6670|  31.6k|        ++begin;
 6671|       |
 6672|  31.6k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  31.6k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 31.6k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  31.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 31.5k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  31.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  31.5k|        return;
 6686|  31.6k|    }
 6687|       |
 6688|  5.39M|    handler.on_charset_single(cp_first);
 6689|  5.39M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  5.45M|{
 6637|  5.45M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  5.45M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  5.45M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  10.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 5.45M]
  |  |  |  Branch (859:45): [True: 70, False: 5.45M]
  |  |  |  Branch (859:45): [True: 26, False: 5.45M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  5.45M|    const auto cp =
 6646|  5.45M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  5.45M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  5.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 5.45M]
  |  |  ------------------
  ------------------
 6648|     86|        handler.on_error("Invalid encoding in format string");
 6649|     86|        return invalid_code_point;
 6650|     86|    }
 6651|       |
 6652|  5.45M|    begin += len;
 6653|  5.45M|    return cp;
 6654|  5.45M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  23.6k|    {
 6346|  23.6k|        m_specs.charset_string_data = fmt.data();
 6347|  23.6k|        m_specs.charset_string_size = fmt.size();
 6348|  23.6k|        on_type(presentation_type::string_set);
 6349|  23.6k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|   107k|{
 6749|   107k|#if !SCN_DISABLE_REGEX
 6750|   107k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|   107k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|   107k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|   107k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   215k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|   107k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|   107k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|   107k|        return begin;
 6757|   107k|    }
 6758|       |
 6759|   107k|    auto start = begin;
 6760|   107k|    ++begin;
 6761|       |
 6762|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 107k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|   107k|    handler.on_type(presentation_type::regex);
 6768|  39.3M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 39.3M, False: 560]
  ------------------
 6769|  39.3M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 224k, False: 39.1M]
  ------------------
 6770|   224k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 107k, False: 116k]
  ------------------
 6771|   107k|                break;
 6772|   107k|            }
 6773|   116k|            else {
 6774|   116k|                handler.on_type(presentation_type::regex_escaped);
 6775|   116k|            }
 6776|   224k|        }
 6777|  39.3M|    }
 6778|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 560, False: 107k]
  |  |  ------------------
  ------------------
 6779|    560|        handler.on_error("Unexpected end of regex in format string");
 6780|    560|        return begin;
 6781|    560|    }
 6782|       |
 6783|   107k|    auto regex_end = begin;
 6784|   107k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|   107k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 107k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|   107k|    handler.on_regex_pattern(regex_pattern);
 6790|   107k|    ++begin;
 6791|       |
 6792|   107k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 107k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|   107k|    regex_flags flags{regex_flags::none};
 6798|   107k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|   107k|        {{'m', regex_flags::multiline},
 6800|   107k|         {'s', regex_flags::singleline},
 6801|   107k|         {'i', regex_flags::nocase},
 6802|   107k|         {'n', regex_flags::nocapture}}};
 6803|   131k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 131k, False: 58]
  ------------------
 6804|   131k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 106k, False: 24.5k]
  ------------------
 6805|   106k|            break;
 6806|   106k|        }
 6807|  24.5k|        bool found_flag = false;
 6808|  65.4k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 65.4k, False: 304]
  ------------------
 6809|  65.4k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 41.1k, False: 24.2k]
  ------------------
 6810|  41.1k|                continue;
 6811|  41.1k|            }
 6812|  24.2k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 24.2k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  24.2k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  24.2k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 24.1k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  24.2k|#endif
 6830|  24.2k|            flags |= flag.second;
 6831|  24.2k|            found_flag = true;
 6832|  24.2k|            break;
 6833|  24.2k|        }
 6834|  24.5k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 304, False: 24.2k]
  ------------------
 6835|    304|            handler.on_error("Invalid flag in regex");
 6836|    304|            return begin;
 6837|    304|        }
 6838|  24.5k|    }
 6839|   106k|    handler.on_regex_flags(flags);
 6840|       |
 6841|   106k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 106k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|   106k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|   106k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|   107k|    {
 6354|   107k|        m_specs.charset_string_data = pattern.data();
 6355|   107k|        m_specs.charset_string_size = pattern.size();
 6356|   107k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  5.63k|{
 6455|  5.63k|    switch (type) {
 6456|    124|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 124, False: 5.51k]
  ------------------
 6457|    176|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 5.58k]
  ------------------
 6458|    176|            return presentation_type::int_binary;
 6459|    128|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 128, False: 5.50k]
  ------------------
 6460|    128|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 5.47k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 5.56k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    412|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 412, False: 5.22k]
  ------------------
 6466|    412|            return presentation_type::int_octal;
 6467|     96|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 96, False: 5.54k]
  ------------------
 6468|    148|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 5.58k]
  ------------------
 6469|    148|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 5.60k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 5.60k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 5.53k]
  ------------------
 6474|    518|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 412, False: 5.22k]
  ------------------
 6475|    518|            return presentation_type::float_hex;
 6476|     88|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 88, False: 5.54k]
  ------------------
 6477|    158|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 5.56k]
  ------------------
 6478|    158|            return presentation_type::float_scientific;
 6479|    250|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 250, False: 5.38k]
  ------------------
 6480|    356|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 5.53k]
  ------------------
 6481|    356|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 5.50k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 5.57k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.65k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.65k, False: 3.97k]
  ------------------
 6486|  1.65k|            return presentation_type::string;
 6487|    376|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 376, False: 5.26k]
  ------------------
 6488|    376|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 5.60k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 5.55k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 5.63k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 5.63k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  1.10k|        default:
  ------------------
  |  Branch (6499:9): [True: 1.10k, False: 4.53k]
  ------------------
 6500|  1.10k|            return presentation_type::none;
 6501|  5.63k|    }
 6502|  5.63k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   144k|{
 6532|   144k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   144k|    auto check_align = [](wchar_t ch) {
 6535|   144k|        switch (ch) {
 6536|   144k|            case L'<':
 6537|   144k|                return align_type::left;
 6538|   144k|            case L'>':
 6539|   144k|                return align_type::right;
 6540|   144k|            case L'^':
 6541|   144k|                return align_type::center;
 6542|   144k|            default:
 6543|   144k|                return align_type::none;
 6544|   144k|        }
 6545|   144k|    };
 6546|       |
 6547|   144k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   144k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 144k]
  |  |  |  Branch (859:45): [True: 38, False: 144k]
  |  |  |  Branch (859:45): [True: 4, False: 144k]
  |  |  ------------------
  ------------------
 6549|   144k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|   144k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   144k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   144k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   144k|    const auto begin_before_fill = begin;
 6559|   144k|    begin += potential_fill_len;
 6560|       |
 6561|   144k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.06k, False: 142k]
  ------------------
 6562|  1.06k|        return begin_before_fill;
 6563|  1.06k|    }
 6564|       |
 6565|   142k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   142k|    const auto begin_after_fill = begin;
 6567|   142k|    ++begin;
 6568|       |
 6569|   142k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 142k, False: 946]
  ------------------
 6570|   142k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 141k]
  |  |  ------------------
  ------------------
 6571|     62|            handler.on_error("Invalid fill character '{' in format string");
 6572|     62|            return begin;
 6573|     62|        }
 6574|   141k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 16.8k, False: 125k]
  ------------------
 6575|  16.8k|            return begin_before_fill;
 6576|  16.8k|        }
 6577|   141k|    }
 6578|       |
 6579|   126k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 110k, False: 15.7k]
  ------------------
 6580|   110k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 6.89k, False: 103k]
  ------------------
 6581|  6.89k|            handler.on_align(potential_align_on_fill);
 6582|  6.89k|            return begin_after_fill;
 6583|  6.89k|        }
 6584|   103k|        return begin_before_fill;
 6585|   110k|    }
 6586|       |
 6587|  15.7k|    handler.on_fill(potential_fill);
 6588|  15.7k|    handler.on_align(potential_align_after_fill);
 6589|  15.7k|    return begin;
 6590|   126k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   144k|{
 6514|   144k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   144k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   144k|        return 1;
 6517|   144k|    }
 6518|   144k|    else {
 6519|   144k|        const auto lengths =
 6520|   144k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   144k|            "\3\4";
 6522|   144k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   144k|        return len;
 6524|   144k|    }
 6525|   144k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   286k|    auto check_align = [](wchar_t ch) {
 6535|   286k|        switch (ch) {
 6536|  1.89k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.89k, False: 285k]
  ------------------
 6537|  1.89k|                return align_type::left;
 6538|  2.99k|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 2.99k, False: 283k]
  ------------------
 6539|  2.99k|                return align_type::right;
 6540|  19.1k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 19.1k, False: 267k]
  ------------------
 6541|  19.1k|                return align_type::center;
 6542|   262k|            default:
  ------------------
  |  Branch (6542:13): [True: 262k, False: 24.0k]
  ------------------
 6543|   262k|                return align_type::none;
 6544|   286k|        }
 6545|   286k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  15.7k|    {
 6268|  15.7k|        m_specs.fill = fill;
 6269|  15.7k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  15.7k|    {
 6149|  15.7k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  15.7k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  15.7k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  33.1k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 17.3k, False: 15.7k]
  ------------------
 6153|  17.3k|                SCN_GCC_PUSH
 6154|  17.3k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  17.3k|                m_data[i] = s[i];
 6156|  17.3k|                SCN_GCC_POP
 6157|  17.3k|            }
 6158|  15.7k|            m_size = static_cast<unsigned char>(s.size());
 6159|  15.7k|        }
 6160|  15.7k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  15.7k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  15.7k|            m_data[1] =
 6163|  15.7k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  15.7k|            if (s.size() == 1) {
 6165|  15.7k|                return;
 6166|  15.7k|            }
 6167|  15.7k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  15.7k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  15.7k|        }
 6170|  15.7k|        else {
 6171|  15.7k|            const auto front = static_cast<unsigned>(s.front());
 6172|  15.7k|            m_data[0] = static_cast<char>(front);
 6173|  15.7k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  15.7k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  15.7k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  15.7k|        }
 6177|  15.7k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   143k|{
 6597|   143k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   143k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 27.4k, False: 116k]
  |  Branch (6599:33): [True: 7.80k, False: 19.6k]
  ------------------
 6600|  7.80k|        int width = parse_simple_int(begin, end);
 6601|  7.80k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  7.80k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.77k, False: 34]
  |  |  ------------------
  ------------------
 6602|  7.77k|            handler.on_width(width);
 6603|  7.77k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  7.80k|    }
 6609|   143k|    return begin;
 6610|   143k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  18.7k|{
 6617|  18.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  18.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 18.6k, False: 38]
  |  Branch (6619:33): [True: 18.6k, False: 46]
  ------------------
 6620|  18.6k|        int prec = parse_simple_int(begin, end);
 6621|  18.6k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  18.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.5k, False: 48]
  |  |  ------------------
  ------------------
 6622|  18.5k|            handler.on_precision(prec);
 6623|  18.5k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  18.6k|    }
 6629|  18.6k|    return begin;
 6630|  18.7k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    932|    {
 7127|    932|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    932|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 834, False: 98]
  ------------------
 7129|    932|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 736, False: 98]
  ------------------
 7130|    932|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 638, False: 98]
  ------------------
 7131|    932|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 540, False: 98]
  ------------------
 7132|    540|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    540|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    540|        }
 7137|       |
 7138|    392|        Handler::on_localized();
 7139|    392|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   140k|{
 8417|   140k|#define SCN_VISIT(Type)                                         \
 8418|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   140k|    }                                                           \
 8421|   140k|    else {                                                      \
 8422|   140k|        return vis(monostate_val);                              \
 8423|   140k|    }
 8424|       |
 8425|   140k|    monostate monostate_val{};
 8426|       |
 8427|   140k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 140k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 140k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  15.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 15.6k, False: 124k]
  ------------------
 8433|  15.6k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.6k|    }                                                           \
  |  | 8421|  15.6k|    else {                                                      \
  |  | 8422|  15.6k|        return vis(monostate_val);                              \
  |  | 8423|  15.6k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 140k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 140k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 140k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 140k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  15.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 15.6k, False: 124k]
  ------------------
 8443|  15.6k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.6k|    }                                                           \
  |  | 8421|  15.6k|    else {                                                      \
  |  | 8422|  15.6k|        return vis(monostate_val);                              \
  |  | 8423|  15.6k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 140k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 140k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  15.5k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 15.5k, False: 124k]
  ------------------
 8449|  15.5k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  15.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.5k|    }                                                           \
  |  | 8421|  15.5k|    else {                                                      \
  |  | 8422|  15.5k|        return vis(monostate_val);                              \
  |  | 8423|  15.5k|    }
  ------------------
 8450|  15.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 15.6k, False: 124k]
  ------------------
 8451|  15.6k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.6k|    }                                                           \
  |  | 8421|  15.6k|    else {                                                      \
  |  | 8422|  15.6k|        return vis(monostate_val);                              \
  |  | 8423|  15.6k|    }
  ------------------
 8452|  15.5k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 15.5k, False: 124k]
  ------------------
 8453|  15.5k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  15.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.5k|    }                                                           \
  |  | 8421|  15.5k|    else {                                                      \
  |  | 8422|  15.5k|        return vis(monostate_val);                              \
  |  | 8423|  15.5k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 140k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 140k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 140k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  15.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 15.6k, False: 124k]
  ------------------
 8461|  15.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.6k|    }                                                           \
  |  | 8421|  15.6k|    else {                                                      \
  |  | 8422|  15.6k|        return vis(monostate_val);                              \
  |  | 8423|  15.6k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 140k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  15.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 15.5k, False: 124k]
  ------------------
 8465|  15.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  15.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.5k|    }                                                           \
  |  | 8421|  15.5k|    else {                                                      \
  |  | 8422|  15.5k|        return vis(monostate_val);                              \
  |  | 8423|  15.5k|    }
  ------------------
 8466|  15.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 15.5k, False: 124k]
  ------------------
 8467|  15.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  15.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.5k|    }                                                           \
  |  | 8421|  15.5k|    else {                                                      \
  |  | 8422|  15.5k|        return vis(monostate_val);                              \
  |  | 8423|  15.5k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 140k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  15.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 15.5k, False: 124k]
  ------------------
 8471|  15.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  15.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  15.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  15.5k|    }                                                           \
  |  | 8421|  15.5k|    else {                                                      \
  |  | 8422|  15.5k|        return vis(monostate_val);                              \
  |  | 8423|  15.5k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 140k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 140k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 140k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 140k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 140k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   140k|            SCN_CLANG_POP
 8495|   140k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  17.5k|    {
 3330|  17.5k|        return m_iterator;
 3331|  17.5k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  3.49k|    {
 1430|  3.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  3.49k|    {
  437|  3.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.70k|    {
 1177|  3.70k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  9.30k|    {
 3334|  9.30k|        return m_sentinel;
 3335|  9.30k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    212|    {
 1476|    212|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    212|    {
  447|    212|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  8.33k|    {
 3316|  8.33k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    240|    {
 1598|    240|        return has_value();
 1599|    240|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  7.33k|    {
  485|  7.33k|        return m_has_value;
  486|  7.33k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    162|    {
 1653|    162|        return value();
 1654|    162|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  3.49k|    {
 1627|  3.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.49k|        return this->get_value();
 1629|  3.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.49k|    {
  451|  3.49k|        return m_value;
  452|  3.49k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  3.46k|    {
 1837|  3.46k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.46k|                                            std::forward<F>(f));
 1839|  3.46k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  3.46k|{
 1323|  3.46k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.46k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.46k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.46k|            return result(*std::forward<Exp>(exp));
 1327|  3.46k|        }
 1328|       |
 1329|  3.46k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.46k|        return result(unexpect, monostate{});
 1331|  3.46k|    }
 1332|  3.46k|    else {
 1333|  3.46k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.46k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.46k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.33k, False: 134]
  |  |  ------------------
  ------------------
 1335|  3.46k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.46k|                   : result(unexpect,
 1337|    134|                            trivial_invoke(std::forward<F>(f),
 1338|    134|                                           std::forward<Exp>(exp).error()));
 1339|  3.46k|    }
 1340|  3.46k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  3.33k|    {
 1663|  3.33k|        return std::move(value());
 1664|  3.33k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  3.33k|    {
 1430|  3.33k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  3.33k|    {
  437|  3.33k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.46k|    {
 1177|  3.46k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    134|    {
 1614|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    134|        return std::move(this->get_unexpected().error());
 1616|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    134|    {
 1486|    134|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    134|    {
  447|    134|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  3.46k|    {
 1598|  3.46k|        return has_value();
 1599|  3.46k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.93k|    {
  485|  6.93k|        return m_has_value;
  486|  6.93k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    134|    {
 1604|    134|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    134|        return this->get_unexpected().error();
 1606|    134|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    134|    {
  468|    134|        return m_unexpected;
  469|    134|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  3.33k|    {
 1663|  3.33k|        return std::move(value());
 1664|  3.33k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  3.33k|    {
 1627|  3.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.33k|        return this->get_value();
 1629|  3.33k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.33k|    {
  451|  3.33k|        return m_value;
  452|  3.33k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   506k|    {
 5466|   506k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 506k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   506k|        return static_cast<std::size_t>(m_desc &
 5471|   506k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   506k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   605k|    {
 5491|   605k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   605k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  98.8k|    {
 5434|  98.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.8k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  98.8k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 98.7k]
  |  |  ------------------
  ------------------
 5442|     92|            return {};
 5443|     92|        }
 5444|       |
 5445|  98.7k|        const auto t = type(id);
 5446|  98.7k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.56k, False: 97.2k]
  |  |  ------------------
  ------------------
 5447|  1.56k|            return {};
 5448|  1.56k|        }
 5449|       |
 5450|  97.2k|        basic_scan_arg<Context> arg;
 5451|  97.2k|        arg.m_type = t;
 5452|  97.2k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 97.2k, False: 0]
  ------------------
 5453|  97.2k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  97.2k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  97.2k|        return arg;
 5459|  98.7k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  98.8k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  98.7k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  98.7k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  98.7k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  98.7k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  98.7k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  97.2k|    {
 5495|  97.2k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  97.2k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|   193k|    {
 5247|   193k|        return m_type != detail::arg_type::none_type;
 5248|   193k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.83k|{
 8417|  5.83k|#define SCN_VISIT(Type)                                         \
 8418|  5.83k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.83k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.83k|    }                                                           \
 8421|  5.83k|    else {                                                      \
 8422|  5.83k|        return vis(monostate_val);                              \
 8423|  5.83k|    }
 8424|       |
 8425|  5.83k|    monostate monostate_val{};
 8426|       |
 8427|  5.83k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.83k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.83k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    648|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 648, False: 5.18k]
  ------------------
 8433|    648|            SCN_VISIT(int);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.83k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.83k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.83k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.83k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    648|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 648, False: 5.18k]
  ------------------
 8443|    648|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.83k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.83k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    648|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 648, False: 5.18k]
  ------------------
 8449|    648|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8450|    648|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 648, False: 5.18k]
  ------------------
 8451|    648|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 5.83k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|    648|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 648, False: 5.18k]
  ------------------
 8455|    648|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.83k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.83k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    648|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 648, False: 5.18k]
  ------------------
 8461|    648|            SCN_VISIT(double);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.83k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.83k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|    648|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 648, False: 5.18k]
  ------------------
 8467|    648|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8468|    648|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 648, False: 5.18k]
  ------------------
 8469|    648|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8470|    648|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 648, False: 5.18k]
  ------------------
 8471|    648|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    648|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    648|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    648|    }                                                           \
  |  | 8421|    648|    else {                                                      \
  |  | 8422|    648|        return vis(monostate_val);                              \
  |  | 8423|    648|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.83k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.83k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.83k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.83k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.83k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.83k|            SCN_CLANG_POP
 8495|  5.83k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   506k|    {
 5545|   506k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   506k|    {
 8056|   506k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   506k|{
 7044|   506k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   506k|    handler.check_args_exhausted();
 7046|   506k|    return handler.get_error();
 7047|   506k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   506k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   506k|    auto begin = format.data();
 7013|   506k|    auto it = begin;
 7014|   506k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.04G|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.04G, False: 154k]
  ------------------
 7017|  1.04G|        const auto ch = *it++;
 7018|  1.04G|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 99.9k, False: 1.04G]
  ------------------
 7019|  99.9k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  99.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  99.9k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 95.1k, False: 4.75k]
  ------------------
 7023|  95.1k|                return;
 7024|  95.1k|            }
 7025|  99.9k|        }
 7026|  1.04G|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 292k, False: 1.04G]
  ------------------
 7027|   292k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   583k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 256k, False: 35.7k]
  |  |  |  Branch (859:45): [True: 1.40k, False: 290k]
  |  |  |  Branch (859:45): [True: 255k, False: 35.7k]
  |  |  ------------------
  ------------------
 7028|   256k|                handler.on_error("Unmatched '}' in format string");
 7029|   256k|                return;
 7030|   256k|            }
 7031|       |
 7032|  35.7k|            handler.on_literal_text(begin, it);
 7033|  35.7k|            begin = ++it;
 7034|  35.7k|        }
 7035|  1.04G|    }
 7036|       |
 7037|   154k|    handler.on_literal_text(begin, end);
 7038|   154k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  99.9k|{
 6942|  99.9k|    struct id_adapter {
 6943|  99.9k|        constexpr void operator()()
 6944|  99.9k|        {
 6945|  99.9k|            arg_id = handler.on_arg_id();
 6946|  99.9k|        }
 6947|  99.9k|        constexpr void operator()(std::size_t id)
 6948|  99.9k|        {
 6949|  99.9k|            arg_id = handler.on_arg_id(id);
 6950|  99.9k|        }
 6951|       |
 6952|  99.9k|        constexpr void on_error(const char* msg)
 6953|  99.9k|        {
 6954|  99.9k|            SCN_UNLIKELY_ATTR
 6955|  99.9k|            handler.on_error(msg);
 6956|  99.9k|        }
 6957|       |
 6958|  99.9k|        Handler& handler;
 6959|  99.9k|        std::size_t arg_id;
 6960|  99.9k|    };
 6961|       |
 6962|  99.9k|    ++begin;
 6963|  99.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  99.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 99.8k]
  |  |  ------------------
  ------------------
 6964|     88|        handler.on_error("Unexpected end of replacement field");
 6965|     88|        return begin;
 6966|     88|    }
 6967|       |
 6968|  99.8k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 5.76k, False: 94.0k]
  ------------------
 6969|  5.76k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  5.76k|    }
 6971|  94.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 112, False: 93.9k]
  ------------------
 6972|    112|        handler.on_literal_text(begin, begin + 1);
 6973|    112|    }
 6974|  93.9k|    else {
 6975|  93.9k|        auto adapter = id_adapter{handler, 0};
 6976|  93.9k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  93.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  93.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 93.8k]
  |  |  ------------------
  ------------------
 6979|    102|            handler.on_error("Missing '}' in format string");
 6980|    102|            return begin;
 6981|    102|        }
 6982|       |
 6983|  93.8k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 212, False: 93.6k]
  ------------------
 6984|    212|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    212|        }
 6986|  93.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 92.9k, False: 686]
  ------------------
 6987|  92.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 92.8k]
  |  |  ------------------
  ------------------
 6988|     64|                handler.on_error("Unexpected end of replacement field");
 6989|     64|                return begin;
 6990|     64|            }
 6991|  92.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  92.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.46k, False: 89.4k]
  |  |  |  Branch (859:45): [True: 0, False: 92.8k]
  |  |  |  Branch (859:45): [True: 3.46k, False: 89.4k]
  |  |  ------------------
  ------------------
 6993|  3.46k|                handler.on_error("Unknown format specifier");
 6994|  3.46k|                return begin;
 6995|  3.46k|            }
 6996|  92.8k|        }
 6997|    686|        else {
 6998|    686|            SCN_UNLIKELY_ATTR
 6999|    686|            handler.on_error("Missing '}' in format string");
 7000|    686|            return begin;
 7001|    686|        }
 7002|  93.8k|    }
 7003|  95.5k|    return begin + 1;
 7004|  99.8k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  98.8k|    {
 8039|  98.8k|        return m_args.get(id);
 8040|  98.8k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  5.98k|    {
 8044|  5.98k|        return m_args;
 8045|  5.98k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  94.8k|    {
 8049|  94.8k|        return m_locale;
 8050|  94.8k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  98.5k|    {
 5566|  98.5k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 98.5k]
  |  |  ------------------
  ------------------
 5567|     48|            on_error(
 5568|     48|                "Cannot switch from manual to automatic argument indexing");
 5569|     48|            return 0;
 5570|     48|        }
 5571|       |
 5572|  98.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  98.5k|        do_check_arg_id(id);
 5574|  98.5k|        return id;
 5575|  98.5k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    176|    {
 5590|    176|        return detail::handle_error(
 5591|    176|            scan_error{scan_error::invalid_format_string, msg});
 5592|    176|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  98.7k|{
 6054|  98.7k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  98.7k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  98.7k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  93.9k|{
 6443|  93.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  93.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  93.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  93.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 93.9k, False: 0]
  |  Branch (6444:26): [True: 1.15k, False: 92.8k]
  ------------------
 6445|  1.15k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  1.15k|    }
 6447|       |
 6448|  92.8k|    handler();
 6449|  92.8k|    return begin;
 6450|  93.9k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  1.15k|{
 6413|  1.15k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  1.15k|    CharT c = *begin;
 6416|  1.15k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 198, False: 952]
  |  Branch (6416:27): [True: 342, False: 610]
  ------------------
 6417|    540|        handler.on_error("Invalid argument ID");
 6418|    540|        return begin;
 6419|    540|    }
 6420|       |
 6421|    610|    int idx = 0;
 6422|    610|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 256, False: 354]
  ------------------
 6423|    256|        idx = parse_simple_int(begin, end);
 6424|    256|    }
 6425|    354|    else {
 6426|    354|        ++begin;
 6427|    354|    }
 6428|       |
 6429|    610|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 102, False: 508]
  |  Branch (6429:26): [True: 296, False: 212]
  |  Branch (6429:50): [True: 146, False: 150]
  ------------------
 6430|    248|        handler.on_error("Invalid argument ID");
 6431|    248|        return begin;
 6432|    248|    }
 6433|    362|    handler(idx);
 6434|       |
 6435|    362|    return begin;
 6436|    610|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|    788|        {
 6954|    788|            SCN_UNLIKELY_ATTR
 6955|    788|            handler.on_error(msg);
 6956|    788|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  75.5k|{
 6392|  75.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  75.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  75.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  75.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  75.5k|    unsigned long long value = 0;
 6396|  77.6k|    do {
 6397|  77.6k|        value *= 10;
 6398|  77.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  77.6k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 77.6k]
  ------------------
 6400|  77.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  77.6k|        ++begin;
 6404|  77.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 77.3k, False: 340]
  |  Branch (6404:30): [True: 8.71k, False: 68.6k]
  |  Branch (6404:47): [True: 2.09k, False: 6.61k]
  ------------------
 6405|  75.5k|    return static_cast<int>(value);
 6406|  75.5k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    362|        {
 6949|    362|            arg_id = handler.on_arg_id(id);
 6950|    362|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    362|    {
 5579|    362|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 234]
  |  |  ------------------
  ------------------
 5580|    128|            on_error(
 5581|    128|                "Cannot switch from manual to automatic argument indexing");
 5582|    128|            return;
 5583|    128|        }
 5584|    234|        m_next_arg_id = -1;
 5585|    234|        do_check_arg_id(id);
 5586|    234|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  92.8k|        {
 6945|  92.8k|            arg_id = handler.on_arg_id();
 6946|  92.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|   185k|    {
 5252|   185k|        return m_type;
 5253|   185k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  88.8k|    {
 5561|  88.8k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  88.8k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|   181k|    {
 5550|   181k|        return m_format.data();
 5551|   181k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  92.8k|    {
 7122|  92.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  92.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  92.8k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  92.8k|{
 6858|  92.8k|    auto do_presentation = [&]() -> const CharT* {
 6859|  92.8k|        if (*begin == CharT{'['}) {
 6860|  92.8k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  92.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  92.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  92.8k|                return begin;
 6866|  92.8k|            }
 6867|  92.8k|            handler.on_character_set_string(set);
 6868|  92.8k|            return begin;
 6869|  92.8k|        }
 6870|  92.8k|        if (*begin == CharT{'/'}) {
 6871|  92.8k|            return parse_presentation_regex(begin, end, handler);
 6872|  92.8k|        }
 6873|  92.8k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  92.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  92.8k|            handler.on_error("Invalid type specifier in format string");
 6876|  92.8k|            return begin;
 6877|  92.8k|        }
 6878|  92.8k|        handler.on_type(type);
 6879|  92.8k|        return begin;
 6880|  92.8k|    };
 6881|       |
 6882|  92.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 91.8k, False: 1.03k]
  |  Branch (6882:28): [True: 3.60k, False: 88.2k]
  ------------------
 6883|  92.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 360, False: 3.24k]
  |  Branch (6883:36): [True: 254, False: 106]
  ------------------
 6884|    254|        return do_presentation();
 6885|    254|    }
 6886|       |
 6887|  92.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  92.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 92.6k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  92.6k|    begin = parse_align(begin, end, handler);
 6893|  92.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  92.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 92.5k]
  |  |  ------------------
  ------------------
 6894|    138|        handler.on_error("Unexpected end of format string");
 6895|    138|        return begin;
 6896|    138|    }
 6897|       |
 6898|  92.5k|    begin = parse_width(begin, end, handler);
 6899|  92.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  92.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 92.3k]
  |  |  ------------------
  ------------------
 6900|    106|        handler.on_error("Unexpected end of format string");
 6901|    106|        return begin;
 6902|    106|    }
 6903|       |
 6904|  92.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 4.25k, False: 88.1k]
  ------------------
 6905|  4.25k|        ++begin;
 6906|  4.25k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 4.22k]
  |  |  ------------------
  ------------------
 6907|     38|            handler.on_error("Unexpected end of format string");
 6908|     38|            return begin;
 6909|     38|        }
 6910|  4.22k|        begin = parse_precision(begin, end, handler);
 6911|  4.22k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 158, False: 4.06k]
  |  |  ------------------
  ------------------
 6912|    158|            handler.on_error("Unexpected end of format string");
 6913|    158|            return begin;
 6914|    158|        }
 6915|  4.22k|    }
 6916|       |
 6917|  92.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 856, False: 91.3k]
  ------------------
 6918|    856|        handler.on_localized();
 6919|    856|        ++begin;
 6920|    856|    }
 6921|  92.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 92.1k]
  |  |  ------------------
  ------------------
 6922|     66|        handler.on_error("Unexpected end of format string");
 6923|     66|        return begin;
 6924|     66|    }
 6925|       |
 6926|  92.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 92.1k, False: 0]
  |  Branch (6926:25): [True: 86.0k, False: 6.09k]
  ------------------
 6927|  86.0k|        do_presentation();
 6928|  86.0k|    }
 6929|  92.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  92.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.18k, False: 89.9k]
  |  |  ------------------
  ------------------
 6930|  2.18k|        handler.on_error("Unexpected end of format string");
 6931|  2.18k|        return begin;
 6932|  2.18k|    }
 6933|       |
 6934|  89.9k|    return begin;
 6935|  92.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  3.60k|{
 6507|  3.60k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 234, False: 3.36k]
  |  Branch (6507:33): [True: 200, False: 34]
  ------------------
 6508|  3.60k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 230, False: 3.17k]
  |  Branch (6508:33): [True: 160, False: 70]
  ------------------
 6509|  3.60k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  86.2k|    auto do_presentation = [&]() -> const CharT* {
 6859|  86.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 4.73k, False: 81.5k]
  ------------------
 6860|  4.73k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.73k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 766, False: 3.96k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    766|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    766|                return begin;
 6866|    766|            }
 6867|  3.96k|            handler.on_character_set_string(set);
 6868|  3.96k|            return begin;
 6869|  4.73k|        }
 6870|  81.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 77.5k, False: 4.01k]
  ------------------
 6871|  77.5k|            return parse_presentation_regex(begin, end, handler);
 6872|  77.5k|        }
 6873|  4.01k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  4.01k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 728, False: 3.29k]
  |  |  ------------------
  ------------------
 6875|    728|            handler.on_error("Invalid type specifier in format string");
 6876|    728|            return begin;
 6877|    728|        }
 6878|  3.29k|        handler.on_type(type);
 6879|  3.29k|        return begin;
 6880|  4.01k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  4.73k|{
 6697|  4.73k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.73k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.73k|    auto start = begin;
 6701|  4.73k|    ++begin;
 6702|       |
 6703|  4.73k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 4.69k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     40|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     40|        return {};
 6708|     40|    }
 6709|  4.69k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.41k, False: 3.28k]
  ------------------
 6710|  1.41k|        handler.on_charset_inverted();
 6711|  1.41k|        ++begin;
 6712|  1.41k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 1.36k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     48|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     48|            return {};
 6717|     48|        }
 6718|  1.36k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 30, False: 1.33k]
  ------------------
 6719|     30|            handler.on_charset_single(char32_t{']'});
 6720|     30|            ++begin;
 6721|     30|        }
 6722|  1.36k|    }
 6723|  3.28k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 3.24k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  54.1k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 53.7k, False: 464]
  ------------------
 6728|  53.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  53.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 53.5k]
  |  |  ------------------
  ------------------
 6729|    180|            break;
 6730|    180|        }
 6731|       |
 6732|  53.5k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 3.96k, False: 49.5k]
  ------------------
 6733|  3.96k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  3.96k|        }
 6735|       |
 6736|  49.5k|        parse_presentation_set_literal(begin, end, handler);
 6737|  49.5k|    }
 6738|       |
 6739|    644|    SCN_UNLIKELY_ATTR
 6740|    644|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    644|    return {};
 6742|  4.61k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  49.5k|{
 6661|  49.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  49.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  49.5k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  49.5k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 49.4k]
  |  |  ------------------
  ------------------
 6665|    138|        return;
 6666|    138|    }
 6667|       |
 6668|  49.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 49.3k, False: 102]
  |  Branch (6668:25): [True: 1.28k, False: 48.0k]
  |  Branch (6668:49): [True: 1.24k, False: 48]
  ------------------
 6669|  49.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 978, False: 262]
  ------------------
 6670|    978|        ++begin;
 6671|       |
 6672|    978|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    978|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    978|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 944]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|    944|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 898]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     46|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     46|            return;
 6682|     46|        }
 6683|       |
 6684|    898|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    898|        return;
 6686|    944|    }
 6687|       |
 6688|  48.4k|    handler.on_charset_single(cp_first);
 6689|  48.4k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  50.5k|{
 6637|  50.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  50.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  50.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 50.5k]
  |  |  |  Branch (859:45): [True: 0, False: 50.5k]
  |  |  |  Branch (859:45): [True: 0, False: 50.5k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  50.5k|    const auto cp =
 6646|  50.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  50.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 50.3k]
  |  |  ------------------
  ------------------
 6648|    172|        handler.on_error("Invalid encoding in format string");
 6649|    172|        return invalid_code_point;
 6650|    172|    }
 6651|       |
 6652|  50.3k|    begin += len;
 6653|  50.3k|    return cp;
 6654|  50.5k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  3.96k|    {
 6346|  3.96k|        m_specs.charset_string_data = fmt.data();
 6347|  3.96k|        m_specs.charset_string_size = fmt.size();
 6348|  3.96k|        on_type(presentation_type::string_set);
 6349|  3.96k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  77.5k|{
 6749|  77.5k|#if !SCN_DISABLE_REGEX
 6750|  77.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  77.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  77.5k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  77.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  77.5k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   155k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  77.5k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  77.5k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  77.5k|        return begin;
 6757|  77.5k|    }
 6758|       |
 6759|  77.5k|    auto start = begin;
 6760|  77.5k|    ++begin;
 6761|       |
 6762|  77.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 77.5k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  77.5k|    handler.on_type(presentation_type::regex);
 6768|  8.10M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 8.10M, False: 342]
  ------------------
 6769|  8.10M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 85.2k, False: 8.01M]
  ------------------
 6770|  85.2k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 77.1k, False: 8.08k]
  ------------------
 6771|  77.1k|                break;
 6772|  77.1k|            }
 6773|  8.08k|            else {
 6774|  8.08k|                handler.on_type(presentation_type::regex_escaped);
 6775|  8.08k|            }
 6776|  85.2k|        }
 6777|  8.10M|    }
 6778|  77.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 77.1k]
  |  |  ------------------
  ------------------
 6779|    342|        handler.on_error("Unexpected end of regex in format string");
 6780|    342|        return begin;
 6781|    342|    }
 6782|       |
 6783|  77.1k|    auto regex_end = begin;
 6784|  77.1k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  77.1k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  77.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 77.1k]
  |  |  ------------------
  ------------------
 6786|     52|        handler.on_error("Invalid (empty) regex in format string");
 6787|     52|        return begin;
 6788|     52|    }
 6789|  77.1k|    handler.on_regex_pattern(regex_pattern);
 6790|  77.1k|    ++begin;
 6791|       |
 6792|  77.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  77.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 77.0k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  77.0k|    regex_flags flags{regex_flags::none};
 6798|  77.0k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  77.0k|        {{'m', regex_flags::multiline},
 6800|  77.0k|         {'s', regex_flags::singleline},
 6801|  77.0k|         {'i', regex_flags::nocase},
 6802|  77.0k|         {'n', regex_flags::nocapture}}};
 6803|  86.5k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 86.5k, False: 82]
  ------------------
 6804|  86.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 76.8k, False: 9.69k]
  ------------------
 6805|  76.8k|            break;
 6806|  76.8k|        }
 6807|  9.69k|        bool found_flag = false;
 6808|  28.1k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 28.1k, False: 150]
  ------------------
 6809|  28.1k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 18.6k, False: 9.54k]
  ------------------
 6810|  18.6k|                continue;
 6811|  18.6k|            }
 6812|  9.54k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 28, False: 9.51k]
  ------------------
 6813|     28|                handler.on_error("Flag set multiple times in regex");
 6814|     28|                return begin;
 6815|     28|            }
 6816|  9.51k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  9.51k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 76, False: 9.43k]
  ------------------
 6818|       |                // clang-format off
 6819|     76|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     76|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  9.51k|#endif
 6830|  9.51k|            flags |= flag.second;
 6831|  9.51k|            found_flag = true;
 6832|  9.51k|            break;
 6833|  9.54k|        }
 6834|  9.66k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 150, False: 9.51k]
  ------------------
 6835|    150|            handler.on_error("Invalid flag in regex");
 6836|    150|            return begin;
 6837|    150|        }
 6838|  9.66k|    }
 6839|  76.9k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  76.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 76.8k]
  |  |  ------------------
  ------------------
 6842|     82|        handler.on_error("Unexpected end of regex in format string");
 6843|     82|        return begin;
 6844|     82|    }
 6845|       |
 6846|  76.8k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  76.9k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  77.1k|    {
 6354|  77.1k|        m_specs.charset_string_data = pattern.data();
 6355|  77.1k|        m_specs.charset_string_size = pattern.size();
 6356|  77.1k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  4.01k|{
 6455|  4.01k|    switch (type) {
 6456|     88|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 88, False: 3.93k]
  ------------------
 6457|    122|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 3.98k]
  ------------------
 6458|    122|            return presentation_type::int_binary;
 6459|     88|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 88, False: 3.93k]
  ------------------
 6460|     88|            return presentation_type::int_decimal;
 6461|    118|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 118, False: 3.90k]
  ------------------
 6462|    118|            return presentation_type::int_generic;
 6463|    190|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 190, False: 3.82k]
  ------------------
 6464|    190|            return presentation_type::int_unsigned_decimal;
 6465|    168|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 168, False: 3.85k]
  ------------------
 6466|    168|            return presentation_type::int_octal;
 6467|    202|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 202, False: 3.81k]
  ------------------
 6468|    254|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 3.96k]
  ------------------
 6469|    254|            return presentation_type::int_hex;
 6470|     66|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 66, False: 3.95k]
  ------------------
 6471|    118|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 52, False: 3.96k]
  ------------------
 6472|    118|            return presentation_type::int_arbitrary_base;
 6473|    178|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 178, False: 3.84k]
  ------------------
 6474|    348|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 170, False: 3.84k]
  ------------------
 6475|    348|            return presentation_type::float_hex;
 6476|    160|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 160, False: 3.85k]
  ------------------
 6477|    194|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 3.98k]
  ------------------
 6478|    194|            return presentation_type::float_scientific;
 6479|    102|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 102, False: 3.91k]
  ------------------
 6480|    226|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 124, False: 3.89k]
  ------------------
 6481|    226|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 3.98k]
  ------------------
 6483|     68|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 34, False: 3.98k]
  ------------------
 6484|     68|            return presentation_type::float_general;
 6485|    988|        case 's':
  ------------------
  |  Branch (6485:9): [True: 988, False: 3.03k]
  ------------------
 6486|    988|            return presentation_type::string;
 6487|    286|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 286, False: 3.73k]
  ------------------
 6488|    286|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 3.98k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     88|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 88, False: 3.93k]
  ------------------
 6492|     88|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 4.01k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 4.01k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    728|        default:
  ------------------
  |  Branch (6499:9): [True: 728, False: 3.29k]
  ------------------
 6500|    728|            return presentation_type::none;
 6501|  4.01k|    }
 6502|  4.01k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  92.6k|{
 6532|  92.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  92.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  92.6k|    auto check_align = [](wchar_t ch) {
 6535|  92.6k|        switch (ch) {
 6536|  92.6k|            case L'<':
 6537|  92.6k|                return align_type::left;
 6538|  92.6k|            case L'>':
 6539|  92.6k|                return align_type::right;
 6540|  92.6k|            case L'^':
 6541|  92.6k|                return align_type::center;
 6542|  92.6k|            default:
 6543|  92.6k|                return align_type::none;
 6544|  92.6k|        }
 6545|  92.6k|    };
 6546|       |
 6547|  92.6k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  92.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 92.6k]
  |  |  |  Branch (859:45): [True: 0, False: 92.6k]
  |  |  |  Branch (859:45): [True: 0, False: 92.6k]
  |  |  ------------------
  ------------------
 6549|  92.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  92.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  92.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  92.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  92.6k|    const auto begin_before_fill = begin;
 6559|  92.6k|    begin += potential_fill_len;
 6560|       |
 6561|  92.6k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.03k, False: 91.6k]
  ------------------
 6562|  1.03k|        return begin_before_fill;
 6563|  1.03k|    }
 6564|       |
 6565|  91.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  91.6k|    const auto begin_after_fill = begin;
 6567|  91.6k|    ++begin;
 6568|       |
 6569|  91.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 91.6k, False: 0]
  ------------------
 6570|  91.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  91.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 91.5k]
  |  |  ------------------
  ------------------
 6571|     50|            handler.on_error("Invalid fill character '{' in format string");
 6572|     50|            return begin;
 6573|     50|        }
 6574|  91.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 4.55k, False: 87.0k]
  ------------------
 6575|  4.55k|            return begin_before_fill;
 6576|  4.55k|        }
 6577|  91.5k|    }
 6578|       |
 6579|  87.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 84.6k, False: 2.35k]
  ------------------
 6580|  84.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.54k, False: 83.1k]
  ------------------
 6581|  1.54k|            handler.on_align(potential_align_on_fill);
 6582|  1.54k|            return begin_after_fill;
 6583|  1.54k|        }
 6584|  83.1k|        return begin_before_fill;
 6585|  84.6k|    }
 6586|       |
 6587|  2.35k|    handler.on_fill(potential_fill);
 6588|  2.35k|    handler.on_align(potential_align_after_fill);
 6589|  2.35k|    return begin;
 6590|  87.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  92.6k|{
 6514|  92.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  92.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  92.6k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  92.6k|        return 1;
 6517|  92.6k|    }
 6518|  92.6k|    else {
 6519|  92.6k|        const auto lengths =
 6520|  92.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  92.6k|            "\3\4";
 6522|  92.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  92.6k|        return len;
 6524|  92.6k|    }
 6525|  92.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   184k|    auto check_align = [](wchar_t ch) {
 6535|   184k|        switch (ch) {
 6536|  2.42k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 2.42k, False: 181k]
  ------------------
 6537|  2.42k|                return align_type::left;
 6538|    358|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 358, False: 183k]
  ------------------
 6539|    358|                return align_type::right;
 6540|  2.51k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 2.51k, False: 181k]
  ------------------
 6541|  2.51k|                return align_type::center;
 6542|   178k|            default:
  ------------------
  |  Branch (6542:13): [True: 178k, False: 5.29k]
  ------------------
 6543|   178k|                return align_type::none;
 6544|   184k|        }
 6545|   184k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  2.35k|    {
 6268|  2.35k|        m_specs.fill = fill;
 6269|  2.35k|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  2.35k|    {
 6149|  2.35k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  2.35k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  2.35k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  2.35k|            for (size_t i = 0; i < s.size(); ++i) {
 6153|  2.35k|                SCN_GCC_PUSH
 6154|  2.35k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  2.35k|                m_data[i] = s[i];
 6156|  2.35k|                SCN_GCC_POP
 6157|  2.35k|            }
 6158|  2.35k|            m_size = static_cast<unsigned char>(s.size());
 6159|  2.35k|        }
 6160|  2.35k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|  2.35k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  2.35k|            m_data[1] =
 6163|  2.35k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  2.35k|            if (s.size() == 1) {
 6165|  2.35k|                return;
 6166|  2.35k|            }
 6167|  2.35k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  2.35k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  2.35k|        }
 6170|  2.35k|        else {
 6171|  2.35k|            const auto front = static_cast<unsigned>(s.front());
 6172|  2.35k|            m_data[0] = static_cast<char>(front);
 6173|  2.35k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  2.35k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  2.35k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  2.35k|        }
 6177|  2.35k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  92.5k|{
 6597|  92.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  92.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  92.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 78.7k, False: 13.7k]
  |  Branch (6599:33): [True: 71.2k, False: 7.58k]
  ------------------
 6600|  71.2k|        int width = parse_simple_int(begin, end);
 6601|  71.2k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  71.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 71.2k, False: 0]
  |  |  ------------------
  ------------------
 6602|  71.2k|            handler.on_width(width);
 6603|  71.2k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  71.2k|    }
 6609|  92.5k|    return begin;
 6610|  92.5k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  4.22k|{
 6617|  4.22k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  4.22k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 4.18k, False: 40]
  |  Branch (6619:33): [True: 4.11k, False: 70]
  ------------------
 6620|  4.11k|        int prec = parse_simple_int(begin, end);
 6621|  4.11k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  4.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.11k, False: 0]
  |  |  ------------------
  ------------------
 6622|  4.11k|            handler.on_precision(prec);
 6623|  4.11k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  4.11k|    }
 6629|  4.22k|    return begin;
 6630|  4.22k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    856|    {
 7127|    856|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    856|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 770, False: 86]
  ------------------
 7129|    856|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 684, False: 86]
  ------------------
 7130|    856|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 598, False: 86]
  ------------------
 7131|    856|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 512, False: 86]
  ------------------
 7132|    512|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    512|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    512|        }
 7137|       |
 7138|    344|        Handler::on_localized();
 7139|    344|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  88.4k|{
 8417|  88.4k|#define SCN_VISIT(Type)                                         \
 8418|  88.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  88.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  88.4k|    }                                                           \
 8421|  88.4k|    else {                                                      \
 8422|  88.4k|        return vis(monostate_val);                              \
 8423|  88.4k|    }
 8424|       |
 8425|  88.4k|    monostate monostate_val{};
 8426|       |
 8427|  88.4k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 88.4k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 88.4k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  9.87k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 9.87k, False: 78.5k]
  ------------------
 8433|  9.87k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  9.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.87k|    }                                                           \
  |  | 8421|  9.87k|    else {                                                      \
  |  | 8422|  9.87k|        return vis(monostate_val);                              \
  |  | 8423|  9.87k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 88.4k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 88.4k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 88.4k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 88.4k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  9.87k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 9.87k, False: 78.5k]
  ------------------
 8443|  9.87k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  9.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.87k|    }                                                           \
  |  | 8421|  9.87k|    else {                                                      \
  |  | 8422|  9.87k|        return vis(monostate_val);                              \
  |  | 8423|  9.87k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 88.4k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 88.4k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  9.79k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 9.79k, False: 78.6k]
  ------------------
 8449|  9.79k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  9.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.79k|    }                                                           \
  |  | 8421|  9.79k|    else {                                                      \
  |  | 8422|  9.79k|        return vis(monostate_val);                              \
  |  | 8423|  9.79k|    }
  ------------------
 8450|  9.87k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 9.87k, False: 78.5k]
  ------------------
 8451|  9.87k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  9.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.87k|    }                                                           \
  |  | 8421|  9.87k|    else {                                                      \
  |  | 8422|  9.87k|        return vis(monostate_val);                              \
  |  | 8423|  9.87k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 88.4k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  9.79k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 9.79k, False: 78.6k]
  ------------------
 8455|  9.79k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  9.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.79k|    }                                                           \
  |  | 8421|  9.79k|    else {                                                      \
  |  | 8422|  9.79k|        return vis(monostate_val);                              \
  |  | 8423|  9.79k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 88.4k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 88.4k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  9.87k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 9.87k, False: 78.5k]
  ------------------
 8461|  9.87k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  9.87k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.87k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.87k|    }                                                           \
  |  | 8421|  9.87k|    else {                                                      \
  |  | 8422|  9.87k|        return vis(monostate_val);                              \
  |  | 8423|  9.87k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 88.4k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 88.4k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  9.79k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 9.79k, False: 78.6k]
  ------------------
 8467|  9.79k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  9.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.79k|    }                                                           \
  |  | 8421|  9.79k|    else {                                                      \
  |  | 8422|  9.79k|        return vis(monostate_val);                              \
  |  | 8423|  9.79k|    }
  ------------------
 8468|  9.79k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 9.79k, False: 78.6k]
  ------------------
 8469|  9.79k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  9.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.79k|    }                                                           \
  |  | 8421|  9.79k|    else {                                                      \
  |  | 8422|  9.79k|        return vis(monostate_val);                              \
  |  | 8423|  9.79k|    }
  ------------------
 8470|  9.79k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 9.79k, False: 78.6k]
  ------------------
 8471|  9.79k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  9.79k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.79k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.79k|    }                                                           \
  |  | 8421|  9.79k|    else {                                                      \
  |  | 8422|  9.79k|        return vis(monostate_val);                              \
  |  | 8423|  9.79k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 88.4k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 88.4k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 88.4k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 88.4k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 88.4k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  88.4k|            SCN_CLANG_POP
 8495|  88.4k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  5.93k|    {
 3330|  5.93k|        return m_iterator;
 3331|  5.93k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.48k|    {
 1430|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48k|    {
  437|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.48k|    {
 1177|  1.48k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  2.96k|    {
 3334|  2.96k|        return m_sentinel;
 3335|  2.96k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  2.96k|    {
 3316|  2.96k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.96k|    {
  485|  2.96k|        return m_has_value;
  486|  2.96k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.48k|    {
 1627|  1.48k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.48k|        return this->get_value();
 1629|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.48k|    {
  451|  1.48k|        return m_value;
  452|  1.48k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.48k|    {
 1837|  1.48k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.48k|                                            std::forward<F>(f));
 1839|  1.48k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.48k|{
 1323|  1.48k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.48k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.48k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.48k|            return result(*std::forward<Exp>(exp));
 1327|  1.48k|        }
 1328|       |
 1329|  1.48k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.48k|        return result(unexpect, monostate{});
 1331|  1.48k|    }
 1332|  1.48k|    else {
 1333|  1.48k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.48k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.48k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.48k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.48k|    }
 1340|  1.48k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.48k|    {
 1663|  1.48k|        return std::move(value());
 1664|  1.48k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.48k|    {
 1430|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.48k|    {
  437|  1.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.48k|    {
 1177|  1.48k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.48k|    {
 1598|  1.48k|        return has_value();
 1599|  1.48k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.96k|    {
  485|  2.96k|        return m_has_value;
  486|  2.96k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.48k|    {
 1663|  1.48k|        return std::move(value());
 1664|  1.48k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.48k|    {
 1627|  1.48k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.48k|        return this->get_value();
 1629|  1.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.48k|    {
  451|  1.48k|        return m_value;
  452|  1.48k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   253k|{
   44|   253k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   253k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   253k|{
   60|   253k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   253k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  28.1k|{
   89|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  28.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  28.1k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  28.1k|{
  127|  28.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  28.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  28.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  28.1k|    static_cast<    \
  |  |  929|  28.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  28.1k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   379k|{
  653|   379k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   379k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    346|{
  659|    346|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    346|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 173, False: 173]
  ------------------
  661|    346|                    : std::locale{};
  662|    346|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.02k|{
 1221|  1.02k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.02k|                                  m_nan_payload_buffer, value);
 1223|  1.02k|    value = this->setsign(value);
 1224|  1.02k|    return n;
 1225|  1.02k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.09k|{
 1221|  1.09k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.09k|                                  m_nan_payload_buffer, value);
 1223|  1.09k|    value = this->setsign(value);
 1224|  1.09k|    return n;
 1225|  1.09k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    994|{
 1461|    994|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    994|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    994|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    994|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    994|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 994, False: 0]
  ------------------
 1467|    994|        SCN_UNLIKELY_ATTR
 1468|    994|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    994|                                     "Invalid integer value");
 1470|    994|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.10k|{
 1461|  1.10k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.10k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.10k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.10k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.10k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.10k, False: 0]
  ------------------
 1467|  1.10k|        SCN_UNLIKELY_ATTR
 1468|  1.10k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.10k|                                     "Invalid integer value");
 1470|  1.10k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    994|{
 1461|    994|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    994|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    994|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    994|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    994|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 994, False: 0]
  ------------------
 1467|    994|        SCN_UNLIKELY_ATTR
 1468|    994|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    994|                                     "Invalid integer value");
 1470|    994|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.08k|{
 1461|  1.08k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.08k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.08k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.08k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.08k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.08k, False: 0]
  ------------------
 1467|  1.08k|        SCN_UNLIKELY_ATTR
 1468|  1.08k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.08k|                                     "Invalid integer value");
 1470|  1.08k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    976|{
 1461|    976|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    976|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    976|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    976|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    976|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 976, False: 0]
  ------------------
 1467|    976|        SCN_UNLIKELY_ATTR
 1468|    976|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    976|                                     "Invalid integer value");
 1470|    976|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.07k|{
 1461|  1.07k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.07k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.07k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.07k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.07k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.07k, False: 0]
  ------------------
 1467|  1.07k|        SCN_UNLIKELY_ATTR
 1468|  1.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.07k|                                     "Invalid integer value");
 1470|  1.07k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   126k|{
 2184|   126k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   126k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   253k|{
 2208|   253k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   253k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  4.44k|{
  194|  4.44k|    return find_classic_impl(
  195|  4.44k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  4.44k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  4.44k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  31.4k|{
  202|  31.4k|    return find_classic_impl(
  203|  31.4k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  31.4k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  31.4k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    298|{
  673|    298|    return e;
  674|    298|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   126k|{
 2141|   126k|    return vscan_internal(source, format, args);
 2142|   126k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   253k|{
 2161|   253k|    return vscan_internal(source, format, args);
 2162|   253k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.44k|{
  118|  4.44k|    auto it = source.begin();
  119|       |
  120|  29.3k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 25.6k, False: 3.63k]
  ------------------
  121|  25.6k|        auto sv =
  122|  25.6k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  25.6k|                .substr(0, 8);
  124|       |
  125|  25.6k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 6.97k, False: 18.6k]
  ------------------
  126|  6.97k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  6.97k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  6.97k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 486, False: 6.49k]
  ------------------
  129|    486|                break;
  130|    486|            }
  131|  6.49k|            continue;
  132|  6.97k|        }
  133|       |
  134|  81.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 62.6k, False: 18.3k]
  ------------------
  135|  62.6k|            auto tmp =
  136|  62.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  62.6k|            auto res = get_next_code_point(tmp);
  138|  62.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 324, False: 62.3k]
  ------------------
  139|    324|                return it;
  140|    324|            }
  141|  62.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  62.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  62.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  62.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  62.3k|        }
  145|  18.6k|    }
  146|       |
  147|  4.12k|    return detail::make_string_view_iterator(source, it);
  148|  4.44k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  66.4k|{
  105|  66.4k|    static_assert(sizeof(*source.data()) == 1);
  106|  66.4k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  66.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  66.4k|    uint64_t word{};
  108|  66.4k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  66.4k|    return has_byte_greater(word, 127) != 0;
  111|  66.4k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  48.6k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  62.6k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  31.4k|{
  118|  31.4k|    auto it = source.begin();
  119|       |
  120|  50.8k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 40.7k, False: 10.1k]
  ------------------
  121|  40.7k|        auto sv =
  122|  40.7k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  40.7k|                .substr(0, 8);
  124|       |
  125|  40.7k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 18.8k, False: 21.8k]
  ------------------
  126|  18.8k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  18.8k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  18.8k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 12.6k, False: 6.26k]
  ------------------
  129|  12.6k|                break;
  130|  12.6k|            }
  131|  6.26k|            continue;
  132|  18.8k|        }
  133|       |
  134|  68.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 54.8k, False: 13.1k]
  ------------------
  135|  54.8k|            auto tmp =
  136|  54.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  54.8k|            auto res = get_next_code_point(tmp);
  138|  54.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 8.70k, False: 46.1k]
  ------------------
  139|  8.70k|                return it;
  140|  8.70k|            }
  141|  46.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  46.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  46.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  46.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  46.1k|        }
  145|  21.8k|    }
  146|       |
  147|  22.7k|    return detail::make_string_view_iterator(source, it);
  148|  31.4k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  54.9k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  54.8k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.02k|{
 1138|  1.02k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 1.02k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  1.02k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 1.02k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  1.02k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 1.02k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  1.02k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 1.02k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  1.02k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.02k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 42, False: 978]
  ------------------
 1185|     42|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  ------------------
  ------------------
 1186|     42|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     42|                                         "Invalid floating-point digit");
 1188|     42|        }
 1189|     42|    }
 1190|    978|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    978|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 978, False: 0]
  |  |  ------------------
  ------------------
 1191|    978|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    978|                                     "Invalid floating-point digit");
 1193|    978|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.09k|{
 1138|  1.09k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 1.09k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  1.09k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 1.09k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  1.09k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 1.09k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  1.09k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 1.09k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  1.09k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.09k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 14, False: 1.07k]
  ------------------
 1185|     14|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 1186|     14|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     14|                                         "Invalid floating-point digit");
 1188|     14|        }
 1189|     14|    }
 1190|  1.07k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 0]
  |  |  ------------------
  ------------------
 1191|  1.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  1.07k|                                     "Invalid floating-point digit");
 1193|  1.07k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   253k|{
 1625|   253k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 252k, False: 414]
  ------------------
 1626|   252k|        return false;
 1627|   252k|    }
 1628|    414|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 288]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   253k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   253k|    {
 1903|   253k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   759k|    {
 1722|   759k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   759k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 759k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   759k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   253k|    {
 1853|   253k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   253k|{
 2038|   253k|    const auto beg = handler.get_ctx().begin();
 2039|   253k|    detail::parse_format_string<false>(format, handler);
 2040|   253k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248k, False: 4.24k]
  |  |  ------------------
  ------------------
 2041|   248k|        return unexpected(handler.error);
 2042|   248k|    }
 2043|  4.24k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   253k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  1.13M|    {
 2022|  1.13M|        return ctx.get();
 2023|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.13M|    {
 1857|  1.13M|        return contiguous_ctx;
 1858|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   277k|    {
 1907|   357k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 89.7k, False: 267k]
  ------------------
 1908|  89.7k|            auto it = get_ctx().begin();
 1909|  89.7k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.24k, False: 88.4k]
  ------------------
 1910|  1.24k|                SCN_UNLIKELY_ATTR
 1911|  1.24k|                return on_error("Unexpected end of source");
 1912|  1.24k|            }
 1913|       |
 1914|  88.4k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  88.4k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  88.4k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 5.36k, False: 83.1k]
  ------------------
 1917|  5.36k|                SCN_UNLIKELY_ATTR
 1918|  5.36k|                return on_error("Invalid encoding in format string");
 1919|  5.36k|            }
 1920|  83.1k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 9.41k, False: 73.6k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  9.41k|                get_ctx().advance_to(
 1923|  9.41k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  9.41k|                auto begin_it = impl::read_while_classic_space(
 1926|  9.41k|                    detail::make_string_view_from_pointers(
 1927|  9.41k|                        detail::to_address(after_space_it),
 1928|  9.41k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  9.41k|                begin = detail::to_address(begin_it) - 1;
 1931|  9.41k|                continue;
 1932|  9.41k|            }
 1933|       |
 1934|  73.6k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 2.95k, False: 70.7k]
  ------------------
 1935|  2.95k|                SCN_UNLIKELY_ATTR
 1936|  2.95k|                return on_error("Unexpected literal character in source");
 1937|  2.95k|            }
 1938|  70.7k|            get_ctx().advance_to(ranges::next(it));
 1939|  70.7k|        }
 1940|   277k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.79k|    {
 1972|  6.79k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.79k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.79k|        on_visit_scan_arg(
 1976|  6.79k|            impl::default_arg_reader<context_type>{
 1977|  6.79k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.79k|            arg);
 1979|  6.79k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   151k|{
 1681|   151k|    auto arg = ctx.arg(id);
 1682|   151k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.66k, False: 150k]
  |  |  ------------------
  ------------------
 1683|  1.66k|        handler.on_error("Failed to find argument with ID");
 1684|  1.66k|    }
 1685|   151k|    return arg;
 1686|   151k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   250k|    {
 1797|   250k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.32k, False: 247k]
  |  |  ------------------
  ------------------
 1798|  3.32k|            on_error("Invalid out-of-range argument ID");
 1799|  3.32k|            return;
 1800|  3.32k|        }
 1801|       |
 1802|   247k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 247k]
  |  |  ------------------
  ------------------
 1803|    142|            return on_error("Argument with this ID has already been scanned");
 1804|    142|        }
 1805|       |
 1806|   247k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   247k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 247k, False: 0]
  |  |  ------------------
  ------------------
 1807|   247k|            visited_args_lower64 |= (1ull << id);
 1808|   247k|            return;
 1809|   247k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   247k|    {
 1782|   247k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   247k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   247k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 247k, False: 0]
  |  |  ------------------
  ------------------
 1788|   247k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   247k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   247k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.79k|    {
 1956|  6.79k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 166, False: 6.62k]
  |  Branch (1956:23): [True: 0, False: 6.62k]
  ------------------
 1957|    166|            SCN_UNLIKELY_ATTR
 1958|    166|            return;
 1959|    166|        }
 1960|       |
 1961|  6.62k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  6.62k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.71k, False: 1.90k]
  |  |  ------------------
  ------------------
 1963|  4.71k|            on_error(r.error());
 1964|  4.71k|        }
 1965|  1.90k|        else {
 1966|  1.90k|            get_ctx().advance_to(*r);
 1967|  1.90k|        }
 1968|  6.62k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   224k|    {
 1766|   224k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224k, False: 0]
  |  |  ------------------
  ------------------
 1767|   224k|            error = err;
 1768|   224k|        }
 1769|   224k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   141k|    {
 1944|   141k|        return parse_ctx.next_arg_id();
 1945|   141k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  9.80k|    {
 1948|  9.80k|        parse_ctx.check_arg_id(id);
 1949|  9.80k|        return id;
 1950|  9.80k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   144k|    {
 1985|   144k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   144k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   144k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 144k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   144k|        auto specs = detail::format_specs{};
 1998|   144k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   144k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   144k|            arg.type()};
 2001|       |
 2002|   144k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   144k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.81k, False: 142k]
  |  Branch (2003:29): [True: 1.40k, False: 140k]
  ------------------
 2004|  4.22k|            SCN_UNLIKELY_ATTR
 2005|  4.22k|            on_error("Missing '}' in format string");
 2006|  4.22k|            return parse_ctx.begin();
 2007|  4.22k|        }
 2008|   140k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 500, False: 140k]
  |  |  ------------------
  ------------------
 2009|    500|            return parse_ctx.begin();
 2010|    500|        }
 2011|   140k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   140k|        on_visit_scan_arg(
 2014|   140k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   140k|                                           get_ctx().locale()},
 2016|   140k|            arg);
 2017|   140k|        return parse_ctx.begin();
 2018|   140k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   144k|    {
 1701|   144k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   140k|    {
 1956|   140k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 116, False: 140k]
  |  Branch (1956:23): [True: 0, False: 140k]
  ------------------
 1957|    116|            SCN_UNLIKELY_ATTR
 1958|    116|            return;
 1959|    116|        }
 1960|       |
 1961|   140k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   140k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 129k, False: 10.1k]
  |  |  ------------------
  ------------------
 1963|   129k|            on_error(r.error());
 1964|   129k|        }
 1965|  10.1k|        else {
 1966|  10.1k|            get_ctx().advance_to(*r);
 1967|  10.1k|        }
 1968|   140k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  1.19M|    {
 1761|  1.19M|        SCN_UNLIKELY_ATTR
 1762|  1.19M|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  1.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   759k|    {
 1729|   759k|        {
 1730|   759k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 759k]
  ------------------
 1731|   759k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 759k]
  ------------------
 1732|   759k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   759k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   759k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 512k, False: 247k]
  ------------------
 1736|   512k|                return on_error("Argument list not exhausted");
 1737|   512k|            }
 1738|   759k|        }
 1739|       |
 1740|   247k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 247k, False: 0]
  ------------------
 1741|   247k|            return;
 1742|   247k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   759k|    {
 1777|   759k|        return error;
 1778|   759k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  1.35M|    {
 1773|  1.35M|        return static_cast<bool>(error);
 1774|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   253k|{
 2053|   253k|    const auto argcount = args.size();
 2054|   253k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 253k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   253k|    auto handler = format_handler<true, CharT>{
 2060|   253k|        ranges::subrange<const CharT*>{source.data(),
 2061|   253k|                                       source.data() + source.size()},
 2062|   253k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   253k|    static_cast<    \
  |  |  929|   253k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   253k|    static_cast<    \
  |  |  929|   253k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   253k|    return vscan_parse_format_string(format, handler);
 2064|   253k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   506k|{
 2053|   506k|    const auto argcount = args.size();
 2054|   506k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 506k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   506k|    auto handler = format_handler<true, CharT>{
 2060|   506k|        ranges::subrange<const CharT*>{source.data(),
 2061|   506k|                                       source.data() + source.size()},
 2062|   506k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   506k|    return vscan_parse_format_string(format, handler);
 2064|   506k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   506k|{
 1625|   506k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 493k, False: 12.6k]
  ------------------
 1626|   493k|        return false;
 1627|   493k|    }
 1628|  12.6k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 12.5k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   506k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   506k|    {
 1903|   506k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   506k|    {
 1853|   506k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   506k|{
 2038|   506k|    const auto beg = handler.get_ctx().begin();
 2039|   506k|    detail::parse_format_string<false>(format, handler);
 2040|   506k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 505k, False: 1.10k]
  |  |  ------------------
  ------------------
 2041|   505k|        return unexpected(handler.error);
 2042|   505k|    }
 2043|  1.10k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   506k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.55M|    {
 2022|  1.55M|        return ctx.get();
 2023|  1.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.55M|    {
 1857|  1.55M|        return contiguous_ctx;
 1858|  1.55M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   290k|    {
 1907|   370k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 269k, False: 100k]
  ------------------
 1908|   269k|            auto it = get_ctx().begin();
 1909|   269k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 540, False: 268k]
  ------------------
 1910|    540|                SCN_UNLIKELY_ATTR
 1911|    540|                return on_error("Unexpected end of source");
 1912|    540|            }
 1913|       |
 1914|   268k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   268k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   268k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 187k, False: 80.9k]
  ------------------
 1917|   187k|                SCN_UNLIKELY_ATTR
 1918|   187k|                return on_error("Invalid encoding in format string");
 1919|   187k|            }
 1920|  80.9k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 32.4k, False: 48.4k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  32.4k|                get_ctx().advance_to(
 1923|  32.4k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  32.4k|                auto begin_it = impl::read_while_classic_space(
 1926|  32.4k|                    detail::make_string_view_from_pointers(
 1927|  32.4k|                        detail::to_address(after_space_it),
 1928|  32.4k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  32.4k|                begin = detail::to_address(begin_it) - 1;
 1931|  32.4k|                continue;
 1932|  32.4k|            }
 1933|       |
 1934|  48.4k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.12k, False: 47.3k]
  ------------------
 1935|  1.12k|                SCN_UNLIKELY_ATTR
 1936|  1.12k|                return on_error("Unexpected literal character in source");
 1937|  1.12k|            }
 1938|  47.3k|            get_ctx().advance_to(ranges::next(it));
 1939|  47.3k|        }
 1940|   290k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  5.98k|    {
 1972|  5.98k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  5.98k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  5.98k|        on_visit_scan_arg(
 1976|  5.98k|            impl::default_arg_reader<context_type>{
 1977|  5.98k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  5.98k|            arg);
 1979|  5.98k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  98.8k|{
 1681|  98.8k|    auto arg = ctx.arg(id);
 1682|  98.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.66k, False: 97.2k]
  |  |  ------------------
  ------------------
 1683|  1.66k|        handler.on_error("Failed to find argument with ID");
 1684|  1.66k|    }
 1685|  98.8k|    return arg;
 1686|  98.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  5.98k|    {
 1956|  5.98k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 166, False: 5.81k]
  |  Branch (1956:23): [True: 0, False: 5.81k]
  ------------------
 1957|    166|            SCN_UNLIKELY_ATTR
 1958|    166|            return;
 1959|    166|        }
 1960|       |
 1961|  5.81k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.81k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.11k, False: 1.70k]
  |  |  ------------------
  ------------------
 1963|  4.11k|            on_error(r.error());
 1964|  4.11k|        }
 1965|  1.70k|        else {
 1966|  1.70k|            get_ctx().advance_to(*r);
 1967|  1.70k|        }
 1968|  5.81k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  98.5k|    {
 1944|  98.5k|        return parse_ctx.next_arg_id();
 1945|  98.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    362|    {
 1948|    362|        parse_ctx.check_arg_id(id);
 1949|    362|        return id;
 1950|    362|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  92.8k|    {
 1985|  92.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  92.8k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  92.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 92.8k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  92.8k|        auto specs = detail::format_specs{};
 1998|  92.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  92.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  92.8k|            arg.type()};
 2001|       |
 2002|  92.8k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  92.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.69k, False: 90.2k]
  |  Branch (2003:29): [True: 870, False: 89.3k]
  ------------------
 2004|  3.56k|            SCN_UNLIKELY_ATTR
 2005|  3.56k|            on_error("Missing '}' in format string");
 2006|  3.56k|            return parse_ctx.begin();
 2007|  3.56k|        }
 2008|  89.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  89.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 482, False: 88.8k]
  |  |  ------------------
  ------------------
 2009|    482|            return parse_ctx.begin();
 2010|    482|        }
 2011|  88.8k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  88.8k|        on_visit_scan_arg(
 2014|  88.8k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  88.8k|                                           get_ctx().locale()},
 2016|  88.8k|            arg);
 2017|  88.8k|        return parse_ctx.begin();
 2018|  89.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  92.8k|    {
 1701|  92.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  88.8k|    {
 1956|  88.8k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 412, False: 88.4k]
  |  Branch (1956:23): [True: 0, False: 88.4k]
  ------------------
 1957|    412|            SCN_UNLIKELY_ATTR
 1958|    412|            return;
 1959|    412|        }
 1960|       |
 1961|  88.4k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  88.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  88.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.4k, False: 2.99k]
  |  |  ------------------
  ------------------
 1963|  85.4k|            on_error(r.error());
 1964|  85.4k|        }
 1965|  2.99k|        else {
 1966|  2.99k|            get_ctx().advance_to(*r);
 1967|  2.99k|        }
 1968|  88.4k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  14.0k|{
 1363|  14.0k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  14.0k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  14.0k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  14.0k|            std::u32string tmp;
 1368|  14.0k|            transcode_to_string_impl_to32(src, tmp);
 1369|  14.0k|            return transcode_to_string_impl_32to16<false>(
 1370|  14.0k|                std::u32string_view{tmp}, dest);
 1371|  14.0k|        }
 1372|  14.0k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  14.0k|            return transcode_to_string_impl_to32(src, dest);
 1374|  14.0k|        }
 1375|  14.0k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  14.0k|{
 1256|  14.0k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  14.0k|    auto it = src.begin();
 1259|  4.56M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 4.54M, False: 14.0k]
  ------------------
 1260|  4.54M|        auto res = get_next_code_point(
 1261|  4.54M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  4.54M|                                                                 src.end()));
 1263|  4.54M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  4.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 127k, False: 4.41M]
  |  |  ------------------
  ------------------
 1264|   127k|            dest.push_back(DestCharT{0xfffd});
 1265|   127k|        }
 1266|  4.41M|        else {
 1267|  4.41M|            dest.push_back(res.value);
 1268|  4.41M|        }
 1269|  4.54M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  4.54M|    }
 1271|  14.0k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  4.88M|{
 1169|  4.88M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  4.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  4.88M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  4.88M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92.3k, False: 4.78M]
  |  |  ------------------
  ------------------
 1173|  92.3k|        return {get_start_for_next_code_point(input),
 1174|  92.3k|                detail::invalid_code_point};
 1175|  92.3k|    }
 1176|  4.78M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  4.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.41k, False: 4.78M]
  |  |  ------------------
  ------------------
 1177|  1.41k|        return {input.end(), detail::invalid_code_point};
 1178|  1.41k|    }
 1179|       |
 1180|  4.78M|    return {input.begin() + len,
 1181|  4.78M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  4.78M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  92.3k|{
 1155|  92.3k|    auto it = input.begin();
 1156|   497k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 495k, False: 1.83k]
  ------------------
 1157|   495k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 90.5k, False: 404k]
  ------------------
 1158|  90.5k|            break;
 1159|  90.5k|        }
 1160|   495k|    }
 1161|  92.3k|    return it;
 1162|  92.3k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  60.6k|    {
  809|  60.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  60.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  60.6k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  22.7k|    {
  823|  22.7k|        return a.m_code == b.m_code;
  824|  22.7k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|   144k|    {
 2931|   144k|        SCN_UNLIKELY_ATTR
 2932|   144k|        m_msg = msg;
 2933|   144k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|   228k|    {
 2936|   228k|        return m_msg == nullptr;
 2937|   228k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.47k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|  1.80M|    {
 4990|  1.80M|        on_charset_range(cp, cp + 1);
 4991|  1.80M|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|  1.81M|    {
 4995|  1.81M|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 1.12M, False: 693k]
  ------------------
 4996|  1.12M|            return;
 4997|  1.12M|        }
 4998|       |
 4999|   156M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 156M, False: 686k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|   156M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 282, False: 156M]
  ------------------
 5002|    282|                elem.first = begin;
 5003|    282|                return;
 5004|    282|            }
 5005|       |
 5006|   156M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 6.69k, False: 156M]
  ------------------
 5007|  6.69k|                elem.second = end;
 5008|  6.69k|                return;
 5009|  6.69k|            }
 5010|   156M|        }
 5011|       |
 5012|   686k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   686k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    762|    {
 5017|       |        // no-op
 5018|    762|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|  1.83M|    {
 5032|  1.83M|        return static_cast<bool>(err);
 5033|  1.83M|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.76k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   103k|{
  458|   103k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   103k|        static_cast<unsigned char>(ch))];
  460|   103k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  1.38M|{
  469|  1.38M|    return static_cast<unsigned char>(ch) <= 127;
  470|  1.38M|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  2.46k|{
  474|  2.46k|#if WCHAR_MIN < 0
  475|  2.46k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 2.44k, False: 24]
  |  Branch (475:23): [True: 2.44k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  2.46k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|  1.50M|{
  483|  1.50M|    return cp <= 127;
  484|  1.50M|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  66.4k|{
  539|  66.4k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  66.4k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  59.9k|{
  784|  59.9k|    return e != eof_error::good;
  785|  59.9k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    134|{
  798|    134|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    134|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    134|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    134|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    134|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    752|{
  845|    752|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    752|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    752|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    752|    return parse_error::eof;
  847|    752|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.67k|{
  854|  5.67k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.67k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.67k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 88, False: 5.59k]
  ------------------
  859|     88|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     88|    }
  861|       |
  862|  5.59k|    return scan_error{code, msg};
  863|  5.67k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.67k|{
  868|  5.67k|    return [code, msg](parse_error err) {
  869|  5.67k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.67k|    };
  871|  5.67k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   680k|{
 1200|       |    // Pattern_White_Space property
 1201|   680k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 541k, False: 138k]
  |  Branch (1201:27): [True: 69.6k, False: 471k]
  ------------------
 1202|   680k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 7.35k, False: 603k]
  ------------------
 1203|   680k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 17.0k, False: 586k]
  ------------------
 1204|   680k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 2.12k, False: 583k]
  ------------------
 1205|   680k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 13.3k, False: 570k]
  ------------------
 1206|   680k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 2.08k, False: 568k]
  ------------------
 1207|   680k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 190, False: 568k]
  ------------------
 1208|   680k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  4.21k|{
 2220|  4.21k|    unsigned char running_diff{0};
 2221|  14.7k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 10.5k, False: 4.21k]
  ------------------
 2222|  10.5k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  10.5k|    }
 2224|  4.21k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 4.21k]
  |  Branch (2224:33): [True: 0, False: 4.21k]
  ------------------
 2225|  4.21k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   411k|{
 2303|   411k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 38.6k, False: 372k]
  ------------------
 2304|   411k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 486, False: 38.1k]
  ------------------
 2305|  38.6k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 38.0k]
  ------------------
 2306|  38.6k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 108, False: 37.9k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  38.6k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 30.7k, False: 7.18k]
  |  Branch (2308:27): [True: 4.95k, False: 25.8k]
  |  Branch (2308:43): [True: 4.81k, False: 144]
  ------------------
 2309|  38.6k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 25.8k, False: 7.33k]
  |  Branch (2309:27): [True: 274, False: 25.5k]
  ------------------
 2310|  38.6k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 25.4k, False: 7.41k]
  |  Branch (2310:27): [True: 144, False: 25.3k]
  ------------------
 2311|  38.6k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 25.3k, False: 7.41k]
  |  Branch (2311:27): [True: 90, False: 25.2k]
  ------------------
 2312|  38.6k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 25.2k, False: 7.41k]
  |  Branch (2312:27): [True: 344, False: 24.8k]
  ------------------
 2313|  38.6k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 24.8k, False: 7.41k]
  |  Branch (2313:27): [True: 108, False: 24.7k]
  ------------------
 2314|  38.6k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 24.7k, False: 7.41k]
  |  Branch (2314:27): [True: 78, False: 24.6k]
  ------------------
 2315|  38.6k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 24.0k, False: 8.00k]
  |  Branch (2315:28): [True: 84, False: 24.0k]
  ------------------
 2316|  38.6k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 24.0k, False: 8.00k]
  |  Branch (2316:28): [True: 1.23k, False: 22.7k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  38.6k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 23.0k, False: 7.77k]
  |  Branch (2318:28): [True: 126, False: 22.8k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  38.6k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 22.8k, False: 7.77k]
  |  Branch (2320:28): [True: 108, False: 22.7k]
  ------------------
 2321|  8.06k|        return 2;
 2322|  8.06k|    }
 2323|   402k|    return 1;
 2324|   411k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   276k|{
 2328|   276k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   276k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    208|{
 2343|    208|    return calculate_text_width_for_fmt_v10(cp);
 2344|    208|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  19.8k|{
 3123|  19.8k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  19.8k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  9.40k|{
 3127|  9.40k|#if WCHAR_MIN < 0
 3128|  9.40k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 9.40k, False: 0]
  |  Branch (3128:20): [True: 9.40k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  9.40k|        return char_to_int(static_cast<char>(ch));
 3133|  9.40k|    }
 3134|      0|    return 255;
 3135|  9.40k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  59.0k|{
 4271|  59.0k|    std::regex_constants::syntax_option_type result{};
 4272|  59.0k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 1.56k, False: 57.4k]
  ------------------
 4273|  1.56k|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|  1.56k|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|  1.56k|    }
 4281|  59.0k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 59.0k]
  ------------------
 4282|  59.0k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  59.0k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 9.53k, False: 49.5k]
  ------------------
 4288|  9.53k|        result |= std::regex_constants::icase;
 4289|  9.53k|    }
 4290|  59.0k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 24, False: 59.0k]
  ------------------
 4291|     24|        result |= std::regex_constants::nosubs;
 4292|     24|    }
 4293|  59.0k|    return result;
 4294|  59.0k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  5.28k|{
 4638|  5.28k|    std::string result{pattern};
 4639|  43.7k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 38.4k, False: 5.28k]
  ------------------
 4640|  38.4k|        result.replace(n, 2, "/");
 4641|  38.4k|        ++n;
 4642|  38.4k|    }
 4643|  5.28k|    return result;
 4644|  5.28k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    516|{
 4647|    516|    std::wstring result{pattern};
 4648|  2.64k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 2.12k, False: 516]
  ------------------
 4649|  2.12k|        result.replace(n, 2, L"/");
 4650|  2.12k|        ++n;
 4651|  2.12k|    }
 4652|    516|    return result;
 4653|    516|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  15.2k|{
 6008|  15.2k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 3.42k, False: 11.7k]
  ------------------
 6009|  3.42k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 2.00k, False: 1.41k]
  ------------------
 6010|  2.00k|            return {scan_error::invalid_scanned_value,
 6011|  2.00k|                    "Scanned value too narrow, width did not exceed what "
 6012|  2.00k|                    "was specified in the format string"};
 6013|  2.00k|        }
 6014|  3.42k|    }
 6015|  13.2k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 3.02k, False: 10.1k]
  ------------------
 6016|  3.02k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 102, False: 2.92k]
  ------------------
 6017|    102|            return {scan_error::invalid_scanned_value,
 6018|    102|                    "Scanned value too wide, width exceeded the specified "
 6019|    102|                    "precision"};
 6020|    102|        }
 6021|  3.02k|    }
 6022|  13.1k|    return {};
 6023|  13.2k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  99.7k|    {
  304|  99.7k|        ranges::advance(x, n);
  305|  99.7k|        return x;
  306|  99.7k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  99.7k|    {
  268|  99.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  99.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   254k|    {
  151|   254k|        i += n;
  152|   254k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   150k|    {
  108|   150k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   150k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   150k|    {
   87|   150k|        return s - i;
   88|   150k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  9.32k|    {
  304|  9.32k|        ranges::advance(x, n);
  305|  9.32k|        return x;
  306|  9.32k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  9.32k|    {
  268|  9.32k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  9.32k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  9.32k|    {
  151|  9.32k|        i += n;
  152|  9.32k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  6.57k|    {
  108|  6.57k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  6.57k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  6.57k|    {
   87|  6.57k|        return s - i;
   88|  6.57k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  15.5k|    {
 5624|  15.5k|        reader_error_handler eh{};
 5625|  15.5k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  15.5k|            detail::check_code_point_type_specs(specs, eh);
 5627|  15.5k|        }
 5628|  15.5k|        else {
 5629|  15.5k|            detail::check_char_type_specs(specs, eh);
 5630|  15.5k|        }
 5631|  15.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.7k, False: 746]
  |  |  ------------------
  ------------------
 5632|  14.7k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  14.7k|        }
 5634|    746|        return {};
 5635|  15.5k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  54.0k|    {
  763|  54.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  54.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  54.0k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  9.75k|    {
  754|  9.75k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  15.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.9k|              cvref<T> obj = *get<T>(fn);
  745|  15.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.9k|              }
  748|  15.9k|              else {
  749|  15.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.9k|              }
  751|  15.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.9k|    {
  684|  15.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.9k|            return static_cast<T*>(s.m_cp);
  686|  15.9k|        }
  687|  15.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.9k|            return static_cast<T*>(s.m_p);
  689|  15.9k|        }
  690|  15.9k|        else {
  691|  15.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.9k|        }
  693|  15.9k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  9.75k|        {
  662|  9.75k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  3.30M|    {
  763|  3.30M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.30M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  87.7k|    {
  754|  87.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  1.58M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.58M|              cvref<T> obj = *get<T>(fn);
  745|  1.58M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.58M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.58M|              }
  748|  1.58M|              else {
  749|  1.58M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.58M|              }
  751|  1.58M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.58M|    {
  684|  1.58M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.58M|            return static_cast<T*>(s.m_cp);
  686|  1.58M|        }
  687|  1.58M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.58M|            return static_cast<T*>(s.m_p);
  689|  1.58M|        }
  690|  1.58M|        else {
  691|  1.58M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.58M|        }
  693|  1.58M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  87.7k|        {
  662|  87.7k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  2.16k|    {
 5619|  2.16k|        return false;
 5620|  2.16k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.67k|    return [code, msg](parse_error err) {
  869|  5.67k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.67k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|    138|    {
 1780|    138|        auto stdloc = loc.get<std::locale>();
 1781|    138|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    138|        grouping = numpunct.grouping();
 1783|    138|        thousands_sep =
 1784|    138|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 138]
  ------------------
 1785|    138|        decimal_point = numpunct.decimal_point();
 1786|    138|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    156|{
 1717|    156|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 156, False: 0]
  ------------------
 1718|    156|        return std::use_facet<Facet>(stdloc);
 1719|    156|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    156|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  67.6k|{
 2349|  67.6k|    size_t count{0};
 2350|  67.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  67.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  67.6k|    });
 2353|  67.6k|    return count;
 2354|  67.6k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  67.6k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  67.6k|    auto it = input.begin();
 1448|   195k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 127k, False: 67.6k]
  ------------------
 1449|   127k|        auto res = get_next_code_point(
 1450|   127k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|   127k|        cb(res.value);
 1452|   127k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|   127k|    }
 1454|  67.6k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|   134k|    {
  763|   134k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   134k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  67.6k|    {
  754|  67.6k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   127k|              cvref<T> obj = *get<T>(fn);
  745|   127k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   127k|                  obj(static_cast<decltype(args)>(args)...);
  747|   127k|              }
  748|   127k|              else {
  749|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   127k|              }
  751|   127k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|   127k|    {
  684|   127k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   127k|            return static_cast<T*>(s.m_cp);
  686|   127k|        }
  687|   127k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   127k|            return static_cast<T*>(s.m_p);
  689|   127k|        }
  690|   127k|        else {
  691|   127k|            return reinterpret_cast<T*>(s.m_fp);
  692|   127k|        }
  693|   127k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|   127k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|   127k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|   127k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  67.6k|        {
  662|  67.6k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  5.98k|    {
 1582|  5.98k|        return m_view;
 1583|  5.98k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  6.29k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.36k|    {
 2421|  3.36k|        return m_multibyte_left;
 2422|  3.36k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   713k|    {
 2426|   713k|        return *m_current;
 2427|   713k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   579k|    {
 2435|   579k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   579k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   579k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   579k|        _increment_current();
 2437|   579k|        return *this;
 2438|   579k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   579k|    {
 2668|   579k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 277k, False: 302k]
  ------------------
 2669|   277k|            auto cplen = _get_cp_length_at_current();
 2670|   277k|            m_multibyte_left = cplen - 1;
 2671|   277k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   277k|        }
 2673|   302k|        else {
 2674|   302k|            --m_multibyte_left;
 2675|   302k|        }
 2676|       |
 2677|   579k|        ++m_current;
 2678|   579k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   277k|    {
 2639|   277k|        return static_cast<difference_type>(
 2640|   277k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   277k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   277k|    {
 2645|   277k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.94k, False: 275k]
  |  |  ------------------
  ------------------
 2646|  1.94k|            return 0;
 2647|  1.94k|        }
 2648|       |
 2649|   275k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 210k, False: 64.5k]
  ------------------
 2650|   210k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   210k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   210k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   210k|        }
 2654|       |
 2655|  64.5k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  64.5k|                                           cplen);
 2657|  64.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  64.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 868, False: 63.7k]
  |  |  ------------------
  ------------------
 2658|    868|            return 0;
 2659|    868|        }
 2660|       |
 2661|  63.7k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  63.7k|        return static_cast<difference_type>(
 2663|  63.7k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  64.5k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  66.9k|{
 1857|  66.9k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  66.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  66.9k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  66.9k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  66.9k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 976, False: 65.9k]
  ------------------
 1862|    976|            return unexpected(eof_error::eof);
 1863|    976|        }
 1864|       |
 1865|  65.9k|        return ranges::next(range.begin(), count);
 1866|  66.9k|    }
 1867|  66.9k|    else {
 1868|  66.9k|        auto it = range.begin();
 1869|  66.9k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  66.9k|            return ranges::next(it, count);
 1871|  66.9k|        }
 1872|       |
 1873|  66.9k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  66.9k|            if (it == range.end()) {
 1875|  66.9k|                return unexpected(eof_error::eof);
 1876|  66.9k|            }
 1877|  66.9k|        }
 1878|       |
 1879|  66.9k|        return it;
 1880|  66.9k|    }
 1881|  66.9k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   317k|    {
 2531|   317k|        return !(a == b);
 2532|   317k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   324k|    {
 2523|   324k|        return a.m_current == b.m_current;
 2524|   324k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  11.5k|    {
 2430|  11.5k|        return *m_current;
 2431|  11.5k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  2.35k|    {
  268|  2.35k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.35k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.35k|    {
  161|  2.35k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.35k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.35k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.35k|        else {
  169|  2.35k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.35k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.35k|        }
  173|  2.35k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   222k|    {
 1890|   222k|        return !codepoint.empty();
 1891|   222k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  3.26k|{
 1683|  3.26k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  3.26k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  3.26k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  3.26k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  3.26k|    }
 1688|  3.26k|    else {
 1689|  3.26k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  3.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  3.26k|    }
 1691|  3.26k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  3.26k|    {
 1537|  3.26k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  3.26k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  3.26k|    {
 1621|  3.26k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  3.26k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  3.26k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  3.26k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  3.26k|            m_storage.reset();
 1627|  3.26k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  3.26k|        }
 1629|  3.26k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  3.26k|                                          std::basic_string<CharT>>) {
 1631|  3.26k|            m_storage.emplace(SCN_FWD(range));
 1632|  3.26k|            m_view = string_view_type{*m_storage};
 1633|  3.26k|        }
 1634|  3.26k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  3.26k|                                          typename detail::basic_scan_buffer<
 1636|  3.26k|                                              value_t>::forward_iterator> &&
 1637|  3.26k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  3.26k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  3.26k|            auto end_seg = range.end().contiguous_segment();
 1640|  3.26k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  3.26k|                             detail::to_address(end_seg.end()))) {
 1642|  3.26k|                auto& str = m_storage.emplace();
 1643|  3.26k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.26k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.26k|                m_view = string_view_type{str};
 1646|  3.26k|                return;
 1647|  3.26k|            }
 1648|       |
 1649|  3.26k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  3.26k|                                                            end_seg.data());
 1651|  3.26k|            m_storage.reset();
 1652|  3.26k|        }
 1653|  3.26k|        else {
 1654|  3.26k|            auto& str = m_storage.emplace();
 1655|  3.26k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  3.26k|                str.reserve(range.size());
 1657|  3.26k|            }
 1658|  3.26k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  3.26k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  3.26k|                          std::back_inserter(str));
 1661|  3.26k|            }
 1662|  3.26k|            else {
 1663|  3.26k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  3.26k|                     ++it) {
 1665|  3.26k|                    str.push_back(*it);
 1666|  3.26k|                }
 1667|  3.26k|            }
 1668|  3.26k|            m_view = string_view_type{str};
 1669|  3.26k|        }
 1670|  3.26k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  39.3k|    {
 2382|  39.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   604k|    {
 2413|   604k|        return m_current;
 2414|   604k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  18.5k|    {
 2832|  18.5k|        return take_width_view{r, n};
 2833|  18.5k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  18.5k|    {
 2801|  18.5k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  18.5k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    484|    {
 5663|    484|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 450, False: 34]
  ------------------
 5664|    484|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 34]
  ------------------
 5665|    450|            return read_default(range, value, loc);
 5666|    450|        }
 5667|       |
 5668|     34|        reader_impl_for_int<CharT> reader{};
 5669|     34|        signed char tmp_value{};
 5670|     34|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     34|        value = static_cast<signed char>(value);
 5672|     34|        return ret;
 5673|    484|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    450|    {
 5645|    450|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    450|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    450|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    450|            return code_unit_reader<char>{}.read(range, value);
 5648|    450|        }
 5649|    450|        else {
 5650|    450|            SCN_UNUSED(range);
 5651|    450|            SCN_EXPECT(false);
 5652|    450|            SCN_UNREACHABLE;
 5653|    450|        }
 5654|    450|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    450|    {
 5564|    450|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    450|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 450]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    450|        ch = *range.begin();
 5566|    450|        return it;
 5567|    450|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  3.29k|{
 1846|  3.29k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.29k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  3.29k|    return ranges::next(range.begin());
 1851|  3.29k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  3.29k|{
  950|  3.29k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.29k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  3.29k|    return eof_error::good;
  954|  3.29k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  3.29k|{
  944|  3.29k|    return is_range_eof(r.begin(), r.end());
  945|  3.29k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   225k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   225k|    {
  937|   225k|        return begin == end;
  938|   225k|    }
  939|   225k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   591k|        {
 2770|   591k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.36k, False: 587k]
  |  Branch (2770:39): [True: 1.00k, False: 2.36k]
  ------------------
 2771|   591k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 2.18k, False: 587k]
  ------------------
 2772|   591k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   446k|    {
 2816|   446k|        return sentinel<true>{m_base.get().end()};
 2817|   446k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   525k|    {
 2717|   525k|        return view;
 2718|   525k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   446k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  3.32k|    {
  296|  3.32k|        ++x;
  297|  3.32k|        return x;
  298|  3.32k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  39.3k|    {
 2810|  39.3k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  39.3k|                                      m_count};
 2812|  39.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     34|    {
 3539|     34|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     34|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     34|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     34|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 34]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     34|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 34]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     34|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     34|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 3565|     34|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     34|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     34|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     34|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     34|    }                                                  \
  |  |  |  | 3671|     34|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|  1.42k|{
 3326|  1.42k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  1.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  1.42k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  1.42k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  1.42k|        parse_integer_base_prefix(
 3331|  1.42k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  1.42k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 1.42k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  1.42k|    else {
 3343|  1.42k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.42k]
  |  Branch (3343:13): [True: 1.42k, False: 0]
  ------------------
 3344|  1.42k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 1.42k, False: 0]
  ------------------
 3345|  1.42k|            digits_begin_it = base_prefix_begin_it;
 3346|  1.42k|        }
 3347|  1.42k|    }
 3348|       |
 3349|  1.42k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.42k, False: 0]
  ------------------
 3350|  1.42k|        sign = sign_type::plus_sign;
 3351|  1.42k|    }
 3352|  1.42k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  1.42k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  1.42k|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.89k|{
 3141|  1.89k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.89k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.89k, False: 0]
  ------------------
 3143|  1.89k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.89k, False: 0]
  ------------------
 3144|  1.89k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.89k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.89k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.89k|{
 2272|  1.89k|    auto it = read_code_unit(range);
 2273|  1.89k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  3.78k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 3.78k, False: 1.89k]
  ------------------
 2278|  3.78k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 3.78k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  3.78k|    }
 2282|       |
 2283|  1.89k|    return unexpected(parse_error::error);
 2284|  1.89k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|  1.42k|{
 3293|  1.42k|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 1.40k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 1.40k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    460|        case 16:
  ------------------
  |  Branch (3307:9): [True: 460, False: 960]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    460|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    460|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 1.40k]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    912|        default:
  ------------------
  |  Branch (3316:9): [True: 912, False: 508]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    912|            return {range.begin(), base, false};
 3319|  1.42k|    }
 3320|  1.42k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    488|{
 2291|    488|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 488, False: 0]
  ------------------
 2292|    488|        return range.begin();
 2293|    488|    }
 2294|      0|    return *result;
 2295|    488|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.94k|{
 2231|  1.94k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.94k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.94k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.94k|        if (range.size() < str.size()) {
 2236|  1.94k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.94k|        }
 2238|  1.94k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.94k|            return unexpected(parse_error::error);
 2240|  1.94k|        }
 2241|  1.94k|        return ranges::next(range.begin(), str.size());
 2242|  1.94k|    }
 2243|  1.94k|    else {
 2244|  1.94k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.94k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.94k|                return ch;
 2247|  1.94k|            }
 2248|  1.94k|            return static_cast<char_type>(ch +
 2249|  1.94k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.94k|        };
 2251|       |
 2252|  1.94k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.94k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.94k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.94k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 1.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|  1.94k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.74k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.74k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.74k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.74k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.74k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.74k|                    return ascii_tolower(a) ==
 2259|  1.74k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.74k|                }))) {
 2261|  1.74k|            return unexpected(parse_error::error);
 2262|  1.74k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.74k|    }
 2266|  1.94k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  3.46k|{
 1857|  3.46k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.46k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.46k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.46k|        if (sz < count) {
 1862|  3.46k|            return unexpected(eof_error::eof);
 1863|  3.46k|        }
 1864|       |
 1865|  3.46k|        return ranges::next(range.begin(), count);
 1866|  3.46k|    }
 1867|  3.46k|    else {
 1868|  3.46k|        auto it = range.begin();
 1869|  3.46k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 3.46k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  12.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 8.94k, False: 3.23k]
  ------------------
 1874|  8.94k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 228, False: 8.71k]
  ------------------
 1875|    228|                return unexpected(eof_error::eof);
 1876|    228|            }
 1877|  8.94k|        }
 1878|       |
 1879|  3.23k|        return it;
 1880|  3.46k|    }
 1881|  3.46k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.46k|{
 1095|  3.46k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.46k|        return r.size();
 1097|  3.46k|    }
 1098|  3.46k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.46k|                           ranges::const_iterator_t<Range>,
 1100|  3.46k|                           typename detail::basic_scan_buffer<
 1101|  3.46k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.46k|        if constexpr (ranges::common_range<Range>) {
 1103|  3.46k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.46k|        }
 1105|  3.46k|        else {
 1106|  3.46k|            if (r.begin().stores_parent()) {
 1107|  3.46k|                return static_cast<size_t>(
 1108|  3.46k|                    r.begin().parent()->chars_available() -
 1109|  3.46k|                    r.begin().position());
 1110|  3.46k|            }
 1111|  3.46k|            return r.begin().contiguous_segment().size();
 1112|  3.46k|        }
 1113|  3.46k|    }
 1114|  3.46k|    else {
 1115|  3.46k|        return 0;
 1116|  3.46k|    }
 1117|  3.46k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.74k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.74k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 46, False: 1.70k]
  |  Branch (2245:29): [True: 1.70k, False: 0]
  ------------------
 2246|  1.74k|                return ch;
 2247|  1.74k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.74k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   222k|{
  944|   222k|    return is_range_eof(r.begin(), r.end());
  945|   222k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    480|{
 3251|    480|    return read_matching_string_classic_nocase(range, "0x");
 3252|    480|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|  1.40k|{
 3360|  1.40k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  1.40k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  1.40k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|  1.40k|            return unexpected_scan_error(
 3365|  1.40k|                scan_error::invalid_scanned_value,
 3366|  1.40k|                "Failed to parse integer: No digits found");
 3367|  1.40k|        }
 3368|  1.40k|        return range.end();
 3369|  1.40k|    }
 3370|  1.40k|    else {
 3371|  1.40k|        return read_while1_code_unit(range,
 3372|  1.40k|                                     [&](char_type ch) noexcept {
 3373|  1.40k|                                         return char_to_int(ch) < base;
 3374|  1.40k|                                     })
 3375|  1.40k|            .transform_error(map_parse_error_to_scan_error(
 3376|  1.40k|                scan_error::invalid_scanned_value,
 3377|  1.40k|                "Failed to parse integer: No digits found"));
 3378|  1.40k|    }
 3379|  1.40k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.87k|{
 1996|  1.87k|    auto it = read_while_code_unit(range, pred);
 1997|  1.87k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.87k, False: 0]
  ------------------
 1998|  1.87k|        return unexpected(parse_error::error);
 1999|  1.87k|    }
 2000|      0|    return it;
 2001|  1.87k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.87k|{
 1976|  1.87k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.87k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.87k|{
 1957|  1.87k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.87k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.87k|    }
 1960|  1.87k|    else {
 1961|  1.87k|        auto first = range.begin();
 1962|  1.87k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.87k, False: 0]
  ------------------
 1963|  1.87k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.87k, False: 0]
  ------------------
 1964|  1.87k|                return first;
 1965|  1.87k|            }
 1966|  1.87k|        }
 1967|      0|        return first;
 1968|  1.87k|    }
 1969|  1.87k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   334k|        {
 2781|   334k|            return !(y == x);
 2782|   334k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|  1.40k|    {
  754|  1.40k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.40k|              cvref<T> obj = *get<T>(fn);
  745|  1.40k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.40k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.40k|              }
  748|  1.40k|              else {
  749|  1.40k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.40k|              }
  751|  1.40k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.40k|    {
  684|  1.40k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.40k|            return static_cast<T*>(s.m_cp);
  686|  1.40k|        }
  687|  1.40k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.40k|            return static_cast<T*>(s.m_p);
  689|  1.40k|        }
  690|  1.40k|        else {
  691|  1.40k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.40k|        }
  693|  1.40k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|  1.40k|                                     [&](char_type ch) noexcept {
 3373|  1.40k|                                         return char_to_int(ch) < base;
 3374|  1.40k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|  1.40k|        {
  662|  1.40k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   594k|    {
 2417|   594k|        return m_count;
 2418|   594k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    256|    {
 5663|    256|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 234, False: 22]
  ------------------
 5664|    256|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 22]
  ------------------
 5665|    234|            return read_default(range, value, loc);
 5666|    234|        }
 5667|       |
 5668|     22|        reader_impl_for_int<CharT> reader{};
 5669|     22|        signed char tmp_value{};
 5670|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     22|        value = static_cast<signed char>(value);
 5672|     22|        return ret;
 5673|    256|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    972|    {
 5645|    972|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    972|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    972|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    972|            return code_unit_reader<char>{}.read(range, value);
 5648|    972|        }
 5649|    972|        else {
 5650|    972|            SCN_UNUSED(range);
 5651|    972|            SCN_EXPECT(false);
 5652|    972|            SCN_UNREACHABLE;
 5653|    972|        }
 5654|    972|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    972|    {
 5564|    972|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    972|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    972|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    972|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    972|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 972]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    972|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    972|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    972|        ch = *range.begin();
 5566|    972|        return it;
 5567|    972|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  7.23k|{
 1846|  7.23k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.23k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  7.23k|    return ranges::next(range.begin());
 1851|  7.23k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  24.6k|{
  950|  24.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.6k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  24.6k|    return eof_error::good;
  954|  24.6k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.34M|{
  944|  1.34M|    return is_range_eof(r.begin(), r.end());
  945|  1.34M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  1.43M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.43M|    {
  937|  1.43M|        return begin == end;
  938|  1.43M|    }
  939|  1.43M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  77.9k|    {
  296|  77.9k|        ++x;
  297|  77.9k|        return x;
  298|  77.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     22|    {
 3539|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     22|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 22]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 22]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3565|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     22|                    parse_integer_digits_without_thsep(
 3567|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     22|                        prefix_result.parsed_base));
 3569|       |
 3570|     22|            auto buf = make_contiguous_buffer(
 3571|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     22|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  3.05k|{
 3326|  3.05k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  3.05k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  3.05k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  3.05k|        parse_integer_base_prefix(
 3331|  3.05k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  3.05k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 3.05k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  3.05k|    else {
 3343|  3.05k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 3.05k]
  ------------------
 3344|  3.05k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 3.05k, False: 0]
  ------------------
 3345|  3.05k|            digits_begin_it = base_prefix_begin_it;
 3346|  3.05k|        }
 3347|  3.05k|    }
 3348|       |
 3349|  3.05k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 3.05k, False: 0]
  ------------------
 3350|  3.05k|        sign = sign_type::plus_sign;
 3351|  3.05k|    }
 3352|  3.05k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  3.05k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  3.05k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  4.10k|{
 3141|  4.10k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  4.10k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 4.10k, False: 0]
  ------------------
 3143|  4.10k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 4.10k, False: 0]
  ------------------
 3144|  4.10k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  4.10k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  4.10k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  4.10k|{
 2272|  4.10k|    auto it = read_code_unit(range);
 2273|  4.10k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.10k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  8.20k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.20k, False: 4.10k]
  ------------------
 2278|  8.20k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 8.20k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  8.20k|    }
 2282|       |
 2283|  4.10k|    return unexpected(parse_error::error);
 2284|  4.10k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  3.05k|{
 3293|  3.05k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 3.05k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     78|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 78, False: 2.98k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     78|            bool zero_parsed = false;
 3302|     78|            auto it = apply_opt(
 3303|     78|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     78|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    988|        case 16:
  ------------------
  |  Branch (3307:9): [True: 988, False: 2.07k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    988|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    988|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 3.04k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.97k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.97k, False: 1.08k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.97k|            return {range.begin(), base, false};
 3319|  3.05k|    }
 3320|  3.05k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.07k|{
 2291|  1.07k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.07k, False: 0]
  ------------------
 2292|  1.07k|        return range.begin();
 2293|  1.07k|    }
 2294|      0|    return *result;
 2295|  1.07k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.22k|{
 2231|  4.22k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  4.22k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  4.22k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  4.22k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 4.21k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  4.21k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 4.21k, False: 0]
  ------------------
 2239|  4.21k|            return unexpected(parse_error::error);
 2240|  4.21k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  4.21k|    }
 2243|  4.22k|    else {
 2244|  4.22k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.22k|            if (ch < 'A' || ch > 'Z') {
 2246|  4.22k|                return ch;
 2247|  4.22k|            }
 2248|  4.22k|            return static_cast<char_type>(ch +
 2249|  4.22k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.22k|        };
 2251|       |
 2252|  4.22k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  4.22k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.22k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.22k|        if (SCN_UNLIKELY(!std::equal(
 2257|  4.22k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.22k|                    return ascii_tolower(a) ==
 2259|  4.22k|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.22k|                }))) {
 2261|  4.22k|            return unexpected(parse_error::error);
 2262|  4.22k|        }
 2263|       |
 2264|  4.22k|        return it;
 2265|  4.22k|    }
 2266|  4.22k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     90|{
 3258|     90|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 90]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     90|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 90]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     90|    return unexpected(parse_error::error);
 3268|     90|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.15k|{
 2146|  2.15k|    auto it = read_code_unit(range);
 2147|  2.15k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.15k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.15k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.15k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.15k|        return unexpected(parse_error::error);
 2154|  2.15k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.15k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  1.00k|{
 3251|  1.00k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  1.00k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.98k|{
 3360|  2.98k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.98k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.98k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.98k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.98k|        return range.end();
 3369|  2.98k|    }
 3370|  2.98k|    else {
 3371|  2.98k|        return read_while1_code_unit(range,
 3372|  2.98k|                                     [&](char_type ch) noexcept {
 3373|  2.98k|                                         return char_to_int(ch) < base;
 3374|  2.98k|                                     })
 3375|  2.98k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.98k|                scan_error::invalid_scanned_value,
 3377|  2.98k|                "Failed to parse integer: No digits found"));
 3378|  2.98k|    }
 3379|  2.98k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     72|{
 3390|     72|    std::basic_string<CharT> output;
 3391|     72|    std::string thsep_indices;
 3392|     72|    auto it = range.begin();
 3393|     72|    bool digit_matched = false;
 3394|     72|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 72, False: 0]
  ------------------
 3395|     72|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 72]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     72|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 72, False: 0]
  ------------------
 3400|     72|            break;
 3401|     72|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     72|    }
 3407|     72|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 0]
  |  |  ------------------
  ------------------
 3408|     72|        return unexpected_scan_error(
 3409|     72|            scan_error::invalid_scanned_value,
 3410|     72|            "Failed to parse integer: No digits found");
 3411|     72|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     72|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  20.0k|{
 1683|  20.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  20.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  20.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  20.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  20.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  20.0k|    }
 1688|  20.0k|    else {
 1689|  20.0k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  20.0k|    }
 1691|  20.0k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  20.0k|    {
 1490|  20.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  86.3k|    {
 1503|  86.3k|        return sv;
 1504|  86.3k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  6.49k|{
 5951|  6.49k|    using char_type = detail::char_t<Range>;
 5952|  6.49k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  6.49k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 6.25k, False: 240]
  ------------------
 5955|  6.25k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  6.25k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  6.25k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 6.10k, False: 146]
  ------------------
 5959|  6.10k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  6.10k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 166, False: 5.93k]
  ------------------
 5962|    166|                auto prefix_width =
 5963|    166|                    static_cast<std::ptrdiff_t>(
 5964|    166|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    166|                    ranges::distance(range.begin(), it);
 5966|    166|                return result_type{it, prefix_width};
 5967|    166|            }
 5968|  5.93k|            return result_type{it, 0};
 5969|  6.10k|        }
 5970|       |
 5971|    146|        auto max_width_view = take_width(range, max_width);
 5972|    146|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    146|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 146, False: 0]
  ------------------
 5975|    146|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    146|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    146|    }
 5979|       |
 5980|    240|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    240|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 108]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    108|    auto max_width_view = take_width(range, max_width);
 5994|    108|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    108|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 108, False: 0]
  ------------------
 5997|    108|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    108|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    108|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  6.32k|{
 1976|  6.32k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.32k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  6.56k|{
 1957|  6.56k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.56k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.56k|    }
 1960|  6.56k|    else {
 1961|  6.56k|        auto first = range.begin();
 1962|  6.56k|        for (; first != range.end(); ++first) {
 1963|  6.56k|            if (pred(*first)) {
 1964|  6.56k|                return first;
 1965|  6.56k|            }
 1966|  6.56k|        }
 1967|  6.56k|        return first;
 1968|  6.56k|    }
 1969|  6.56k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  6.25k|    {
  754|  6.25k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  6.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.67k|              cvref<T> obj = *get<T>(fn);
  745|  6.67k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.67k|              }
  748|  6.67k|              else {
  749|  6.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.67k|              }
  751|  6.67k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  6.67k|    {
  684|  6.67k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.67k|            return static_cast<T*>(s.m_cp);
  686|  6.67k|        }
  687|  6.67k|        else if constexpr (std::is_object_v<T>) {
  688|  6.67k|            return static_cast<T*>(s.m_p);
  689|  6.67k|        }
  690|  6.67k|        else {
  691|  6.67k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.67k|        }
  693|  6.67k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  6.67k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  6.25k|        {
  667|  6.25k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    494|{
 1976|    494|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    494|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|  1.06k|{
 1957|  1.06k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.06k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.06k|    }
 1960|  1.06k|    else {
 1961|  1.06k|        auto first = range.begin();
 1962|  23.6k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 23.0k, False: 574]
  ------------------
 1963|  23.0k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 490, False: 22.5k]
  ------------------
 1964|    490|                return first;
 1965|    490|            }
 1966|  23.0k|        }
 1967|    574|        return first;
 1968|  1.06k|    }
 1969|  1.06k|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    108|{
 2037|    108|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    108|    auto it = range.begin();
 2040|    156|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 126, False: 30]
  ------------------
 2041|    126|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    126|                                           needle.size());
 2043|    126|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 30, False: 96]
  ------------------
 2044|     30|            return it;
 2045|     30|        }
 2046|     96|        static_assert(
 2047|     96|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     96|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 48, False: 48]
  ------------------
 2049|     48|            return it;
 2050|     48|        }
 2051|     48|        it = *r;
 2052|     48|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  1.01k|{
 2951|  1.01k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 1.01k]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|  1.01k|    return read_while_classic_space(range);
 2962|  1.01k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  1.01k|{
 2117|  1.01k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.01k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.01k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.01k|        auto buf = make_contiguous_buffer(range);
 2121|  1.01k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.01k|        return ranges::next(range.begin(),
 2123|  1.01k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.01k|    }
 2125|  1.01k|    else {
 2126|  1.01k|        auto it = range.begin();
 2127|       |
 2128|  1.01k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.01k|            auto seg = get_contiguous_beginning(range);
 2130|  1.01k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.01k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 1.01k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  1.01k|            ranges::advance(it, seg.size());
 2135|  1.01k|        }
 2136|       |
 2137|  1.01k|        return read_while_code_point(
 2138|  1.01k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.01k|    }
 2140|  1.01k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  2.35k|{
 1039|  2.35k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.35k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.35k|        return r;
 1042|  2.35k|    }
 1043|  2.35k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.35k|                           ranges::const_iterator_t<Range>,
 1045|  2.35k|                           typename detail::basic_scan_buffer<
 1046|  2.35k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.35k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.35k|            auto seg = r.begin().contiguous_segment();
 1049|  2.35k|            auto dist =
 1050|  2.35k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.35k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.35k|        }
 1053|  2.35k|        else {
 1054|  2.35k|            return r.begin().contiguous_segment();
 1055|  2.35k|        }
 1056|  2.35k|    }
 1057|  2.35k|    else {
 1058|  2.35k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.35k|    }
 1060|  2.35k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  2.02k|{
 2082|  2.02k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.02k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  2.22k|{
 2061|  2.22k|    auto it = range.begin();
 2062|   193k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 192k, False: 674]
  ------------------
 2063|   192k|        const auto val =
 2064|   192k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   192k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   192k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 184k, False: 8.42k]
  |  |  ------------------
  ------------------
 2066|   184k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   184k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   184k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.55k, False: 182k]
  ------------------
 2069|  1.55k|                return it;
 2070|  1.55k|            }
 2071|   184k|        }
 2072|   190k|        it = val.iterator;
 2073|   190k|    }
 2074|       |
 2075|    674|    return it;
 2076|  2.22k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   222k|{
 1899|   222k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   222k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   222k|    auto it = range.begin();
 1903|   222k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   222k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.3k, False: 206k]
  |  |  ------------------
  ------------------
 1906|  15.3k|        ++it;
 1907|  15.3k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  15.3k|        return {it, {}};
 1909|  15.3k|    }
 1910|       |
 1911|   206k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 188k, False: 18.2k]
  ------------------
 1912|   188k|        ++it;
 1913|   188k|        return {it, string_type(1, *range.begin())};
 1914|   188k|    }
 1915|       |
 1916|  18.2k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  18.2k|    return {it, string_type{range.begin(), it}};
 1918|   206k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  15.3k|{
 1155|  15.3k|    auto it = input.begin();
 1156|  28.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 27.9k, False: 258]
  ------------------
 1157|  27.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 15.1k, False: 12.8k]
  ------------------
 1158|  15.1k|            break;
 1159|  15.1k|        }
 1160|  27.9k|    }
 1161|  15.3k|    return it;
 1162|  15.3k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  18.2k|    {
  283|  18.2k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.2k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  18.2k|    {
  227|  18.2k|        constexpr iter_difference_t<I> zero{0};
  228|  18.2k|        iter_difference_t<I> counter{0};
  229|       |
  230|  18.2k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 18.2k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  18.2k|        else {
  237|  58.3k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 40.2k, False: 18.0k]
  |  Branch (237:34): [True: 40.0k, False: 240]
  ------------------
  238|  40.0k|                ++i;
  239|  40.0k|                ++counter;
  240|  40.0k|            }
  241|  18.2k|        }
  242|       |
  243|  18.2k|        return counter;
  244|  18.2k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.01k|    {
  754|  1.01k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  5.73k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.73k|              cvref<T> obj = *get<T>(fn);
  745|  5.73k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.73k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.73k|              }
  748|  5.73k|              else {
  749|  5.73k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.73k|              }
  751|  5.73k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  5.73k|    {
  684|  5.73k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.73k|            return static_cast<T*>(s.m_cp);
  686|  5.73k|        }
  687|  5.73k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.73k|            return static_cast<T*>(s.m_p);
  689|  5.73k|        }
  690|  5.73k|        else {
  691|  5.73k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.73k|        }
  693|  5.73k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  5.73k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.01k|        {
  662|  1.01k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  8.15k|{
 2951|  8.15k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.80k, False: 344]
  ------------------
 2952|  7.80k|        auto it = read_while_classic_space(range);
 2953|  7.80k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.80k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.80k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.80k|        return it;
 2959|  7.80k|    }
 2960|       |
 2961|    344|    return read_while_classic_space(range);
 2962|  8.15k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  17.5k|{
 2117|  17.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  17.5k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  17.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  17.5k|        auto buf = make_contiguous_buffer(range);
 2121|  17.5k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  17.5k|        return ranges::next(range.begin(),
 2123|  17.5k|                            ranges::distance(buf.view().begin(), it));
 2124|  17.5k|    }
 2125|  17.5k|    else {
 2126|  17.5k|        auto it = range.begin();
 2127|       |
 2128|  17.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  17.5k|            auto seg = get_contiguous_beginning(range);
 2130|  17.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  17.5k|                seg_it != seg.end()) {
 2132|  17.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  17.5k|            }
 2134|  17.5k|            ranges::advance(it, seg.size());
 2135|  17.5k|        }
 2136|       |
 2137|  17.5k|        return read_while_code_point(
 2138|  17.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  17.5k|    }
 2140|  17.5k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  20.6k|{
 1683|  20.6k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  20.6k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  20.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  20.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  20.6k|    }
 1688|  20.6k|    else {
 1689|  20.6k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  20.6k|    }
 1691|  20.6k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  20.6k|    {
 1490|  20.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  31.2k|    {
 3040|  31.2k|        reader_error_handler eh{};
 3041|  31.2k|        get_derived().check_specs_impl(specs, eh);
 3042|  31.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.6k, False: 1.58k]
  |  |  ------------------
  ------------------
 3043|  29.6k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  29.6k|        }
 3045|  1.58k|        return {};
 3046|  31.2k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  31.2k|    {
 3051|  31.2k|        return static_cast<Derived&>(*this);
 3052|  31.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  31.2k|    {
 3485|  31.2k|        detail::check_int_type_specs(specs, eh);
 3486|  31.2k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  3.05k|    {
 3035|  3.05k|        return true;
 3036|  3.05k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    472|    {
 3539|    472|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 472]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    472|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    472|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    472|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 472]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    472|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 472]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    472|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    472|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 464, False: 8]
  |  |  ------------------
  ------------------
 3565|    464|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 464, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    464|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    464|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    464|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    464|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    464|    }                                                  \
  |  |  |  | 3671|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    292|    {
 3539|    292|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    292|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    292|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 292]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    292|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 292]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    292|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    292|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 256, False: 36]
  |  |  ------------------
  ------------------
 3565|    256|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    256|                    parse_integer_digits_without_thsep(
 3567|    256|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    256|                        prefix_result.parsed_base));
 3569|       |
 3570|    256|            auto buf = make_contiguous_buffer(
 3571|    256|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    256|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    256|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    256|        }
 3580|       |
 3581|     36|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     36|            localized_number_formatting_options<CharT>{loc};
 3586|     36|#endif
 3587|       |
 3588|     36|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     36|    }                                                  \
  |  |  |  | 3671|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    472|    {
 3539|    472|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 472]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    472|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    472|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    472|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 472]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    472|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 472]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    472|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    472|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 464, False: 8]
  |  |  ------------------
  ------------------
 3565|    464|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 464, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    464|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    464|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    464|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    464|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    464|    }                                                  \
  |  |  |  | 3671|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    292|    {
 3539|    292|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    292|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    292|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 292]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    292|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 292]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    292|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    292|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 256, False: 36]
  |  |  ------------------
  ------------------
 3565|    256|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    256|                    parse_integer_digits_without_thsep(
 3567|    256|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    256|                        prefix_result.parsed_base));
 3569|       |
 3570|    256|            auto buf = make_contiguous_buffer(
 3571|    256|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    256|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    256|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    256|        }
 3580|       |
 3581|     36|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     36|            localized_number_formatting_options<CharT>{loc};
 3586|     36|#endif
 3587|       |
 3588|     36|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     36|    }                                                  \
  |  |  |  | 3671|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    442|    {
 3539|    442|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    442|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    442|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 442]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    442|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 442]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    442|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    442|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 442, False: 0]
  |  |  ------------------
  ------------------
 3565|    442|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 442, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    442|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    442|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    442|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    442|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    442|    }                                                  \
  |  |  |  | 3671|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    976|    {
 3539|    976|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    976|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    976|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    976|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 976]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    976|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    976|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    976|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    976|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 976]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    976|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 976]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    976|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    976|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 976, False: 0]
  |  |  ------------------
  ------------------
 3565|    976|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    976|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    976|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    976|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 976]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    976|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    976|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    976|                    parse_integer_digits_without_thsep(
 3567|    976|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    976|                        prefix_result.parsed_base));
 3569|       |
 3570|    976|            auto buf = make_contiguous_buffer(
 3571|    976|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    976|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    976|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    976|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    976|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 976, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    976|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    976|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    976|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    976|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    976|    }                                                  \
  |  |  |  | 3671|    976|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    976|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  15.6k|    {
 3040|  15.6k|        reader_error_handler eh{};
 3041|  15.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  15.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 806]
  |  |  ------------------
  ------------------
 3043|  14.8k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  14.8k|        }
 3045|    806|        return {};
 3046|  15.6k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  15.6k|    {
 3051|  15.6k|        return static_cast<Derived&>(*this);
 3052|  15.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  15.6k|    {
 4145|  15.6k|        detail::check_float_type_specs(specs, eh);
 4146|  15.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.54k|    {
 3035|  1.54k|        return true;
 3036|  1.54k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    780|    {
 4217|    780|        unsigned options{};
 4218|    780|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 50, False: 730]
  ------------------
 4219|     50|            options |= float_reader_base::allow_thsep;
 4220|     50|        }
 4221|       |
 4222|    780|        SCN_GCC_COMPAT_PUSH
 4223|    780|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    780|        switch (specs.type) {
 4226|     32|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 32, False: 748]
  ------------------
 4227|     32|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 774]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     48|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 48, False: 732]
  ------------------
 4233|     48|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 6, False: 774]
  ------------------
 4236|      6|                return options | float_reader_base::allow_scientific |
 4237|      6|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    688|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 688, False: 92]
  ------------------
 4240|    688|                return options | float_reader_base::allow_scientific |
 4241|    688|                       float_reader_base::allow_fixed |
 4242|    688|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 780]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    780|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    780|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    780|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    780|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.51k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  3.03k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  1.02k|    {
 4057|  1.02k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.02k, False: 0]
  ------------------
 4058|  1.02k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.02k, False: 0]
  ------------------
 4059|  1.02k|            return;
 4060|  1.02k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  1.36k|    {
 1587|  1.36k|        return m_storage.has_value();
 1588|  1.36k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    682|    {
 1592|    682|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    682|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    682|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    682|        return *m_storage;
 1594|    682|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    472|    {
  763|    472|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    472|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    472|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    472|    {
 3705|    472|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 472]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    472|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    472|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    472|        auto it = sign_result.first;
 3708|    472|        m_sign = sign_result.second;
 3709|       |
 3710|    472|        auto digits_begin = it;
 3711|    472|        auto r = ranges::subrange{it, range.end()};
 3712|    472|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    472|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    472|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    472|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    472|                SCN_TRY_ASSIGN(
 3717|    472|                    it,
 3718|    472|                    do_read_source_impl(
 3719|    472|                        r,
 3720|    472|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    472|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    472|            }
 3723|    472|            else {
 3724|    472|                auto cb = [&](const auto& rr)
 3725|    472|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    472|                    auto res = read_all(rr);
 3727|    472|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    472|                        return unexpected_scan_error(
 3729|    472|                            scan_error::invalid_scanned_value,
 3730|    472|                            "Invalid float value");
 3731|    472|                    }
 3732|    472|                    return res;
 3733|    472|                };
 3734|    472|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    472|            }
 3736|    472|        }
 3737|    472|        else {
 3738|    472|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 472, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    472|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    472|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    472|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    472|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    472|    }                                                  \
  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    472|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    472|    {
 4000|    472|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    472|        const bool allowed_nonhex =
 4002|    472|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    472|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    472|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 472, False: 0]
  |  Branch (4005:45): [True: 0, False: 472]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    472|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 472]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    472|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 472, False: 0]
  |  Branch (4014:45): [True: 0, False: 472]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    472|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 472]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    472|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 454, False: 18]
  |  Branch (4021:28): [True: 6, False: 448]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    466|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 18, False: 448]
  |  Branch (4036:29): [True: 18, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     18|            m_kind = float_kind::generic;
 4040|     18|            return read_regular_float(range);
 4041|     18|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    448|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 448]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    448|        m_kind = float_kind::generic;
 4052|    448|        return read_regular(range);
 4053|    448|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    472|    {
 3811|    472|        auto it = range.begin();
 3812|    472|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 472, False: 0]
  ------------------
 3813|    472|            return unexpected(r.error());
 3814|    472|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    472|    {
 3834|    472|        auto it = range.begin();
 3835|    472|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 472, False: 0]
  ------------------
 3836|    472|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    472|                scan_error::invalid_scanned_value,
 3838|    472|                "Invalid floating-point NaN value"));
 3839|    472|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    454|    {
 3804|    454|        return read_matching_string_classic_nocase(range, "0x");
 3805|    454|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    466|    {
 3944|    466|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    466|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 452, False: 14]
  |  Branch (3945:50): [True: 0, False: 452]
  ------------------
 3946|       |
 3947|    466|        auto it = ranges::begin(range);
 3948|    466|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    466|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    466|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 466, False: 0]
  |  |  ------------------
  ------------------
 3952|    466|            return r.transform_error(
 3953|    466|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    466|                                              "Invalid floating-point value"));
 3955|    466|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    466|    {
 3774|    466|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    466|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 466]
  |  |  |  Branch (859:45): [True: 0, False: 466]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    466|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    466|        return read_while1_code_unit(
 3783|    466|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    466|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    466|    {
  754|    466|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    466|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    466|              cvref<T> obj = *get<T>(fn);
  745|    466|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    466|                  obj(static_cast<decltype(args)>(args)...);
  747|    466|              }
  748|    466|              else {
  749|    466|                  return obj(static_cast<decltype(args)>(args)...);
  750|    466|              }
  751|    466|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    466|    {
  684|    466|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    466|            return static_cast<T*>(s.m_cp);
  686|    466|        }
  687|    466|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    466|            return static_cast<T*>(s.m_p);
  689|    466|        }
  690|    466|        else {
  691|    466|            return reinterpret_cast<T*>(s.m_fp);
  692|    466|        }
  693|    466|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    466|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    466|        {
  662|    466|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    464|    {
 3665|    464|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 464]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    464|        return read_source_impl(range);
 3671|    464|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.04k|    {
  763|  1.04k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.04k|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     42|    {
 3679|     42|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     42|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     42|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     42|        return read_source_impl(range);
 3685|     42|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.04k|    {
 3705|  1.04k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.04k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.04k|        auto it = sign_result.first;
 3708|  1.04k|        m_sign = sign_result.second;
 3709|       |
 3710|  1.04k|        auto digits_begin = it;
 3711|  1.04k|        auto r = ranges::subrange{it, range.end()};
 3712|  1.04k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.04k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.04k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  |  Branch (859:45): [True: 0, False: 1.04k]
  |  |  |  Branch (859:45): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
 3715|  1.04k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.04k|            else {
 3724|  1.04k|                auto cb = [&](const auto& rr)
 3725|  1.04k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.04k|                    auto res = read_all(rr);
 3727|  1.04k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.04k|                        return unexpected_scan_error(
 3729|  1.04k|                            scan_error::invalid_scanned_value,
 3730|  1.04k|                            "Invalid float value");
 3731|  1.04k|                    }
 3732|  1.04k|                    return res;
 3733|  1.04k|                };
 3734|  1.04k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 1.02k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     26|    }                                                  \
  |  | 3671|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.02k|            }
 3736|  1.04k|        }
 3737|  1.02k|        else {
 3738|  1.02k|            SCN_TRY_ASSIGN(
 3739|  1.02k|                it,
 3740|  1.02k|                do_read_source_impl(
 3741|  1.02k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.02k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.02k|        }
 3744|       |
 3745|  1.02k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.02k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.02k, False: 0]
  |  Branch (3747:48): [True: 1.02k, False: 0]
  ------------------
 3748|  1.02k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.02k, False: 0]
  ------------------
 3749|  1.02k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.02k, False: 0]
  ------------------
 3750|  1.02k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.02k|        }
 3752|       |
 3753|  1.02k|        handle_separators();
 3754|       |
 3755|  1.02k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.02k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.02k|        return it;
 3768|  1.02k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.04k|    {
 3811|  1.04k|        auto it = range.begin();
 3812|  1.04k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.04k, False: 0]
  ------------------
 3813|  1.04k|            return unexpected(r.error());
 3814|  1.04k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.04k|    {
 3834|  1.04k|        auto it = range.begin();
 3835|  1.04k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.04k, False: 0]
  ------------------
 3836|  1.04k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.04k|                scan_error::invalid_scanned_value,
 3838|  1.04k|                "Invalid floating-point NaN value"));
 3839|  1.04k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.02k|    {
 3804|  1.02k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.02k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     26|{
 1996|     26|    auto it = read_while_code_unit(range, pred);
 1997|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 26, False: 0]
  ------------------
 1998|     26|        return unexpected(parse_error::error);
 1999|     26|    }
 2000|      0|    return it;
 2001|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     26|    {
 3944|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 18]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     26|        auto it = ranges::begin(range);
 3948|     26|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3952|     26|            return r.transform_error(
 3953|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     26|                                              "Invalid floating-point value"));
 3955|     26|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     26|    {
 3774|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     26|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     26|        return read_while1_code_unit(
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|     26|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     26|            return static_cast<T*>(s.m_cp);
  686|     26|        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     26|            return static_cast<T*>(s.m_p);
  689|     26|        }
  690|     26|        else {
  691|     26|            return reinterpret_cast<T*>(s.m_fp);
  692|     26|        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.04k|    {
 4000|  1.04k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.04k|        const bool allowed_nonhex =
 4002|  1.04k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.04k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.04k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.04k, False: 0]
  |  Branch (4005:45): [True: 0, False: 1.04k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.04k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 1.04k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  1.04k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.04k, False: 0]
  |  Branch (4014:45): [True: 0, False: 1.04k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  1.04k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 1.04k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  1.04k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.02k, False: 26]
  |  Branch (4021:28): [True: 42, False: 978]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     42|            auto it = range.begin();
 4025|       |
 4026|     42|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 42]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     42|            else {
 4031|     42|                m_kind = float_kind::hex_without_prefix;
 4032|     42|            }
 4033|       |
 4034|     42|            return read_hex(ranges::subrange{it, range.end()});
 4035|     42|        }
 4036|  1.00k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 26, False: 978]
  |  Branch (4036:29): [True: 26, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     26|            m_kind = float_kind::generic;
 4040|     26|            return read_regular_float(range);
 4041|     26|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    978|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    978|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 978]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    978|        m_kind = float_kind::generic;
 4052|    978|        return read_regular(range);
 4053|    978|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.02k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.02k|                    auto res = read_all(rr);
 3727|  1.02k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  1.02k|                    return res;
 3733|  1.02k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.02k|{
 1839|  1.02k|    return ranges::next(range.begin(), range.end());
 1840|  1.02k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.02k|    {
  313|  1.02k|        ranges::advance(x, bound);
  314|  1.02k|        return x;
  315|  1.02k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.02k|    {
  275|  1.02k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.02k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.07k|    {
  190|  1.07k|        i = std::move(bound);
  191|  1.07k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  1.02k|    {
 1577|  1.02k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.02k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  1.02k|    {
 1621|  1.02k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.02k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.02k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.02k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.02k|            m_storage.reset();
 1627|  1.02k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.02k|        }
 1629|  1.02k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.02k|                                          std::basic_string<CharT>>) {
 1631|  1.02k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.02k|            m_view = string_view_type{*m_storage};
 1633|  1.02k|        }
 1634|  1.02k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.02k|                                          typename detail::basic_scan_buffer<
 1636|  1.02k|                                              value_t>::forward_iterator> &&
 1637|  1.02k|                           ranges::common_range<Range>) {
 1638|  1.02k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.02k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.02k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.02k|                             detail::to_address(end_seg.end()))) {
 1642|  1.02k|                auto& str = m_storage.emplace();
 1643|  1.02k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.02k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.02k|                m_view = string_view_type{str};
 1646|  1.02k|                return;
 1647|  1.02k|            }
 1648|       |
 1649|  1.02k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.02k|                                                            end_seg.data());
 1651|  1.02k|            m_storage.reset();
 1652|  1.02k|        }
 1653|  1.02k|        else {
 1654|  1.02k|            auto& str = m_storage.emplace();
 1655|  1.02k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.02k|                str.reserve(range.size());
 1657|  1.02k|            }
 1658|  1.02k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.02k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.02k|                          std::back_inserter(str));
 1661|  1.02k|            }
 1662|  1.02k|            else {
 1663|  1.02k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.02k|                     ++it) {
 1665|  1.02k|                    str.push_back(*it);
 1666|  1.02k|                }
 1667|  1.02k|            }
 1668|  1.02k|            m_view = string_view_type{str};
 1669|  1.02k|        }
 1670|  1.02k|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.00k|    {
 3665|  1.00k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.00k|        return read_source_impl(range);
 3671|  1.00k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.02k|    {
 3691|  1.02k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.02k|        const std::ptrdiff_t sign_len =
 3694|  1.02k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 1.02k]
  ------------------
 3695|       |
 3696|  1.02k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.02k|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.02k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    472|    {
 4170|    472|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    472|#if !SCN_DISABLE_LOCALE
 4173|    472|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 464]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    464|#endif
 4182|       |
 4183|    464|        return read_impl<Range>(
 4184|    464|            range, rd,
 4185|    464|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    464|                return r.read_source(SCN_FWD(args)...);
 4187|    464|            },
 4188|    464|            value);
 4189|    472|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    472|    {
 4206|    472|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    472|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 472, False: 0]
  |  |  ------------------
  ------------------
 4208|    472|            return unexpected(r.error());
 4209|    472|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    464|    {
  754|    464|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    464|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    464|              cvref<T> obj = *get<T>(fn);
  745|    464|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    464|                  obj(static_cast<decltype(args)>(args)...);
  747|    464|              }
  748|    464|              else {
  749|    464|                  return obj(static_cast<decltype(args)>(args)...);
  750|    464|              }
  751|    464|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    464|    {
  684|    464|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    464|            return static_cast<T*>(s.m_cp);
  686|    464|        }
  687|    464|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    464|            return static_cast<T*>(s.m_p);
  689|    464|        }
  690|    464|        else {
  691|    464|            return reinterpret_cast<T*>(s.m_fp);
  692|    464|        }
  693|    464|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    464|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    464|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    464|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    464|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    464|        {
  662|    464|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    308|    {
 4170|    308|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    308|#if !SCN_DISABLE_LOCALE
 4173|    308|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 42, False: 266]
  ------------------
 4174|     42|            return read_impl<Range>(
 4175|     42|                range, rd,
 4176|     42|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     42|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     42|                },
 4179|     42|                value, loc);
 4180|     42|        }
 4181|    266|#endif
 4182|       |
 4183|    266|        return read_impl<Range>(
 4184|    266|            range, rd,
 4185|    266|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    266|                return r.read_source(SCN_FWD(args)...);
 4187|    266|            },
 4188|    266|            value);
 4189|    308|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.04k|    {
 4206|  1.04k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.04k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 1.02k]
  |  |  ------------------
  ------------------
 4208|     26|            return unexpected(r.error());
 4209|     26|        }
 4210|       |
 4211|  1.02k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.02k|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  1.02k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     42|    {
  754|     42|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     42|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     42|              cvref<T> obj = *get<T>(fn);
  745|     42|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     42|                  obj(static_cast<decltype(args)>(args)...);
  747|     42|              }
  748|     42|              else {
  749|     42|                  return obj(static_cast<decltype(args)>(args)...);
  750|     42|              }
  751|     42|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     42|    {
  684|     42|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     42|            return static_cast<T*>(s.m_cp);
  686|     42|        }
  687|     42|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     42|            return static_cast<T*>(s.m_p);
  689|     42|        }
  690|     42|        else {
  691|     42|            return reinterpret_cast<T*>(s.m_fp);
  692|     42|        }
  693|     42|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     42|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     42|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     42|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     42|        {
  662|     42|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    266|    {
  754|    266|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    266|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    266|              cvref<T> obj = *get<T>(fn);
  745|    266|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    266|                  obj(static_cast<decltype(args)>(args)...);
  747|    266|              }
  748|    266|              else {
  749|    266|                  return obj(static_cast<decltype(args)>(args)...);
  750|    266|              }
  751|    266|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    266|    {
  684|    266|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    266|            return static_cast<T*>(s.m_cp);
  686|    266|        }
  687|    266|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    266|            return static_cast<T*>(s.m_p);
  689|    266|        }
  690|    266|        else {
  691|    266|            return reinterpret_cast<T*>(s.m_fp);
  692|    266|        }
  693|    266|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    266|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    266|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    266|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    266|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    266|        {
  662|    266|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  16.2k|{
 5809|  16.2k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  16.2k|        return reader_impl_for_bool<CharT>{};
 5811|  16.2k|    }
 5812|  16.2k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  16.2k|        return reader_impl_for_char<CharT>{};
 5814|  16.2k|    }
 5815|  16.2k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  16.2k|        return reader_impl_for_wchar<CharT>{};
 5817|  16.2k|    }
 5818|  16.2k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  16.2k|        return reader_impl_for_code_point<CharT>{};
 5820|  16.2k|    }
 5821|  16.2k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  16.2k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  16.2k|        return reader_impl_for_string<CharT>{};
 5824|  16.2k|    }
 5825|  16.2k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  16.2k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  16.2k|        return reader_impl_for_string<CharT>{};
 5828|  16.2k|    }
 5829|  16.2k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  16.2k|                       std::is_same_v<T, wregex_matches>) {
 5831|  16.2k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  16.2k|    }
 5833|  16.2k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  16.2k|        return reader_impl_for_voidptr<CharT>{};
 5835|  16.2k|    }
 5836|  16.2k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  16.2k|        return reader_impl_for_float<CharT>{};
 5838|  16.2k|    }
 5839|  16.2k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  16.2k|                       !std::is_same_v<T, wchar_t> &&
 5841|  16.2k|                       !std::is_same_v<T, char32_t> &&
 5842|  16.2k|                       !std::is_same_v<T, bool>) {
 5843|  16.2k|        return reader_impl_for_int<CharT>{};
 5844|  16.2k|    }
 5845|  16.2k|    else {
 5846|  16.2k|        return reader_impl_for_monostate<CharT>{};
 5847|  16.2k|    }
 5848|  16.2k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  48.7k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  46.5k|    {
 3040|  46.5k|        reader_error_handler eh{};
 3041|  46.5k|        get_derived().check_specs_impl(specs, eh);
 3042|  46.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  46.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 46.1k]
  |  |  ------------------
  ------------------
 3043|    402|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    402|        }
 3045|  46.1k|        return {};
 3046|  46.5k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  46.5k|    {
 3051|  46.5k|        return static_cast<Derived&>(*this);
 3052|  46.5k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  46.5k|    {
 5210|  46.5k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  46.5k|        SCN_GCC_PUSH
 5213|  46.5k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  46.5k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  46.5k|        SCN_CLANG_PUSH
 5217|  46.5k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  46.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  46.5k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 396, False: 46.1k]
  ------------------
 5221|  2.06k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 2.06k, False: 44.5k]
  ------------------
 5222|  2.06k|                m_type = reader_type::word;
 5223|  2.06k|                break;
 5224|       |
 5225|    528|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 528, False: 46.0k]
  ------------------
 5226|    528|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 444]
  ------------------
 5227|    528|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 222, False: 222]
  ------------------
 5228|    306|                    m_type = reader_type::custom_word;
 5229|    306|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    528|                break;
 5234|      0|            }
 5235|       |
 5236|    114|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 114, False: 46.4k]
  ------------------
 5237|    114|                m_type = reader_type::character;
 5238|    114|                break;
 5239|       |
 5240|  7.86k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 7.86k, False: 38.7k]
  ------------------
 5241|  7.86k|                m_type = reader_type::character_set;
 5242|  7.86k|                break;
 5243|       |
 5244|  30.3k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 30.3k, False: 16.2k]
  ------------------
 5245|  30.3k|                m_type = reader_type::regex;
 5246|  30.3k|                break;
 5247|       |
 5248|  5.28k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 5.28k, False: 41.2k]
  ------------------
 5249|  5.28k|                m_type = reader_type::regex_escaped;
 5250|  5.28k|                break;
 5251|  46.5k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  46.5k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  56.9k|    {
 5259|  56.9k|        return m_type == reader_type::word;
 5260|  56.9k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  18.6k|{
 1132|  18.6k|    auto it = src.begin();
 1133|  2.06M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.04M, False: 15.0k]
  ------------------
 1134|  2.04M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.04M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 2.24k, False: 2.04M]
  ------------------
 1136|  2.24k|            return false;
 1137|  2.24k|        }
 1138|  2.04M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 288, False: 2.04M]
  ------------------
 1139|    288|            return false;
 1140|    288|        }
 1141|  2.04M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.04M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.04M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.15k, False: 2.04M]
  ------------------
 1144|  1.15k|            return false;
 1145|  1.15k|        }
 1146|  2.04M|        it += len;
 1147|  2.04M|    }
 1148|  15.0k|    return true;
 1149|  18.6k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    682|{
 2993|    682|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    682|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 682, False: 0]
  ------------------
 2995|    682|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    682|    static_cast<    \
  |  |  929|    682|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    682|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    682|    }
 3001|    682|    else {
 3002|    682|        return transcode_impl(source.view(), dest);
 3003|    682|    }
 3004|       |
 3005|    682|    return {};
 3006|    682|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  7.82k|        {
 5103|  7.82k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 1.15k, False: 6.66k]
  ------------------
 5104|  1.15k|                return {};
 5105|  1.15k|            }
 5106|       |
 5107|  6.66k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  6.66k|            auto it = detail::to_address(charset_string.begin());
 5109|  6.66k|            auto set = detail::parse_presentation_set(
 5110|  6.66k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  6.66k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  6.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.66k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  6.66k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  6.66k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  6.66k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  6.66k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  6.66k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  6.66k|                      nonascii.extra_ranges.end());
 5119|  6.66k|            return {};
 5120|  6.66k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  1.49M|        {
 5138|  1.49M|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 168k, False: 1.32M]
  ------------------
 5139|   168k|                return helper.is_char_set_in_extra_literals(cp);
 5140|   168k|            }
 5141|       |
 5142|  1.32M|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  1.49M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|   168k|        {
 5086|       |            // TODO: binary search?
 5087|   168k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 168k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|   168k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|   168k|            return std::find_if(
 5093|   168k|                       nonascii.extra_ranges.begin(),
 5094|   168k|                       nonascii.extra_ranges.end(),
 5095|   168k|                       [cp_val](const auto& pair) noexcept {
 5096|   168k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|   168k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|   168k|                       }) != nonascii.extra_ranges.end();
 5099|   168k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  45.3M|                       [cp_val](const auto& pair) noexcept {
 5096|  45.3M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 45.3M, False: 14.5k]
  ------------------
 5097|  45.3M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 165k, False: 45.1M]
  ------------------
 5098|  45.3M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  1.34M|        {
 5076|  1.34M|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  1.34M|            const auto val =
 5078|  1.34M|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  1.34M|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  1.34M|                    (val % 8)) &
 5081|  1.34M|                   1u;
 5082|  1.34M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  24.4k|        {
 5129|  24.4k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 7.95k, False: 16.5k]
  ------------------
 5130|  7.95k|                return false;
 5131|  7.95k|            }
 5132|       |
 5133|  16.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  24.4k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  7.82k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.89k|    {
 5277|  1.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.89k|        return read_impl(range, specs, value);
 5279|  1.89k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.89k|    {
 5295|  1.89k|        SCN_CLANG_PUSH
 5296|  1.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.89k|        switch (m_type) {
 5299|    446|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 446, False: 1.44k]
  ------------------
 5300|    446|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.83k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.85k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    674|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 674, False: 1.21k]
  ------------------
 5310|    674|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    674|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.88k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    676|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 676, False: 1.21k]
  ------------------
 5320|    676|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    676|                    range,
 5322|    676|                    get_unescaped_regex_pattern(
 5323|    676|                        specs.charset_string<SourceCharT>()),
 5324|    676|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.89k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.89k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.89k|        }
 5331|       |
 5332|  1.89k|        SCN_CLANG_POP
 5333|  1.89k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    446|    {
 4820|    446|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    446|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    538|{
 4752|    538|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    538|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    538|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 222, False: 316]
  ------------------
 4756|    222|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    222|                                     "Invalid encoding in scanned string");
 4758|    222|    }
 4759|    316|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    316|    static_cast<    \
  |  |  929|    316|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    316|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 316]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    316|    return SCN_MOVE(result);
  ------------------
  |  |  928|    316|    static_cast<    \
  |  |  929|    316|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    316|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|  1.33k|{
 2088|  1.33k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.33k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.33k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.33k|        auto buf = make_contiguous_buffer(range);
 2092|  1.33k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.33k|        return ranges::next(range.begin(),
 2094|  1.33k|                            ranges::distance(buf.view().begin(), it));
 2095|  1.33k|    }
 2096|  1.33k|    else {
 2097|  1.33k|        auto it = range.begin();
 2098|       |
 2099|  1.33k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  1.33k|            auto seg = get_contiguous_beginning(range);
 2101|  1.33k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.33k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 1.33k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  1.33k|            ranges::advance(it, seg.size());
 2106|  1.33k|        }
 2107|       |
 2108|  1.33k|        return read_until_code_point(
 2109|  1.33k|            ranges::subrange{it, range.end()},
 2110|  1.33k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.33k|    }
 2112|  1.33k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|  1.33k|{
 2061|  1.33k|    auto it = range.begin();
 2062|  30.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 29.8k, False: 870]
  ------------------
 2063|  29.8k|        const auto val =
 2064|  29.8k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  29.8k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  29.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.8k, False: 6.97k]
  |  |  ------------------
  ------------------
 2066|  22.8k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  22.8k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  22.8k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 468, False: 22.4k]
  ------------------
 2069|    468|                return it;
 2070|    468|            }
 2071|  22.8k|        }
 2072|  29.4k|        it = val.iterator;
 2073|  29.4k|    }
 2074|       |
 2075|    870|    return it;
 2076|  1.33k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.33k|    {
  754|  1.33k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  22.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.8k|              cvref<T> obj = *get<T>(fn);
  745|  22.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.8k|              }
  748|  22.8k|              else {
  749|  22.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.8k|              }
  751|  22.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  22.8k|    {
  684|  22.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.8k|            return static_cast<T*>(s.m_cp);
  686|  22.8k|        }
  687|  22.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.8k|            return static_cast<T*>(s.m_p);
  689|  22.8k|        }
  690|  22.8k|        else {
  691|  22.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.8k|        }
  693|  22.8k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  22.8k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.33k|        {
  662|  1.33k|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     56|    {
 4841|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 22]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     66|{
 2007|     66|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     66|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     66|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     66|                           needle.end());
 2012|     66|    }
 2013|     66|    else {
 2014|     66|        auto first = range.begin();
 2015|    282|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    282|            auto it = first;
 2017|    408|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    408|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 372]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    372|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 30, False: 342]
  ------------------
 2022|     30|                    return it;
 2023|     30|                }
 2024|    342|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 216, False: 126]
  ------------------
 2025|    216|                    break;
 2026|    216|                }
 2027|    342|            }
 2028|    216|            ++first;
 2029|    216|        }
 2030|     66|    }
 2031|     66|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     36|    {
 4947|     36|        return read_impl(
 4948|     36|            range,
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
 4952|     36|            detail::priority_tag<1>{});
 4953|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    108|{
 1839|    108|    return ranges::next(range.begin(), range.end());
 1840|    108|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    108|    {
  313|    108|        ranges::advance(x, bound);
  314|    108|        return x;
  315|    108|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    108|    {
  275|    108|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    108|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    108|    {
  203|  2.48k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.37k, False: 108]
  ------------------
  204|  2.37k|            ++i;
  205|  2.37k|        }
  206|    108|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    674|    {
 5048|    674|        auto it = read_source_impl(range, {specs});
 5049|    674|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 652]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    652|        return read_string_impl(range, *it, value);
 5054|    674|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|  2.02k|    {
 5153|  2.02k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.02k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.02k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.02k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.02k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.02k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 1.20k, False: 816]
  ------------------
 5163|  1.20k|            const auto cb = [&](char32_t cp) {
 5164|  1.20k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  1.20k|            };
 5166|       |
 5167|  1.20k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 204, False: 1.00k]
  ------------------
 5168|    204|                auto it = read_until_code_point(range, cb);
 5169|    204|                return check_nonempty(it, range);
 5170|    204|            }
 5171|  1.00k|            auto it = read_while_code_point(range, cb);
 5172|  1.00k|            return check_nonempty(it, range);
 5173|  1.20k|        }
 5174|       |
 5175|    816|        const auto cb = [&](SourceCharT ch) {
 5176|    816|            return cb_wrapper.on_ascii_only(ch);
 5177|    816|        };
 5178|       |
 5179|    816|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 468, False: 348]
  ------------------
 5180|    468|            auto it = read_until_code_unit(range, cb);
 5181|    468|            return check_nonempty(it, range);
 5182|    468|        }
 5183|    348|        auto it = read_while_code_unit(range, cb);
 5184|    348|        return check_nonempty(it, range);
 5185|    816|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|  1.20k|    {
  754|  1.20k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   178k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   178k|              cvref<T> obj = *get<T>(fn);
  745|   178k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   178k|                  obj(static_cast<decltype(args)>(args)...);
  747|   178k|              }
  748|   178k|              else {
  749|   178k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   178k|              }
  751|   178k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   178k|    {
  684|   178k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   178k|            return static_cast<T*>(s.m_cp);
  686|   178k|        }
  687|   178k|        else if constexpr (std::is_object_v<T>) {
  688|   178k|            return static_cast<T*>(s.m_p);
  689|   178k|        }
  690|   178k|        else {
  691|   178k|            return reinterpret_cast<T*>(s.m_fp);
  692|   178k|        }
  693|   178k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   178k|            const auto cb = [&](char32_t cp) {
 5164|   178k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   178k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|  1.20k|        {
  667|  1.20k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|  2.02k|    {
 5191|  2.02k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 66, False: 1.95k]
  ------------------
 5192|     66|            return unexpected_scan_error(
 5193|     66|                scan_error::invalid_scanned_value,
 5194|     66|                "No characters matched in [character set]");
 5195|     66|        }
 5196|       |
 5197|  1.95k|        return it;
 5198|  2.02k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    816|    {
  754|    816|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  20.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.3k|              cvref<T> obj = *get<T>(fn);
  745|  20.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.3k|              }
  748|  20.3k|              else {
  749|  20.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.3k|              }
  751|  20.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  20.3k|    {
  684|  20.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.3k|            return static_cast<T*>(s.m_cp);
  686|  20.3k|        }
  687|  20.3k|        else if constexpr (std::is_object_v<T>) {
  688|  20.3k|            return static_cast<T*>(s.m_p);
  689|  20.3k|        }
  690|  20.3k|        else {
  691|  20.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.3k|        }
  693|  20.3k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  20.3k|        const auto cb = [&](SourceCharT ch) {
 5176|  20.3k|            return cb_wrapper.on_ascii_only(ch);
 5177|  20.3k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    816|        {
  667|    816|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    652|{
 4752|    652|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    652|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    652|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 286, False: 366]
  ------------------
 4756|    286|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    286|                                     "Invalid encoding in scanned string");
 4758|    286|    }
 4759|    366|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    366|    static_cast<    \
  |  |  929|    366|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    366|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    366|    return SCN_MOVE(result);
  ------------------
  |  |  928|    366|    static_cast<    \
  |  |  929|    366|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    366|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    678|    {
 4891|    678|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    678|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    678|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    678|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    678|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 678, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    678|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    678|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    678|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    678|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    678|    }                                                  \
  |  |  |  | 3671|    678|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    678|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  2.03k|    {
 4913|  2.03k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  4.06k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  2.03k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  2.03k|            return unexpected_scan_error(
 4916|  2.03k|                scan_error::invalid_scanned_value,
 4917|  2.03k|                "Regex backend doesn't support wide strings as input");
 4918|  2.03k|        }
 4919|  2.03k|        else {
 4920|  2.03k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 2.03k, False: 0]
  ------------------
 4921|  2.03k|                return unexpected_scan_error(
 4922|  2.03k|                    scan_error::invalid_scanned_value,
 4923|  2.03k|                    "Cannot use regex with a non-contiguous source "
 4924|  2.03k|                    "range");
 4925|  2.03k|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|  2.03k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  2.03k|{
  959|  2.03k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  2.03k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  2.03k|        return true;
  962|  2.03k|    }
  963|  2.03k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|  2.03k|                           ranges::const_iterator_t<Range>,
  965|  2.03k|                           typename detail::basic_scan_buffer<
  966|  2.03k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  2.03k|        auto beg = r.begin();
  968|  2.03k|        if (!beg.stores_parent()) {
  969|  2.03k|            return true;
  970|  2.03k|        }
  971|  2.03k|        return beg.parent()->is_contiguous();
  972|  2.03k|    }
  973|  2.03k|    else {
  974|  2.03k|        return false;
  975|  2.03k|    }
  976|  2.03k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  13.4k|    {
 5277|  13.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  13.4k|        return read_impl(range, specs, value);
 5279|  13.4k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  13.4k|    {
 5295|  13.4k|        SCN_CLANG_PUSH
 5296|  13.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  13.4k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 13.1k]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 13.4k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 13.4k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.93k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.93k, False: 11.5k]
  ------------------
 5310|  1.93k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.93k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  10.1k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10.1k, False: 3.36k]
  ------------------
 5315|  10.1k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  10.1k|                    range, specs.charset_string<SourceCharT>(),
 5317|  10.1k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.08k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.08k, False: 12.3k]
  ------------------
 5320|  1.08k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.08k|                    range,
 5322|  1.08k|                    get_unescaped_regex_pattern(
 5323|  1.08k|                        specs.charset_string<SourceCharT>()),
 5324|  1.08k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 13.4k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  13.4k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  13.4k|        }
 5331|       |
 5332|  13.4k|        SCN_CLANG_POP
 5333|  13.4k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.03k|    {
 4820|  1.03k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.03k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.08k|{
 4752|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.08k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.08k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 422, False: 660]
  ------------------
 4756|    422|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    422|                                     "Invalid encoding in scanned string");
 4758|    422|    }
 4759|    660|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    660|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    660|    return SCN_MOVE(result);
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    660|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.06k|{
 3012|  3.06k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.06k|        dest.assign(source.view());
 3014|  3.06k|    }
 3015|  3.06k|    else {
 3016|  3.06k|        return transcode_impl(source.view(), dest);
 3017|  3.06k|    }
 3018|       |
 3019|  3.06k|    return {};
 3020|  3.06k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.10k|{
 2088|  3.10k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.10k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.10k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.10k|        auto buf = make_contiguous_buffer(range);
 2092|  3.10k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.10k|        return ranges::next(range.begin(),
 2094|  3.10k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.10k|    }
 2096|  3.10k|    else {
 2097|  3.10k|        auto it = range.begin();
 2098|       |
 2099|  3.10k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  3.10k|            auto seg = get_contiguous_beginning(range);
 2101|  3.10k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.10k|                seg_it != seg.end()) {
 2103|  3.10k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.10k|            }
 2105|  3.10k|            ranges::advance(it, seg.size());
 2106|  3.10k|        }
 2107|       |
 2108|  3.10k|        return read_until_code_point(
 2109|  3.10k|            ranges::subrange{it, range.end()},
 2110|  3.10k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.10k|    }
 2112|  3.10k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.93k|    {
 5048|  1.93k|        auto it = read_source_impl(range, {specs});
 5049|  1.93k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 462, False: 1.47k]
  |  |  ------------------
  ------------------
 5050|    462|            return unexpected(it.error());
 5051|    462|        }
 5052|       |
 5053|  1.47k|        return read_string_impl(range, *it, value);
 5054|  1.93k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  5.80k|    {
 5153|  5.80k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  5.80k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  5.80k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.80k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  5.80k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  5.80k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 5.46k, False: 342]
  ------------------
 5163|  5.46k|            const auto cb = [&](char32_t cp) {
 5164|  5.46k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  5.46k|            };
 5166|       |
 5167|  5.46k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 360, False: 5.10k]
  ------------------
 5168|    360|                auto it = read_until_code_point(range, cb);
 5169|    360|                return check_nonempty(it, range);
 5170|    360|            }
 5171|  5.10k|            auto it = read_while_code_point(range, cb);
 5172|  5.10k|            return check_nonempty(it, range);
 5173|  5.46k|        }
 5174|       |
 5175|    342|        const auto cb = [&](SourceCharT ch) {
 5176|    342|            return cb_wrapper.on_ascii_only(ch);
 5177|    342|        };
 5178|       |
 5179|    342|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 192]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    192|        auto it = read_while_code_unit(range, cb);
 5184|    192|        return check_nonempty(it, range);
 5185|    342|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  5.46k|{
 2061|  5.46k|    auto it = range.begin();
 2062|  1.31M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.31M, False: 378]
  ------------------
 2063|  1.31M|        const auto val =
 2064|  1.31M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.31M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.31M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.31M, False: 4.06k]
  |  |  ------------------
  ------------------
 2066|  1.31M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.31M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.31M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 5.08k, False: 1.31M]
  ------------------
 2069|  5.08k|                return it;
 2070|  5.08k|            }
 2071|  1.31M|        }
 2072|  1.31M|        it = val.iterator;
 2073|  1.31M|    }
 2074|       |
 2075|    378|    return it;
 2076|  5.46k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.31M|{
 1899|  1.31M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.31M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.31M|    auto it = range.begin();
 1903|  1.31M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.31M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.06k, False: 1.31M]
  |  |  ------------------
  ------------------
 1906|  4.06k|        ++it;
 1907|  4.06k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  4.06k|        return {it, {}};
 1909|  4.06k|    }
 1910|       |
 1911|  1.31M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.16M, False: 155k]
  ------------------
 1912|  1.16M|        ++it;
 1913|  1.16M|        return {it, string_type(1, *range.begin())};
 1914|  1.16M|    }
 1915|       |
 1916|   155k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|   155k|    return {it, string_type{range.begin(), it}};
 1918|  1.31M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  4.06k|{
 1155|  4.06k|    auto it = input.begin();
 1156|  7.87k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 7.83k, False: 42]
  ------------------
 1157|  7.83k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.02k, False: 3.80k]
  ------------------
 1158|  4.02k|            break;
 1159|  4.02k|        }
 1160|  7.83k|    }
 1161|  4.06k|    return it;
 1162|  4.06k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|   155k|    {
  283|   155k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   155k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|   155k|    {
  212|   155k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 54, False: 154k]
  ------------------
  213|     54|            auto dist = bound - i;
  214|     54|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     54|            return dist;
  216|     54|        }
  217|   154k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|   154k|        return n;
  219|   155k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   310k|    {
  132|   310k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 310k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   310k|        return t;
  136|   310k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|  1.31M|    {
 1890|  1.31M|        return !codepoint.empty();
 1891|  1.31M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  5.46k|    {
  754|  5.46k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  1.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.31M|              cvref<T> obj = *get<T>(fn);
  745|  1.31M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.31M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.31M|              }
  748|  1.31M|              else {
  749|  1.31M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.31M|              }
  751|  1.31M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.31M|    {
  684|  1.31M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.31M|            return static_cast<T*>(s.m_cp);
  686|  1.31M|        }
  687|  1.31M|        else if constexpr (std::is_object_v<T>) {
  688|  1.31M|            return static_cast<T*>(s.m_p);
  689|  1.31M|        }
  690|  1.31M|        else {
  691|  1.31M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.31M|        }
  693|  1.31M|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  1.31M|            const auto cb = [&](char32_t cp) {
 5164|  1.31M|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  1.31M|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  5.46k|        {
  667|  5.46k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  5.80k|    {
 5191|  5.80k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.38k, False: 4.41k]
  ------------------
 5192|  1.38k|            return unexpected_scan_error(
 5193|  1.38k|                scan_error::invalid_scanned_value,
 5194|  1.38k|                "No characters matched in [character set]");
 5195|  1.38k|        }
 5196|       |
 5197|  4.41k|        return it;
 5198|  5.80k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  5.10k|{
 2082|  5.10k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  5.10k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    342|    {
  754|    342|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.08k|              cvref<T> obj = *get<T>(fn);
  745|  4.08k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.08k|              }
  748|  4.08k|              else {
  749|  4.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.08k|              }
  751|  4.08k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.08k|    {
  684|  4.08k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.08k|            return static_cast<T*>(s.m_cp);
  686|  4.08k|        }
  687|  4.08k|        else if constexpr (std::is_object_v<T>) {
  688|  4.08k|            return static_cast<T*>(s.m_p);
  689|  4.08k|        }
  690|  4.08k|        else {
  691|  4.08k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.08k|        }
  693|  4.08k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.08k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.08k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.08k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    342|        {
  667|    342|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  2.70k|{
 4752|  2.70k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  2.70k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  2.70k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 298, False: 2.40k]
  ------------------
 4756|    298|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    298|                                     "Invalid encoding in scanned string");
 4758|    298|    }
 4759|  2.40k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.40k|    static_cast<    \
  |  |  929|  2.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  2.40k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.40k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  2.40k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.40k|    static_cast<    \
  |  |  929|  2.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  2.40k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  11.1k|    {
 4891|  11.1k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.95k, False: 1.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  9.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  9.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  9.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  9.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  9.95k|    }                                                  \
  |  |  |  | 3671|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.23k|        return read_string_impl(range, it, value);
 4893|  11.1k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  33.5k|    {
 4913|  33.5k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  67.1k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  33.5k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  33.5k|            return unexpected_scan_error(
 4916|  33.5k|                scan_error::invalid_scanned_value,
 4917|  33.5k|                "Regex backend doesn't support wide strings as input");
 4918|  33.5k|        }
 4919|  33.5k|        else {
 4920|  33.5k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 33.5k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  33.5k|            auto input = get_as_contiguous(range);
 4928|  33.5k|            SCN_TRY(it,
  ------------------
  |  | 3672|  33.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.8k, False: 3.70k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.8k|    }                                                  \
  |  |  |  | 3671|  33.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  3.70k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  3.70k|            return ranges::next(range.begin(),
 4931|  3.70k|                                ranges::distance(input.begin(), it));
 4932|  33.5k|        }
 4933|  33.5k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  33.5k|{
  959|  33.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  33.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  33.5k|        return true;
  962|  33.5k|    }
  963|  33.5k|    else if constexpr (std::is_same_v<
  964|  33.5k|                           ranges::const_iterator_t<Range>,
  965|  33.5k|                           typename detail::basic_scan_buffer<
  966|  33.5k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  33.5k|        auto beg = r.begin();
  968|  33.5k|        if (!beg.stores_parent()) {
  969|  33.5k|            return true;
  970|  33.5k|        }
  971|  33.5k|        return beg.parent()->is_contiguous();
  972|  33.5k|    }
  973|  33.5k|    else {
  974|  33.5k|        return false;
  975|  33.5k|    }
  976|  33.5k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  33.5k|{
 1065|  33.5k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  33.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  33.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  33.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  33.5k|        return r;
 1070|  33.5k|    }
 1071|  33.5k|    else if constexpr (std::is_same_v<
 1072|  33.5k|                           ranges::const_iterator_t<Range>,
 1073|  33.5k|                           typename detail::basic_scan_buffer<
 1074|  33.5k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  33.5k|        if constexpr (ranges::common_range<Range>) {
 1076|  33.5k|            return detail::make_string_view_from_pointers(
 1077|  33.5k|                r.begin().to_contiguous_segment_iterator(),
 1078|  33.5k|                r.end().to_contiguous_segment_iterator());
 1079|  33.5k|        }
 1080|  33.5k|        else {
 1081|  33.5k|            return r.begin().contiguous_segment();
 1082|  33.5k|        }
 1083|  33.5k|    }
 1084|  33.5k|    else {
 1085|  33.5k|        SCN_EXPECT(false);
 1086|  33.5k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  33.5k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  33.5k|    }
 1090|  33.5k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  33.5k|{
  981|  33.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  33.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  33.5k|        return true;
  984|  33.5k|    }
  985|  33.5k|    else if constexpr (std::is_same_v<
  986|  33.5k|                           ranges::const_iterator_t<Range>,
  987|  33.5k|                           typename detail::basic_scan_buffer<
  988|  33.5k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  33.5k|        auto beg = r.begin();
  990|  33.5k|        if (beg.contiguous_segment().empty()) {
  991|  33.5k|            return false;
  992|  33.5k|        }
  993|  33.5k|        if constexpr (ranges::common_range<Range>) {
  994|  33.5k|            return beg.contiguous_segment().end() ==
  995|  33.5k|                   ranges::end(r).contiguous_segment().end();
  996|  33.5k|        }
  997|  33.5k|        else {
  998|  33.5k|            if (beg.stores_parent()) {
  999|  33.5k|                return beg.contiguous_segment().end() ==
 1000|  33.5k|                       beg.parent()->current_view().end();
 1001|  33.5k|            }
 1002|  33.5k|            return true;
 1003|  33.5k|        }
 1004|  33.5k|    }
 1005|  33.5k|    else {
 1006|  33.5k|        return false;
 1007|  33.5k|    }
 1008|  33.5k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  33.5k|{
 4346|  33.5k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  33.5k|                  ranges::borrowed_range<Input> &&
 4348|  33.5k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  33.5k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  33.5k|    std::basic_regex<CharT> re{};
 4352|  33.5k|    try {
 4353|  33.5k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  33.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 33.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  33.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  33.5k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  33.5k|                                     re_flags | std::regex_constants::nosubs};
 4356|  33.5k|    }
 4357|  33.5k|    catch (const std::regex_error& err) {
 4358|  22.0k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  22.0k|                                     "Invalid regex");
 4360|  22.0k|    }
 4361|       |
 4362|  11.4k|    std::match_results<const CharT*> matches{};
 4363|  11.4k|    try {
 4364|  11.4k|        bool found = std::regex_search(input.data(),
 4365|  11.4k|                                       input.data() + input.size(), matches, re,
 4366|  11.4k|                                       std::regex_constants::match_continuous);
 4367|  11.4k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 7.78k, False: 3.70k]
  |  Branch (4367:23): [True: 0, False: 3.70k]
  ------------------
 4368|  7.21k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  7.21k|                                         "Regular expression didn't match");
 4370|  7.21k|        }
 4371|  11.4k|    }
 4372|  11.4k|    catch (const std::regex_error& err) {
 4373|    564|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    564|                                     "Regex matching failed with an error");
 4375|    564|    }
 4376|       |
 4377|  3.70k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  11.4k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  16.2k|{
 5809|  16.2k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  16.2k|        return reader_impl_for_bool<CharT>{};
 5811|  16.2k|    }
 5812|  16.2k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  16.2k|        return reader_impl_for_char<CharT>{};
 5814|  16.2k|    }
 5815|  16.2k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  16.2k|        return reader_impl_for_wchar<CharT>{};
 5817|  16.2k|    }
 5818|  16.2k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  16.2k|        return reader_impl_for_code_point<CharT>{};
 5820|  16.2k|    }
 5821|  16.2k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  16.2k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  16.2k|        return reader_impl_for_string<CharT>{};
 5824|  16.2k|    }
 5825|  16.2k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  16.2k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  16.2k|        return reader_impl_for_string<CharT>{};
 5828|  16.2k|    }
 5829|  16.2k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  16.2k|                       std::is_same_v<T, wregex_matches>) {
 5831|  16.2k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  16.2k|    }
 5833|  16.2k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  16.2k|        return reader_impl_for_voidptr<CharT>{};
 5835|  16.2k|    }
 5836|  16.2k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  16.2k|        return reader_impl_for_float<CharT>{};
 5838|  16.2k|    }
 5839|  16.2k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  16.2k|                       !std::is_same_v<T, wchar_t> &&
 5841|  16.2k|                       !std::is_same_v<T, char32_t> &&
 5842|  16.2k|                       !std::is_same_v<T, bool>) {
 5843|  16.2k|        return reader_impl_for_int<CharT>{};
 5844|  16.2k|    }
 5845|  16.2k|    else {
 5846|  16.2k|        return reader_impl_for_monostate<CharT>{};
 5847|  16.2k|    }
 5848|  16.2k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    682|{
 2993|    682|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    682|        if (source.stores_allocated_string()) {
 2995|    682|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    682|        }
 2997|    682|        else {
 2998|    682|            dest.assign(source.view());
 2999|    682|        }
 3000|    682|    }
 3001|    682|    else {
 3002|    682|        return transcode_impl(source.view(), dest);
 3003|    682|    }
 3004|       |
 3005|      0|    return {};
 3006|    682|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  3.75k|{
 2968|  3.75k|    dst.clear();
 2969|  3.75k|    transcode_valid_to_string(src, dst);
 2970|  3.75k|    return {};
 2971|  3.75k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  3.75k|{
 1403|  3.75k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  3.75k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  3.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  3.75k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  3.75k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  3.75k|            std::u32string tmp;
 1410|  3.75k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  3.75k|            return transcode_to_string_impl_32to16<true>(
 1412|  3.75k|                std::u32string_view{tmp}, dest);
 1413|  3.75k|        }
 1414|  3.75k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  3.75k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  3.75k|        }
 1417|  3.75k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  3.75k|{
 1277|  3.75k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  3.75k|    auto it = src.begin();
 1280|   497k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 493k, False: 3.75k]
  ------------------
 1281|   493k|        auto res = get_next_code_point_valid(
 1282|   493k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   493k|                                                                 src.end()));
 1284|   493k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   493k|        dest.push_back(res.value);
 1286|   493k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   493k|    }
 1288|  3.75k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   493k|{
 1189|   493k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   493k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   493k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   493k|    return {input.begin() + len,
 1195|   493k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   493k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.89k|    {
 5277|  1.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.89k|        return read_impl(range, specs, value);
 5279|  1.89k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.89k|    {
 5295|  1.89k|        SCN_CLANG_PUSH
 5296|  1.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.89k|        switch (m_type) {
 5299|    446|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 446, False: 1.44k]
  ------------------
 5300|    446|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.83k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.85k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    674|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 674, False: 1.21k]
  ------------------
 5310|    674|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    674|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.88k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    676|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 676, False: 1.21k]
  ------------------
 5320|    676|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    676|                    range,
 5322|    676|                    get_unescaped_regex_pattern(
 5323|    676|                        specs.charset_string<SourceCharT>()),
 5324|    676|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.89k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.89k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.89k|        }
 5331|       |
 5332|  1.89k|        SCN_CLANG_POP
 5333|  1.89k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    446|    {
 4820|    446|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    446|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    538|{
 4752|    538|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    538|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    538|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 222, False: 316]
  ------------------
 4756|    222|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    222|                                     "Invalid encoding in scanned string");
 4758|    222|    }
 4759|    316|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    316|    static_cast<    \
  |  |  929|    316|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    316|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 316]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    316|    return SCN_MOVE(result);
  ------------------
  |  |  928|    316|    static_cast<    \
  |  |  929|    316|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    316|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     56|    {
 4841|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 22]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     36|    {
 4947|     36|        return read_impl(
 4948|     36|            range,
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
 4952|     36|            detail::priority_tag<1>{});
 4953|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    674|    {
 5048|    674|        auto it = read_source_impl(range, {specs});
 5049|    674|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 652]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    652|        return read_string_impl(range, *it, value);
 5054|    674|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    652|{
 4752|    652|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    652|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    652|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 286, False: 366]
  ------------------
 4756|    286|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    286|                                     "Invalid encoding in scanned string");
 4758|    286|    }
 4759|    366|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    366|    static_cast<    \
  |  |  929|    366|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    366|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    366|    return SCN_MOVE(result);
  ------------------
  |  |  928|    366|    static_cast<    \
  |  |  929|    366|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    366|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    678|    {
 4891|    678|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    678|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    678|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    678|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    678|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 678, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    678|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    678|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    678|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    678|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    678|    }                                                  \
  |  |  |  | 3671|    678|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    678|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  13.4k|    {
 5277|  13.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  13.4k|        return read_impl(range, specs, value);
 5279|  13.4k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  13.4k|    {
 5295|  13.4k|        SCN_CLANG_PUSH
 5296|  13.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  13.4k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 13.1k]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 13.4k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 13.4k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.93k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.93k, False: 11.5k]
  ------------------
 5310|  1.93k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.93k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  10.1k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10.1k, False: 3.36k]
  ------------------
 5315|  10.1k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  10.1k|                    range, specs.charset_string<SourceCharT>(),
 5317|  10.1k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.08k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.08k, False: 12.3k]
  ------------------
 5320|  1.08k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.08k|                    range,
 5322|  1.08k|                    get_unescaped_regex_pattern(
 5323|  1.08k|                        specs.charset_string<SourceCharT>()),
 5324|  1.08k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 13.4k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  13.4k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  13.4k|        }
 5331|       |
 5332|  13.4k|        SCN_CLANG_POP
 5333|  13.4k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.03k|    {
 4820|  1.03k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.03k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.08k|{
 4752|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.08k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.08k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 422, False: 660]
  ------------------
 4756|    422|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    422|                                     "Invalid encoding in scanned string");
 4758|    422|    }
 4759|    660|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    660|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    660|    return SCN_MOVE(result);
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    660|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.06k|{
 3012|  3.06k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.06k|        dest.assign(source.view());
 3014|  3.06k|    }
 3015|  3.06k|    else {
 3016|  3.06k|        return transcode_impl(source.view(), dest);
 3017|  3.06k|    }
 3018|       |
 3019|      0|    return {};
 3020|  3.06k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.93k|    {
 5048|  1.93k|        auto it = read_source_impl(range, {specs});
 5049|  1.93k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 462, False: 1.47k]
  |  |  ------------------
  ------------------
 5050|    462|            return unexpected(it.error());
 5051|    462|        }
 5052|       |
 5053|  1.47k|        return read_string_impl(range, *it, value);
 5054|  1.93k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  2.70k|{
 4752|  2.70k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  2.70k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  2.70k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 298, False: 2.40k]
  ------------------
 4756|    298|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    298|                                     "Invalid encoding in scanned string");
 4758|    298|    }
 4759|  2.40k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.40k|    static_cast<    \
  |  |  929|  2.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  2.40k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.40k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  2.40k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.40k|    static_cast<    \
  |  |  929|  2.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  2.40k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  11.1k|    {
 4891|  11.1k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.95k, False: 1.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  9.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  9.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  9.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  9.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  9.95k|    }                                                  \
  |  |  |  | 3671|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.23k|        return read_string_impl(range, it, value);
 4893|  11.1k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  16.2k|{
 5809|  16.2k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  16.2k|        return reader_impl_for_bool<CharT>{};
 5811|  16.2k|    }
 5812|  16.2k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  16.2k|        return reader_impl_for_char<CharT>{};
 5814|  16.2k|    }
 5815|  16.2k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  16.2k|        return reader_impl_for_wchar<CharT>{};
 5817|  16.2k|    }
 5818|  16.2k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  16.2k|        return reader_impl_for_code_point<CharT>{};
 5820|  16.2k|    }
 5821|  16.2k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  16.2k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  16.2k|        return reader_impl_for_string<CharT>{};
 5824|  16.2k|    }
 5825|  16.2k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  16.2k|                       std::is_same_v<T, std::wstring>) {
 5827|  16.2k|        return reader_impl_for_string<CharT>{};
 5828|  16.2k|    }
 5829|  16.2k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  16.2k|                       std::is_same_v<T, wregex_matches>) {
 5831|  16.2k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  16.2k|    }
 5833|  16.2k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  16.2k|        return reader_impl_for_voidptr<CharT>{};
 5835|  16.2k|    }
 5836|  16.2k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  16.2k|        return reader_impl_for_float<CharT>{};
 5838|  16.2k|    }
 5839|  16.2k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  16.2k|                       !std::is_same_v<T, wchar_t> &&
 5841|  16.2k|                       !std::is_same_v<T, char32_t> &&
 5842|  16.2k|                       !std::is_same_v<T, bool>) {
 5843|  16.2k|        return reader_impl_for_int<CharT>{};
 5844|  16.2k|    }
 5845|  16.2k|    else {
 5846|  16.2k|        return reader_impl_for_monostate<CharT>{};
 5847|  16.2k|    }
 5848|  16.2k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.89k|    {
 5277|  1.89k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.89k|        return read_impl(range, specs, value);
 5279|  1.89k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.89k|    {
 5295|  1.89k|        SCN_CLANG_PUSH
 5296|  1.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.89k|        switch (m_type) {
 5299|    446|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 446, False: 1.44k]
  ------------------
 5300|    446|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.83k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.85k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    674|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 674, False: 1.21k]
  ------------------
 5310|    674|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    674|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.88k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    676|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 676, False: 1.21k]
  ------------------
 5320|    676|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    676|                    range,
 5322|    676|                    get_unescaped_regex_pattern(
 5323|    676|                        specs.charset_string<SourceCharT>()),
 5324|    676|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.89k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.89k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.89k|        }
 5331|       |
 5332|  1.89k|        SCN_CLANG_POP
 5333|  1.89k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    446|    {
 4827|    446|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    446|                                     value);
 4829|    446|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    538|{
 4773|    538|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    538|    auto src = [&]() {
 4776|    538|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    538|            return make_contiguous_buffer(
 4778|    538|                ranges::subrange{range.begin().base(), result.base()});
 4779|    538|        }
 4780|    538|        else {
 4781|    538|            return make_contiguous_buffer(
 4782|    538|                ranges::subrange{range.begin(), result});
 4783|    538|        }
 4784|    538|    }();
 4785|    538|    using src_type = decltype(src);
 4786|       |
 4787|    538|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    538|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    538|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    538|                                     "Cannot read a string_view from "
 4796|    538|                                     "this source range (would require "
 4797|    538|                                     "transcoding)");
 4798|    538|    }
 4799|    538|    else {
 4800|    538|        const auto view = src.view();
 4801|    538|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    538|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 222, False: 316]
  ------------------
 4804|    222|            return unexpected_scan_error(
 4805|    222|                scan_error::invalid_scanned_value,
 4806|    222|                "Invalid encoding in scanned string_view");
 4807|    222|        }
 4808|       |
 4809|    316|        return SCN_MOVE(result);
  ------------------
  |  |  928|    316|    static_cast<    \
  |  |  929|    316|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    538|    }
 4811|    538|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    538|    auto src = [&]() {
 4776|    538|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    538|            return make_contiguous_buffer(
 4778|    538|                ranges::subrange{range.begin().base(), result.base()});
 4779|    538|        }
 4780|    538|        else {
 4781|    538|            return make_contiguous_buffer(
 4782|    538|                ranges::subrange{range.begin(), result});
 4783|    538|        }
 4784|    538|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     56|    {
 4863|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 22]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     22|        return read_string_view_impl(
 4873|     22|            range,
 4874|     22|            read_until_code_units(
 4875|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     22|            value);
 4877|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     36|    {
 4959|     36|        return read_impl(
 4960|     36|            range,
 4961|     36|            [&](const auto& rng) {
 4962|     36|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     36|            },
 4964|     36|            detail::priority_tag<1>{});
 4965|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     36|            [&](const auto& rng) {
 4962|     36|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     36|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    674|    {
 5062|    674|        auto it = read_source_impl(range, {specs});
 5063|    674|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 652]
  |  |  ------------------
  ------------------
 5064|     22|            return unexpected(it.error());
 5065|     22|        }
 5066|       |
 5067|    652|        return read_string_view_impl(range, *it, value);
 5068|    674|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    652|{
 4773|    652|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    652|    auto src = [&]() {
 4776|    652|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    652|            return make_contiguous_buffer(
 4778|    652|                ranges::subrange{range.begin().base(), result.base()});
 4779|    652|        }
 4780|    652|        else {
 4781|    652|            return make_contiguous_buffer(
 4782|    652|                ranges::subrange{range.begin(), result});
 4783|    652|        }
 4784|    652|    }();
 4785|    652|    using src_type = decltype(src);
 4786|       |
 4787|    652|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    652|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    652|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    652|                                     "Cannot read a string_view from "
 4796|    652|                                     "this source range (would require "
 4797|    652|                                     "transcoding)");
 4798|    652|    }
 4799|    652|    else {
 4800|    652|        const auto view = src.view();
 4801|    652|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    652|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 286, False: 366]
  ------------------
 4804|    286|            return unexpected_scan_error(
 4805|    286|                scan_error::invalid_scanned_value,
 4806|    286|                "Invalid encoding in scanned string_view");
 4807|    286|        }
 4808|       |
 4809|    366|        return SCN_MOVE(result);
  ------------------
  |  |  928|    366|    static_cast<    \
  |  |  929|    366|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    652|    }
 4811|    652|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    652|    auto src = [&]() {
 4776|    652|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    652|            return make_contiguous_buffer(
 4778|    652|                ranges::subrange{range.begin().base(), result.base()});
 4779|    652|        }
 4780|    652|        else {
 4781|    652|            return make_contiguous_buffer(
 4782|    652|                ranges::subrange{range.begin(), result});
 4783|    652|        }
 4784|    652|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    678|    {
 4902|    678|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    678|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    678|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    678|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    678|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 678, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    678|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    678|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    678|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    678|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    678|    }                                                  \
  |  |  |  | 3671|    678|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    678|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  13.4k|    {
 5277|  13.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  13.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  13.4k|        return read_impl(range, specs, value);
 5279|  13.4k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  13.4k|    {
 5295|  13.4k|        SCN_CLANG_PUSH
 5296|  13.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  13.4k|        switch (m_type) {
 5299|    298|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 298, False: 13.1k]
  ------------------
 5300|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 13.4k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 13.4k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.93k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.93k, False: 11.5k]
  ------------------
 5310|  1.93k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.93k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  10.1k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10.1k, False: 3.36k]
  ------------------
 5315|  10.1k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  10.1k|                    range, specs.charset_string<SourceCharT>(),
 5317|  10.1k|                    specs.regexp_flags, value);
 5318|       |
 5319|  1.08k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 1.08k, False: 12.3k]
  ------------------
 5320|  1.08k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|  1.08k|                    range,
 5322|  1.08k|                    get_unescaped_regex_pattern(
 5323|  1.08k|                        specs.charset_string<SourceCharT>()),
 5324|  1.08k|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 13.4k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  13.4k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  13.4k|        }
 5331|       |
 5332|  13.4k|        SCN_CLANG_POP
 5333|  13.4k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.03k|    {
 4827|  1.03k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.03k|                                     value);
 4829|  1.03k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.08k|{
 4773|  1.08k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.08k|    auto src = [&]() {
 4776|  1.08k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.08k|            return make_contiguous_buffer(
 4778|  1.08k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.08k|        }
 4780|  1.08k|        else {
 4781|  1.08k|            return make_contiguous_buffer(
 4782|  1.08k|                ranges::subrange{range.begin(), result});
 4783|  1.08k|        }
 4784|  1.08k|    }();
 4785|  1.08k|    using src_type = decltype(src);
 4786|       |
 4787|  1.08k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.08k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.08k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.08k|                                     "Cannot read a string_view from "
 4796|  1.08k|                                     "this source range (would require "
 4797|  1.08k|                                     "transcoding)");
 4798|  1.08k|    }
 4799|  1.08k|    else {
 4800|  1.08k|        const auto view = src.view();
 4801|  1.08k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.08k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 422, False: 660]
  ------------------
 4804|    422|            return unexpected_scan_error(
 4805|    422|                scan_error::invalid_scanned_value,
 4806|    422|                "Invalid encoding in scanned string_view");
 4807|    422|        }
 4808|       |
 4809|    660|        return SCN_MOVE(result);
  ------------------
  |  |  928|    660|    static_cast<    \
  |  |  929|    660|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.08k|    }
 4811|  1.08k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.08k|    auto src = [&]() {
 4776|  1.08k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.08k|            return make_contiguous_buffer(
 4778|  1.08k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.08k|        }
 4780|  1.08k|        else {
 4781|  1.08k|            return make_contiguous_buffer(
 4782|  1.08k|                ranges::subrange{range.begin(), result});
 4783|  1.08k|        }
 4784|  1.08k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 14]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  1.93k|    {
 5062|  1.93k|        auto it = read_source_impl(range, {specs});
 5063|  1.93k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 462, False: 1.47k]
  |  |  ------------------
  ------------------
 5064|    462|            return unexpected(it.error());
 5065|    462|        }
 5066|       |
 5067|  1.47k|        return read_string_view_impl(range, *it, value);
 5068|  1.93k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  2.70k|{
 4773|  2.70k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  2.70k|    auto src = [&]() {
 4776|  2.70k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  2.70k|            return make_contiguous_buffer(
 4778|  2.70k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  2.70k|        }
 4780|  2.70k|        else {
 4781|  2.70k|            return make_contiguous_buffer(
 4782|  2.70k|                ranges::subrange{range.begin(), result});
 4783|  2.70k|        }
 4784|  2.70k|    }();
 4785|  2.70k|    using src_type = decltype(src);
 4786|       |
 4787|  2.70k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  2.70k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  2.70k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  2.70k|                                     "Cannot read a string_view from "
 4796|  2.70k|                                     "this source range (would require "
 4797|  2.70k|                                     "transcoding)");
 4798|  2.70k|    }
 4799|  2.70k|    else {
 4800|  2.70k|        const auto view = src.view();
 4801|  2.70k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  2.70k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 298, False: 2.40k]
  ------------------
 4804|    298|            return unexpected_scan_error(
 4805|    298|                scan_error::invalid_scanned_value,
 4806|    298|                "Invalid encoding in scanned string_view");
 4807|    298|        }
 4808|       |
 4809|  2.40k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  2.40k|    static_cast<    \
  |  |  929|  2.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  2.70k|    }
 4811|  2.70k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  2.70k|    auto src = [&]() {
 4776|  2.70k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  2.70k|            return make_contiguous_buffer(
 4778|  2.70k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  2.70k|        }
 4780|  2.70k|        else {
 4781|  2.70k|            return make_contiguous_buffer(
 4782|  2.70k|                ranges::subrange{range.begin(), result});
 4783|  2.70k|        }
 4784|  2.70k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  11.1k|    {
 4902|  11.1k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  11.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.95k, False: 1.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  9.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  9.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  9.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  9.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  9.95k|    }                                                  \
  |  |  |  | 3671|  11.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|  1.23k|        return read_string_view_impl(range, it, value);
 4904|  11.1k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  9.79k|    {
 5624|  9.79k|        reader_error_handler eh{};
 5625|  9.79k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  9.79k|            detail::check_code_point_type_specs(specs, eh);
 5627|  9.79k|        }
 5628|  9.79k|        else {
 5629|  9.79k|            detail::check_char_type_specs(specs, eh);
 5630|  9.79k|        }
 5631|  9.79k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.13k, False: 660]
  |  |  ------------------
  ------------------
 5632|  9.13k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  9.13k|        }
 5634|    660|        return {};
 5635|  9.79k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  10.9k|    {
  763|  10.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.9k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.95k|    {
  754|  1.95k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  3.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.49k|              cvref<T> obj = *get<T>(fn);
  745|  3.49k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.49k|              }
  748|  3.49k|              else {
  749|  3.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.49k|              }
  751|  3.49k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.49k|    {
  684|  3.49k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.49k|            return static_cast<T*>(s.m_cp);
  686|  3.49k|        }
  687|  3.49k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.49k|            return static_cast<T*>(s.m_p);
  689|  3.49k|        }
  690|  3.49k|        else {
  691|  3.49k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.49k|        }
  693|  3.49k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.95k|        {
  662|  1.95k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.91k|    {
 5619|  1.91k|        return false;
 5620|  1.91k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|    140|    {
 1780|    140|        auto stdloc = loc.get<std::locale>();
 1781|    140|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    140|        grouping = numpunct.grouping();
 1783|    140|        thousands_sep =
 1784|    140|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 140]
  ------------------
 1785|    140|        decimal_point = numpunct.decimal_point();
 1786|    140|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|    190|{
 1717|    190|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 190, False: 0]
  ------------------
 1718|    190|        return std::use_facet<Facet>(stdloc);
 1719|    190|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    190|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  6.37k|{
 2349|  6.37k|    size_t count{0};
 2350|  6.37k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  6.37k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  6.37k|    });
 2353|  6.37k|    return count;
 2354|  6.37k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  6.37k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  6.37k|    auto it = input.begin();
 1448|  13.7k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 7.35k, False: 6.37k]
  ------------------
 1449|  7.35k|        auto res = get_next_code_point(
 1450|  7.35k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  7.35k|        cb(res.value);
 1452|  7.35k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  7.35k|    }
 1454|  6.37k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   276k|{
 1169|   276k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   276k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   276k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   276k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   276k|    return {input.begin() + len,
 1181|   276k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   276k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  6.37k|    {
  754|  6.37k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  7.35k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.35k|              cvref<T> obj = *get<T>(fn);
  745|  7.35k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.35k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.35k|              }
  748|  7.35k|              else {
  749|  7.35k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.35k|              }
  751|  7.35k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.35k|    {
  684|  7.35k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.35k|            return static_cast<T*>(s.m_cp);
  686|  7.35k|        }
  687|  7.35k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.35k|            return static_cast<T*>(s.m_p);
  689|  7.35k|        }
  690|  7.35k|        else {
  691|  7.35k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.35k|        }
  693|  7.35k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  7.35k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  7.35k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  7.35k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  6.37k|        {
  662|  6.37k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.82k|    {
 1582|  2.82k|        return m_view;
 1583|  2.82k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.21k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    400|    {
 2421|    400|        return m_multibyte_left;
 2422|    400|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  88.0k|    {
 2426|  88.0k|        return *m_current;
 2427|  88.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  58.5k|    {
 2435|  58.5k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  58.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  58.5k|        _increment_current();
 2437|  58.5k|        return *this;
 2438|  58.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  58.5k|    {
 2668|  58.5k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 58.5k, False: 0]
  ------------------
 2669|  58.5k|            auto cplen = _get_cp_length_at_current();
 2670|  58.5k|            m_multibyte_left = cplen - 1;
 2671|  58.5k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  58.5k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  58.5k|        ++m_current;
 2678|  58.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  58.5k|    {
 2639|  58.5k|        return static_cast<difference_type>(
 2640|  58.5k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  58.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  58.5k|    {
 2645|  58.5k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.5k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  58.5k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 58.5k, False: 0]
  ------------------
 2650|  58.5k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  58.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  58.5k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  58.5k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  58.5k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  6.74k|{
 1857|  6.74k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.74k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.74k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.74k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 136, False: 6.60k]
  ------------------
 1862|    136|            return unexpected(eof_error::eof);
 1863|    136|        }
 1864|       |
 1865|  6.60k|        return ranges::next(range.begin(), count);
 1866|  6.74k|    }
 1867|  6.74k|    else {
 1868|  6.74k|        auto it = range.begin();
 1869|  6.74k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  6.74k|            return ranges::next(it, count);
 1871|  6.74k|        }
 1872|       |
 1873|  6.74k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  6.74k|            if (it == range.end()) {
 1875|  6.74k|                return unexpected(eof_error::eof);
 1876|  6.74k|            }
 1877|  6.74k|        }
 1878|       |
 1879|  6.74k|        return it;
 1880|  6.74k|    }
 1881|  6.74k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  21.7k|    {
 2531|  21.7k|        return !(a == b);
 2532|  21.7k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  22.6k|    {
 2523|  22.6k|        return a.m_current == b.m_current;
 2524|  22.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  3.23k|    {
 2430|  3.23k|        return *m_current;
 2431|  3.23k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  28.7k|    {
 1890|  28.7k|        return !codepoint.empty();
 1891|  28.7k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    526|{
 1683|    526|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    526|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    526|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    526|        return string_view_wrapper{SCN_FWD(range)};
 1687|    526|    }
 1688|    526|    else {
 1689|    526|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    526|    }
 1691|    526|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    526|    {
 1537|    526|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    526|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    526|    {
 1621|    526|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    526|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    526|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    526|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    526|            m_storage.reset();
 1627|    526|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    526|        }
 1629|    526|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    526|                                          std::basic_string<CharT>>) {
 1631|    526|            m_storage.emplace(SCN_FWD(range));
 1632|    526|            m_view = string_view_type{*m_storage};
 1633|    526|        }
 1634|    526|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    526|                                          typename detail::basic_scan_buffer<
 1636|    526|                                              value_t>::forward_iterator> &&
 1637|    526|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    526|            auto beg_seg = range.begin().contiguous_segment();
 1639|    526|            auto end_seg = range.end().contiguous_segment();
 1640|    526|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    526|                             detail::to_address(end_seg.end()))) {
 1642|    526|                auto& str = m_storage.emplace();
 1643|    526|                str.reserve(range.end().position() - range.begin().position());
 1644|    526|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    526|                m_view = string_view_type{str};
 1646|    526|                return;
 1647|    526|            }
 1648|       |
 1649|    526|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    526|                                                            end_seg.data());
 1651|    526|            m_storage.reset();
 1652|    526|        }
 1653|    526|        else {
 1654|    526|            auto& str = m_storage.emplace();
 1655|    526|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    526|                str.reserve(range.size());
 1657|    526|            }
 1658|    526|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    526|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    526|                          std::back_inserter(str));
 1661|    526|            }
 1662|    526|            else {
 1663|    526|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    526|                     ++it) {
 1665|    526|                    str.push_back(*it);
 1666|    526|                }
 1667|    526|            }
 1668|    526|            m_view = string_view_type{str};
 1669|    526|        }
 1670|    526|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  13.3k|    {
 2382|  13.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  79.3k|    {
 2413|  79.3k|        return m_current;
 2414|  79.3k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  32.4k|{
 2117|  32.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  32.4k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  32.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  32.4k|        auto buf = make_contiguous_buffer(range);
 2121|  32.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  32.4k|        return ranges::next(range.begin(),
 2123|  32.4k|                            ranges::distance(buf.view().begin(), it));
 2124|  32.4k|    }
 2125|  32.4k|    else {
 2126|  32.4k|        auto it = range.begin();
 2127|       |
 2128|  32.4k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  32.4k|            auto seg = get_contiguous_beginning(range);
 2130|  32.4k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  32.4k|                seg_it != seg.end()) {
 2132|  32.4k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  32.4k|            }
 2134|  32.4k|            ranges::advance(it, seg.size());
 2135|  32.4k|        }
 2136|       |
 2137|  32.4k|        return read_while_code_point(
 2138|  32.4k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  32.4k|    }
 2140|  32.4k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  32.4k|{
 2082|  32.4k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  32.4k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  32.4k|{
 2061|  32.4k|    auto it = range.begin();
 2062|  44.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 43.4k, False: 1.21k]
  ------------------
 2063|  43.4k|        const auto val =
 2064|  43.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  43.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  43.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 43.4k, False: 0]
  |  |  ------------------
  ------------------
 2066|  43.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  43.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  43.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 31.2k, False: 12.1k]
  ------------------
 2069|  31.2k|                return it;
 2070|  31.2k|            }
 2071|  43.4k|        }
 2072|  12.1k|        it = val.iterator;
 2073|  12.1k|    }
 2074|       |
 2075|  1.21k|    return it;
 2076|  32.4k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   156k|{
 1899|   156k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   156k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   156k|    auto it = range.begin();
 1903|   156k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   156k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   156k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 156k, False: 0]
  ------------------
 1912|   156k|        ++it;
 1913|   156k|        return {it, string_type(1, *range.begin())};
 1914|   156k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   156k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   181k|{
  944|   181k|    return is_range_eof(r.begin(), r.end());
  945|   181k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   450k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   450k|    {
  937|   450k|        return begin == end;
  938|   450k|    }
  939|   450k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.09k|    {
  190|  1.09k|        i = std::move(bound);
  191|  1.09k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   156k|    {
 1890|   156k|        return !codepoint.empty();
 1891|   156k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  32.4k|    {
  754|  32.4k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  43.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.4k|              cvref<T> obj = *get<T>(fn);
  745|  43.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  43.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.4k|              }
  748|  43.4k|              else {
  749|  43.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.4k|              }
  751|  43.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  43.4k|    {
  684|  43.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  43.4k|            return static_cast<T*>(s.m_cp);
  686|  43.4k|        }
  687|  43.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  43.4k|            return static_cast<T*>(s.m_p);
  689|  43.4k|        }
  690|  43.4k|        else {
  691|  43.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  43.4k|        }
  693|  43.4k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  43.4k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  32.4k|        {
  662|  32.4k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  25.3k|{
  950|  25.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.3k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  25.3k|    return eof_error::good;
  954|  25.3k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  4.76k|    {
 2832|  4.76k|        return take_width_view{r, n};
 2833|  4.76k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  4.76k|    {
 2801|  4.76k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  4.76k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    220|    {
 5699|    220|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 188, False: 32]
  ------------------
 5700|    220|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 32]
  ------------------
 5701|    188|            return read_default(range, value, loc);
 5702|    188|        }
 5703|       |
 5704|     32|        reader_impl_for_int<CharT> reader{};
 5705|     32|        using integer_type =
 5706|     32|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     32|        integer_type tmp_value{};
 5708|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     32|        value = static_cast<integer_type>(value);
 5710|     32|        return ret;
 5711|    220|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    188|    {
 5683|    188|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    188|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    188|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    188|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    188|        }
 5687|    188|        else {
 5688|    188|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    188|        }
 5690|    188|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    188|    {
 5564|    188|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    188|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    188|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    188|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 188]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    188|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    188|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    188|        ch = *range.begin();
 5566|    188|        return it;
 5567|    188|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.62k|{
 1846|  1.62k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.62k|    return ranges::next(range.begin());
 1851|  1.62k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.62k|{
  950|  1.62k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.62k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.62k|    return eof_error::good;
  954|  1.62k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.62k|{
  944|  1.62k|    return is_range_eof(r.begin(), r.end());
  945|  1.62k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  30.4k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  30.4k|    {
  937|  30.4k|        return begin == end;
  938|  30.4k|    }
  939|  30.4k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  76.1k|        {
 2770|  76.1k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 400, False: 75.7k]
  |  Branch (2770:39): [True: 400, False: 0]
  ------------------
 2771|  76.1k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 462, False: 75.3k]
  ------------------
 2772|  76.1k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  16.6k|    {
 2816|  16.6k|        return sentinel<true>{m_base.get().end()};
 2817|  16.6k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  43.3k|    {
 2717|  43.3k|        return view;
 2718|  43.3k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  16.6k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.66k|    {
  296|  1.66k|        ++x;
  297|  1.66k|        return x;
  298|  1.66k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  13.3k|    {
 2810|  13.3k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  13.3k|                                      m_count};
 2812|  13.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    274|    {
 3539|    274|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    274|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    274|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 274]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    274|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 274]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    274|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    274|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 252, False: 22]
  |  |  ------------------
  ------------------
 3565|    252|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    252|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     22|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     22|            localized_number_formatting_options<CharT>{loc};
 3586|     22|#endif
 3587|       |
 3588|     22|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    708|{
 3326|    708|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    708|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 708]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    708|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    708|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    708|        parse_integer_base_prefix(
 3331|    708|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    708|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 708]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    708|    else {
 3343|    708|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 708]
  |  Branch (3343:13): [True: 708, False: 0]
  ------------------
 3344|    708|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 708, False: 0]
  ------------------
 3345|    708|            digits_begin_it = base_prefix_begin_it;
 3346|    708|        }
 3347|    708|    }
 3348|       |
 3349|    708|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 708, False: 0]
  ------------------
 3350|    708|        sign = sign_type::plus_sign;
 3351|    708|    }
 3352|    708|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    708|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    708|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    950|{
 3141|    950|    auto r = read_one_of_code_unit(range, "+-");
 3142|    950|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 950, False: 0]
  ------------------
 3143|    950|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 950, False: 0]
  ------------------
 3144|    950|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    950|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    950|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    950|{
 2272|    950|    auto it = read_code_unit(range);
 2273|    950|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    950|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 950]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.90k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.90k, False: 950]
  ------------------
 2278|  1.90k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.90k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.90k|    }
 2282|       |
 2283|    950|    return unexpected(parse_error::error);
 2284|    950|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    708|{
 3293|    708|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 702]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     30|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 30, False: 678]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     30|            bool zero_parsed = false;
 3302|     30|            auto it = apply_opt(
 3303|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     30|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    198|        case 16:
  ------------------
  |  Branch (3307:9): [True: 198, False: 510]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    198|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    198|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 696]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    462|        default:
  ------------------
  |  Branch (3316:9): [True: 462, False: 246]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    462|            return {range.begin(), base, false};
 3319|    708|    }
 3320|    708|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    234|{
 2291|    234|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 234, False: 0]
  ------------------
 2292|    234|        return range.begin();
 2293|    234|    }
 2294|      0|    return *result;
 2295|    234|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    976|{
 2231|    976|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    976|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    976|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    976|        if (range.size() < str.size()) {
 2236|    976|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    976|        }
 2238|    976|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    976|            return unexpected(parse_error::error);
 2240|    976|        }
 2241|    976|        return ranges::next(range.begin(), str.size());
 2242|    976|    }
 2243|    976|    else {
 2244|    976|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    976|            if (ch < 'A' || ch > 'Z') {
 2246|    976|                return ch;
 2247|    976|            }
 2248|    976|            return static_cast<char_type>(ch +
 2249|    976|                                          static_cast<char_type>('a' - 'A'));
 2250|    976|        };
 2251|       |
 2252|    976|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    976|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    976|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    976|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 894]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     82|    }                                                  \
  |  |  |  | 3671|    976|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    894|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    894|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    894|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    894|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    894|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 894, False: 0]
  |  |  ------------------
  ------------------
 2257|    894|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    894|                    return ascii_tolower(a) ==
 2259|    894|                           static_cast<detail::char_t<Range>>(b);
 2260|    894|                }))) {
 2261|    894|            return unexpected(parse_error::error);
 2262|    894|        }
 2263|       |
 2264|      0|        return it;
 2265|    894|    }
 2266|    976|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    976|{
 1857|    976|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    976|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    976|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    976|        if (sz < count) {
 1862|    976|            return unexpected(eof_error::eof);
 1863|    976|        }
 1864|       |
 1865|    976|        return ranges::next(range.begin(), count);
 1866|    976|    }
 1867|    976|    else {
 1868|    976|        auto it = range.begin();
 1869|    976|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 976]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.31k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.42k, False: 894]
  ------------------
 1874|  2.42k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 82, False: 2.33k]
  ------------------
 1875|     82|                return unexpected(eof_error::eof);
 1876|     82|            }
 1877|  2.42k|        }
 1878|       |
 1879|    894|        return it;
 1880|    976|    }
 1881|    976|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    976|{
 1095|    976|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    976|        return r.size();
 1097|    976|    }
 1098|    976|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    976|                           ranges::const_iterator_t<Range>,
 1100|    976|                           typename detail::basic_scan_buffer<
 1101|    976|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    976|        if constexpr (ranges::common_range<Range>) {
 1103|    976|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    976|        }
 1105|    976|        else {
 1106|    976|            if (r.begin().stores_parent()) {
 1107|    976|                return static_cast<size_t>(
 1108|    976|                    r.begin().parent()->chars_available() -
 1109|    976|                    r.begin().position());
 1110|    976|            }
 1111|    976|            return r.begin().contiguous_segment().size();
 1112|    976|        }
 1113|    976|    }
 1114|    976|    else {
 1115|    976|        return 0;
 1116|    976|    }
 1117|    976|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    894|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    894|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 22, False: 872]
  |  Branch (2245:29): [True: 872, False: 0]
  ------------------
 2246|    894|                return ch;
 2247|    894|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    894|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     42|{
 3258|     42|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 42]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     42|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 42]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     42|    return unexpected(parse_error::error);
 3268|     42|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     42|{
 2146|     42|    auto it = read_code_unit(range);
 2147|     42|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     42|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  ------------------
  ------------------
 2152|     42|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     42|        return unexpected(parse_error::error);
 2154|     42|    }
 2155|       |
 2156|      0|    return *it;
 2157|     42|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     42|{
 1846|     42|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     42|    return ranges::next(range.begin());
 1851|     42|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     42|{
  950|     42|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     42|    return eof_error::good;
  954|     42|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  28.8k|{
  944|  28.8k|    return is_range_eof(r.begin(), r.end());
  945|  28.8k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    210|{
 3251|    210|    return read_matching_string_classic_nocase(range, "0x");
 3252|    210|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    664|{
 3360|    664|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    664|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    664|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    664|            return unexpected_scan_error(
 3365|    664|                scan_error::invalid_scanned_value,
 3366|    664|                "Failed to parse integer: No digits found");
 3367|    664|        }
 3368|    664|        return range.end();
 3369|    664|    }
 3370|    664|    else {
 3371|    664|        return read_while1_code_unit(range,
 3372|    664|                                     [&](char_type ch) noexcept {
 3373|    664|                                         return char_to_int(ch) < base;
 3374|    664|                                     })
 3375|    664|            .transform_error(map_parse_error_to_scan_error(
 3376|    664|                scan_error::invalid_scanned_value,
 3377|    664|                "Failed to parse integer: No digits found"));
 3378|    664|    }
 3379|    664|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    906|{
 1996|    906|    auto it = read_while_code_unit(range, pred);
 1997|    906|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 906, False: 0]
  ------------------
 1998|    906|        return unexpected(parse_error::error);
 1999|    906|    }
 2000|      0|    return it;
 2001|    906|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    906|{
 1976|    906|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    906|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    906|{
 1957|    906|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    906|        return std::find_if(range.begin(), range.end(), pred);
 1959|    906|    }
 1960|    906|    else {
 1961|    906|        auto first = range.begin();
 1962|    906|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 906, False: 0]
  ------------------
 1963|    906|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 906, False: 0]
  ------------------
 1964|    906|                return first;
 1965|    906|            }
 1966|    906|        }
 1967|      0|        return first;
 1968|    906|    }
 1969|    906|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  35.5k|        {
 2781|  35.5k|            return !(y == x);
 2782|  35.5k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    664|    {
  754|    664|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    664|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    664|              cvref<T> obj = *get<T>(fn);
  745|    664|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    664|                  obj(static_cast<decltype(args)>(args)...);
  747|    664|              }
  748|    664|              else {
  749|    664|                  return obj(static_cast<decltype(args)>(args)...);
  750|    664|              }
  751|    664|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    664|    {
  684|    664|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    664|            return static_cast<T*>(s.m_cp);
  686|    664|        }
  687|    664|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    664|            return static_cast<T*>(s.m_p);
  689|    664|        }
  690|    664|        else {
  691|    664|            return reinterpret_cast<T*>(s.m_fp);
  692|    664|        }
  693|    664|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    664|                                     [&](char_type ch) noexcept {
 3373|    664|                                         return char_to_int(ch) < base;
 3374|    664|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    664|        {
  662|    664|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     44|{
 3390|     44|    std::basic_string<CharT> output;
 3391|     44|    std::string thsep_indices;
 3392|     44|    auto it = range.begin();
 3393|     44|    bool digit_matched = false;
 3394|     44|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 44, False: 0]
  ------------------
 3395|     44|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 44]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     44|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 44, False: 0]
  ------------------
 3400|     44|            break;
 3401|     44|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     44|    }
 3407|     44|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 3408|     44|        return unexpected_scan_error(
 3409|     44|            scan_error::invalid_scanned_value,
 3410|     44|            "Failed to parse integer: No digits found");
 3411|     44|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     44|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  76.9k|    {
 2417|  76.9k|        return m_count;
 2418|  76.9k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    438|    {
 5699|    438|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 422, False: 16]
  ------------------
 5700|    438|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 16]
  ------------------
 5701|    422|            return read_default(range, value, loc);
 5702|    422|        }
 5703|       |
 5704|     16|        reader_impl_for_int<CharT> reader{};
 5705|     16|        using integer_type =
 5706|     16|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     16|        integer_type tmp_value{};
 5708|     16|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     16|        value = static_cast<integer_type>(value);
 5710|     16|        return ret;
 5711|    438|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|  1.07k|    {
 5683|  1.07k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.07k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|  1.07k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|  1.07k|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|  1.07k|        }
 5687|  1.07k|        else {
 5688|  1.07k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|  1.07k|        }
 5690|  1.07k|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|  1.07k|    {
 5564|  1.07k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|  1.07k|        ch = *range.begin();
 5566|  1.07k|        return it;
 5567|  1.07k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  7.75k|{
 1846|  7.75k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  7.75k|    return ranges::next(range.begin());
 1851|  7.75k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  55.0k|    {
  296|  55.0k|        ++x;
  297|  55.0k|        return x;
  298|  55.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    486|    {
 3539|    486|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    486|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 486]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    486|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    486|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    486|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 486]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    486|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 486]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    486|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    486|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 454, False: 32]
  |  |  ------------------
  ------------------
 3565|    454|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    454|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    454|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    454|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    454|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 454]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    454|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    454|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    454|                    parse_integer_digits_without_thsep(
 3567|    454|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    454|                        prefix_result.parsed_base));
 3569|       |
 3570|    454|            auto buf = make_contiguous_buffer(
 3571|    454|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    454|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    454|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    454|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    454|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    454|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 454, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    454|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    454|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    454|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    454|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    454|    }                                                  \
  |  |  |  | 3671|    454|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    454|        }
 3580|       |
 3581|     32|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     32|            localized_number_formatting_options<CharT>{loc};
 3586|     32|#endif
 3587|       |
 3588|     32|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  3.32k|{
 3326|  3.32k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  3.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  3.32k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  3.32k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  3.32k|        parse_integer_base_prefix(
 3331|  3.32k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  3.32k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 3.32k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  3.32k|    else {
 3343|  3.32k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 3.32k]
  ------------------
 3344|  3.32k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 3.32k, False: 0]
  ------------------
 3345|  3.32k|            digits_begin_it = base_prefix_begin_it;
 3346|  3.32k|        }
 3347|  3.32k|    }
 3348|       |
 3349|  3.32k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 3.32k, False: 0]
  ------------------
 3350|  3.32k|        sign = sign_type::plus_sign;
 3351|  3.32k|    }
 3352|  3.32k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  3.32k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  3.32k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  4.42k|{
 3141|  4.42k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  4.42k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 4.42k, False: 0]
  ------------------
 3143|  4.42k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 4.42k, False: 0]
  ------------------
 3144|  4.42k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  4.42k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  4.42k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  4.42k|{
 2272|  4.42k|    auto it = read_code_unit(range);
 2273|  4.42k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.42k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  8.84k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.84k, False: 4.42k]
  ------------------
 2278|  8.84k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 8.84k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  8.84k|    }
 2282|       |
 2283|  4.42k|    return unexpected(parse_error::error);
 2284|  4.42k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  3.32k|{
 3293|  3.32k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 3.31k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 3.31k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  1.11k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 1.11k, False: 2.21k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  1.11k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  1.11k|                    false};
 3311|       |
 3312|     10|        case 0:
  ------------------
  |  Branch (3312:9): [True: 10, False: 3.31k]
  ------------------
 3313|       |            // detect base
 3314|     10|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  2.17k|        default:
  ------------------
  |  Branch (3316:9): [True: 2.17k, False: 1.14k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  2.17k|            return {range.begin(), base, false};
 3319|  3.32k|    }
 3320|  3.32k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.13k|{
 2291|  1.13k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.13k, False: 0]
  ------------------
 2292|  1.13k|        return range.begin();
 2293|  1.13k|    }
 2294|      0|    return *result;
 2295|  1.13k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     22|{
 3244|     22|    return read_matching_string_classic_nocase(range, "0b");
 3245|     22|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.45k|{
 2231|  4.45k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  4.45k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  4.45k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  4.45k|        if (range.size() < str.size()) {
 2236|  4.45k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  4.45k|        }
 2238|  4.45k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  4.45k|            return unexpected(parse_error::error);
 2240|  4.45k|        }
 2241|  4.45k|        return ranges::next(range.begin(), str.size());
 2242|  4.45k|    }
 2243|  4.45k|    else {
 2244|  4.45k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.45k|            if (ch < 'A' || ch > 'Z') {
 2246|  4.45k|                return ch;
 2247|  4.45k|            }
 2248|  4.45k|            return static_cast<char_type>(ch +
 2249|  4.45k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.45k|        };
 2251|       |
 2252|  4.45k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  4.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 4.45k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  4.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  4.45k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.45k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.45k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.45k, False: 0]
  |  |  ------------------
  ------------------
 2257|  4.45k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.45k|                    return ascii_tolower(a) ==
 2259|  4.45k|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.45k|                }))) {
 2261|  4.45k|            return unexpected(parse_error::error);
 2262|  4.45k|        }
 2263|       |
 2264|      0|        return it;
 2265|  4.45k|    }
 2266|  4.45k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  4.45k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.45k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 20, False: 4.43k]
  |  Branch (2245:29): [True: 4.43k, False: 0]
  ------------------
 2246|  4.45k|                return ch;
 2247|  4.45k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.45k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     20|{
 3258|     20|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 20]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     20|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 20]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     20|    return unexpected(parse_error::error);
 3268|     20|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.26k|{
 2146|  2.26k|    auto it = read_code_unit(range);
 2147|  2.26k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.26k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.26k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.26k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.26k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.26k|        return unexpected(parse_error::error);
 2154|  2.26k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.26k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  1.12k|{
 3251|  1.12k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  1.12k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     10|{
 3274|     10|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 10]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     10|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 10]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     10|    {
 3281|     10|        bool zero_parsed{false};
 3282|     10|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 10]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     10|    }
 3286|     10|    return {range.begin(), 10, false};
 3287|     10|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  3.26k|{
 3360|  3.26k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  3.26k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  3.26k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.26k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  3.26k|        return range.end();
 3369|  3.26k|    }
 3370|  3.26k|    else {
 3371|  3.26k|        return read_while1_code_unit(range,
 3372|  3.26k|                                     [&](char_type ch) noexcept {
 3373|  3.26k|                                         return char_to_int(ch) < base;
 3374|  3.26k|                                     })
 3375|  3.26k|            .transform_error(map_parse_error_to_scan_error(
 3376|  3.26k|                scan_error::invalid_scanned_value,
 3377|  3.26k|                "Failed to parse integer: No digits found"));
 3378|  3.26k|    }
 3379|  3.26k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     64|{
 3390|     64|    std::basic_string<CharT> output;
 3391|     64|    std::string thsep_indices;
 3392|     64|    auto it = range.begin();
 3393|     64|    bool digit_matched = false;
 3394|     64|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 64, False: 0]
  ------------------
 3395|     64|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 64]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     64|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 64, False: 0]
  ------------------
 3400|     64|            break;
 3401|     64|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     64|    }
 3407|     64|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  ------------------
  ------------------
 3408|     64|        return unexpected_scan_error(
 3409|     64|            scan_error::invalid_scanned_value,
 3410|     64|            "Failed to parse integer: No digits found");
 3411|     64|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     64|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  17.0k|{
 1683|  17.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  17.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  17.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  17.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  17.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  17.0k|    }
 1688|  17.0k|    else {
 1689|  17.0k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  17.0k|    }
 1691|  17.0k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  17.0k|    {
 1490|  17.0k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  20.1k|    {
 1503|  20.1k|        return sv;
 1504|  20.1k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    436|{
 5951|    436|    using char_type = detail::char_t<Range>;
 5952|    436|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    436|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 436, False: 0]
  ------------------
 5955|    436|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    436|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    436|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 380, False: 56]
  ------------------
 5959|    380|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    380|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 42, False: 338]
  ------------------
 5962|     42|                auto prefix_width =
 5963|     42|                    static_cast<std::ptrdiff_t>(
 5964|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     42|                    ranges::distance(range.begin(), it);
 5966|     42|                return result_type{it, prefix_width};
 5967|     42|            }
 5968|    338|            return result_type{it, 0};
 5969|    380|        }
 5970|       |
 5971|     56|        auto max_width_view = take_width(range, max_width);
 5972|     56|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     56|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 56, False: 0]
  ------------------
 5975|     56|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     56|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     56|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    582|{
 1976|    582|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    582|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    912|{
 1957|    912|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    912|        return std::find_if(range.begin(), range.end(), pred);
 1959|    912|    }
 1960|    912|    else {
 1961|    912|        auto first = range.begin();
 1962|    912|        for (; first != range.end(); ++first) {
 1963|    912|            if (pred(*first)) {
 1964|    912|                return first;
 1965|    912|            }
 1966|    912|        }
 1967|    912|        return first;
 1968|    912|    }
 1969|    912|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    436|    {
  754|    436|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    552|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    552|              cvref<T> obj = *get<T>(fn);
  745|    552|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    552|                  obj(static_cast<decltype(args)>(args)...);
  747|    552|              }
  748|    552|              else {
  749|    552|                  return obj(static_cast<decltype(args)>(args)...);
  750|    552|              }
  751|    552|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    552|    {
  684|    552|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    552|            return static_cast<T*>(s.m_cp);
  686|    552|        }
  687|    552|        else if constexpr (std::is_object_v<T>) {
  688|    552|            return static_cast<T*>(s.m_p);
  689|    552|        }
  690|    552|        else {
  691|    552|            return reinterpret_cast<T*>(s.m_fp);
  692|    552|        }
  693|    552|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    552|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    436|        {
  667|    436|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     56|{
 1976|     56|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     56|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    158|{
 1957|    158|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    158|        return std::find_if(range.begin(), range.end(), pred);
 1959|    158|    }
 1960|    158|    else {
 1961|    158|        auto first = range.begin();
 1962|  1.21k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.11k, False: 104]
  ------------------
 1963|  1.11k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 54, False: 1.06k]
  ------------------
 1964|     54|                return first;
 1965|     54|            }
 1966|  1.11k|        }
 1967|    104|        return first;
 1968|    158|    }
 1969|    158|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    164|{
 2951|    164|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 164]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    164|    return read_while_classic_space(range);
 2962|    164|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    164|{
 2117|    164|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    164|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    164|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    164|        auto buf = make_contiguous_buffer(range);
 2121|    164|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    164|        return ranges::next(range.begin(),
 2123|    164|                            ranges::distance(buf.view().begin(), it));
 2124|    164|    }
 2125|    164|    else {
 2126|    164|        auto it = range.begin();
 2127|       |
 2128|    164|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    164|            auto seg = get_contiguous_beginning(range);
 2130|    164|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    164|                seg_it != seg.end()) {
 2132|    164|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    164|            }
 2134|    164|            ranges::advance(it, seg.size());
 2135|    164|        }
 2136|       |
 2137|    164|        return read_while_code_point(
 2138|    164|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    164|    }
 2140|    164|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    164|{
 2082|    164|    return read_until_code_point(range, std::not_fn(pred));
 2083|    164|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    164|{
 2061|    164|    auto it = range.begin();
 2062|    164|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 164, False: 0]
  ------------------
 2063|    164|        const auto val =
 2064|    164|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    164|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    164|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 164, False: 0]
  |  |  ------------------
  ------------------
 2066|    164|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    164|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    164|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 164, False: 0]
  ------------------
 2069|    164|                return it;
 2070|    164|            }
 2071|    164|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    164|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  28.7k|{
 1899|  28.7k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  28.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  28.7k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  28.7k|    auto it = range.begin();
 1903|  28.7k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  28.7k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  28.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.7k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  28.7k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 28.7k, False: 0]
  ------------------
 1912|  28.7k|        ++it;
 1913|  28.7k|        return {it, string_type(1, *range.begin())};
 1914|  28.7k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  28.7k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    164|    {
  754|    164|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    164|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    164|              cvref<T> obj = *get<T>(fn);
  745|    164|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    164|                  obj(static_cast<decltype(args)>(args)...);
  747|    164|              }
  748|    164|              else {
  749|    164|                  return obj(static_cast<decltype(args)>(args)...);
  750|    164|              }
  751|    164|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    164|    {
  684|    164|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    164|            return static_cast<T*>(s.m_cp);
  686|    164|        }
  687|    164|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    164|            return static_cast<T*>(s.m_p);
  689|    164|        }
  690|    164|        else {
  691|    164|            return reinterpret_cast<T*>(s.m_fp);
  692|    164|        }
  693|    164|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    164|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    164|        {
  662|    164|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  9.85k|{
 2951|  9.85k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 8.50k, False: 1.35k]
  ------------------
 2952|  8.50k|        auto it = read_while_classic_space(range);
 2953|  8.50k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  8.50k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.50k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  8.50k|        return it;
 2959|  8.50k|    }
 2960|       |
 2961|  1.35k|    return read_while_classic_space(range);
 2962|  9.85k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  42.3k|{
 2117|  42.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  42.3k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  42.3k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  42.3k|        auto buf = make_contiguous_buffer(range);
 2121|  42.3k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  42.3k|        return ranges::next(range.begin(),
 2123|  42.3k|                            ranges::distance(buf.view().begin(), it));
 2124|  42.3k|    }
 2125|  42.3k|    else {
 2126|  42.3k|        auto it = range.begin();
 2127|       |
 2128|  42.3k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  42.3k|            auto seg = get_contiguous_beginning(range);
 2130|  42.3k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  42.3k|                seg_it != seg.end()) {
 2132|  42.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  42.3k|            }
 2134|  42.3k|            ranges::advance(it, seg.size());
 2135|  42.3k|        }
 2136|       |
 2137|  42.3k|        return read_while_code_point(
 2138|  42.3k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  42.3k|    }
 2140|  42.3k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  43.0k|{
 2082|  43.0k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  43.0k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  46.4k|{
 2061|  46.4k|    auto it = range.begin();
 2062|   116k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 112k, False: 3.43k]
  ------------------
 2063|   112k|        const auto val =
 2064|   112k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   112k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   112k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 112k, False: 0]
  |  |  ------------------
  ------------------
 2066|   112k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   112k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   112k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 43.0k, False: 69.5k]
  ------------------
 2069|  43.0k|                return it;
 2070|  43.0k|            }
 2071|   112k|        }
 2072|  69.5k|        it = val.iterator;
 2073|  69.5k|    }
 2074|       |
 2075|  3.43k|    return it;
 2076|  46.4k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  42.3k|    {
  754|  42.3k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  45.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  45.2k|              cvref<T> obj = *get<T>(fn);
  745|  45.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  45.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  45.2k|              }
  748|  45.2k|              else {
  749|  45.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  45.2k|              }
  751|  45.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  45.2k|    {
  684|  45.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  45.2k|            return static_cast<T*>(s.m_cp);
  686|  45.2k|        }
  687|  45.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  45.2k|            return static_cast<T*>(s.m_p);
  689|  45.2k|        }
  690|  45.2k|        else {
  691|  45.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  45.2k|        }
  693|  45.2k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  45.2k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  42.3k|        {
  662|  42.3k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  19.7k|    {
 3040|  19.7k|        reader_error_handler eh{};
 3041|  19.7k|        get_derived().check_specs_impl(specs, eh);
 3042|  19.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 1.42k]
  |  |  ------------------
  ------------------
 3043|  18.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  18.3k|        }
 3045|  1.42k|        return {};
 3046|  19.7k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  19.7k|    {
 3051|  19.7k|        return static_cast<Derived&>(*this);
 3052|  19.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  19.7k|    {
 3485|  19.7k|        detail::check_int_type_specs(specs, eh);
 3486|  19.7k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  2.72k|    {
 3035|  2.72k|        return true;
 3036|  2.72k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    242|    {
 3539|    242|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    242|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    242|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 242]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    242|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 242]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    242|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    242|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 220, False: 22]
  |  |  ------------------
  ------------------
 3565|    220|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 220, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    220|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    220|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    220|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    220|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    220|    }                                                  \
  |  |  |  | 3671|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     22|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     22|            localized_number_formatting_options<CharT>{loc};
 3586|     22|#endif
 3587|       |
 3588|     22|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    470|    {
 3539|    470|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    470|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    470|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 470]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    470|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 470]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    470|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    470|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 438, False: 32]
  |  |  ------------------
  ------------------
 3565|    438|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    438|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 438]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    438|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    438|                    parse_integer_digits_without_thsep(
 3567|    438|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    438|                        prefix_result.parsed_base));
 3569|       |
 3570|    438|            auto buf = make_contiguous_buffer(
 3571|    438|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    438|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    438|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 438, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    438|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    438|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    438|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    438|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    438|    }                                                  \
  |  |  |  | 3671|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    438|        }
 3580|       |
 3581|     32|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     32|            localized_number_formatting_options<CharT>{loc};
 3586|     32|#endif
 3587|       |
 3588|     32|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    192|    {
 3539|    192|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    192|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    192|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 192]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    192|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 192]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    192|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    192|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 192, False: 0]
  |  |  ------------------
  ------------------
 3565|    192|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    192|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  1.07k|    {
 3539|  1.07k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  1.07k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  1.07k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 1.07k]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|  1.07k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 1.07k]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|  1.07k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  1.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.07k, False: 0]
  |  |  ------------------
  ------------------
 3565|  1.07k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  1.07k|                    parse_integer_digits_without_thsep(
 3567|  1.07k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  1.07k|                        prefix_result.parsed_base));
 3569|       |
 3570|  1.07k|            auto buf = make_contiguous_buffer(
 3571|  1.07k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  1.07k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.07k|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|  1.07k|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  9.87k|    {
 3040|  9.87k|        reader_error_handler eh{};
 3041|  9.87k|        get_derived().check_specs_impl(specs, eh);
 3042|  9.87k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.17k, False: 700]
  |  |  ------------------
  ------------------
 3043|  9.17k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.17k|        }
 3045|    700|        return {};
 3046|  9.87k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  9.87k|    {
 3051|  9.87k|        return static_cast<Derived&>(*this);
 3052|  9.87k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  9.87k|    {
 4145|  9.87k|        detail::check_float_type_specs(specs, eh);
 4146|  9.87k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.34k|    {
 3035|  1.34k|        return true;
 3036|  1.34k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    694|    {
 4217|    694|        unsigned options{};
 4218|    694|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 32, False: 662]
  ------------------
 4219|     32|            options |= float_reader_base::allow_thsep;
 4220|     32|        }
 4221|       |
 4222|    694|        SCN_GCC_COMPAT_PUSH
 4223|    694|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    694|        switch (specs.type) {
 4226|     16|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 16, False: 678]
  ------------------
 4227|     16|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|     14|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 14, False: 680]
  ------------------
 4230|     14|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     26|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 26, False: 668]
  ------------------
 4233|     26|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 694]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    638|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 638, False: 56]
  ------------------
 4240|    638|                return options | float_reader_base::allow_scientific |
 4241|    638|                       float_reader_base::allow_fixed |
 4242|    638|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 694]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    694|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    694|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    694|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    694|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.34k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.68k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  1.09k|    {
 4057|  1.09k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.09k, False: 0]
  ------------------
 4058|  1.09k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.09k, False: 0]
  ------------------
 4059|  1.09k|            return;
 4060|  1.09k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    228|    {
 1587|    228|        return m_storage.has_value();
 1588|    228|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|    114|    {
 1592|    114|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    114|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    114|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    114|        return *m_storage;
 1594|    114|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    242|    {
  763|    242|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    242|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|     22|    {
 3679|     22|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     22|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 22]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     22|        return read_source_impl(range);
 3685|     22|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    242|    {
 3705|    242|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    242|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    242|        auto it = sign_result.first;
 3708|    242|        m_sign = sign_result.second;
 3709|       |
 3710|    242|        auto digits_begin = it;
 3711|    242|        auto r = ranges::subrange{it, range.end()};
 3712|    242|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    242|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    242|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    242|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    242|                SCN_TRY_ASSIGN(
 3717|    242|                    it,
 3718|    242|                    do_read_source_impl(
 3719|    242|                        r,
 3720|    242|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    242|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    242|            }
 3723|    242|            else {
 3724|    242|                auto cb = [&](const auto& rr)
 3725|    242|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    242|                    auto res = read_all(rr);
 3727|    242|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    242|                        return unexpected_scan_error(
 3729|    242|                            scan_error::invalid_scanned_value,
 3730|    242|                            "Invalid float value");
 3731|    242|                    }
 3732|    242|                    return res;
 3733|    242|                };
 3734|    242|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    242|            }
 3736|    242|        }
 3737|    242|        else {
 3738|    242|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    242|    }                                                  \
  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    242|    {
 4000|    242|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    242|        const bool allowed_nonhex =
 4002|    242|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    242|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    242|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 242, False: 0]
  |  Branch (4005:45): [True: 0, False: 242]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    242|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 242]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    242|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 242, False: 0]
  |  Branch (4014:45): [True: 0, False: 242]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    242|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 242]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    242|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 222, False: 20]
  |  Branch (4021:28): [True: 12, False: 210]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    230|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 20, False: 210]
  |  Branch (4036:29): [True: 20, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     20|            m_kind = float_kind::generic;
 4040|     20|            return read_regular_float(range);
 4041|     20|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    210|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    210|        m_kind = float_kind::generic;
 4052|    210|        return read_regular(range);
 4053|    210|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    242|    {
 3811|    242|        auto it = range.begin();
 3812|    242|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 242, False: 0]
  ------------------
 3813|    242|            return unexpected(r.error());
 3814|    242|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    242|    {
 3834|    242|        auto it = range.begin();
 3835|    242|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 242, False: 0]
  ------------------
 3836|    242|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    242|                scan_error::invalid_scanned_value,
 3838|    242|                "Invalid floating-point NaN value"));
 3839|    242|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    222|    {
 3804|    222|        return read_matching_string_classic_nocase(range, "0x");
 3805|    222|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|     12|    {
 3904|     12|        auto it = range.begin();
 3905|       |
 3906|     12|        std::ptrdiff_t digits_count = 0;
 3907|     12|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|     12|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3909|     12|            return r.transform_error(map_parse_error_to_scan_error(
 3910|     12|                scan_error::invalid_scanned_value,
 3911|     12|                "Invalid hexadecimal floating-point value"));
 3912|     12|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|     12|    {
 3789|     12|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|     12|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|     12|        return read_while1_code_unit(
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|     12|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|     12|    {
  754|     12|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     12|    {
  684|     12|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     12|            return static_cast<T*>(s.m_cp);
  686|     12|        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     12|            return static_cast<T*>(s.m_p);
  689|     12|        }
  690|     12|        else {
  691|     12|            return reinterpret_cast<T*>(s.m_fp);
  692|     12|        }
  693|     12|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|     12|        {
  662|     12|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    230|    {
 3944|    230|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    230|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 222, False: 8]
  |  Branch (3945:50): [True: 12, False: 210]
  ------------------
 3946|       |
 3947|    230|        auto it = ranges::begin(range);
 3948|    230|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    230|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    230|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 230, False: 0]
  |  |  ------------------
  ------------------
 3952|    230|            return r.transform_error(
 3953|    230|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    230|                                              "Invalid floating-point value"));
 3955|    230|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    230|    {
 3774|    230|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  Branch (859:45): [True: 0, False: 230]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    230|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    230|        return read_while1_code_unit(
 3783|    230|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    230|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    230|    {
  754|    230|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    230|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    230|              cvref<T> obj = *get<T>(fn);
  745|    230|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    230|                  obj(static_cast<decltype(args)>(args)...);
  747|    230|              }
  748|    230|              else {
  749|    230|                  return obj(static_cast<decltype(args)>(args)...);
  750|    230|              }
  751|    230|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    230|    {
  684|    230|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    230|            return static_cast<T*>(s.m_cp);
  686|    230|        }
  687|    230|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    230|            return static_cast<T*>(s.m_p);
  689|    230|        }
  690|    230|        else {
  691|    230|            return reinterpret_cast<T*>(s.m_fp);
  692|    230|        }
  693|    230|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    230|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    230|        {
  662|    230|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    220|    {
 3665|    220|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 220]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    220|        return read_source_impl(range);
 3671|    220|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.10k|    {
  763|  1.10k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.10k|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     10|    {
 3679|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     10|        return read_source_impl(range);
 3685|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.10k|    {
 3705|  1.10k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.10k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.10k|        auto it = sign_result.first;
 3708|  1.10k|        m_sign = sign_result.second;
 3709|       |
 3710|  1.10k|        auto digits_begin = it;
 3711|  1.10k|        auto r = ranges::subrange{it, range.end()};
 3712|  1.10k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.10k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.10k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.10k]
  |  |  |  Branch (859:45): [True: 0, False: 1.10k]
  |  |  |  Branch (859:45): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 3715|  1.10k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.10k|            else {
 3724|  1.10k|                auto cb = [&](const auto& rr)
 3725|  1.10k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.10k|                    auto res = read_all(rr);
 3727|  1.10k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.10k|                        return unexpected_scan_error(
 3729|  1.10k|                            scan_error::invalid_scanned_value,
 3730|  1.10k|                            "Invalid float value");
 3731|  1.10k|                    }
 3732|  1.10k|                    return res;
 3733|  1.10k|                };
 3734|  1.10k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10, False: 1.09k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     10|    }                                                  \
  |  | 3671|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.09k|            }
 3736|  1.10k|        }
 3737|  1.09k|        else {
 3738|  1.09k|            SCN_TRY_ASSIGN(
 3739|  1.09k|                it,
 3740|  1.09k|                do_read_source_impl(
 3741|  1.09k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.09k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.09k|        }
 3744|       |
 3745|  1.09k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.09k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.09k, False: 0]
  |  Branch (3747:48): [True: 1.09k, False: 0]
  ------------------
 3748|  1.09k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.09k, False: 0]
  ------------------
 3749|  1.09k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.09k, False: 0]
  ------------------
 3750|  1.09k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.09k|        }
 3752|       |
 3753|  1.09k|        handle_separators();
 3754|       |
 3755|  1.09k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.09k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.09k|        return it;
 3768|  1.09k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.10k|    {
 3811|  1.10k|        auto it = range.begin();
 3812|  1.10k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.10k, False: 0]
  ------------------
 3813|  1.10k|            return unexpected(r.error());
 3814|  1.10k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.10k|    {
 3834|  1.10k|        auto it = range.begin();
 3835|  1.10k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.10k, False: 0]
  ------------------
 3836|  1.10k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.10k|                scan_error::invalid_scanned_value,
 3838|  1.10k|                "Invalid floating-point NaN value"));
 3839|  1.10k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.09k|    {
 3804|  1.09k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.09k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     10|{
 1996|     10|    auto it = read_while_code_unit(range, pred);
 1997|     10|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 10, False: 0]
  ------------------
 1998|     10|        return unexpected(parse_error::error);
 1999|     10|    }
 2000|      0|    return it;
 2001|     10|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     10|    {
 3944|     10|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     10|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 8]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|     10|        auto it = ranges::begin(range);
 3948|     10|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     10|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     10|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 3952|     10|            return r.transform_error(
 3953|     10|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     10|                                              "Invalid floating-point value"));
 3955|     10|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     10|    {
 3774|     10|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10]
  |  |  |  Branch (859:45): [True: 0, False: 10]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     10|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     10|        return read_while1_code_unit(
 3783|     10|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     10|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|     10|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.10k|    {
 4000|  1.10k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.10k|        const bool allowed_nonhex =
 4002|  1.10k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.10k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.10k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.10k, False: 0]
  |  Branch (4005:45): [True: 0, False: 1.10k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.10k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 1.10k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  1.10k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.10k, False: 0]
  |  Branch (4014:45): [True: 0, False: 1.10k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  1.10k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 1.10k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  1.10k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.09k, False: 10]
  |  Branch (4021:28): [True: 14, False: 1.07k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     14|            auto it = range.begin();
 4025|       |
 4026|     14|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 14]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     14|            else {
 4031|     14|                m_kind = float_kind::hex_without_prefix;
 4032|     14|            }
 4033|       |
 4034|     14|            return read_hex(ranges::subrange{it, range.end()});
 4035|     14|        }
 4036|  1.08k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 10, False: 1.07k]
  |  Branch (4036:29): [True: 10, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     10|            m_kind = float_kind::generic;
 4040|     10|            return read_regular_float(range);
 4041|     10|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.07k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.07k]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|  1.07k|        m_kind = float_kind::generic;
 4052|  1.07k|        return read_regular(range);
 4053|  1.07k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.09k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.09k|                    auto res = read_all(rr);
 3727|  1.09k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  1.09k|                    return res;
 3733|  1.09k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.09k|{
 1839|  1.09k|    return ranges::next(range.begin(), range.end());
 1840|  1.09k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.09k|    {
  313|  1.09k|        ranges::advance(x, bound);
  314|  1.09k|        return x;
  315|  1.09k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.09k|    {
  275|  1.09k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.09k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|  1.09k|    {
 1577|  1.09k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.09k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|  1.09k|    {
 1621|  1.09k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.09k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.09k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.09k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.09k|            m_storage.reset();
 1627|  1.09k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.09k|        }
 1629|  1.09k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.09k|                                          std::basic_string<CharT>>) {
 1631|  1.09k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.09k|            m_view = string_view_type{*m_storage};
 1633|  1.09k|        }
 1634|  1.09k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.09k|                                          typename detail::basic_scan_buffer<
 1636|  1.09k|                                              value_t>::forward_iterator> &&
 1637|  1.09k|                           ranges::common_range<Range>) {
 1638|  1.09k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.09k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.09k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.09k|                             detail::to_address(end_seg.end()))) {
 1642|  1.09k|                auto& str = m_storage.emplace();
 1643|  1.09k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.09k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.09k|                m_view = string_view_type{str};
 1646|  1.09k|                return;
 1647|  1.09k|            }
 1648|       |
 1649|  1.09k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.09k|                                                            end_seg.data());
 1651|  1.09k|            m_storage.reset();
 1652|  1.09k|        }
 1653|  1.09k|        else {
 1654|  1.09k|            auto& str = m_storage.emplace();
 1655|  1.09k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.09k|                str.reserve(range.size());
 1657|  1.09k|            }
 1658|  1.09k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.09k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.09k|                          std::back_inserter(str));
 1661|  1.09k|            }
 1662|  1.09k|            else {
 1663|  1.09k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.09k|                     ++it) {
 1665|  1.09k|                    str.push_back(*it);
 1666|  1.09k|                }
 1667|  1.09k|            }
 1668|  1.09k|            m_view = string_view_type{str};
 1669|  1.09k|        }
 1670|  1.09k|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.09k|    {
 3665|  1.09k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.09k|        return read_source_impl(range);
 3671|  1.09k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.09k|    {
 3691|  1.09k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.09k|        const std::ptrdiff_t sign_len =
 3694|  1.09k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 1.09k]
  ------------------
 3695|       |
 3696|  1.09k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.09k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.09k|    }                                                  \
  |  |  |  | 3671|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.09k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    242|    {
 4170|    242|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    242|#if !SCN_DISABLE_LOCALE
 4173|    242|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 22, False: 220]
  ------------------
 4174|     22|            return read_impl<Range>(
 4175|     22|                range, rd,
 4176|     22|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     22|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     22|                },
 4179|     22|                value, loc);
 4180|     22|        }
 4181|    220|#endif
 4182|       |
 4183|    220|        return read_impl<Range>(
 4184|    220|            range, rd,
 4185|    220|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    220|                return r.read_source(SCN_FWD(args)...);
 4187|    220|            },
 4188|    220|            value);
 4189|    242|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    242|    {
 4206|    242|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    242|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  ------------------
  ------------------
 4208|    242|            return unexpected(r.error());
 4209|    242|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|     22|    {
  754|     22|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     22|    {
  684|     22|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     22|            return static_cast<T*>(s.m_cp);
  686|     22|        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     22|            return static_cast<T*>(s.m_p);
  689|     22|        }
  690|     22|        else {
  691|     22|            return reinterpret_cast<T*>(s.m_fp);
  692|     22|        }
  693|     22|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|     22|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     22|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     22|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|     22|        {
  662|     22|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    220|    {
  754|    220|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    220|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    220|              cvref<T> obj = *get<T>(fn);
  745|    220|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    220|                  obj(static_cast<decltype(args)>(args)...);
  747|    220|              }
  748|    220|              else {
  749|    220|                  return obj(static_cast<decltype(args)>(args)...);
  750|    220|              }
  751|    220|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    220|    {
  684|    220|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    220|            return static_cast<T*>(s.m_cp);
  686|    220|        }
  687|    220|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    220|            return static_cast<T*>(s.m_p);
  689|    220|        }
  690|    220|        else {
  691|    220|            return reinterpret_cast<T*>(s.m_fp);
  692|    220|        }
  693|    220|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    220|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    220|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    220|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    220|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    220|        {
  662|    220|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    452|    {
 4170|    452|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    452|#if !SCN_DISABLE_LOCALE
 4173|    452|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 10, False: 442]
  ------------------
 4174|     10|            return read_impl<Range>(
 4175|     10|                range, rd,
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     10|                },
 4179|     10|                value, loc);
 4180|     10|        }
 4181|    442|#endif
 4182|       |
 4183|    442|        return read_impl<Range>(
 4184|    442|            range, rd,
 4185|    442|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    442|                return r.read_source(SCN_FWD(args)...);
 4187|    442|            },
 4188|    442|            value);
 4189|    452|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.10k|    {
 4206|  1.10k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.10k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 1.09k]
  |  |  ------------------
  ------------------
 4208|     10|            return unexpected(r.error());
 4209|     10|        }
 4210|       |
 4211|  1.09k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.09k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.09k|    }                                                  \
  |  |  |  | 3671|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  1.09k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    442|    {
  754|    442|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|    442|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    442|                  obj(static_cast<decltype(args)>(args)...);
  747|    442|              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    442|    {
  684|    442|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    442|            return static_cast<T*>(s.m_cp);
  686|    442|        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    442|            return static_cast<T*>(s.m_p);
  689|    442|        }
  690|    442|        else {
  691|    442|            return reinterpret_cast<T*>(s.m_fp);
  692|    442|        }
  693|    442|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    442|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    442|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    442|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    442|        {
  662|    442|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  10.4k|{
 5809|  10.4k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  10.4k|        return reader_impl_for_bool<CharT>{};
 5811|  10.4k|    }
 5812|  10.4k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  10.4k|        return reader_impl_for_char<CharT>{};
 5814|  10.4k|    }
 5815|  10.4k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  10.4k|        return reader_impl_for_wchar<CharT>{};
 5817|  10.4k|    }
 5818|  10.4k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  10.4k|        return reader_impl_for_code_point<CharT>{};
 5820|  10.4k|    }
 5821|  10.4k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  10.4k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  10.4k|        return reader_impl_for_string<CharT>{};
 5824|  10.4k|    }
 5825|  10.4k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  10.4k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  10.4k|        return reader_impl_for_string<CharT>{};
 5828|  10.4k|    }
 5829|  10.4k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  10.4k|                       std::is_same_v<T, wregex_matches>) {
 5831|  10.4k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  10.4k|    }
 5833|  10.4k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  10.4k|        return reader_impl_for_voidptr<CharT>{};
 5835|  10.4k|    }
 5836|  10.4k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  10.4k|        return reader_impl_for_float<CharT>{};
 5838|  10.4k|    }
 5839|  10.4k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  10.4k|                       !std::is_same_v<T, wchar_t> &&
 5841|  10.4k|                       !std::is_same_v<T, char32_t> &&
 5842|  10.4k|                       !std::is_same_v<T, bool>) {
 5843|  10.4k|        return reader_impl_for_int<CharT>{};
 5844|  10.4k|    }
 5845|  10.4k|    else {
 5846|  10.4k|        return reader_impl_for_monostate<CharT>{};
 5847|  10.4k|    }
 5848|  10.4k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  31.3k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  29.3k|    {
 3040|  29.3k|        reader_error_handler eh{};
 3041|  29.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  29.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 29.0k]
  |  |  ------------------
  ------------------
 3043|    336|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    336|        }
 3045|  29.0k|        return {};
 3046|  29.3k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  29.3k|    {
 3051|  29.3k|        return static_cast<Derived&>(*this);
 3052|  29.3k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  29.3k|    {
 5210|  29.3k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  29.3k|        SCN_GCC_PUSH
 5213|  29.3k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  29.3k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  29.3k|        SCN_CLANG_PUSH
 5217|  29.3k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  29.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  29.3k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 330, False: 29.0k]
  ------------------
 5221|  1.83k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.83k, False: 27.5k]
  ------------------
 5222|  1.83k|                m_type = reader_type::word;
 5223|  1.83k|                break;
 5224|       |
 5225|    258|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 258, False: 29.1k]
  ------------------
 5226|    258|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 102, False: 156]
  ------------------
 5227|    258|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 102, False: 54]
  ------------------
 5228|    204|                    m_type = reader_type::custom_word;
 5229|    204|                }
 5230|     54|                else {
 5231|     54|                    m_type = reader_type::word;
 5232|     54|                }
 5233|    258|                break;
 5234|      0|            }
 5235|       |
 5236|     78|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 78, False: 29.2k]
  ------------------
 5237|     78|                m_type = reader_type::character;
 5238|     78|                break;
 5239|       |
 5240|  1.29k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 1.29k, False: 28.0k]
  ------------------
 5241|  1.29k|                m_type = reader_type::character_set;
 5242|  1.29k|                break;
 5243|       |
 5244|  25.0k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 25.0k, False: 4.30k]
  ------------------
 5245|  25.0k|                m_type = reader_type::regex;
 5246|  25.0k|                break;
 5247|       |
 5248|    516|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 516, False: 28.8k]
  ------------------
 5249|    516|                m_type = reader_type::regex_escaped;
 5250|    516|                break;
 5251|  29.3k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  29.3k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  33.8k|    {
 5259|  33.8k|        return m_type == reader_type::word;
 5260|  33.8k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  9.51k|{
 1132|  9.51k|    auto it = src.begin();
 1133|  76.3k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 69.7k, False: 6.55k]
  ------------------
 1134|  69.7k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  69.7k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 69.7k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  69.7k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 69.7k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  69.7k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  69.7k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  69.7k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.95k, False: 66.8k]
  ------------------
 1144|  2.95k|            return false;
 1145|  2.95k|        }
 1146|  66.8k|        it += len;
 1147|  66.8k|    }
 1148|  6.55k|    return true;
 1149|  9.51k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    114|{
 2993|    114|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    114|        if (source.stores_allocated_string()) {
 2995|    114|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    114|        }
 2997|    114|        else {
 2998|    114|            dest.assign(source.view());
 2999|    114|        }
 3000|    114|    }
 3001|    114|    else {
 3002|    114|        return transcode_impl(source.view(), dest);
 3003|    114|    }
 3004|       |
 3005|      0|    return {};
 3006|    114|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  1.63k|{
 2968|  1.63k|    dst.clear();
 2969|  1.63k|    transcode_valid_to_string(src, dst);
 2970|  1.63k|    return {};
 2971|  1.63k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  1.63k|{
 1403|  1.63k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  1.63k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  1.63k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  1.63k|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  1.63k|            std::u32string tmp;
 1410|  1.63k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  1.63k|            return transcode_to_string_impl_32to16<true>(
 1412|  1.63k|                std::u32string_view{tmp}, dest);
 1413|  1.63k|        }
 1414|  1.63k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  1.63k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  1.63k|        }
 1417|  1.63k|    }
 1418|  1.63k|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|  1.63k|        if constexpr (sizeof(DestCharT) == 1) {
 1420|  1.63k|            std::u32string tmp;
 1421|  1.63k|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|  1.63k|            return transcode_to_string_impl_32to8<true>(
 1423|  1.63k|                std::u32string_view{tmp}, dest);
 1424|  1.63k|        }
 1425|  1.63k|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|  1.63k|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|  1.63k|        }
 1428|  1.63k|    }
 1429|  1.63k|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|  1.63k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|  1.63k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|  1.63k|        }
 1433|  1.63k|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|  1.63k|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|  1.63k|        }
 1436|  1.63k|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  1.63k|{
 1294|  1.63k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  1.63k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  12.5k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 12.5k, False: 1.63k]
  ------------------
 1298|  12.5k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  12.5k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  12.5k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 10.6k, False: 1.85k]
  ------------------
 1306|  10.6k|            dest.push_back(static_cast<char>(cp));
 1307|  10.6k|        }
 1308|  1.85k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 652, False: 1.20k]
  ------------------
 1309|    652|            dest.push_back(
 1310|    652|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    652|            dest.push_back(
 1312|    652|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    652|        }
 1314|  1.20k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 600, False: 606]
  ------------------
 1315|    600|            dest.push_back(
 1316|    600|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    600|            dest.push_back(static_cast<char>(
 1318|    600|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    600|            dest.push_back(
 1320|    600|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    600|        }
 1322|    606|        else {
 1323|    606|            dest.push_back(
 1324|    606|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    606|            dest.push_back(static_cast<char>(
 1326|    606|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    606|            dest.push_back(static_cast<char>(
 1328|    606|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    606|            dest.push_back(
 1330|    606|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    606|        }
 1332|  12.5k|    }
 1333|  1.63k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  1.29k|        {
 5103|  1.29k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 426, False: 864]
  ------------------
 5104|    426|                return {};
 5105|    426|            }
 5106|       |
 5107|    864|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    864|            auto it = detail::to_address(charset_string.begin());
 5109|    864|            auto set = detail::parse_presentation_set(
 5110|    864|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    864|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 864]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    864|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    864|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    864|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    864|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    864|            std::sort(nonascii.extra_ranges.begin(),
 5118|    864|                      nonascii.extra_ranges.end());
 5119|    864|            return {};
 5120|    864|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  14.0k|        {
 5138|  14.0k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 2.18k, False: 11.8k]
  ------------------
 5139|  2.18k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  2.18k|            }
 5141|       |
 5142|  11.8k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  14.0k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  2.18k|        {
 5086|       |            // TODO: binary search?
 5087|  2.18k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 2.18k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  2.18k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  2.18k|            return std::find_if(
 5093|  2.18k|                       nonascii.extra_ranges.begin(),
 5094|  2.18k|                       nonascii.extra_ranges.end(),
 5095|  2.18k|                       [cp_val](const auto& pair) noexcept {
 5096|  2.18k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  2.18k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  2.18k|                       }) != nonascii.extra_ranges.end();
 5099|  2.18k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  8.67k|                       [cp_val](const auto& pair) noexcept {
 5096|  8.67k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 8.67k, False: 0]
  ------------------
 5097|  8.67k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 2.16k, False: 6.50k]
  ------------------
 5098|  8.67k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  14.3k|        {
 5076|  14.3k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  14.3k|            const auto val =
 5078|  14.3k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  14.3k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  14.3k|                    (val % 8)) &
 5081|  14.3k|                   1u;
 5082|  14.3k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  2.46k|        {
 5129|  2.46k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 24, False: 2.44k]
  ------------------
 5130|     24|                return false;
 5131|     24|            }
 5132|       |
 5133|  2.44k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  2.46k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  1.29k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    274|    {
 5277|    274|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    274|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    274|        return read_impl(range, specs, value);
 5279|    274|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    274|    {
 5295|    274|        SCN_CLANG_PUSH
 5296|    274|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    274|        switch (m_type) {
 5299|    192|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 192, False: 82]
  ------------------
 5300|    192|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 240]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|     24|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 24, False: 250]
  ------------------
 5307|     24|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 274]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 264]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     14|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 14, False: 260]
  ------------------
 5320|     14|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     14|                    range,
 5322|     14|                    get_unescaped_regex_pattern(
 5323|     14|                        specs.charset_string<SourceCharT>()),
 5324|     14|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 274]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    274|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    274|        }
 5331|       |
 5332|    274|        SCN_CLANG_POP
 5333|    274|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    192|    {
 4820|    192|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    192|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    250|{
 4752|    250|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    250|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    250|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 136, False: 114]
  ------------------
 4756|    136|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    136|                                     "Invalid encoding in scanned string");
 4758|    136|    }
 4759|    114|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    114|    static_cast<    \
  |  |  929|    114|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    114|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    114|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 114]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    114|    return SCN_MOVE(result);
  ------------------
  |  |  928|    114|    static_cast<    \
  |  |  929|    114|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    114|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    576|{
 2088|    576|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    576|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    576|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    576|        auto buf = make_contiguous_buffer(range);
 2092|    576|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    576|        return ranges::next(range.begin(),
 2094|    576|                            ranges::distance(buf.view().begin(), it));
 2095|    576|    }
 2096|    576|    else {
 2097|    576|        auto it = range.begin();
 2098|       |
 2099|    576|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    576|            auto seg = get_contiguous_beginning(range);
 2101|    576|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    576|                seg_it != seg.end()) {
 2103|    576|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    576|            }
 2105|    576|            ranges::advance(it, seg.size());
 2106|    576|        }
 2107|       |
 2108|    576|        return read_until_code_point(
 2109|    576|            ranges::subrange{it, range.end()},
 2110|    576|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    576|    }
 2112|    576|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    576|{
 2061|    576|    auto it = range.begin();
 2062|  29.1k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 28.6k, False: 522]
  ------------------
 2063|  28.6k|        const auto val =
 2064|  28.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  28.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  28.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 28.6k, False: 0]
  |  |  ------------------
  ------------------
 2066|  28.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  28.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  28.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 54, False: 28.5k]
  ------------------
 2069|     54|                return it;
 2070|     54|            }
 2071|  28.6k|        }
 2072|  28.5k|        it = val.iterator;
 2073|  28.5k|    }
 2074|       |
 2075|    522|    return it;
 2076|    576|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    576|    {
  754|    576|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  28.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.6k|              cvref<T> obj = *get<T>(fn);
  745|  28.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  28.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.6k|              }
  748|  28.6k|              else {
  749|  28.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.6k|              }
  751|  28.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  28.6k|    {
  684|  28.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  28.6k|            return static_cast<T*>(s.m_cp);
  686|  28.6k|        }
  687|  28.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  28.6k|            return static_cast<T*>(s.m_p);
  689|  28.6k|        }
  690|  28.6k|        else {
  691|  28.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  28.6k|        }
  693|  28.6k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  28.6k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    576|        {
  662|    576|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    344|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    344|              cvref<T> obj = *get<T>(fn);
  745|    344|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    344|                  obj(static_cast<decltype(args)>(args)...);
  747|    344|              }
  748|    344|              else {
  749|    344|                  return obj(static_cast<decltype(args)>(args)...);
  750|    344|              }
  751|    344|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    344|    {
  684|    344|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    344|            return static_cast<T*>(s.m_cp);
  686|    344|        }
  687|    344|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    344|            return static_cast<T*>(s.m_p);
  689|    344|        }
  690|    344|        else {
  691|    344|            return reinterpret_cast<T*>(s.m_fp);
  692|    344|        }
  693|    344|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    344|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     24|    {
 4947|     24|        return read_impl(
 4948|     24|            range,
 4949|     24|            [&](const auto& rng) {
 4950|     24|                return read_string_impl(rng, read_all(rng), value);
 4951|     24|            },
 4952|     24|            detail::priority_tag<1>{});
 4953|     24|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     24|    {
 4974|     24|        return read_cb(range);
 4975|     24|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     24|            [&](const auto& rng) {
 4950|     24|                return read_string_impl(rng, read_all(rng), value);
 4951|     24|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     72|{
 1839|     72|    return ranges::next(range.begin(), range.end());
 1840|     72|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     72|    {
  313|     72|        ranges::advance(x, bound);
  314|     72|        return x;
  315|     72|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     72|    {
  275|     72|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     72|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     72|    {
  203|    828|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 756, False: 72]
  ------------------
  204|    756|            ++i;
  205|    756|        }
  206|     72|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     24|    {
 4891|     24|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     24|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     72|    {
 4913|     72|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    144|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     72|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     72|            return unexpected_scan_error(
 4916|     72|                scan_error::invalid_scanned_value,
 4917|     72|                "Regex backend doesn't support wide strings as input");
 4918|     72|        }
 4919|     72|        else {
 4920|     72|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 72, False: 0]
  ------------------
 4921|     72|                return unexpected_scan_error(
 4922|     72|                    scan_error::invalid_scanned_value,
 4923|     72|                    "Cannot use regex with a non-contiguous source "
 4924|     72|                    "range");
 4925|     72|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     72|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     72|{
  959|     72|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     72|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     72|        return true;
  962|     72|    }
  963|     72|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     72|                           ranges::const_iterator_t<Range>,
  965|     72|                           typename detail::basic_scan_buffer<
  966|     72|                               detail::char_t<Range>>::forward_iterator>) {
  967|     72|        auto beg = r.begin();
  968|     72|        if (!beg.stores_parent()) {
  969|     72|            return true;
  970|     72|        }
  971|     72|        return beg.parent()->is_contiguous();
  972|     72|    }
  973|     72|    else {
  974|     72|        return false;
  975|     72|    }
  976|     72|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  9.39k|    {
 5277|  9.39k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.39k|        return read_impl(range, specs, value);
 5279|  9.39k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  9.39k|    {
 5295|  9.39k|        SCN_CLANG_PUSH
 5296|  9.39k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.39k|        switch (m_type) {
 5299|    436|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 436, False: 8.95k]
  ------------------
 5300|    436|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 9.35k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.39k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    430|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 430, False: 8.96k]
  ------------------
 5310|    430|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    430|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.33k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.33k, False: 1.05k]
  ------------------
 5315|  8.33k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.33k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.33k|                    specs.regexp_flags, value);
 5318|       |
 5319|    158|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 158, False: 9.23k]
  ------------------
 5320|    158|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    158|                    range,
 5322|    158|                    get_unescaped_regex_pattern(
 5323|    158|                        specs.charset_string<SourceCharT>()),
 5324|    158|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.39k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.39k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.39k|        }
 5331|       |
 5332|  9.39k|        SCN_CLANG_POP
 5333|  9.39k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.08k|    {
 4820|  1.08k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.08k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.11k|{
 4752|  1.11k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.11k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.11k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 354, False: 762]
  ------------------
 4756|    354|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    354|                                     "Invalid encoding in scanned string");
 4758|    354|    }
 4759|    762|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    762|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    762|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 762]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    762|    return SCN_MOVE(result);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    762|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.52k|{
 3012|  1.52k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.52k|        dest.assign(source.view());
 3014|  1.52k|    }
 3015|  1.52k|    else {
 3016|  1.52k|        return transcode_impl(source.view(), dest);
 3017|  1.52k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.52k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.25k|{
 2088|  3.25k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.25k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.25k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.25k|        auto buf = make_contiguous_buffer(range);
 2092|  3.25k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.25k|        return ranges::next(range.begin(),
 2094|  3.25k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.25k|    }
 2096|  3.25k|    else {
 2097|  3.25k|        auto it = range.begin();
 2098|       |
 2099|  3.25k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  3.25k|            auto seg = get_contiguous_beginning(range);
 2101|  3.25k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.25k|                seg_it != seg.end()) {
 2103|  3.25k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.25k|            }
 2105|  3.25k|            ranges::advance(it, seg.size());
 2106|  3.25k|        }
 2107|       |
 2108|  3.25k|        return read_until_code_point(
 2109|  3.25k|            ranges::subrange{it, range.end()},
 2110|  3.25k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.25k|    }
 2112|  3.25k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  3.25k|    {
  754|  3.25k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  53.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.3k|              cvref<T> obj = *get<T>(fn);
  745|  53.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  53.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.3k|              }
  748|  53.3k|              else {
  749|  53.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.3k|              }
  751|  53.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  53.3k|    {
  684|  53.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  53.3k|            return static_cast<T*>(s.m_cp);
  686|  53.3k|        }
  687|  53.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  53.3k|            return static_cast<T*>(s.m_p);
  689|  53.3k|        }
  690|  53.3k|        else {
  691|  53.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  53.3k|        }
  693|  53.3k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  53.3k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  3.25k|        {
  662|  3.25k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     32|    {
 4841|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 0]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    430|    {
 5048|    430|        auto it = read_source_impl(range, {specs});
 5049|    430|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 354]
  |  |  ------------------
  ------------------
 5050|     76|            return unexpected(it.error());
 5051|     76|        }
 5052|       |
 5053|    354|        return read_string_impl(range, *it, value);
 5054|    430|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  1.29k|    {
 5153|  1.29k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  1.29k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  1.29k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  1.29k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  1.29k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 864, False: 426]
  ------------------
 5163|    864|            const auto cb = [&](char32_t cp) {
 5164|    864|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    864|            };
 5166|       |
 5167|    864|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 198, False: 666]
  ------------------
 5168|    198|                auto it = read_until_code_point(range, cb);
 5169|    198|                return check_nonempty(it, range);
 5170|    198|            }
 5171|    666|            auto it = read_while_code_point(range, cb);
 5172|    666|            return check_nonempty(it, range);
 5173|    864|        }
 5174|       |
 5175|    426|        const auto cb = [&](SourceCharT ch) {
 5176|    426|            return cb_wrapper.on_ascii_only(ch);
 5177|    426|        };
 5178|       |
 5179|    426|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 234, False: 192]
  ------------------
 5180|    234|            auto it = read_until_code_unit(range, cb);
 5181|    234|            return check_nonempty(it, range);
 5182|    234|        }
 5183|    192|        auto it = read_while_code_unit(range, cb);
 5184|    192|        return check_nonempty(it, range);
 5185|    426|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    864|    {
  754|    864|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  14.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.0k|              cvref<T> obj = *get<T>(fn);
  745|  14.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.0k|              }
  748|  14.0k|              else {
  749|  14.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.0k|              }
  751|  14.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  14.0k|    {
  684|  14.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.0k|            return static_cast<T*>(s.m_cp);
  686|  14.0k|        }
  687|  14.0k|        else if constexpr (std::is_object_v<T>) {
  688|  14.0k|            return static_cast<T*>(s.m_p);
  689|  14.0k|        }
  690|  14.0k|        else {
  691|  14.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.0k|        }
  693|  14.0k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  14.0k|            const auto cb = [&](char32_t cp) {
 5164|  14.0k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  14.0k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    864|        {
  667|    864|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  1.29k|    {
 5191|  1.29k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 228, False: 1.06k]
  ------------------
 5192|    228|            return unexpected_scan_error(
 5193|    228|                scan_error::invalid_scanned_value,
 5194|    228|                "No characters matched in [character set]");
 5195|    228|        }
 5196|       |
 5197|  1.06k|        return it;
 5198|  1.29k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|    426|    {
  754|    426|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  2.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.46k|              cvref<T> obj = *get<T>(fn);
  745|  2.46k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.46k|              }
  748|  2.46k|              else {
  749|  2.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.46k|              }
  751|  2.46k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.46k|    {
  684|  2.46k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.46k|            return static_cast<T*>(s.m_cp);
  686|  2.46k|        }
  687|  2.46k|        else if constexpr (std::is_object_v<T>) {
  688|  2.46k|            return static_cast<T*>(s.m_p);
  689|  2.46k|        }
  690|  2.46k|        else {
  691|  2.46k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.46k|        }
  693|  2.46k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  2.46k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.46k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.46k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|    426|        {
  667|    426|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.25k|{
 4752|  1.25k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.25k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.25k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 496, False: 762]
  ------------------
 4756|    496|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    496|                                     "Invalid encoding in scanned string");
 4758|    496|    }
 4759|    762|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    762|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    762|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 762]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    762|    return SCN_MOVE(result);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    762|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  8.49k|    {
 4891|  8.49k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  8.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.58k, False: 904]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.58k|    }                                                  \
  |  |  |  | 3671|  8.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    904|        return read_string_impl(range, it, value);
 4893|  8.49k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  25.4k|    {
 4913|  25.4k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  50.9k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  25.4k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  25.4k|            return unexpected_scan_error(
 4916|  25.4k|                scan_error::invalid_scanned_value,
 4917|  25.4k|                "Regex backend doesn't support wide strings as input");
 4918|  25.4k|        }
 4919|  25.4k|        else {
 4920|  25.4k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 25.4k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  25.4k|            auto input = get_as_contiguous(range);
 4928|  25.4k|            SCN_TRY(it,
  ------------------
  |  | 3672|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22.7k, False: 2.71k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  22.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  22.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  22.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  22.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  22.7k|    }                                                  \
  |  |  |  | 3671|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  2.71k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  2.71k|            return ranges::next(range.begin(),
 4931|  2.71k|                                ranges::distance(input.begin(), it));
 4932|  25.4k|        }
 4933|  25.4k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  25.4k|{
  959|  25.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  25.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  25.4k|        return true;
  962|  25.4k|    }
  963|  25.4k|    else if constexpr (std::is_same_v<
  964|  25.4k|                           ranges::const_iterator_t<Range>,
  965|  25.4k|                           typename detail::basic_scan_buffer<
  966|  25.4k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  25.4k|        auto beg = r.begin();
  968|  25.4k|        if (!beg.stores_parent()) {
  969|  25.4k|            return true;
  970|  25.4k|        }
  971|  25.4k|        return beg.parent()->is_contiguous();
  972|  25.4k|    }
  973|  25.4k|    else {
  974|  25.4k|        return false;
  975|  25.4k|    }
  976|  25.4k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  25.4k|{
 1065|  25.4k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  25.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  25.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  25.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  25.4k|        return r;
 1070|  25.4k|    }
 1071|  25.4k|    else if constexpr (std::is_same_v<
 1072|  25.4k|                           ranges::const_iterator_t<Range>,
 1073|  25.4k|                           typename detail::basic_scan_buffer<
 1074|  25.4k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  25.4k|        if constexpr (ranges::common_range<Range>) {
 1076|  25.4k|            return detail::make_string_view_from_pointers(
 1077|  25.4k|                r.begin().to_contiguous_segment_iterator(),
 1078|  25.4k|                r.end().to_contiguous_segment_iterator());
 1079|  25.4k|        }
 1080|  25.4k|        else {
 1081|  25.4k|            return r.begin().contiguous_segment();
 1082|  25.4k|        }
 1083|  25.4k|    }
 1084|  25.4k|    else {
 1085|  25.4k|        SCN_EXPECT(false);
 1086|  25.4k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  25.4k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  25.4k|    }
 1090|  25.4k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  25.4k|{
  981|  25.4k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  25.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  25.4k|        return true;
  984|  25.4k|    }
  985|  25.4k|    else if constexpr (std::is_same_v<
  986|  25.4k|                           ranges::const_iterator_t<Range>,
  987|  25.4k|                           typename detail::basic_scan_buffer<
  988|  25.4k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  25.4k|        auto beg = r.begin();
  990|  25.4k|        if (beg.contiguous_segment().empty()) {
  991|  25.4k|            return false;
  992|  25.4k|        }
  993|  25.4k|        if constexpr (ranges::common_range<Range>) {
  994|  25.4k|            return beg.contiguous_segment().end() ==
  995|  25.4k|                   ranges::end(r).contiguous_segment().end();
  996|  25.4k|        }
  997|  25.4k|        else {
  998|  25.4k|            if (beg.stores_parent()) {
  999|  25.4k|                return beg.contiguous_segment().end() ==
 1000|  25.4k|                       beg.parent()->current_view().end();
 1001|  25.4k|            }
 1002|  25.4k|            return true;
 1003|  25.4k|        }
 1004|  25.4k|    }
 1005|  25.4k|    else {
 1006|  25.4k|        return false;
 1007|  25.4k|    }
 1008|  25.4k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  25.4k|{
 4346|  25.4k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  25.4k|                  ranges::borrowed_range<Input> &&
 4348|  25.4k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  25.4k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  25.4k|    std::basic_regex<CharT> re{};
 4352|  25.4k|    try {
 4353|  25.4k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  25.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  25.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  25.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  25.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 25.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  25.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  25.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  25.4k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  25.4k|                                     re_flags | std::regex_constants::nosubs};
 4356|  25.4k|    }
 4357|  25.4k|    catch (const std::regex_error& err) {
 4358|  10.3k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  10.3k|                                     "Invalid regex");
 4360|  10.3k|    }
 4361|       |
 4362|  15.1k|    std::match_results<const CharT*> matches{};
 4363|  15.1k|    try {
 4364|  15.1k|        bool found = std::regex_search(input.data(),
 4365|  15.1k|                                       input.data() + input.size(), matches, re,
 4366|  15.1k|                                       std::regex_constants::match_continuous);
 4367|  15.1k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 12.4k, False: 2.71k]
  |  Branch (4367:23): [True: 0, False: 2.71k]
  ------------------
 4368|  12.4k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  12.4k|                                         "Regular expression didn't match");
 4370|  12.4k|        }
 4371|  15.1k|    }
 4372|  15.1k|    catch (const std::regex_error& err) {
 4373|     18|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|     18|                                     "Regex matching failed with an error");
 4375|     18|    }
 4376|       |
 4377|  2.71k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  15.1k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  10.4k|{
 5809|  10.4k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  10.4k|        return reader_impl_for_bool<CharT>{};
 5811|  10.4k|    }
 5812|  10.4k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  10.4k|        return reader_impl_for_char<CharT>{};
 5814|  10.4k|    }
 5815|  10.4k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  10.4k|        return reader_impl_for_wchar<CharT>{};
 5817|  10.4k|    }
 5818|  10.4k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  10.4k|        return reader_impl_for_code_point<CharT>{};
 5820|  10.4k|    }
 5821|  10.4k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  10.4k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  10.4k|        return reader_impl_for_string<CharT>{};
 5824|  10.4k|    }
 5825|  10.4k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  10.4k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  10.4k|        return reader_impl_for_string<CharT>{};
 5828|  10.4k|    }
 5829|  10.4k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  10.4k|                       std::is_same_v<T, wregex_matches>) {
 5831|  10.4k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  10.4k|    }
 5833|  10.4k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  10.4k|        return reader_impl_for_voidptr<CharT>{};
 5835|  10.4k|    }
 5836|  10.4k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  10.4k|        return reader_impl_for_float<CharT>{};
 5838|  10.4k|    }
 5839|  10.4k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  10.4k|                       !std::is_same_v<T, wchar_t> &&
 5841|  10.4k|                       !std::is_same_v<T, char32_t> &&
 5842|  10.4k|                       !std::is_same_v<T, bool>) {
 5843|  10.4k|        return reader_impl_for_int<CharT>{};
 5844|  10.4k|    }
 5845|  10.4k|    else {
 5846|  10.4k|        return reader_impl_for_monostate<CharT>{};
 5847|  10.4k|    }
 5848|  10.4k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    114|{
 2993|    114|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    114|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 114, False: 0]
  ------------------
 2995|    114|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    114|    static_cast<    \
  |  |  929|    114|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    114|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    114|    }
 3001|    114|    else {
 3002|    114|        return transcode_impl(source.view(), dest);
 3003|    114|    }
 3004|       |
 3005|    114|    return {};
 3006|    114|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    274|    {
 5277|    274|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    274|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    274|        return read_impl(range, specs, value);
 5279|    274|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    274|    {
 5295|    274|        SCN_CLANG_PUSH
 5296|    274|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    274|        switch (m_type) {
 5299|    192|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 192, False: 82]
  ------------------
 5300|    192|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 240]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|     24|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 24, False: 250]
  ------------------
 5307|     24|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 274]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 264]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     14|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 14, False: 260]
  ------------------
 5320|     14|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     14|                    range,
 5322|     14|                    get_unescaped_regex_pattern(
 5323|     14|                        specs.charset_string<SourceCharT>()),
 5324|     14|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 274]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    274|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    274|        }
 5331|       |
 5332|    274|        SCN_CLANG_POP
 5333|    274|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    192|    {
 4820|    192|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    192|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    250|{
 4752|    250|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    250|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    250|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 136, False: 114]
  ------------------
 4756|    136|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    136|                                     "Invalid encoding in scanned string");
 4758|    136|    }
 4759|    114|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    114|    static_cast<    \
  |  |  929|    114|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    114|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    114|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 114]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    114|    return SCN_MOVE(result);
  ------------------
  |  |  928|    114|    static_cast<    \
  |  |  929|    114|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    114|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    344|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    344|              cvref<T> obj = *get<T>(fn);
  745|    344|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    344|                  obj(static_cast<decltype(args)>(args)...);
  747|    344|              }
  748|    344|              else {
  749|    344|                  return obj(static_cast<decltype(args)>(args)...);
  750|    344|              }
  751|    344|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    344|    {
  684|    344|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    344|            return static_cast<T*>(s.m_cp);
  686|    344|        }
  687|    344|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    344|            return static_cast<T*>(s.m_p);
  689|    344|        }
  690|    344|        else {
  691|    344|            return reinterpret_cast<T*>(s.m_fp);
  692|    344|        }
  693|    344|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    344|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     24|    {
 4947|     24|        return read_impl(
 4948|     24|            range,
 4949|     24|            [&](const auto& rng) {
 4950|     24|                return read_string_impl(rng, read_all(rng), value);
 4951|     24|            },
 4952|     24|            detail::priority_tag<1>{});
 4953|     24|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     24|    {
 4974|     24|        return read_cb(range);
 4975|     24|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     24|            [&](const auto& rng) {
 4950|     24|                return read_string_impl(rng, read_all(rng), value);
 4951|     24|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     24|    {
 4891|     24|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     24|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  9.39k|    {
 5277|  9.39k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.39k|        return read_impl(range, specs, value);
 5279|  9.39k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  9.39k|    {
 5295|  9.39k|        SCN_CLANG_PUSH
 5296|  9.39k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.39k|        switch (m_type) {
 5299|    436|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 436, False: 8.95k]
  ------------------
 5300|    436|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 9.35k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.39k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    430|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 430, False: 8.96k]
  ------------------
 5310|    430|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    430|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.33k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.33k, False: 1.05k]
  ------------------
 5315|  8.33k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.33k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.33k|                    specs.regexp_flags, value);
 5318|       |
 5319|    158|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 158, False: 9.23k]
  ------------------
 5320|    158|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    158|                    range,
 5322|    158|                    get_unescaped_regex_pattern(
 5323|    158|                        specs.charset_string<SourceCharT>()),
 5324|    158|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.39k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.39k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.39k|        }
 5331|       |
 5332|  9.39k|        SCN_CLANG_POP
 5333|  9.39k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.08k|    {
 4820|  1.08k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.08k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.11k|{
 4752|  1.11k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.11k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.11k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 354, False: 762]
  ------------------
 4756|    354|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    354|                                     "Invalid encoding in scanned string");
 4758|    354|    }
 4759|    762|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    762|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    762|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 762]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    762|    return SCN_MOVE(result);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    762|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.52k|{
 3012|  1.52k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.52k|        dest.assign(source.view());
 3014|  1.52k|    }
 3015|  1.52k|    else {
 3016|  1.52k|        return transcode_impl(source.view(), dest);
 3017|  1.52k|    }
 3018|       |
 3019|  1.52k|    return {};
 3020|  1.52k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     32|    {
 4841|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 0]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    430|    {
 5048|    430|        auto it = read_source_impl(range, {specs});
 5049|    430|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 354]
  |  |  ------------------
  ------------------
 5050|     76|            return unexpected(it.error());
 5051|     76|        }
 5052|       |
 5053|    354|        return read_string_impl(range, *it, value);
 5054|    430|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.25k|{
 4752|  1.25k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.25k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.25k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 496, False: 762]
  ------------------
 4756|    496|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    496|                                     "Invalid encoding in scanned string");
 4758|    496|    }
 4759|    762|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    762|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    762|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 762]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    762|    return SCN_MOVE(result);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    762|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  8.49k|    {
 4891|  8.49k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  8.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.58k, False: 904]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.58k|    }                                                  \
  |  |  |  | 3671|  8.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    904|        return read_string_impl(range, it, value);
 4893|  8.49k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  10.4k|{
 5809|  10.4k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  10.4k|        return reader_impl_for_bool<CharT>{};
 5811|  10.4k|    }
 5812|  10.4k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  10.4k|        return reader_impl_for_char<CharT>{};
 5814|  10.4k|    }
 5815|  10.4k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  10.4k|        return reader_impl_for_wchar<CharT>{};
 5817|  10.4k|    }
 5818|  10.4k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  10.4k|        return reader_impl_for_code_point<CharT>{};
 5820|  10.4k|    }
 5821|  10.4k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  10.4k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  10.4k|        return reader_impl_for_string<CharT>{};
 5824|  10.4k|    }
 5825|  10.4k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  10.4k|                       std::is_same_v<T, std::wstring>) {
 5827|  10.4k|        return reader_impl_for_string<CharT>{};
 5828|  10.4k|    }
 5829|  10.4k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  10.4k|                       std::is_same_v<T, wregex_matches>) {
 5831|  10.4k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  10.4k|    }
 5833|  10.4k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  10.4k|        return reader_impl_for_voidptr<CharT>{};
 5835|  10.4k|    }
 5836|  10.4k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  10.4k|        return reader_impl_for_float<CharT>{};
 5838|  10.4k|    }
 5839|  10.4k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  10.4k|                       !std::is_same_v<T, wchar_t> &&
 5841|  10.4k|                       !std::is_same_v<T, char32_t> &&
 5842|  10.4k|                       !std::is_same_v<T, bool>) {
 5843|  10.4k|        return reader_impl_for_int<CharT>{};
 5844|  10.4k|    }
 5845|  10.4k|    else {
 5846|  10.4k|        return reader_impl_for_monostate<CharT>{};
 5847|  10.4k|    }
 5848|  10.4k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    274|    {
 5277|    274|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    274|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    274|        return read_impl(range, specs, value);
 5279|    274|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    274|    {
 5295|    274|        SCN_CLANG_PUSH
 5296|    274|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    274|        switch (m_type) {
 5299|    192|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 192, False: 82]
  ------------------
 5300|    192|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 240]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|     24|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 24, False: 250]
  ------------------
 5307|     24|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 274]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 264]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     14|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 14, False: 260]
  ------------------
 5320|     14|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     14|                    range,
 5322|     14|                    get_unescaped_regex_pattern(
 5323|     14|                        specs.charset_string<SourceCharT>()),
 5324|     14|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 274]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    274|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    274|        }
 5331|       |
 5332|    274|        SCN_CLANG_POP
 5333|    274|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    192|    {
 4827|    192|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    192|                                     value);
 4829|    192|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    250|{
 4773|    250|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    250|    auto src = [&]() {
 4776|    250|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    250|            return make_contiguous_buffer(
 4778|    250|                ranges::subrange{range.begin().base(), result.base()});
 4779|    250|        }
 4780|    250|        else {
 4781|    250|            return make_contiguous_buffer(
 4782|    250|                ranges::subrange{range.begin(), result});
 4783|    250|        }
 4784|    250|    }();
 4785|    250|    using src_type = decltype(src);
 4786|       |
 4787|    250|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    250|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    250|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    250|                                     "Cannot read a string_view from "
 4796|    250|                                     "this source range (would require "
 4797|    250|                                     "transcoding)");
 4798|    250|    }
 4799|    250|    else {
 4800|    250|        const auto view = src.view();
 4801|    250|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    250|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 136, False: 114]
  ------------------
 4804|    136|            return unexpected_scan_error(
 4805|    136|                scan_error::invalid_scanned_value,
 4806|    136|                "Invalid encoding in scanned string_view");
 4807|    136|        }
 4808|       |
 4809|    114|        return SCN_MOVE(result);
  ------------------
  |  |  928|    114|    static_cast<    \
  |  |  929|    114|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    250|    }
 4811|    250|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    250|    auto src = [&]() {
 4776|    250|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    250|            return make_contiguous_buffer(
 4778|    250|                ranges::subrange{range.begin().base(), result.base()});
 4779|    250|        }
 4780|    250|        else {
 4781|    250|            return make_contiguous_buffer(
 4782|    250|                ranges::subrange{range.begin(), result});
 4783|    250|        }
 4784|    250|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     34|    {
 4863|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 0]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    344|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    344|              cvref<T> obj = *get<T>(fn);
  745|    344|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    344|                  obj(static_cast<decltype(args)>(args)...);
  747|    344|              }
  748|    344|              else {
  749|    344|                  return obj(static_cast<decltype(args)>(args)...);
  750|    344|              }
  751|    344|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    344|    {
  684|    344|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    344|            return static_cast<T*>(s.m_cp);
  686|    344|        }
  687|    344|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    344|            return static_cast<T*>(s.m_p);
  689|    344|        }
  690|    344|        else {
  691|    344|            return reinterpret_cast<T*>(s.m_fp);
  692|    344|        }
  693|    344|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    344|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     24|    {
 4959|     24|        return read_impl(
 4960|     24|            range,
 4961|     24|            [&](const auto& rng) {
 4962|     24|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     24|            },
 4964|     24|            detail::priority_tag<1>{});
 4965|     24|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     24|    {
 4974|     24|        return read_cb(range);
 4975|     24|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     24|            [&](const auto& rng) {
 4962|     24|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     24|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     24|    {
 4902|     24|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     24|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  9.39k|    {
 5277|  9.39k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.39k|        return read_impl(range, specs, value);
 5279|  9.39k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  9.39k|    {
 5295|  9.39k|        SCN_CLANG_PUSH
 5296|  9.39k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.39k|        switch (m_type) {
 5299|    436|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 436, False: 8.95k]
  ------------------
 5300|    436|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 9.35k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.39k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    430|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 430, False: 8.96k]
  ------------------
 5310|    430|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    430|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.33k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.33k, False: 1.05k]
  ------------------
 5315|  8.33k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.33k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.33k|                    specs.regexp_flags, value);
 5318|       |
 5319|    158|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 158, False: 9.23k]
  ------------------
 5320|    158|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    158|                    range,
 5322|    158|                    get_unescaped_regex_pattern(
 5323|    158|                        specs.charset_string<SourceCharT>()),
 5324|    158|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.39k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.39k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.39k|        }
 5331|       |
 5332|  9.39k|        SCN_CLANG_POP
 5333|  9.39k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.08k|    {
 4827|  1.08k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.08k|                                     value);
 4829|  1.08k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.11k|{
 4773|  1.11k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.11k|    auto src = [&]() {
 4776|  1.11k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.11k|            return make_contiguous_buffer(
 4778|  1.11k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.11k|        }
 4780|  1.11k|        else {
 4781|  1.11k|            return make_contiguous_buffer(
 4782|  1.11k|                ranges::subrange{range.begin(), result});
 4783|  1.11k|        }
 4784|  1.11k|    }();
 4785|  1.11k|    using src_type = decltype(src);
 4786|       |
 4787|  1.11k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.11k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.11k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.11k|                                     "Cannot read a string_view from "
 4796|  1.11k|                                     "this source range (would require "
 4797|  1.11k|                                     "transcoding)");
 4798|  1.11k|    }
 4799|  1.11k|    else {
 4800|  1.11k|        const auto view = src.view();
 4801|  1.11k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.11k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 354, False: 762]
  ------------------
 4804|    354|            return unexpected_scan_error(
 4805|    354|                scan_error::invalid_scanned_value,
 4806|    354|                "Invalid encoding in scanned string_view");
 4807|    354|        }
 4808|       |
 4809|    762|        return SCN_MOVE(result);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.11k|    }
 4811|  1.11k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.11k|    auto src = [&]() {
 4776|  1.11k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.11k|            return make_contiguous_buffer(
 4778|  1.11k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.11k|        }
 4780|  1.11k|        else {
 4781|  1.11k|            return make_contiguous_buffer(
 4782|  1.11k|                ranges::subrange{range.begin(), result});
 4783|  1.11k|        }
 4784|  1.11k|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     32|    {
 4863|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 0]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    430|    {
 5062|    430|        auto it = read_source_impl(range, {specs});
 5063|    430|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 354]
  |  |  ------------------
  ------------------
 5064|     76|            return unexpected(it.error());
 5065|     76|        }
 5066|       |
 5067|    354|        return read_string_view_impl(range, *it, value);
 5068|    430|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.25k|{
 4773|  1.25k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.25k|    auto src = [&]() {
 4776|  1.25k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.25k|            return make_contiguous_buffer(
 4778|  1.25k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.25k|        }
 4780|  1.25k|        else {
 4781|  1.25k|            return make_contiguous_buffer(
 4782|  1.25k|                ranges::subrange{range.begin(), result});
 4783|  1.25k|        }
 4784|  1.25k|    }();
 4785|  1.25k|    using src_type = decltype(src);
 4786|       |
 4787|  1.25k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.25k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.25k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.25k|                                     "Cannot read a string_view from "
 4796|  1.25k|                                     "this source range (would require "
 4797|  1.25k|                                     "transcoding)");
 4798|  1.25k|    }
 4799|  1.25k|    else {
 4800|  1.25k|        const auto view = src.view();
 4801|  1.25k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.25k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 496, False: 762]
  ------------------
 4804|    496|            return unexpected_scan_error(
 4805|    496|                scan_error::invalid_scanned_value,
 4806|    496|                "Invalid encoding in scanned string_view");
 4807|    496|        }
 4808|       |
 4809|    762|        return SCN_MOVE(result);
  ------------------
  |  |  928|    762|    static_cast<    \
  |  |  929|    762|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.25k|    }
 4811|  1.25k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.25k|    auto src = [&]() {
 4776|  1.25k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.25k|            return make_contiguous_buffer(
 4778|  1.25k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.25k|        }
 4780|  1.25k|        else {
 4781|  1.25k|            return make_contiguous_buffer(
 4782|  1.25k|                ranges::subrange{range.begin(), result});
 4783|  1.25k|        }
 4784|  1.25k|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  8.49k|    {
 4902|  8.49k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  8.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.58k, False: 904]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.58k|    }                                                  \
  |  |  |  | 3671|  8.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    904|        return read_string_view_impl(range, it, value);
 4904|  8.49k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  9.41k|{
 1683|  9.41k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  9.41k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  9.41k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  9.41k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  9.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  9.41k|    }
 1688|  9.41k|    else {
 1689|  9.41k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  9.41k|    }
 1691|  9.41k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  9.41k|    {
 1490|  9.41k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.02k|    {
 4100|  1.02k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 1.02k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  1.02k|        return std::copysign(value, T{1.0});
 4104|  1.02k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  1.09k|    {
 4100|  1.09k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 1.09k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  1.09k|        return std::copysign(value, T{1.0});
 4104|  1.09k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  6.64k|{
 5795|  6.64k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.64k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  6.64k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 738, False: 5.90k]
  ------------------
 5800|    738|        return range.begin();
 5801|    738|    }
 5802|       |
 5803|  5.90k|    return skip_classic_whitespace(range);
 5804|  6.64k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    738|    {
 3528|    738|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    738|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    738|        return read_default_with_base(range, value, 10);
 3530|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    738|    {
 3528|    738|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    738|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    738|        return read_default_with_base(range, value, 10);
 3530|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.43k|    {
 5748|  1.43k|        return true;
 5749|  1.43k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    976|    {
 5765|    976|        detail::format_specs specs{};
 5766|    976|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    976|        std::uintptr_t intvalue{};
 5769|    976|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    976|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    976|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    976|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    976|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 976, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    976|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    976|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    976|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    976|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    976|    }                                                  \
  |  |  |  | 3671|    976|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    976|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.71k|    {
 3035|  1.71k|        return true;
 3036|  1.71k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    738|    {
 5504|    738|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    738|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    738|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    738|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.38k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.10k|    {
 5355|  1.10k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.10k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.10k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 994, False: 110]
  ------------------
 5359|    994|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 994]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    994|            else {
 5363|    994|                err = r.error();
 5364|    994|            }
 5365|    994|        }
 5366|       |
 5367|  1.10k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.08k, False: 22]
  ------------------
 5368|  1.08k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.08k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.08k|            else {
 5372|  1.08k|                err = r.error();
 5373|  1.08k|            }
 5374|  1.08k|        }
 5375|       |
 5376|  1.10k|        return unexpected(err);
 5377|  1.10k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  1.03k|    {
 5384|  1.03k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 1.03k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  1.03k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 1.03k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  1.03k|        return unexpected_scan_error(
 5394|  1.03k|            scan_error::invalid_scanned_value,
 5395|  1.03k|            "Failed to read numeric boolean value: No match");
 5396|  1.03k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.08k|    {
 5402|  1.08k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.08k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.08k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.08k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.08k|        return unexpected_scan_error(
 5412|  1.08k|            scan_error::invalid_scanned_value,
 5413|  1.08k|            "Failed to read textual boolean value: No match");
 5414|  1.08k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.16k|{
 2194|  2.16k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 2.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  2.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  2.06k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  2.06k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  2.06k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  2.06k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  2.06k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 0]
  |  |  ------------------
  ------------------
 2201|  2.06k|            return unexpected(parse_error::error);
 2202|  2.06k|        }
 2203|      0|        return it;
 2204|  2.06k|    }
 2205|  2.06k|    else {
 2206|  2.06k|        auto range_it = range.begin();
 2207|  2.06k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  2.06k|            if (SCN_UNLIKELY(*range_it !=
 2209|  2.06k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  2.06k|                return unexpected(parse_error::error);
 2211|  2.06k|            }
 2212|  2.06k|        }
 2213|  2.06k|        return it;
 2214|  2.06k|    }
 2215|  2.06k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    738|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.38k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    738|    {
 4152|    738|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    738|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    738|        float_reader<CharT> rd{};
 4155|    738|        return read_impl<Range>(
 4156|    738|            range, rd,
 4157|    738|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    738|                return r.read_source(SCN_FWD(args)...);
 4159|    738|            },
 4160|    738|            value);
 4161|    738|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    738|    {
  754|    738|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    738|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    738|              cvref<T> obj = *get<T>(fn);
  745|    738|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    738|                  obj(static_cast<decltype(args)>(args)...);
  747|    738|              }
  748|    738|              else {
  749|    738|                  return obj(static_cast<decltype(args)>(args)...);
  750|    738|              }
  751|    738|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    738|    {
  684|    738|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    738|            return static_cast<T*>(s.m_cp);
  686|    738|        }
  687|    738|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    738|            return static_cast<T*>(s.m_p);
  689|    738|        }
  690|    738|        else {
  691|    738|            return reinterpret_cast<T*>(s.m_fp);
  692|    738|        }
  693|    738|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    738|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    738|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    738|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    738|        {
  662|    738|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    738|    {
 5266|    738|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    738|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    738|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    738|    {
 5266|    738|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    738|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    738|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    738|    {
 5871|    738|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    738|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    738|                          basic_contiguous_scan_context<char_type>>) {
 5875|    738|            auto rd = make_reader<T, char_type>();
 5876|    738|            return impl(rd, range, value);
 5877|    738|        }
 5878|    738|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    738|            auto rd = make_reader<T, char_type>();
 5880|    738|            if (!is_segment_contiguous(range)) {
 5881|    738|                return impl(rd, range, value);
 5882|    738|            }
 5883|    738|            auto crange = get_as_contiguous(range);
 5884|    738|            SCN_TRY(it, impl(rd, crange, value));
 5885|    738|            return ranges::next(range.begin(),
 5886|    738|                                ranges::distance(crange.begin(), it));
 5887|    738|        }
 5888|    738|        else {
 5889|    738|            SCN_EXPECT(false);
 5890|    738|            SCN_UNREACHABLE;
 5891|    738|        }
 5892|    738|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    738|    {
 5863|    738|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    738|                        .transform_error(make_eof_scan_error));
 5865|    738|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    738|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    738|    {
 5266|    738|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    738|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    738|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    738|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   253k|    {
 2879|   253k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   503k|    {
 2883|   503k|        return m_current;
 2884|   503k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   338k|    {
 2888|   338k|        return m_range.end();
 2889|   338k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  88.4k|{
 1221|       |    // TODO: optimize
 1222|  88.4k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  88.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  88.4k|    auto res = get_next_code_point(str);
 1224|  88.4k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  88.4k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  92.1k|    {
 2903|  92.1k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  92.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  92.1k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  92.1k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 92.1k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  92.1k|        }
 2909|  92.1k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  92.1k|    static_cast<    \
  |  |  929|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  92.1k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   156k|    {
 2893|   156k|        return ranges::subrange{begin(), end()};
 2894|   156k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  9.41k|{
 2117|  9.41k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  9.41k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  9.41k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  9.41k|        auto buf = make_contiguous_buffer(range);
 2121|  9.41k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  9.41k|        return ranges::next(range.begin(),
 2123|  9.41k|                            ranges::distance(buf.view().begin(), it));
 2124|  9.41k|    }
 2125|  9.41k|    else {
 2126|  9.41k|        auto it = range.begin();
 2127|       |
 2128|  9.41k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  9.41k|            auto seg = get_contiguous_beginning(range);
 2130|  9.41k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  9.41k|                seg_it != seg.end()) {
 2132|  9.41k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  9.41k|            }
 2134|  9.41k|            ranges::advance(it, seg.size());
 2135|  9.41k|        }
 2136|       |
 2137|  9.41k|        return read_while_code_point(
 2138|  9.41k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  9.41k|    }
 2140|  9.41k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  8.76k|    {
 6037|  8.76k|        const bool need_skipped_width =
 6038|  8.76k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 184, False: 8.58k]
  |  Branch (6038:33): [True: 8.58k, False: 0]
  ------------------
 6039|  8.76k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  8.76k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 772, False: 7.99k]
  ------------------
 6043|  8.76k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 532, False: 7.46k]
  ------------------
 6044|  1.30k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  1.30k|                             need_skipped_width);
 6046|  1.30k|        }
 6047|  7.46k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 7.07k, False: 388]
  |  Branch (6047:56): [True: 3.46k, False: 3.61k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.46k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 3.46k, False: 0]
  ------------------
 6051|  3.46k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  3.46k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  3.46k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.46k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.46k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 134, False: 3.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    134|    }                                                  \
  |  |  |  | 3671|  3.46k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  3.33k|                                  .transform_error(make_eof_scan_error));
 6054|  3.33k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  3.46k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  3.99k|        return result_type{rng.begin(), 0};
 6070|  7.46k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|  1.30k|{
 5951|  1.30k|    using char_type = detail::char_t<Range>;
 5952|  1.30k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  1.30k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 1.06k, False: 240]
  ------------------
 5955|  1.06k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  1.06k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  1.06k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 1.06k]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|  1.06k|        auto max_width_view = take_width(range, max_width);
 5972|  1.06k|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|  1.06k|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 1.06k, False: 0]
  ------------------
 5975|  1.06k|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|  1.06k|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|  1.06k|    }
 5979|       |
 5980|    240|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    240|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 240]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    240|    auto max_width_view = take_width(range, max_width);
 5994|    240|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    240|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 240, False: 0]
  ------------------
 5997|    240|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    240|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    240|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|  1.06k|    {
  754|  1.06k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.37k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.37k|              cvref<T> obj = *get<T>(fn);
  745|  1.37k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.37k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.37k|              }
  748|  1.37k|              else {
  749|  1.37k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.37k|              }
  751|  1.37k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.37k|    {
  684|  1.37k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.37k|            return static_cast<T*>(s.m_cp);
  686|  1.37k|        }
  687|  1.37k|        else if constexpr (std::is_object_v<T>) {
  688|  1.37k|            return static_cast<T*>(s.m_p);
  689|  1.37k|        }
  690|  1.37k|        else {
  691|  1.37k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.37k|        }
  693|  1.37k|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  1.37k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|  1.06k|        {
  667|  1.06k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.06k|{
 1976|  1.06k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.06k|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.06k|{
 1957|  1.06k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.06k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.06k|    }
 1960|  1.06k|    else {
 1961|  1.06k|        auto first = range.begin();
 1962|  1.46k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.37k, False: 84]
  ------------------
 1963|  1.37k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 980, False: 398]
  ------------------
 1964|    980|                return first;
 1965|    980|            }
 1966|  1.37k|        }
 1967|     84|        return first;
 1968|  1.06k|    }
 1969|  1.06k|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  8.23k|    {
 2810|  8.23k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  8.23k|                                      m_count};
 2812|  8.23k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  31.2k|    {
 2717|  31.2k|        return view;
 2718|  31.2k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  8.23k|    {
 2382|  8.23k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  7.58k|        {
 2781|  7.58k|            return !(y == x);
 2782|  7.58k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  16.4k|        {
 2770|  16.4k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 666, False: 15.8k]
  |  Branch (2770:39): [True: 430, False: 236]
  ------------------
 2771|  16.4k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 16.0k]
  ------------------
 2772|  16.4k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    666|    {
 2421|    666|        return m_multibyte_left;
 2422|    666|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  14.7k|    {
 2816|  14.7k|        return sentinel<true>{m_base.get().end()};
 2817|  14.7k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  14.7k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  11.4k|    {
 2426|  11.4k|        return *m_current;
 2427|  11.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  8.68k|    {
 2435|  8.68k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  8.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  8.68k|        _increment_current();
 2437|  8.68k|        return *this;
 2438|  8.68k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  8.68k|    {
 2668|  8.68k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 6.45k, False: 2.22k]
  ------------------
 2669|  6.45k|            auto cplen = _get_cp_length_at_current();
 2670|  6.45k|            m_multibyte_left = cplen - 1;
 2671|  6.45k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  6.45k|        }
 2673|  2.22k|        else {
 2674|  2.22k|            --m_multibyte_left;
 2675|  2.22k|        }
 2676|       |
 2677|  8.68k|        ++m_current;
 2678|  8.68k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  6.45k|    {
 2639|  6.45k|        return static_cast<difference_type>(
 2640|  6.45k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  6.45k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  6.45k|    {
 2645|  6.45k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  6.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.45k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  6.45k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 5.06k, False: 1.39k]
  ------------------
 2650|  5.06k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  5.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  5.06k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  5.06k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  5.06k|        }
 2654|       |
 2655|  1.39k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  1.39k|                                           cplen);
 2657|  1.39k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  1.39k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  1.39k|        return static_cast<difference_type>(
 2663|  1.39k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  1.39k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    240|{
 2037|    240|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    240|    auto it = range.begin();
 2040|    240|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 240, False: 0]
  ------------------
 2041|    240|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    240|                                           needle.size());
 2043|    240|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 78, False: 162]
  ------------------
 2044|     78|            return it;
 2045|     78|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 162, False: 0]
  ------------------
 2049|    162|            return it;
 2050|    162|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    240|{
 1857|    240|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    240|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    240|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    240|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    240|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    240|        if (sz < count) {
 1862|    240|            return unexpected(eof_error::eof);
 1863|    240|        }
 1864|       |
 1865|    240|        return ranges::next(range.begin(), count);
 1866|    240|    }
 1867|    240|    else {
 1868|    240|        auto it = range.begin();
 1869|    240|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 240]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    954|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 792, False: 162]
  ------------------
 1874|    792|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 714]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|    792|        }
 1878|       |
 1879|    162|        return it;
 1880|    240|    }
 1881|    240|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    240|{
 1095|    240|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    240|        return r.size();
 1097|    240|    }
 1098|    240|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    240|                           ranges::const_iterator_t<Range>,
 1100|    240|                           typename detail::basic_scan_buffer<
 1101|    240|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    240|        if constexpr (ranges::common_range<Range>) {
 1103|    240|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    240|        }
 1105|    240|        else {
 1106|    240|            if (r.begin().stores_parent()) {
 1107|    240|                return static_cast<size_t>(
 1108|    240|                    r.begin().parent()->chars_available() -
 1109|    240|                    r.begin().position());
 1110|    240|            }
 1111|    240|            return r.begin().contiguous_segment().size();
 1112|    240|        }
 1113|    240|    }
 1114|    240|    else {
 1115|    240|        return 0;
 1116|    240|    }
 1117|    240|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  3.46k|    {
  268|  3.46k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.46k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  3.46k|    {
  161|  3.46k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  3.46k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 3.46k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  3.46k|        else {
  169|  3.46k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 3.46k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  3.46k|        }
  173|  3.46k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  3.25k|    {
 2531|  3.25k|        return !(a == b);
 2532|  3.25k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  3.25k|    {
 2523|  3.25k|        return a.m_current == b.m_current;
 2524|  3.25k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  4.77k|    {
 2832|  4.77k|        return take_width_view{r, n};
 2833|  4.77k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  4.77k|    {
 2801|  4.77k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  4.77k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  3.46k|{
 2951|  3.46k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.46k, False: 0]
  ------------------
 2952|  3.46k|        auto it = read_while_classic_space(range);
 2953|  3.46k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.46k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 3.33k]
  |  |  ------------------
  ------------------
 2955|    134|            return unexpected(e);
 2956|    134|        }
 2957|       |
 2958|  3.33k|        return it;
 2959|  3.46k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.46k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  3.46k|{
 2117|  3.46k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.46k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.46k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.46k|        auto buf = make_contiguous_buffer(range);
 2121|  3.46k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.46k|        return ranges::next(range.begin(),
 2123|  3.46k|                            ranges::distance(buf.view().begin(), it));
 2124|  3.46k|    }
 2125|  3.46k|    else {
 2126|  3.46k|        auto it = range.begin();
 2127|       |
 2128|  3.46k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  3.46k|            auto seg = get_contiguous_beginning(range);
 2130|  3.46k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.46k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 3.46k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  3.46k|            ranges::advance(it, seg.size());
 2135|  3.46k|        }
 2136|       |
 2137|  3.46k|        return read_while_code_point(
 2138|  3.46k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.46k|    }
 2140|  3.46k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  3.46k|{
 1039|  3.46k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  3.46k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  3.46k|        return r;
 1042|  3.46k|    }
 1043|  3.46k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  3.46k|                           ranges::const_iterator_t<Range>,
 1045|  3.46k|                           typename detail::basic_scan_buffer<
 1046|  3.46k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  3.46k|        if constexpr (ranges::common_range<Range>) {
 1048|  3.46k|            auto seg = r.begin().contiguous_segment();
 1049|  3.46k|            auto dist =
 1050|  3.46k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  3.46k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  3.46k|        }
 1053|  3.46k|        else {
 1054|  3.46k|            return r.begin().contiguous_segment();
 1055|  3.46k|        }
 1056|  3.46k|    }
 1057|  3.46k|    else {
 1058|  3.46k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  3.46k|    }
 1060|  3.46k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  3.46k|{
 2082|  3.46k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.46k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  3.46k|{
 2061|  3.46k|    auto it = range.begin();
 2062|  4.76k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.62k, False: 134]
  ------------------
 2063|  4.62k|        const auto val =
 2064|  4.62k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.62k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.62k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.62k, False: 0]
  |  |  ------------------
  ------------------
 2066|  4.62k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.62k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.62k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 3.33k, False: 1.29k]
  ------------------
 2069|  3.33k|                return it;
 2070|  3.33k|            }
 2071|  4.62k|        }
 2072|  1.29k|        it = val.iterator;
 2073|  1.29k|    }
 2074|       |
 2075|    134|    return it;
 2076|  3.46k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  4.62k|{
 1899|  4.62k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.62k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.62k|    auto it = range.begin();
 1903|  4.62k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.62k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.62k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  4.62k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 4.20k, False: 424]
  ------------------
 1912|  4.20k|        ++it;
 1913|  4.20k|        return {it, string_type(1, *range.begin())};
 1914|  4.20k|    }
 1915|       |
 1916|    424|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    424|    return {it, string_type{range.begin(), it}};
 1918|  4.62k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  8.09k|{
  944|  8.09k|    return is_range_eof(r.begin(), r.end());
  945|  8.09k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  8.09k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  8.09k|    {
  937|  8.09k|        return begin == end;
  938|  8.09k|    }
  939|  8.09k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    424|    {
  283|    424|        return n - fn::impl_i_n_s(i, n, bound);
  284|    424|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    424|    {
  227|    424|        constexpr iter_difference_t<I> zero{0};
  228|    424|        iter_difference_t<I> counter{0};
  229|       |
  230|    424|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 424]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    424|        else {
  237|  1.54k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 1.12k, False: 424]
  |  Branch (237:34): [True: 1.12k, False: 0]
  ------------------
  238|  1.12k|                ++i;
  239|  1.12k|                ++counter;
  240|  1.12k|            }
  241|    424|        }
  242|       |
  243|    424|        return counter;
  244|    424|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  4.62k|    {
 1890|  4.62k|        return !codepoint.empty();
 1891|  4.62k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  3.46k|    {
  754|  3.46k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  4.62k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.62k|              cvref<T> obj = *get<T>(fn);
  745|  4.62k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.62k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.62k|              }
  748|  4.62k|              else {
  749|  4.62k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.62k|              }
  751|  4.62k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.62k|    {
  684|  4.62k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.62k|            return static_cast<T*>(s.m_cp);
  686|  4.62k|        }
  687|  4.62k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.62k|            return static_cast<T*>(s.m_p);
  689|  4.62k|        }
  690|  4.62k|        else {
  691|  4.62k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.62k|        }
  693|  4.62k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.62k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  3.46k|        {
  662|  3.46k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  3.46k|{
  950|  3.46k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 3.33k]
  |  |  ------------------
  ------------------
  951|    134|        return eof_error::eof;
  952|    134|    }
  953|  3.33k|    return eof_error::good;
  954|  3.46k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  20.6k|    {
 2413|  20.6k|        return m_current;
 2414|  20.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  21.1k|    {
 2417|  21.1k|        return m_count;
 2418|  21.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  42.2k|    {
 6037|  42.2k|        const bool need_skipped_width =
 6038|  42.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 2.03k, False: 40.1k]
  |  Branch (6038:33): [True: 0, False: 40.1k]
  ------------------
 6039|  42.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  42.2k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 284, False: 41.9k]
  ------------------
 6043|  42.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 5.75k, False: 36.1k]
  ------------------
 6044|  6.03k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  6.03k|                             need_skipped_width);
 6046|  6.03k|        }
 6047|  36.1k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 35.7k, False: 396]
  |  Branch (6047:56): [True: 1.90k, False: 33.8k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.90k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.90k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.80k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.80k|                            make_eof_scan_error));
 6058|       |
 6059|  3.80k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.14k, False: 758]
  ------------------
 6060|  1.14k|                return result_type{
 6061|  1.14k|                    it,
 6062|  1.14k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.14k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.14k|                                             .view())};
 6065|  1.14k|            }
 6066|    758|            return result_type{it, 0};
 6067|  3.80k|        }
 6068|       |
 6069|  34.2k|        return result_type{rng.begin(), 0};
 6070|  36.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  9.21k|    {
 6079|  9.21k|        const bool need_skipped_width =
 6080|  9.21k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 578, False: 8.63k]
  |  Branch (6080:33): [True: 2.17k, False: 6.46k]
  ------------------
 6081|  9.21k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  9.21k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 202, False: 9.01k]
  ------------------
 6084|  9.21k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 338, False: 8.67k]
  ------------------
 6085|    540|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 240, False: 300]
  ------------------
 6086|    540|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 84, False: 156]
  ------------------
 6087|     84|                return result_type{rng.begin(), 0};
 6088|     84|            }
 6089|    456|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    456|                             specs.fill, need_skipped_width);
 6091|    540|        }
 6092|  8.67k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 8.30k, False: 372]
  ------------------
 6093|  8.67k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 7.70k, False: 600]
  ------------------
 6094|  8.67k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 384, False: 7.32k]
  |  Branch (6094:35): [True: 348, False: 36]
  ------------------
 6095|  7.70k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 1.12k, False: 6.23k]
  ------------------
 6096|  7.35k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 1.01k, False: 106]
  ------------------
 6097|  1.36k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 1.01k, False: 344]
  ------------------
 6098|  1.01k|                const auto initial_width =
 6099|  1.01k|                    specs.precision - prefix_width - value_width;
 6100|  1.01k|                auto max_width_view = take_width(rng, initial_width);
 6101|  1.01k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|  1.01k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.01k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.01k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.01k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|  1.01k|                                  .transform_error(make_eof_scan_error));
 6103|  1.01k|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|  1.01k|            }
 6105|    688|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    344|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    344|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    344|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 344]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    344|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    344|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    688|                            make_eof_scan_error));
 6107|       |
 6108|    688|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 344, False: 0]
  ------------------
 6109|    344|                return result_type{
 6110|    344|                    it,
 6111|    344|                    calculate_text_width(make_contiguous_buffer(
 6112|    344|                                             ranges::subrange{rng.begin(), it})
 6113|    344|                                             .view())};
 6114|    344|            }
 6115|      0|            return result_type{it, 0};
 6116|    688|        }
 6117|  7.31k|        return result_type{rng.begin(), 0};
 6118|  8.67k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  15.6k|    {
 6193|  15.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.6k|            auto rd = make_reader<T, char_type>();
 6198|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 790]
  |  |  ------------------
  ------------------
 6199|  14.8k|                return unexpected(e);
 6200|  14.8k|            }
 6201|       |
 6202|    790|            return impl(rd, range, value);
 6203|  15.6k|        }
 6204|  15.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.6k|            auto rd = make_reader<T, char_type>();
 6206|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.6k|                return unexpected(e);
 6208|  15.6k|            }
 6209|       |
 6210|  15.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.6k|                specs.width != 0) {
 6212|  15.6k|                return impl(rd, range, value);
 6213|  15.6k|            }
 6214|       |
 6215|  15.6k|            auto crange = get_as_contiguous(range);
 6216|  15.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.6k|            return ranges::next(range.begin(),
 6218|  15.6k|                                ranges::distance(crange.begin(), it));
 6219|  15.6k|        }
 6220|  15.6k|        else {
 6221|  15.6k|            SCN_EXPECT(false);
 6222|  15.6k|            SCN_UNREACHABLE;
 6223|  15.6k|        }
 6224|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    790|    {
 6124|    790|        const bool need_skipped_width =
 6125|    790|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 608]
  |  Branch (6125:33): [True: 492, False: 116]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    790|        auto it = rng.begin();
 6129|    790|        std::ptrdiff_t prefix_width = 0;
 6130|    790|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 498, False: 292]
  ------------------
 6131|    498|            auto max_width_view = take_width(rng, specs.precision);
 6132|    498|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    478|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    478|            it = prefix_result.first.base();
 6135|    478|            prefix_width = prefix_result.second;
 6136|    478|        }
 6137|    292|        else {
 6138|    292|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    292|            std::tie(it, prefix_width) = prefix_result;
 6140|    292|        }
 6141|    770|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    770|        std::ptrdiff_t value_width = 0;
 6145|    770|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 478, False: 292]
  ------------------
 6146|    478|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 472]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    472|            const auto initial_width = specs.precision - prefix_width;
 6154|    472|            auto max_width_view =
 6155|    472|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    472|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 472, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    472|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    472|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    472|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    472|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    472|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    292|        else {
 6161|    292|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    292|    }                                                  \
  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  15.6k|    {
 6193|  15.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.6k|            auto rd = make_reader<T, char_type>();
 6198|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 790]
  |  |  ------------------
  ------------------
 6199|  14.8k|                return unexpected(e);
 6200|  14.8k|            }
 6201|       |
 6202|    790|            return impl(rd, range, value);
 6203|  15.6k|        }
 6204|  15.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.6k|            auto rd = make_reader<T, char_type>();
 6206|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.6k|                return unexpected(e);
 6208|  15.6k|            }
 6209|       |
 6210|  15.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.6k|                specs.width != 0) {
 6212|  15.6k|                return impl(rd, range, value);
 6213|  15.6k|            }
 6214|       |
 6215|  15.6k|            auto crange = get_as_contiguous(range);
 6216|  15.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.6k|            return ranges::next(range.begin(),
 6218|  15.6k|                                ranges::distance(crange.begin(), it));
 6219|  15.6k|        }
 6220|  15.6k|        else {
 6221|  15.6k|            SCN_EXPECT(false);
 6222|  15.6k|            SCN_UNREACHABLE;
 6223|  15.6k|        }
 6224|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    790|    {
 6124|    790|        const bool need_skipped_width =
 6125|    790|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 182, False: 608]
  |  Branch (6125:33): [True: 492, False: 116]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    790|        auto it = rng.begin();
 6129|    790|        std::ptrdiff_t prefix_width = 0;
 6130|    790|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 498, False: 292]
  ------------------
 6131|    498|            auto max_width_view = take_width(rng, specs.precision);
 6132|    498|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    478|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    478|            it = prefix_result.first.base();
 6135|    478|            prefix_width = prefix_result.second;
 6136|    478|        }
 6137|    292|        else {
 6138|    292|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    292|            std::tie(it, prefix_width) = prefix_result;
 6140|    292|        }
 6141|    770|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    770|        std::ptrdiff_t value_width = 0;
 6145|    770|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 478, False: 292]
  ------------------
 6146|    478|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 472]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    472|            const auto initial_width = specs.precision - prefix_width;
 6154|    472|            auto max_width_view =
 6155|    472|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    472|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 472, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    472|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    472|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    472|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    472|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    472|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    292|        else {
 6161|    292|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    292|    }                                                  \
  |  | 3671|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  15.5k|    {
 6193|  15.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.5k|            auto rd = make_reader<T, char_type>();
 6198|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 694]
  |  |  ------------------
  ------------------
 6199|  14.8k|                return unexpected(e);
 6200|  14.8k|            }
 6201|       |
 6202|    694|            return impl(rd, range, value);
 6203|  15.5k|        }
 6204|  15.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.5k|            auto rd = make_reader<T, char_type>();
 6206|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.5k|                return unexpected(e);
 6208|  15.5k|            }
 6209|       |
 6210|  15.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.5k|                specs.width != 0) {
 6212|  15.5k|                return impl(rd, range, value);
 6213|  15.5k|            }
 6214|       |
 6215|  15.5k|            auto crange = get_as_contiguous(range);
 6216|  15.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.5k|            return ranges::next(range.begin(),
 6218|  15.5k|                                ranges::distance(crange.begin(), it));
 6219|  15.5k|        }
 6220|  15.5k|        else {
 6221|  15.5k|            SCN_EXPECT(false);
 6222|  15.5k|            SCN_UNREACHABLE;
 6223|  15.5k|        }
 6224|  15.5k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  15.5k|    {
 5753|  15.5k|        reader_error_handler eh{};
 5754|  15.5k|        detail::check_pointer_type_specs(specs, eh);
 5755|  15.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 694]
  |  |  ------------------
  ------------------
 5756|  14.8k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  14.8k|        }
 5758|    694|        return {};
 5759|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    694|    {
 6124|    694|        const bool need_skipped_width =
 6125|    694|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 178, False: 516]
  |  Branch (6125:33): [True: 450, False: 66]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    694|        auto it = rng.begin();
 6129|    694|        std::ptrdiff_t prefix_width = 0;
 6130|    694|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 456, False: 238]
  ------------------
 6131|    456|            auto max_width_view = take_width(rng, specs.precision);
 6132|    456|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    456|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    446|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    446|            it = prefix_result.first.base();
 6135|    446|            prefix_width = prefix_result.second;
 6136|    446|        }
 6137|    238|        else {
 6138|    238|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 238]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    238|            std::tie(it, prefix_width) = prefix_result;
 6140|    238|        }
 6141|    684|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    684|        std::ptrdiff_t value_width = 0;
 6145|    684|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 446, False: 238]
  ------------------
 6146|    446|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 442]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    442|            const auto initial_width = specs.precision - prefix_width;
 6154|    442|            auto max_width_view =
 6155|    442|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    442|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 442, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    442|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    442|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    442|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    442|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    442|    }                                                  \
  |  |  |  | 3671|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    238|        else {
 6161|    238|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    238|    }                                                  \
  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    442|    {
 5782|    442|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    442|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    442|        return read_default(range, value, loc);
 5784|    442|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    442|    {
 5765|    442|        detail::format_specs specs{};
 5766|    442|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    442|        std::uintptr_t intvalue{};
 5769|    442|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 442, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    442|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    442|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    442|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    442|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    442|    }                                                  \
  |  |  |  | 3671|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    442|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    238|    {
 5782|    238|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    238|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    238|        return read_default(range, value, loc);
 5784|    238|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  15.6k|    {
 6193|  15.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.6k|            auto rd = make_reader<T, char_type>();
 6198|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 974]
  |  |  ------------------
  ------------------
 6199|  14.6k|                return unexpected(e);
 6200|  14.6k|            }
 6201|       |
 6202|    974|            return impl(rd, range, value);
 6203|  15.6k|        }
 6204|  15.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.6k|            auto rd = make_reader<T, char_type>();
 6206|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.6k|                return unexpected(e);
 6208|  15.6k|            }
 6209|       |
 6210|  15.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.6k|                specs.width != 0) {
 6212|  15.6k|                return impl(rd, range, value);
 6213|  15.6k|            }
 6214|       |
 6215|  15.6k|            auto crange = get_as_contiguous(range);
 6216|  15.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.6k|            return ranges::next(range.begin(),
 6218|  15.6k|                                ranges::distance(crange.begin(), it));
 6219|  15.6k|        }
 6220|  15.6k|        else {
 6221|  15.6k|            SCN_EXPECT(false);
 6222|  15.6k|            SCN_UNREACHABLE;
 6223|  15.6k|        }
 6224|  15.6k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  15.6k|    {
 3040|  15.6k|        reader_error_handler eh{};
 3041|  15.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  15.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.6k, False: 974]
  |  |  ------------------
  ------------------
 3043|  14.6k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  14.6k|        }
 3045|    974|        return {};
 3046|  15.6k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  15.6k|    {
 3051|  15.6k|        return static_cast<Derived&>(*this);
 3052|  15.6k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  15.6k|    {
 5497|  15.6k|        detail::check_bool_type_specs(specs, eh);
 5498|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    974|    {
 6124|    974|        const bool need_skipped_width =
 6125|    974|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 192, False: 782]
  |  Branch (6125:33): [True: 560, False: 222]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    974|        auto it = rng.begin();
 6129|    974|        std::ptrdiff_t prefix_width = 0;
 6130|    974|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 568, False: 406]
  ------------------
 6131|    568|            auto max_width_view = take_width(rng, specs.precision);
 6132|    568|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 544]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     24|    }                                                  \
  |  |  |  | 3671|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    544|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    544|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    544|            it = prefix_result.first.base();
 6135|    544|            prefix_width = prefix_result.second;
 6136|    544|        }
 6137|    406|        else {
 6138|    406|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    406|            std::tie(it, prefix_width) = prefix_result;
 6140|    406|        }
 6141|    950|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    950|        std::ptrdiff_t value_width = 0;
 6145|    950|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 544, False: 406]
  ------------------
 6146|    544|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 538]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    538|            const auto initial_width = specs.precision - prefix_width;
 6154|    538|            auto max_width_view =
 6155|    538|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    538|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    538|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    538|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    538|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    538|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 538, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    538|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    538|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    538|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    538|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    538|    }                                                  \
  |  |  |  | 3671|    538|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    406|        else {
 6161|    406|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 406, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    406|    }                                                  \
  |  | 3671|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    538|    {
 5516|    538|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    538|#if !SCN_DISABLE_LOCALE
 5519|    538|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 526]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    526|#endif
 5523|       |
 5524|    526|        return rd.read_classic(range, value);
 5525|    538|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    944|    {
 5529|    944|        SCN_GCC_COMPAT_PUSH
 5530|    944|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    944|        switch (specs.type) {
 5533|    176|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 176, False: 768]
  ------------------
 5534|    176|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 934]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 10, False: 934]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 938]
  ------------------
 5539|     36|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 10, False: 934]
  ------------------
 5540|     76|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 40, False: 904]
  ------------------
 5541|     80|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 940]
  ------------------
 5542|     80|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    688|            default:
  ------------------
  |  Branch (5544:13): [True: 688, False: 256]
  ------------------
 5545|    688|                return bool_reader_base::allow_text |
 5546|    688|                       bool_reader_base::allow_numeric;
 5547|    944|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    944|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    474|    {
 5384|    474|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 474]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    474|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 474]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    474|        return unexpected_scan_error(
 5394|    474|            scan_error::invalid_scanned_value,
 5395|    474|            "Failed to read numeric boolean value: No match");
 5396|    474|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    948|{
 2146|    948|    auto it = read_code_unit(range);
 2147|    948|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    948|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 948]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    948|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    948|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 948, False: 0]
  |  |  ------------------
  ------------------
 2152|    948|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    948|        return unexpected(parse_error::error);
 2154|    948|    }
 2155|       |
 2156|      0|    return *it;
 2157|    948|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|  1.02k|{
 1857|  1.02k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.02k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.02k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.02k|        if (sz < count) {
 1862|  1.02k|            return unexpected(eof_error::eof);
 1863|  1.02k|        }
 1864|       |
 1865|  1.02k|        return ranges::next(range.begin(), count);
 1866|  1.02k|    }
 1867|  1.02k|    else {
 1868|  1.02k|        auto it = range.begin();
 1869|  1.02k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.02k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  5.25k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 4.37k, False: 880]
  ------------------
 1874|  4.37k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 144, False: 4.23k]
  ------------------
 1875|    144|                return unexpected(eof_error::eof);
 1876|    144|            }
 1877|  4.37k|        }
 1878|       |
 1879|    880|        return it;
 1880|  1.02k|    }
 1881|  1.02k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|  1.02k|{
 1095|  1.02k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.02k|        return r.size();
 1097|  1.02k|    }
 1098|  1.02k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.02k|                           ranges::const_iterator_t<Range>,
 1100|  1.02k|                           typename detail::basic_scan_buffer<
 1101|  1.02k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.02k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.02k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.02k|        }
 1105|  1.02k|        else {
 1106|  1.02k|            if (r.begin().stores_parent()) {
 1107|  1.02k|                return static_cast<size_t>(
 1108|  1.02k|                    r.begin().parent()->chars_available() -
 1109|  1.02k|                    r.begin().position());
 1110|  1.02k|            }
 1111|  1.02k|            return r.begin().contiguous_segment().size();
 1112|  1.02k|        }
 1113|  1.02k|    }
 1114|  1.02k|    else {
 1115|  1.02k|        return 0;
 1116|  1.02k|    }
 1117|  1.02k|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    526|    {
 5355|    526|        scan_error err{scan_error::invalid_scanned_value,
 5356|    526|                       "Failed to read boolean"};
 5357|       |
 5358|    526|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 464, False: 62]
  ------------------
 5359|    464|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 464]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    464|            else {
 5363|    464|                err = r.error();
 5364|    464|            }
 5365|    464|        }
 5366|       |
 5367|    526|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 502, False: 24]
  ------------------
 5368|    502|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 502]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    502|            else {
 5372|    502|                err = r.error();
 5373|    502|            }
 5374|    502|        }
 5375|       |
 5376|    526|        return unexpected(err);
 5377|    526|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    502|    {
 5402|    502|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 502]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    502|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 502]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    502|        return unexpected_scan_error(
 5412|    502|            scan_error::invalid_scanned_value,
 5413|    502|            "Failed to read textual boolean value: No match");
 5414|    502|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|  1.00k|{
 2194|  1.00k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 132, False: 872]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    132|    }                                                  \
  |  |  |  | 3671|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    872|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    872|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    872|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    872|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    872|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    872|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    872|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 872, False: 0]
  |  |  ------------------
  ------------------
 2201|    872|            return unexpected(parse_error::error);
 2202|    872|        }
 2203|      0|        return it;
 2204|    872|    }
 2205|    872|    else {
 2206|    872|        auto range_it = range.begin();
 2207|    872|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    872|            if (SCN_UNLIKELY(*range_it !=
 2209|    872|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    872|                return unexpected(parse_error::error);
 2211|    872|            }
 2212|    872|        }
 2213|    872|        return it;
 2214|    872|    }
 2215|    872|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    406|    {
 5516|    406|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    406|#if !SCN_DISABLE_LOCALE
 5519|    406|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 40, False: 366]
  ------------------
 5520|     40|            return rd.read_localized(range, loc, value);
 5521|     40|        }
 5522|    366|#endif
 5523|       |
 5524|    366|        return rd.read_classic(range, value);
 5525|    406|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     40|    {
 5428|     40|        scan_error err{scan_error::invalid_scanned_value,
 5429|     40|                       "Failed to read boolean"};
 5430|       |
 5431|     40|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 38, False: 2]
  ------------------
 5432|     38|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 38]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     38|            else {
 5436|     38|                err = r.error();
 5437|     38|            }
 5438|     38|        }
 5439|       |
 5440|     40|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 32]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     40|        return unexpected(err);
 5457|     40|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  15.5k|    {
 6193|  15.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.5k|            auto rd = make_reader<T, char_type>();
 6198|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.7k, False: 746]
  |  |  ------------------
  ------------------
 6199|  14.7k|                return unexpected(e);
 6200|  14.7k|            }
 6201|       |
 6202|    746|            return impl(rd, range, value);
 6203|  15.5k|        }
 6204|  15.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.5k|            auto rd = make_reader<T, char_type>();
 6206|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.5k|                return unexpected(e);
 6208|  15.5k|            }
 6209|       |
 6210|  15.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.5k|                specs.width != 0) {
 6212|  15.5k|                return impl(rd, range, value);
 6213|  15.5k|            }
 6214|       |
 6215|  15.5k|            auto crange = get_as_contiguous(range);
 6216|  15.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.5k|            return ranges::next(range.begin(),
 6218|  15.5k|                                ranges::distance(crange.begin(), it));
 6219|  15.5k|        }
 6220|  15.5k|        else {
 6221|  15.5k|            SCN_EXPECT(false);
 6222|  15.5k|            SCN_UNREACHABLE;
 6223|  15.5k|        }
 6224|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    746|    {
 6124|    746|        const bool need_skipped_width =
 6125|    746|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 180, False: 566]
  |  Branch (6125:33): [True: 484, False: 82]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    746|        auto it = rng.begin();
 6129|    746|        std::ptrdiff_t prefix_width = 0;
 6130|    746|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 490, False: 256]
  ------------------
 6131|    490|            auto max_width_view = take_width(rng, specs.precision);
 6132|    490|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    490|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    490|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    490|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 490]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    490|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    490|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    490|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    490|            it = prefix_result.first.base();
 6135|    490|            prefix_width = prefix_result.second;
 6136|    490|        }
 6137|    256|        else {
 6138|    256|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    256|            std::tie(it, prefix_width) = prefix_result;
 6140|    256|        }
 6141|    746|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    746|        std::ptrdiff_t value_width = 0;
 6145|    746|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 490, False: 256]
  ------------------
 6146|    490|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 484]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    484|            const auto initial_width = specs.precision - prefix_width;
 6154|    484|            auto max_width_view =
 6155|    484|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    484|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 34, False: 450]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     34|    }                                                  \
  |  |  |  | 3671|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    450|            it = w_it.base();
 6158|    450|            value_width = initial_width - w_it.count();
 6159|    450|        }
 6160|    256|        else {
 6161|    256|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 234]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     22|    }                                                  \
  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    234|                                             specs, value, loc));
 6163|       |
 6164|    234|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 170, False: 64]
  ------------------
 6165|    170|                value_width = calculate_text_width(
 6166|    170|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    170|                        .view());
 6168|    170|            }
 6169|    234|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    684|        std::ptrdiff_t postfix_width = 0;
 6173|    684|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 684, False: 0]
  ------------------
 6174|    684|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    684|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    684|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    684|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    684|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 684]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    684|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    684|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    684|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    684|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    684|                                 value_width));
 6178|    684|            std::tie(it, postfix_width) = postfix_result;
 6179|    684|        }
 6180|       |
 6181|    684|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    684|                                                 value_width, postfix_width);
 6183|    684|            !e) {
  ------------------
  |  Branch (6183:13): [True: 158, False: 526]
  ------------------
 6184|    158|            return unexpected(e);
 6185|    158|        }
 6186|       |
 6187|    526|        return it;
 6188|    684|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  15.6k|    {
 6193|  15.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.6k|            auto rd = make_reader<T, char_type>();
 6198|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 806]
  |  |  ------------------
  ------------------
 6199|  14.8k|                return unexpected(e);
 6200|  14.8k|            }
 6201|       |
 6202|    806|            return impl(rd, range, value);
 6203|  15.6k|        }
 6204|  15.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.6k|            auto rd = make_reader<T, char_type>();
 6206|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.6k|                return unexpected(e);
 6208|  15.6k|            }
 6209|       |
 6210|  15.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.6k|                specs.width != 0) {
 6212|  15.6k|                return impl(rd, range, value);
 6213|  15.6k|            }
 6214|       |
 6215|  15.6k|            auto crange = get_as_contiguous(range);
 6216|  15.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.6k|            return ranges::next(range.begin(),
 6218|  15.6k|                                ranges::distance(crange.begin(), it));
 6219|  15.6k|        }
 6220|  15.6k|        else {
 6221|  15.6k|            SCN_EXPECT(false);
 6222|  15.6k|            SCN_UNREACHABLE;
 6223|  15.6k|        }
 6224|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    806|    {
 6124|    806|        const bool need_skipped_width =
 6125|    806|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 188, False: 618]
  |  Branch (6125:33): [True: 490, False: 128]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    806|        auto it = rng.begin();
 6129|    806|        std::ptrdiff_t prefix_width = 0;
 6130|    806|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 498, False: 308]
  ------------------
 6131|    498|            auto max_width_view = take_width(rng, specs.precision);
 6132|    498|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    498|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    498|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    498|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 480]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|    498|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    480|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    480|            it = prefix_result.first.base();
 6135|    480|            prefix_width = prefix_result.second;
 6136|    480|        }
 6137|    308|        else {
 6138|    308|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    308|            std::tie(it, prefix_width) = prefix_result;
 6140|    308|        }
 6141|    788|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    788|        std::ptrdiff_t value_width = 0;
 6145|    788|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 480, False: 308]
  ------------------
 6146|    480|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 472]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    472|            const auto initial_width = specs.precision - prefix_width;
 6154|    472|            auto max_width_view =
 6155|    472|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    472|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 472, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    472|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    472|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    472|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    472|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    472|    }                                                  \
  |  |  |  | 3671|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    308|        else {
 6161|    308|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 308, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    308|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    308|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    308|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    308|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    308|    }                                                  \
  |  | 3671|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  15.5k|    {
 6193|  15.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.5k|            auto rd = make_reader<T, char_type>();
 6198|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 15.3k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  15.3k|            return impl(rd, range, value);
 6203|  15.5k|        }
 6204|  15.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.5k|            auto rd = make_reader<T, char_type>();
 6206|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.5k|                return unexpected(e);
 6208|  15.5k|            }
 6209|       |
 6210|  15.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.5k|                specs.width != 0) {
 6212|  15.5k|                return impl(rd, range, value);
 6213|  15.5k|            }
 6214|       |
 6215|  15.5k|            auto crange = get_as_contiguous(range);
 6216|  15.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.5k|            return ranges::next(range.begin(),
 6218|  15.5k|                                ranges::distance(crange.begin(), it));
 6219|  15.5k|        }
 6220|  15.5k|        else {
 6221|  15.5k|            SCN_EXPECT(false);
 6222|  15.5k|            SCN_UNREACHABLE;
 6223|  15.5k|        }
 6224|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  15.3k|    {
 6124|  15.3k|        const bool need_skipped_width =
 6125|  15.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 372, False: 15.0k]
  |  Branch (6125:33): [True: 1.87k, False: 13.1k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  15.3k|        auto it = rng.begin();
 6129|  15.3k|        std::ptrdiff_t prefix_width = 0;
 6130|  15.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.92k, False: 13.4k]
  ------------------
 6131|  1.92k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.92k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 1.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  1.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.90k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.90k|            it = prefix_result.first.base();
 6135|  1.90k|            prefix_width = prefix_result.second;
 6136|  1.90k|        }
 6137|  13.4k|        else {
 6138|  13.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  13.4k|            std::tie(it, prefix_width) = prefix_result;
 6140|  13.4k|        }
 6141|  15.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  15.3k|        std::ptrdiff_t value_width = 0;
 6145|  15.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.90k, False: 13.4k]
  ------------------
 6146|  1.90k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.89k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.89k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.89k|            auto max_width_view =
 6155|  1.89k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.89k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.20k, False: 682]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.20k|    }                                                  \
  |  |  |  | 3671|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    682|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    682|            it = w_it.base();
 6158|    682|            value_width = initial_width - w_it.count();
 6159|    682|        }
 6160|  13.4k|        else {
 6161|  13.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10.7k, False: 2.67k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  10.7k|    }                                                  \
  |  | 3671|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.67k|                                             specs, value, loc));
 6163|       |
 6164|  2.67k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 272, False: 2.40k]
  ------------------
 6165|    272|                value_width = calculate_text_width(
 6166|    272|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    272|                        .view());
 6168|    272|            }
 6169|  2.67k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.35k|        std::ptrdiff_t postfix_width = 0;
 6173|  3.35k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.84k, False: 514]
  ------------------
 6174|  2.84k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.84k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.84k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.84k|                                 value_width));
 6178|  2.84k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.84k|        }
 6180|       |
 6181|  3.35k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.35k|                                                 value_width, postfix_width);
 6183|  3.35k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 162, False: 3.19k]
  ------------------
 6184|    162|            return unexpected(e);
 6185|    162|        }
 6186|       |
 6187|  3.19k|        return it;
 6188|  3.35k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  15.5k|    {
 6193|  15.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.5k|            auto rd = make_reader<T, char_type>();
 6198|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 15.3k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  15.3k|            return impl(rd, range, value);
 6203|  15.5k|        }
 6204|  15.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.5k|            auto rd = make_reader<T, char_type>();
 6206|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.5k|                return unexpected(e);
 6208|  15.5k|            }
 6209|       |
 6210|  15.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.5k|                specs.width != 0) {
 6212|  15.5k|                return impl(rd, range, value);
 6213|  15.5k|            }
 6214|       |
 6215|  15.5k|            auto crange = get_as_contiguous(range);
 6216|  15.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.5k|            return ranges::next(range.begin(),
 6218|  15.5k|                                ranges::distance(crange.begin(), it));
 6219|  15.5k|        }
 6220|  15.5k|        else {
 6221|  15.5k|            SCN_EXPECT(false);
 6222|  15.5k|            SCN_UNREACHABLE;
 6223|  15.5k|        }
 6224|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  15.3k|    {
 6124|  15.3k|        const bool need_skipped_width =
 6125|  15.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 372, False: 15.0k]
  |  Branch (6125:33): [True: 1.87k, False: 13.1k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  15.3k|        auto it = rng.begin();
 6129|  15.3k|        std::ptrdiff_t prefix_width = 0;
 6130|  15.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.92k, False: 13.4k]
  ------------------
 6131|  1.92k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.92k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 1.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  1.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.90k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.90k|            it = prefix_result.first.base();
 6135|  1.90k|            prefix_width = prefix_result.second;
 6136|  1.90k|        }
 6137|  13.4k|        else {
 6138|  13.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  13.4k|            std::tie(it, prefix_width) = prefix_result;
 6140|  13.4k|        }
 6141|  15.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  15.3k|        std::ptrdiff_t value_width = 0;
 6145|  15.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.90k, False: 13.4k]
  ------------------
 6146|  1.90k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.89k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.89k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.89k|            auto max_width_view =
 6155|  1.89k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.89k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.20k, False: 682]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.20k|    }                                                  \
  |  |  |  | 3671|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    682|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    682|            it = w_it.base();
 6158|    682|            value_width = initial_width - w_it.count();
 6159|    682|        }
 6160|  13.4k|        else {
 6161|  13.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10.7k, False: 2.67k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  10.7k|    }                                                  \
  |  | 3671|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.67k|                                             specs, value, loc));
 6163|       |
 6164|  2.67k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 272, False: 2.40k]
  ------------------
 6165|    272|                value_width = calculate_text_width(
 6166|    272|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    272|                        .view());
 6168|    272|            }
 6169|  2.67k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.35k|        std::ptrdiff_t postfix_width = 0;
 6173|  3.35k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.84k, False: 514]
  ------------------
 6174|  2.84k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.84k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.84k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.84k|                                 value_width));
 6178|  2.84k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.84k|        }
 6180|       |
 6181|  3.35k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.35k|                                                 value_width, postfix_width);
 6183|  3.35k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 162, False: 3.19k]
  ------------------
 6184|    162|            return unexpected(e);
 6185|    162|        }
 6186|       |
 6187|  3.19k|        return it;
 6188|  3.35k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  15.5k|    {
 6193|  15.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  15.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  15.5k|            auto rd = make_reader<T, char_type>();
 6198|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 15.3k]
  |  |  ------------------
  ------------------
 6199|    134|                return unexpected(e);
 6200|    134|            }
 6201|       |
 6202|  15.3k|            return impl(rd, range, value);
 6203|  15.5k|        }
 6204|  15.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  15.5k|            auto rd = make_reader<T, char_type>();
 6206|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  15.5k|                return unexpected(e);
 6208|  15.5k|            }
 6209|       |
 6210|  15.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  15.5k|                specs.width != 0) {
 6212|  15.5k|                return impl(rd, range, value);
 6213|  15.5k|            }
 6214|       |
 6215|  15.5k|            auto crange = get_as_contiguous(range);
 6216|  15.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  15.5k|            return ranges::next(range.begin(),
 6218|  15.5k|                                ranges::distance(crange.begin(), it));
 6219|  15.5k|        }
 6220|  15.5k|        else {
 6221|  15.5k|            SCN_EXPECT(false);
 6222|  15.5k|            SCN_UNREACHABLE;
 6223|  15.5k|        }
 6224|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  15.3k|    {
 6124|  15.3k|        const bool need_skipped_width =
 6125|  15.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 372, False: 15.0k]
  |  Branch (6125:33): [True: 1.87k, False: 13.1k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  15.3k|        auto it = rng.begin();
 6129|  15.3k|        std::ptrdiff_t prefix_width = 0;
 6130|  15.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.92k, False: 13.4k]
  ------------------
 6131|  1.92k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.92k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 1.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|  1.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.90k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.90k|            it = prefix_result.first.base();
 6135|  1.90k|            prefix_width = prefix_result.second;
 6136|  1.90k|        }
 6137|  13.4k|        else {
 6138|  13.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  13.4k|            std::tie(it, prefix_width) = prefix_result;
 6140|  13.4k|        }
 6141|  15.3k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  15.3k|        std::ptrdiff_t value_width = 0;
 6145|  15.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.90k, False: 13.4k]
  ------------------
 6146|  1.90k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.89k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.89k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.89k|            auto max_width_view =
 6155|  1.89k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.89k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.20k, False: 682]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.20k|    }                                                  \
  |  |  |  | 3671|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    682|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    682|            it = w_it.base();
 6158|    682|            value_width = initial_width - w_it.count();
 6159|    682|        }
 6160|  13.4k|        else {
 6161|  13.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10.7k, False: 2.67k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  10.7k|    }                                                  \
  |  | 3671|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.67k|                                             specs, value, loc));
 6163|       |
 6164|  2.67k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 272, False: 2.40k]
  ------------------
 6165|    272|                value_width = calculate_text_width(
 6166|    272|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    272|                        .view());
 6168|    272|            }
 6169|  2.67k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  3.35k|        std::ptrdiff_t postfix_width = 0;
 6173|  3.35k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.84k, False: 514]
  ------------------
 6174|  2.84k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.84k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.84k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.84k|                                 value_width));
 6178|  2.84k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.84k|        }
 6180|       |
 6181|  3.35k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  3.35k|                                                 value_width, postfix_width);
 6183|  3.35k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 162, False: 3.19k]
  ------------------
 6184|    162|            return unexpected(e);
 6185|    162|        }
 6186|       |
 6187|  3.19k|        return it;
 6188|  3.35k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.83k|{
 5795|  5.83k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.83k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.83k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 648, False: 5.18k]
  ------------------
 5800|    648|        return range.begin();
 5801|    648|    }
 5802|       |
 5803|  5.18k|    return skip_classic_whitespace(range);
 5804|  5.83k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    648|    {
 3528|    648|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    648|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    648|        return read_default_with_base(range, value, 10);
 3530|    648|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    648|    {
 3492|    648|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    648|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    648|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    648|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    648|                return unexpected_scan_error(
 3498|    648|                    scan_error::invalid_scanned_value,
 3499|    648|                    "Unexpected '-' sign when parsing an "
 3500|    648|                    "unsigned value");
 3501|    648|            }
 3502|    648|        }
 3503|       |
 3504|    648|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 648]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.29k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.29k|                parse_integer_digits_without_thsep(
 3511|  1.29k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.29k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.29k|        auto buf = make_contiguous_buffer(
 3515|  1.29k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.29k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 648, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    648|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    648|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    648|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    648|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    648|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.29k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    648|    {
 3528|    648|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    648|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    648|        return read_default_with_base(range, value, 10);
 3530|    648|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    648|    {
 3492|    648|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    648|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    648|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    648|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 648]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    648|        }
 3503|       |
 3504|    648|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 648]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.29k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.29k|                parse_integer_digits_without_thsep(
 3511|  1.29k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.29k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.29k|        auto buf = make_contiguous_buffer(
 3515|  1.29k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.29k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 648, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    648|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    648|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    648|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    648|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    648|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.29k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  1.26k|    {
 5748|  1.26k|        return true;
 5749|  1.26k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|  1.07k|    {
 5765|  1.07k|        detail::format_specs specs{};
 5766|  1.07k|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|  1.07k|        std::uintptr_t intvalue{};
 5769|  1.07k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|  1.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.07k|    }                                                  \
  |  |  |  | 3671|  1.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|  1.07k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.47k|    {
 3035|  1.47k|        return true;
 3036|  1.47k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    648|    {
 5504|    648|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    648|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    648|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    648|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.13k|    {
 5355|  1.13k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.13k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.13k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 1.08k, False: 46]
  ------------------
 5359|  1.08k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 1.08k]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|  1.08k|            else {
 5363|  1.08k|                err = r.error();
 5364|  1.08k|            }
 5365|  1.08k|        }
 5366|       |
 5367|  1.13k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.11k, False: 16]
  ------------------
 5368|  1.11k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.11k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.11k|            else {
 5372|  1.11k|                err = r.error();
 5373|  1.11k|            }
 5374|  1.11k|        }
 5375|       |
 5376|  1.13k|        return unexpected(err);
 5377|  1.13k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  1.12k|    {
 5384|  1.12k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 1.12k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  1.12k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 1.12k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  1.12k|        return unexpected_scan_error(
 5394|  1.12k|            scan_error::invalid_scanned_value,
 5395|  1.12k|            "Failed to read numeric boolean value: No match");
 5396|  1.12k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.11k|    {
 5402|  1.11k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.11k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.11k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.11k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.11k|        return unexpected_scan_error(
 5412|  1.11k|            scan_error::invalid_scanned_value,
 5413|  1.11k|            "Failed to read textual boolean value: No match");
 5414|  1.11k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.23k|{
 2194|  2.23k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 130, False: 2.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    130|    }                                                  \
  |  |  |  | 3671|  2.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  2.10k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  2.10k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  2.10k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  2.10k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  2.10k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  2.10k|            return unexpected(parse_error::error);
 2202|  2.10k|        }
 2203|  2.10k|        return it;
 2204|  2.10k|    }
 2205|  2.10k|    else {
 2206|  2.10k|        auto range_it = range.begin();
 2207|  2.10k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 2.10k, False: 0]
  ------------------
 2208|  2.10k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  2.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 0]
  |  |  ------------------
  ------------------
 2209|  2.10k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  2.10k|                return unexpected(parse_error::error);
 2211|  2.10k|            }
 2212|  2.10k|        }
 2213|      0|        return it;
 2214|  2.10k|    }
 2215|  2.10k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    648|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    648|    {
 4152|    648|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    648|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    648|        float_reader<CharT> rd{};
 4155|    648|        return read_impl<Range>(
 4156|    648|            range, rd,
 4157|    648|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    648|                return r.read_source(SCN_FWD(args)...);
 4159|    648|            },
 4160|    648|            value);
 4161|    648|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    648|    {
  754|    648|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    648|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    648|              cvref<T> obj = *get<T>(fn);
  745|    648|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    648|                  obj(static_cast<decltype(args)>(args)...);
  747|    648|              }
  748|    648|              else {
  749|    648|                  return obj(static_cast<decltype(args)>(args)...);
  750|    648|              }
  751|    648|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    648|    {
  684|    648|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    648|            return static_cast<T*>(s.m_cp);
  686|    648|        }
  687|    648|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    648|            return static_cast<T*>(s.m_p);
  689|    648|        }
  690|    648|        else {
  691|    648|            return reinterpret_cast<T*>(s.m_fp);
  692|    648|        }
  693|    648|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    648|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    648|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    648|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    648|        {
  662|    648|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    648|    {
 5266|    648|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    648|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    648|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    648|    {
 5266|    648|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    648|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    648|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    648|    {
 5871|    648|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    648|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    648|                          basic_contiguous_scan_context<char_type>>) {
 5875|    648|            auto rd = make_reader<T, char_type>();
 5876|    648|            return impl(rd, range, value);
 5877|    648|        }
 5878|    648|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    648|            auto rd = make_reader<T, char_type>();
 5880|    648|            if (!is_segment_contiguous(range)) {
 5881|    648|                return impl(rd, range, value);
 5882|    648|            }
 5883|    648|            auto crange = get_as_contiguous(range);
 5884|    648|            SCN_TRY(it, impl(rd, crange, value));
 5885|    648|            return ranges::next(range.begin(),
 5886|    648|                                ranges::distance(crange.begin(), it));
 5887|    648|        }
 5888|    648|        else {
 5889|    648|            SCN_EXPECT(false);
 5890|    648|            SCN_UNREACHABLE;
 5891|    648|        }
 5892|    648|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    648|    {
 5863|    648|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    648|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    648|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    648|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    648|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 648]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    648|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    648|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    648|                        .transform_error(make_eof_scan_error));
 5865|    648|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    648|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    648|    {
 5266|    648|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    648|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    648|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    648|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   506k|    {
 2879|   506k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   904k|    {
 2883|   904k|        return m_current;
 2884|   904k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   481k|    {
 2888|   481k|        return m_range.end();
 2889|   481k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   268k|{
 1221|       |    // TODO: optimize
 1222|   268k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   268k|    auto res = get_next_code_point(str);
 1224|   268k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   268k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  84.5k|    {
 2903|  84.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  84.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  84.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  84.5k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 84.5k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  84.5k|        }
 2909|  84.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  84.5k|    static_cast<    \
  |  |  929|  84.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  84.5k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   127k|    {
 2893|   127k|        return ranges::subrange{begin(), end()};
 2894|   127k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  2.30k|    {
 6037|  2.30k|        const bool need_skipped_width =
 6038|  2.30k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 124, False: 2.17k]
  |  Branch (6038:33): [True: 2.17k, False: 0]
  ------------------
 6039|  2.30k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.30k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 90, False: 2.21k]
  ------------------
 6043|  2.30k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 320, False: 1.89k]
  ------------------
 6044|    410|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    410|                             need_skipped_width);
 6046|    410|        }
 6047|  1.89k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.78k, False: 110]
  |  Branch (6047:56): [True: 1.48k, False: 296]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.48k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.48k, False: 0]
  ------------------
 6051|  1.48k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.48k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.48k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.48k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.48k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.48k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.48k|                                  .transform_error(make_eof_scan_error));
 6054|  1.48k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.48k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    406|        return result_type{rng.begin(), 0};
 6070|  1.89k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    410|{
 5951|    410|    using char_type = detail::char_t<Range>;
 5952|    410|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    410|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 410, False: 0]
  ------------------
 5955|    410|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    410|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    410|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 410]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    410|        auto max_width_view = take_width(range, max_width);
 5972|    410|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    410|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 410, False: 0]
  ------------------
 5975|    410|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    410|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    410|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    410|    {
  754|    410|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    484|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    484|              cvref<T> obj = *get<T>(fn);
  745|    484|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    484|                  obj(static_cast<decltype(args)>(args)...);
  747|    484|              }
  748|    484|              else {
  749|    484|                  return obj(static_cast<decltype(args)>(args)...);
  750|    484|              }
  751|    484|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    484|    {
  684|    484|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    484|            return static_cast<T*>(s.m_cp);
  686|    484|        }
  687|    484|        else if constexpr (std::is_object_v<T>) {
  688|    484|            return static_cast<T*>(s.m_p);
  689|    484|        }
  690|    484|        else {
  691|    484|            return reinterpret_cast<T*>(s.m_fp);
  692|    484|        }
  693|    484|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    484|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    410|        {
  667|    410|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    410|{
 1976|    410|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    410|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    410|{
 1957|    410|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    410|        return std::find_if(range.begin(), range.end(), pred);
 1959|    410|    }
 1960|    410|    else {
 1961|    410|        auto first = range.begin();
 1962|    544|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 484, False: 60]
  ------------------
 1963|    484|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 350, False: 134]
  ------------------
 1964|    350|                return first;
 1965|    350|            }
 1966|    484|        }
 1967|     60|        return first;
 1968|    410|    }
 1969|    410|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  3.37k|    {
 2810|  3.37k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  3.37k|                                      m_count};
 2812|  3.37k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  11.7k|    {
 2717|  11.7k|        return view;
 2718|  11.7k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  3.37k|    {
 2382|  3.37k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  2.02k|        {
 2781|  2.02k|            return !(y == x);
 2782|  2.02k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  4.99k|        {
 2770|  4.99k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 60, False: 4.93k]
  |  Branch (2770:39): [True: 60, False: 0]
  ------------------
 2771|  4.99k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 4.93k]
  ------------------
 2772|  4.99k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     60|    {
 2421|     60|        return m_multibyte_left;
 2422|     60|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  4.99k|    {
 2816|  4.99k|        return sentinel<true>{m_base.get().end()};
 2817|  4.99k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  4.99k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  3.45k|    {
 2426|  3.45k|        return *m_current;
 2427|  3.45k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.61k|    {
 2435|  1.61k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.61k|        _increment_current();
 2437|  1.61k|        return *this;
 2438|  1.61k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.61k|    {
 2668|  1.61k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.61k, False: 0]
  ------------------
 2669|  1.61k|            auto cplen = _get_cp_length_at_current();
 2670|  1.61k|            m_multibyte_left = cplen - 1;
 2671|  1.61k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.61k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.61k|        ++m_current;
 2678|  1.61k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.61k|    {
 2639|  1.61k|        return static_cast<difference_type>(
 2640|  1.61k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.61k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.61k|    {
 2645|  1.61k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.61k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.61k, False: 0]
  ------------------
 2650|  1.61k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.61k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.61k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.61k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  1.89k|    {
 2832|  1.89k|        return take_width_view{r, n};
 2833|  1.89k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|  1.89k|    {
 2801|  1.89k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  1.89k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.48k|{
 2951|  1.48k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.48k, False: 0]
  ------------------
 2952|  1.48k|        auto it = read_while_classic_space(range);
 2953|  1.48k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.48k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.48k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.48k|        return it;
 2959|  1.48k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.48k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.48k|{
 2117|  1.48k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.48k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.48k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.48k|        auto buf = make_contiguous_buffer(range);
 2121|  1.48k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.48k|        return ranges::next(range.begin(),
 2123|  1.48k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.48k|    }
 2125|  1.48k|    else {
 2126|  1.48k|        auto it = range.begin();
 2127|       |
 2128|  1.48k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.48k|            auto seg = get_contiguous_beginning(range);
 2130|  1.48k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.48k|                seg_it != seg.end()) {
 2132|  1.48k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.48k|            }
 2134|  1.48k|            ranges::advance(it, seg.size());
 2135|  1.48k|        }
 2136|       |
 2137|  1.48k|        return read_while_code_point(
 2138|  1.48k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.48k|    }
 2140|  1.48k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.48k|{
 2082|  1.48k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.48k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.48k|{
 2061|  1.48k|    auto it = range.begin();
 2062|  1.48k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.48k, False: 0]
  ------------------
 2063|  1.48k|        const auto val =
 2064|  1.48k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.48k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.48k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.48k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.48k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.48k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.48k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.48k, False: 0]
  ------------------
 2069|  1.48k|                return it;
 2070|  1.48k|            }
 2071|  1.48k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.48k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  1.48k|{
 1899|  1.48k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.48k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.48k|    auto it = range.begin();
 1903|  1.48k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.48k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.48k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.48k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.48k, False: 0]
  ------------------
 1912|  1.48k|        ++it;
 1913|  1.48k|        return {it, string_type(1, *range.begin())};
 1914|  1.48k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.48k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  2.96k|{
  944|  2.96k|    return is_range_eof(r.begin(), r.end());
  945|  2.96k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  2.96k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.96k|    {
  937|  2.96k|        return begin == end;
  938|  2.96k|    }
  939|  2.96k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|  1.48k|    {
 1890|  1.48k|        return !codepoint.empty();
 1891|  1.48k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.48k|    {
  754|  1.48k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.48k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.48k|              cvref<T> obj = *get<T>(fn);
  745|  1.48k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.48k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.48k|              }
  748|  1.48k|              else {
  749|  1.48k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.48k|              }
  751|  1.48k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.48k|    {
  684|  1.48k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.48k|            return static_cast<T*>(s.m_cp);
  686|  1.48k|        }
  687|  1.48k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.48k|            return static_cast<T*>(s.m_p);
  689|  1.48k|        }
  690|  1.48k|        else {
  691|  1.48k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.48k|        }
  693|  1.48k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.48k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.48k|        {
  662|  1.48k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.48k|{
  950|  1.48k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.48k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.48k|    return eof_error::good;
  954|  1.48k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  6.83k|    {
 2413|  6.83k|        return m_current;
 2414|  6.83k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  6.89k|    {
 2417|  6.89k|        return m_count;
 2418|  6.89k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  30.9k|    {
 6037|  30.9k|        const bool need_skipped_width =
 6038|  30.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 25.0k, False: 5.95k]
  |  Branch (6038:33): [True: 0, False: 5.95k]
  ------------------
 6039|  30.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  30.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 30.8k]
  ------------------
 6043|  30.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 238, False: 30.6k]
  ------------------
 6044|    310|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    310|                             need_skipped_width);
 6046|    310|        }
 6047|  30.6k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 29.8k, False: 786]
  |  Branch (6047:56): [True: 3.32k, False: 26.5k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.32k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 3.32k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  6.64k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  3.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  6.64k|                            make_eof_scan_error));
 6058|       |
 6059|  6.64k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 2.68k, False: 634]
  ------------------
 6060|  2.68k|                return result_type{
 6061|  2.68k|                    it,
 6062|  2.68k|                    calculate_text_width(make_contiguous_buffer(
 6063|  2.68k|                                             ranges::subrange{rng.begin(), it})
 6064|  2.68k|                                             .view())};
 6065|  2.68k|            }
 6066|    634|            return result_type{it, 0};
 6067|  6.64k|        }
 6068|       |
 6069|  27.3k|        return result_type{rng.begin(), 0};
 6070|  30.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  3.52k|    {
 6079|  3.52k|        const bool need_skipped_width =
 6080|  3.52k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 1.71k, False: 1.80k]
  |  Branch (6080:33): [True: 356, False: 1.45k]
  ------------------
 6081|  3.52k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  3.52k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 76, False: 3.44k]
  ------------------
 6084|  3.52k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 112, False: 3.33k]
  ------------------
 6085|    188|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 100, False: 88]
  ------------------
 6086|    188|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 62, False: 38]
  ------------------
 6087|     62|                return result_type{rng.begin(), 0};
 6088|     62|            }
 6089|    126|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    126|                             specs.fill, need_skipped_width);
 6091|    188|        }
 6092|  3.33k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 3.30k, False: 24]
  ------------------
 6093|  3.33k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 2.87k, False: 432]
  ------------------
 6094|  3.33k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 1.38k, False: 1.49k]
  |  Branch (6094:35): [True: 1.35k, False: 32]
  ------------------
 6095|  2.87k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 202, False: 1.32k]
  ------------------
 6096|  1.52k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 164, False: 38]
  ------------------
 6097|  1.51k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 164, False: 1.35k]
  ------------------
 6098|    164|                const auto initial_width =
 6099|    164|                    specs.precision - prefix_width - value_width;
 6100|    164|                auto max_width_view = take_width(rng, initial_width);
 6101|    164|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    164|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    164|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    164|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 164]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    164|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    164|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    164|                                  .transform_error(make_eof_scan_error));
 6103|    164|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    164|            }
 6105|  2.70k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|  1.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|  2.70k|                            make_eof_scan_error));
 6107|       |
 6108|  2.70k|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 1.35k, False: 0]
  ------------------
 6109|  1.35k|                return result_type{
 6110|  1.35k|                    it,
 6111|  1.35k|                    calculate_text_width(make_contiguous_buffer(
 6112|  1.35k|                                             ranges::subrange{rng.begin(), it})
 6113|  1.35k|                                             .view())};
 6114|  1.35k|            }
 6115|      0|            return result_type{it, 0};
 6116|  2.70k|        }
 6117|  1.81k|        return result_type{rng.begin(), 0};
 6118|  3.33k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  9.87k|    {
 6193|  9.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.87k|            auto rd = make_reader<T, char_type>();
 6198|  9.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.15k, False: 714]
  |  |  ------------------
  ------------------
 6199|  9.15k|                return unexpected(e);
 6200|  9.15k|            }
 6201|       |
 6202|    714|            return impl(rd, range, value);
 6203|  9.87k|        }
 6204|  9.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.87k|            auto rd = make_reader<T, char_type>();
 6206|  9.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.87k|                return unexpected(e);
 6208|  9.87k|            }
 6209|       |
 6210|  9.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.87k|                specs.width != 0) {
 6212|  9.87k|                return impl(rd, range, value);
 6213|  9.87k|            }
 6214|       |
 6215|  9.87k|            auto crange = get_as_contiguous(range);
 6216|  9.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.87k|            return ranges::next(range.begin(),
 6218|  9.87k|                                ranges::distance(crange.begin(), it));
 6219|  9.87k|        }
 6220|  9.87k|        else {
 6221|  9.87k|            SCN_EXPECT(false);
 6222|  9.87k|            SCN_UNREACHABLE;
 6223|  9.87k|        }
 6224|  9.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    714|    {
 6124|    714|        const bool need_skipped_width =
 6125|    714|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 352, False: 362]
  |  Branch (6125:33): [True: 232, False: 130]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    714|        auto it = rng.begin();
 6129|    714|        std::ptrdiff_t prefix_width = 0;
 6130|    714|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 244, False: 470]
  ------------------
 6131|    244|            auto max_width_view = take_width(rng, specs.precision);
 6132|    244|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    244|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    244|            it = prefix_result.first.base();
 6135|    244|            prefix_width = prefix_result.second;
 6136|    244|        }
 6137|    470|        else {
 6138|    470|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    470|            std::tie(it, prefix_width) = prefix_result;
 6140|    470|        }
 6141|    714|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    714|        std::ptrdiff_t value_width = 0;
 6145|    714|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 244, False: 470]
  ------------------
 6146|    244|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 242]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    242|            const auto initial_width = specs.precision - prefix_width;
 6154|    242|            auto max_width_view =
 6155|    242|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    242|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    242|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    470|        else {
 6161|    470|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 470, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    470|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    470|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    470|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    470|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    470|    }                                                  \
  |  | 3671|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  9.87k|    {
 6193|  9.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.87k|            auto rd = make_reader<T, char_type>();
 6198|  9.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.15k, False: 714]
  |  |  ------------------
  ------------------
 6199|  9.15k|                return unexpected(e);
 6200|  9.15k|            }
 6201|       |
 6202|    714|            return impl(rd, range, value);
 6203|  9.87k|        }
 6204|  9.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.87k|            auto rd = make_reader<T, char_type>();
 6206|  9.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.87k|                return unexpected(e);
 6208|  9.87k|            }
 6209|       |
 6210|  9.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.87k|                specs.width != 0) {
 6212|  9.87k|                return impl(rd, range, value);
 6213|  9.87k|            }
 6214|       |
 6215|  9.87k|            auto crange = get_as_contiguous(range);
 6216|  9.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.87k|            return ranges::next(range.begin(),
 6218|  9.87k|                                ranges::distance(crange.begin(), it));
 6219|  9.87k|        }
 6220|  9.87k|        else {
 6221|  9.87k|            SCN_EXPECT(false);
 6222|  9.87k|            SCN_UNREACHABLE;
 6223|  9.87k|        }
 6224|  9.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    714|    {
 6124|    714|        const bool need_skipped_width =
 6125|    714|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 352, False: 362]
  |  Branch (6125:33): [True: 232, False: 130]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    714|        auto it = rng.begin();
 6129|    714|        std::ptrdiff_t prefix_width = 0;
 6130|    714|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 244, False: 470]
  ------------------
 6131|    244|            auto max_width_view = take_width(rng, specs.precision);
 6132|    244|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    244|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    244|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    244|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    244|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 244]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    244|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    244|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    244|            it = prefix_result.first.base();
 6135|    244|            prefix_width = prefix_result.second;
 6136|    244|        }
 6137|    470|        else {
 6138|    470|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    470|            std::tie(it, prefix_width) = prefix_result;
 6140|    470|        }
 6141|    714|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    714|        std::ptrdiff_t value_width = 0;
 6145|    714|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 244, False: 470]
  ------------------
 6146|    244|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 242]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    242|            const auto initial_width = specs.precision - prefix_width;
 6154|    242|            auto max_width_view =
 6155|    242|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    242|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    242|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    470|        else {
 6161|    470|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 470, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    470|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    470|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    470|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    470|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    470|    }                                                  \
  |  | 3671|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  9.79k|    {
 6193|  9.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.79k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.79k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.79k|            auto rd = make_reader<T, char_type>();
 6198|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.17k, False: 618]
  |  |  ------------------
  ------------------
 6199|  9.17k|                return unexpected(e);
 6200|  9.17k|            }
 6201|       |
 6202|    618|            return impl(rd, range, value);
 6203|  9.79k|        }
 6204|  9.79k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.79k|            auto rd = make_reader<T, char_type>();
 6206|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.79k|                return unexpected(e);
 6208|  9.79k|            }
 6209|       |
 6210|  9.79k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.79k|                specs.width != 0) {
 6212|  9.79k|                return impl(rd, range, value);
 6213|  9.79k|            }
 6214|       |
 6215|  9.79k|            auto crange = get_as_contiguous(range);
 6216|  9.79k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.79k|            return ranges::next(range.begin(),
 6218|  9.79k|                                ranges::distance(crange.begin(), it));
 6219|  9.79k|        }
 6220|  9.79k|        else {
 6221|  9.79k|            SCN_EXPECT(false);
 6222|  9.79k|            SCN_UNREACHABLE;
 6223|  9.79k|        }
 6224|  9.79k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  9.79k|    {
 5753|  9.79k|        reader_error_handler eh{};
 5754|  9.79k|        detail::check_pointer_type_specs(specs, eh);
 5755|  9.79k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.17k, False: 618]
  |  |  ------------------
  ------------------
 5756|  9.17k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  9.17k|        }
 5758|    618|        return {};
 5759|  9.79k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    618|    {
 6124|    618|        const bool need_skipped_width =
 6125|    618|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 350, False: 268]
  |  Branch (6125:33): [True: 182, False: 86]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    618|        auto it = rng.begin();
 6129|    618|        std::ptrdiff_t prefix_width = 0;
 6130|    618|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 194, False: 424]
  ------------------
 6131|    194|            auto max_width_view = take_width(rng, specs.precision);
 6132|    194|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    194|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    194|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    194|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    194|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 194]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    194|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    194|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    194|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    194|            it = prefix_result.first.base();
 6135|    194|            prefix_width = prefix_result.second;
 6136|    194|        }
 6137|    424|        else {
 6138|    424|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    424|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    424|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    424|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 424]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    424|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    424|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    424|            std::tie(it, prefix_width) = prefix_result;
 6140|    424|        }
 6141|    618|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    618|        std::ptrdiff_t value_width = 0;
 6145|    618|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 194, False: 424]
  ------------------
 6146|    194|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 192]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    192|            const auto initial_width = specs.precision - prefix_width;
 6154|    192|            auto max_width_view =
 6155|    192|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    192|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    192|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    424|        else {
 6161|    424|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    424|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    424|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 424, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    424|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    424|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    424|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    424|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    424|    }                                                  \
  |  | 3671|    424|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    424|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    192|    {
 5782|    192|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    192|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    192|        return read_default(range, value, loc);
 5784|    192|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    192|    {
 5765|    192|        detail::format_specs specs{};
 5766|    192|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    192|        std::uintptr_t intvalue{};
 5769|    192|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    192|    }                                                  \
  |  |  |  | 3671|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    192|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    424|    {
 5782|    424|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    424|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    424|        return read_default(range, value, loc);
 5784|    424|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  9.87k|    {
 6193|  9.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.87k|            auto rd = make_reader<T, char_type>();
 6198|  9.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.04k, False: 824]
  |  |  ------------------
  ------------------
 6199|  9.04k|                return unexpected(e);
 6200|  9.04k|            }
 6201|       |
 6202|    824|            return impl(rd, range, value);
 6203|  9.87k|        }
 6204|  9.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.87k|            auto rd = make_reader<T, char_type>();
 6206|  9.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.87k|                return unexpected(e);
 6208|  9.87k|            }
 6209|       |
 6210|  9.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.87k|                specs.width != 0) {
 6212|  9.87k|                return impl(rd, range, value);
 6213|  9.87k|            }
 6214|       |
 6215|  9.87k|            auto crange = get_as_contiguous(range);
 6216|  9.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.87k|            return ranges::next(range.begin(),
 6218|  9.87k|                                ranges::distance(crange.begin(), it));
 6219|  9.87k|        }
 6220|  9.87k|        else {
 6221|  9.87k|            SCN_EXPECT(false);
 6222|  9.87k|            SCN_UNREACHABLE;
 6223|  9.87k|        }
 6224|  9.87k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  9.87k|    {
 3040|  9.87k|        reader_error_handler eh{};
 3041|  9.87k|        get_derived().check_specs_impl(specs, eh);
 3042|  9.87k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.04k, False: 824]
  |  |  ------------------
  ------------------
 3043|  9.04k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.04k|        }
 3045|    824|        return {};
 3046|  9.87k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  9.87k|    {
 3051|  9.87k|        return static_cast<Derived&>(*this);
 3052|  9.87k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  9.87k|    {
 5497|  9.87k|        detail::check_bool_type_specs(specs, eh);
 5498|  9.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    824|    {
 6124|    824|        const bool need_skipped_width =
 6125|    824|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 364, False: 460]
  |  Branch (6125:33): [True: 270, False: 190]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    824|        auto it = rng.begin();
 6129|    824|        std::ptrdiff_t prefix_width = 0;
 6130|    824|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 284, False: 540]
  ------------------
 6131|    284|            auto max_width_view = take_width(rng, specs.precision);
 6132|    284|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    284|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    284|            it = prefix_result.first.base();
 6135|    284|            prefix_width = prefix_result.second;
 6136|    284|        }
 6137|    540|        else {
 6138|    540|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    540|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    540|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    540|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 540]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    540|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    540|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    540|            std::tie(it, prefix_width) = prefix_result;
 6140|    540|        }
 6141|    824|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    824|        std::ptrdiff_t value_width = 0;
 6145|    824|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 284, False: 540]
  ------------------
 6146|    284|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 280]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    280|            const auto initial_width = specs.precision - prefix_width;
 6154|    280|            auto max_width_view =
 6155|    280|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    280|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 280, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    280|    }                                                  \
  |  |  |  | 3671|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    540|        else {
 6161|    540|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    540|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    540|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    540|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 540, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    540|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    540|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    540|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    540|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    540|    }                                                  \
  |  | 3671|    540|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    540|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    280|    {
 5516|    280|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    280|#if !SCN_DISABLE_LOCALE
 5519|    280|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 22, False: 258]
  ------------------
 5520|     22|            return rd.read_localized(range, loc, value);
 5521|     22|        }
 5522|    258|#endif
 5523|       |
 5524|    258|        return rd.read_classic(range, value);
 5525|    280|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    820|    {
 5529|    820|        SCN_GCC_COMPAT_PUSH
 5530|    820|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    820|        switch (specs.type) {
 5533|    106|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 106, False: 714]
  ------------------
 5534|    106|                return bool_reader_base::allow_text;
 5535|       |
 5536|      8|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 8, False: 812]
  ------------------
 5537|     16|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 812]
  ------------------
 5538|     22|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 814]
  ------------------
 5539|     44|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 22, False: 798]
  ------------------
 5540|     58|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 14, False: 806]
  ------------------
 5541|     76|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 18, False: 802]
  ------------------
 5542|     76|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    638|            default:
  ------------------
  |  Branch (5544:13): [True: 638, False: 182]
  ------------------
 5545|    638|                return bool_reader_base::allow_text |
 5546|    638|                       bool_reader_base::allow_numeric;
 5547|    820|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    820|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     22|    {
 5428|     22|        scan_error err{scan_error::invalid_scanned_value,
 5429|     22|                       "Failed to read boolean"};
 5430|       |
 5431|     22|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 22, False: 0]
  ------------------
 5432|     22|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 22]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     22|            else {
 5436|     22|                err = r.error();
 5437|     22|            }
 5438|     22|        }
 5439|       |
 5440|     22|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 22, False: 0]
  ------------------
 5441|     22|            auto stdloc = loc.get<std::locale>();
 5442|     22|            const auto& numpunct =
 5443|     22|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     22|            const auto truename = numpunct.truename();
 5445|     22|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     22|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 22]
  ------------------
 5448|     22|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     22|            else {
 5452|     22|                err = r.error();
 5453|     22|            }
 5454|     22|        }
 5455|       |
 5456|     22|        return unexpected(err);
 5457|     22|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    242|    {
 5384|    242|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 242]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    242|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 242]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    242|        return unexpected_scan_error(
 5394|    242|            scan_error::invalid_scanned_value,
 5395|    242|            "Failed to read numeric boolean value: No match");
 5396|    242|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    484|{
 2146|    484|    auto it = read_code_unit(range);
 2147|    484|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 484]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    484|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 484, False: 0]
  |  |  ------------------
  ------------------
 2152|    484|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    484|        return unexpected(parse_error::error);
 2154|    484|    }
 2155|       |
 2156|      0|    return *it;
 2157|    484|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|     22|    {
 5468|     22|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     22|        const auto shorter = std::pair{
 5470|     22|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 22, False: 0]
  ------------------
 5471|     22|        const auto longer = std::pair{
 5472|     22|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 22]
  ------------------
 5473|       |
 5474|     22|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 22]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     22|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 22]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     22|                                     "read_textual: No match");
 5485|     22|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     44|{
 2179|     44|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     26|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2185|     26|        return unexpected(parse_error::error);
 2186|     26|    }
 2187|      0|    return it;
 2188|     26|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    496|{
 1857|    496|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    496|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    496|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    496|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    496|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    496|        if (sz < count) {
 1862|    496|            return unexpected(eof_error::eof);
 1863|    496|        }
 1864|       |
 1865|    496|        return ranges::next(range.begin(), count);
 1866|    496|    }
 1867|    496|    else {
 1868|    496|        auto it = range.begin();
 1869|    496|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 496]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.54k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.12k, False: 414]
  ------------------
 1874|  2.12k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 82, False: 2.04k]
  ------------------
 1875|     82|                return unexpected(eof_error::eof);
 1876|     82|            }
 1877|  2.12k|        }
 1878|       |
 1879|    414|        return it;
 1880|    496|    }
 1881|    496|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    496|{
 1095|    496|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    496|        return r.size();
 1097|    496|    }
 1098|    496|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    496|                           ranges::const_iterator_t<Range>,
 1100|    496|                           typename detail::basic_scan_buffer<
 1101|    496|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    496|        if constexpr (ranges::common_range<Range>) {
 1103|    496|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    496|        }
 1105|    496|        else {
 1106|    496|            if (r.begin().stores_parent()) {
 1107|    496|                return static_cast<size_t>(
 1108|    496|                    r.begin().parent()->chars_available() -
 1109|    496|                    r.begin().position());
 1110|    496|            }
 1111|    496|            return r.begin().contiguous_segment().size();
 1112|    496|        }
 1113|    496|    }
 1114|    496|    else {
 1115|    496|        return 0;
 1116|    496|    }
 1117|    496|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    258|    {
 5355|    258|        scan_error err{scan_error::invalid_scanned_value,
 5356|    258|                       "Failed to read boolean"};
 5357|       |
 5358|    258|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 220, False: 38]
  ------------------
 5359|    220|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 220]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    220|            else {
 5363|    220|                err = r.error();
 5364|    220|            }
 5365|    220|        }
 5366|       |
 5367|    258|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 226, False: 32]
  ------------------
 5368|    226|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 226]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    226|            else {
 5372|    226|                err = r.error();
 5373|    226|            }
 5374|    226|        }
 5375|       |
 5376|    258|        return unexpected(err);
 5377|    258|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    226|    {
 5402|    226|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 226]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    226|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 226]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    226|        return unexpected_scan_error(
 5412|    226|            scan_error::invalid_scanned_value,
 5413|    226|            "Failed to read textual boolean value: No match");
 5414|    226|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    452|{
 2194|    452|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    452|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    452|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    452|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 388]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     64|    }                                                  \
  |  |  |  | 3671|    452|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    388|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    388|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    388|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    388|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    388|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    388|            return unexpected(parse_error::error);
 2202|    388|        }
 2203|    388|        return it;
 2204|    388|    }
 2205|    388|    else {
 2206|    388|        auto range_it = range.begin();
 2207|    388|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 388, False: 0]
  ------------------
 2208|    388|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 388, False: 0]
  |  |  ------------------
  ------------------
 2209|    388|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    388|                return unexpected(parse_error::error);
 2211|    388|            }
 2212|    388|        }
 2213|      0|        return it;
 2214|    388|    }
 2215|    388|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    540|    {
 5516|    540|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    540|#if !SCN_DISABLE_LOCALE
 5519|    540|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 56, False: 484]
  ------------------
 5520|     56|            return rd.read_localized(range, loc, value);
 5521|     56|        }
 5522|    484|#endif
 5523|       |
 5524|    484|        return rd.read_classic(range, value);
 5525|    540|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     56|    {
 5428|     56|        scan_error err{scan_error::invalid_scanned_value,
 5429|     56|                       "Failed to read boolean"};
 5430|       |
 5431|     56|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 34, False: 22]
  ------------------
 5432|     34|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 34]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     34|            else {
 5436|     34|                err = r.error();
 5437|     34|            }
 5438|     34|        }
 5439|       |
 5440|     56|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 28, False: 28]
  ------------------
 5441|     28|            auto stdloc = loc.get<std::locale>();
 5442|     28|            const auto& numpunct =
 5443|     28|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     28|            const auto truename = numpunct.truename();
 5445|     28|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     28|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 28]
  ------------------
 5448|     28|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     28|            else {
 5452|     28|                err = r.error();
 5453|     28|            }
 5454|     28|        }
 5455|       |
 5456|     56|        return unexpected(err);
 5457|     56|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     28|    {
 5468|     28|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     28|        const auto shorter = std::pair{
 5470|     28|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 28, False: 0]
  ------------------
 5471|     28|        const auto longer = std::pair{
 5472|     28|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 28]
  ------------------
 5473|       |
 5474|     28|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 28]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     28|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 28]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     28|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     28|                                     "read_textual: No match");
 5485|     28|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     56|{
 2179|     56|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     56|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     56|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     56|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 54]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     56|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     54|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     54|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     54|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     54|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     54|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 0]
  |  |  ------------------
  ------------------
 2185|     54|        return unexpected(parse_error::error);
 2186|     54|    }
 2187|      0|    return it;
 2188|     54|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  9.79k|    {
 6193|  9.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.79k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.79k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.79k|            auto rd = make_reader<T, char_type>();
 6198|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.13k, False: 660]
  |  |  ------------------
  ------------------
 6199|  9.13k|                return unexpected(e);
 6200|  9.13k|            }
 6201|       |
 6202|    660|            return impl(rd, range, value);
 6203|  9.79k|        }
 6204|  9.79k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.79k|            auto rd = make_reader<T, char_type>();
 6206|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.79k|                return unexpected(e);
 6208|  9.79k|            }
 6209|       |
 6210|  9.79k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.79k|                specs.width != 0) {
 6212|  9.79k|                return impl(rd, range, value);
 6213|  9.79k|            }
 6214|       |
 6215|  9.79k|            auto crange = get_as_contiguous(range);
 6216|  9.79k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.79k|            return ranges::next(range.begin(),
 6218|  9.79k|                                ranges::distance(crange.begin(), it));
 6219|  9.79k|        }
 6220|  9.79k|        else {
 6221|  9.79k|            SCN_EXPECT(false);
 6222|  9.79k|            SCN_UNREACHABLE;
 6223|  9.79k|        }
 6224|  9.79k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    660|    {
 6124|    660|        const bool need_skipped_width =
 6125|    660|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 352, False: 308]
  |  Branch (6125:33): [True: 210, False: 98]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    660|        auto it = rng.begin();
 6129|    660|        std::ptrdiff_t prefix_width = 0;
 6130|    660|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 222, False: 438]
  ------------------
 6131|    222|            auto max_width_view = take_width(rng, specs.precision);
 6132|    222|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    222|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    222|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    222|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 222]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    222|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    222|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    222|            it = prefix_result.first.base();
 6135|    222|            prefix_width = prefix_result.second;
 6136|    222|        }
 6137|    438|        else {
 6138|    438|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    438|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 438]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    438|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    438|            std::tie(it, prefix_width) = prefix_result;
 6140|    438|        }
 6141|    660|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    660|        std::ptrdiff_t value_width = 0;
 6145|    660|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 222, False: 438]
  ------------------
 6146|    222|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 220]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    220|            const auto initial_width = specs.precision - prefix_width;
 6154|    220|            auto max_width_view =
 6155|    220|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    220|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    220|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    220|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    220|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 188]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    220|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    188|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    188|            it = w_it.base();
 6158|    188|            value_width = initial_width - w_it.count();
 6159|    188|        }
 6160|    438|        else {
 6161|    438|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    438|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    438|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    438|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16, False: 422]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     16|    }                                                  \
  |  | 3671|    438|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    438|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    422|                                             specs, value, loc));
 6163|       |
 6164|    422|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 338, False: 84]
  ------------------
 6165|    338|                value_width = calculate_text_width(
 6166|    338|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    338|                        .view());
 6168|    338|            }
 6169|    422|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    610|        std::ptrdiff_t postfix_width = 0;
 6173|    610|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 610, False: 0]
  ------------------
 6174|    610|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    610|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    610|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    610|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    610|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 610]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    610|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    610|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    610|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    610|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    610|                                 value_width));
 6178|    610|            std::tie(it, postfix_width) = postfix_result;
 6179|    610|        }
 6180|       |
 6181|    610|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    610|                                                 value_width, postfix_width);
 6183|    610|            !e) {
  ------------------
  |  Branch (6183:13): [True: 336, False: 274]
  ------------------
 6184|    336|            return unexpected(e);
 6185|    336|        }
 6186|       |
 6187|    274|        return it;
 6188|    610|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  9.87k|    {
 6193|  9.87k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.87k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.87k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.87k|            auto rd = make_reader<T, char_type>();
 6198|  9.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.17k, False: 700]
  |  |  ------------------
  ------------------
 6199|  9.17k|                return unexpected(e);
 6200|  9.17k|            }
 6201|       |
 6202|    700|            return impl(rd, range, value);
 6203|  9.87k|        }
 6204|  9.87k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.87k|            auto rd = make_reader<T, char_type>();
 6206|  9.87k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.87k|                return unexpected(e);
 6208|  9.87k|            }
 6209|       |
 6210|  9.87k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.87k|                specs.width != 0) {
 6212|  9.87k|                return impl(rd, range, value);
 6213|  9.87k|            }
 6214|       |
 6215|  9.87k|            auto crange = get_as_contiguous(range);
 6216|  9.87k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.87k|            return ranges::next(range.begin(),
 6218|  9.87k|                                ranges::distance(crange.begin(), it));
 6219|  9.87k|        }
 6220|  9.87k|        else {
 6221|  9.87k|            SCN_EXPECT(false);
 6222|  9.87k|            SCN_UNREACHABLE;
 6223|  9.87k|        }
 6224|  9.87k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    700|    {
 6124|    700|        const bool need_skipped_width =
 6125|    700|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 356, False: 344]
  |  Branch (6125:33): [True: 234, False: 110]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    700|        auto it = rng.begin();
 6129|    700|        std::ptrdiff_t prefix_width = 0;
 6130|    700|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 248, False: 452]
  ------------------
 6131|    248|            auto max_width_view = take_width(rng, specs.precision);
 6132|    248|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    248|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    248|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    248|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    248|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    248|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    248|            it = prefix_result.first.base();
 6135|    248|            prefix_width = prefix_result.second;
 6136|    248|        }
 6137|    452|        else {
 6138|    452|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    452|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    452|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    452|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 452]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    452|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    452|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    452|            std::tie(it, prefix_width) = prefix_result;
 6140|    452|        }
 6141|    700|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    700|        std::ptrdiff_t value_width = 0;
 6145|    700|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 248, False: 452]
  ------------------
 6146|    248|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 242]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    242|            const auto initial_width = specs.precision - prefix_width;
 6154|    242|            auto max_width_view =
 6155|    242|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    242|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    242|    }                                                  \
  |  |  |  | 3671|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    452|        else {
 6161|    452|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    452|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    452|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 452, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    452|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    452|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    452|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    452|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    452|    }                                                  \
  |  | 3671|    452|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    452|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  9.79k|    {
 6193|  9.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.79k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.79k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.79k|            auto rd = make_reader<T, char_type>();
 6198|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 9.67k]
  |  |  ------------------
  ------------------
 6199|    112|                return unexpected(e);
 6200|    112|            }
 6201|       |
 6202|  9.67k|            return impl(rd, range, value);
 6203|  9.79k|        }
 6204|  9.79k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.79k|            auto rd = make_reader<T, char_type>();
 6206|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.79k|                return unexpected(e);
 6208|  9.79k|            }
 6209|       |
 6210|  9.79k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.79k|                specs.width != 0) {
 6212|  9.79k|                return impl(rd, range, value);
 6213|  9.79k|            }
 6214|       |
 6215|  9.79k|            auto crange = get_as_contiguous(range);
 6216|  9.79k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.79k|            return ranges::next(range.begin(),
 6218|  9.79k|                                ranges::distance(crange.begin(), it));
 6219|  9.79k|        }
 6220|  9.79k|        else {
 6221|  9.79k|            SCN_EXPECT(false);
 6222|  9.79k|            SCN_UNREACHABLE;
 6223|  9.79k|        }
 6224|  9.79k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  9.67k|    {
 6124|  9.67k|        const bool need_skipped_width =
 6125|  9.67k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 7.66k, False: 2.01k]
  |  Branch (6125:33): [True: 272, False: 1.73k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  9.67k|        auto it = rng.begin();
 6129|  9.67k|        std::ptrdiff_t prefix_width = 0;
 6130|  9.67k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 288, False: 9.39k]
  ------------------
 6131|    288|            auto max_width_view = take_width(rng, specs.precision);
 6132|    288|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    288|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    288|            it = prefix_result.first.base();
 6135|    288|            prefix_width = prefix_result.second;
 6136|    288|        }
 6137|  9.39k|        else {
 6138|  9.39k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.39k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.39k|        }
 6141|  9.67k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  9.67k|        std::ptrdiff_t value_width = 0;
 6145|  9.67k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 288, False: 9.39k]
  ------------------
 6146|    288|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 274]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    274|            const auto initial_width = specs.precision - prefix_width;
 6154|    274|            auto max_width_view =
 6155|    274|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    274|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 160, False: 114]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    160|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    114|            it = w_it.base();
 6158|    114|            value_width = initial_width - w_it.count();
 6159|    114|        }
 6160|  9.39k|        else {
 6161|  9.39k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.22k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.22k|    }                                                  \
  |  | 3671|  9.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.17k|                                             specs, value, loc));
 6163|       |
 6164|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 666, False: 504]
  ------------------
 6165|    666|                value_width = calculate_text_width(
 6166|    666|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    666|                        .view());
 6168|    666|            }
 6169|  1.17k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.28k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.28k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 970, False: 314]
  ------------------
 6174|    970|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    970|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    970|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    970|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 970]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    970|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    970|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    970|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    970|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    970|                                 value_width));
 6178|    970|            std::tie(it, postfix_width) = postfix_result;
 6179|    970|        }
 6180|       |
 6181|  1.28k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.28k|                                                 value_width, postfix_width);
 6183|  1.28k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 376, False: 908]
  ------------------
 6184|    376|            return unexpected(e);
 6185|    376|        }
 6186|       |
 6187|    908|        return it;
 6188|  1.28k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  9.79k|    {
 6193|  9.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.79k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.79k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.79k|            auto rd = make_reader<T, char_type>();
 6198|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 9.67k]
  |  |  ------------------
  ------------------
 6199|    112|                return unexpected(e);
 6200|    112|            }
 6201|       |
 6202|  9.67k|            return impl(rd, range, value);
 6203|  9.79k|        }
 6204|  9.79k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.79k|            auto rd = make_reader<T, char_type>();
 6206|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.79k|                return unexpected(e);
 6208|  9.79k|            }
 6209|       |
 6210|  9.79k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.79k|                specs.width != 0) {
 6212|  9.79k|                return impl(rd, range, value);
 6213|  9.79k|            }
 6214|       |
 6215|  9.79k|            auto crange = get_as_contiguous(range);
 6216|  9.79k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.79k|            return ranges::next(range.begin(),
 6218|  9.79k|                                ranges::distance(crange.begin(), it));
 6219|  9.79k|        }
 6220|  9.79k|        else {
 6221|  9.79k|            SCN_EXPECT(false);
 6222|  9.79k|            SCN_UNREACHABLE;
 6223|  9.79k|        }
 6224|  9.79k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  9.67k|    {
 6124|  9.67k|        const bool need_skipped_width =
 6125|  9.67k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 7.66k, False: 2.01k]
  |  Branch (6125:33): [True: 272, False: 1.73k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  9.67k|        auto it = rng.begin();
 6129|  9.67k|        std::ptrdiff_t prefix_width = 0;
 6130|  9.67k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 288, False: 9.39k]
  ------------------
 6131|    288|            auto max_width_view = take_width(rng, specs.precision);
 6132|    288|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    288|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    288|            it = prefix_result.first.base();
 6135|    288|            prefix_width = prefix_result.second;
 6136|    288|        }
 6137|  9.39k|        else {
 6138|  9.39k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.39k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.39k|        }
 6141|  9.67k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  9.67k|        std::ptrdiff_t value_width = 0;
 6145|  9.67k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 288, False: 9.39k]
  ------------------
 6146|    288|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 274]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    274|            const auto initial_width = specs.precision - prefix_width;
 6154|    274|            auto max_width_view =
 6155|    274|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    274|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 160, False: 114]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    160|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    114|            it = w_it.base();
 6158|    114|            value_width = initial_width - w_it.count();
 6159|    114|        }
 6160|  9.39k|        else {
 6161|  9.39k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.22k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.22k|    }                                                  \
  |  | 3671|  9.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.17k|                                             specs, value, loc));
 6163|       |
 6164|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 666, False: 504]
  ------------------
 6165|    666|                value_width = calculate_text_width(
 6166|    666|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    666|                        .view());
 6168|    666|            }
 6169|  1.17k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.28k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.28k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 970, False: 314]
  ------------------
 6174|    970|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    970|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    970|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    970|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 970]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    970|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    970|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    970|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    970|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    970|                                 value_width));
 6178|    970|            std::tie(it, postfix_width) = postfix_result;
 6179|    970|        }
 6180|       |
 6181|  1.28k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.28k|                                                 value_width, postfix_width);
 6183|  1.28k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 376, False: 908]
  ------------------
 6184|    376|            return unexpected(e);
 6185|    376|        }
 6186|       |
 6187|    908|        return it;
 6188|  1.28k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  9.79k|    {
 6193|  9.79k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.79k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.79k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.79k|            auto rd = make_reader<T, char_type>();
 6198|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 9.67k]
  |  |  ------------------
  ------------------
 6199|    112|                return unexpected(e);
 6200|    112|            }
 6201|       |
 6202|  9.67k|            return impl(rd, range, value);
 6203|  9.79k|        }
 6204|  9.79k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.79k|            auto rd = make_reader<T, char_type>();
 6206|  9.79k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.79k|                return unexpected(e);
 6208|  9.79k|            }
 6209|       |
 6210|  9.79k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.79k|                specs.width != 0) {
 6212|  9.79k|                return impl(rd, range, value);
 6213|  9.79k|            }
 6214|       |
 6215|  9.79k|            auto crange = get_as_contiguous(range);
 6216|  9.79k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.79k|            return ranges::next(range.begin(),
 6218|  9.79k|                                ranges::distance(crange.begin(), it));
 6219|  9.79k|        }
 6220|  9.79k|        else {
 6221|  9.79k|            SCN_EXPECT(false);
 6222|  9.79k|            SCN_UNREACHABLE;
 6223|  9.79k|        }
 6224|  9.79k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  9.67k|    {
 6124|  9.67k|        const bool need_skipped_width =
 6125|  9.67k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 7.66k, False: 2.01k]
  |  Branch (6125:33): [True: 272, False: 1.73k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  9.67k|        auto it = rng.begin();
 6129|  9.67k|        std::ptrdiff_t prefix_width = 0;
 6130|  9.67k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 288, False: 9.39k]
  ------------------
 6131|    288|            auto max_width_view = take_width(rng, specs.precision);
 6132|    288|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    288|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    288|            it = prefix_result.first.base();
 6135|    288|            prefix_width = prefix_result.second;
 6136|    288|        }
 6137|  9.39k|        else {
 6138|  9.39k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.39k|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.39k|        }
 6141|  9.67k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  9.67k|        std::ptrdiff_t value_width = 0;
 6145|  9.67k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 288, False: 9.39k]
  ------------------
 6146|    288|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 274]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    274|            const auto initial_width = specs.precision - prefix_width;
 6154|    274|            auto max_width_view =
 6155|    274|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    274|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 160, False: 114]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    160|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    114|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    114|            it = w_it.base();
 6158|    114|            value_width = initial_width - w_it.count();
 6159|    114|        }
 6160|  9.39k|        else {
 6161|  9.39k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.22k, False: 1.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.22k|    }                                                  \
  |  | 3671|  9.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.17k|                                             specs, value, loc));
 6163|       |
 6164|  1.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 666, False: 504]
  ------------------
 6165|    666|                value_width = calculate_text_width(
 6166|    666|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    666|                        .view());
 6168|    666|            }
 6169|  1.17k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.28k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.28k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 970, False: 314]
  ------------------
 6174|    970|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    970|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    970|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    970|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    970|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 970]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    970|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    970|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    970|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    970|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    970|                                 value_width));
 6178|    970|            std::tie(it, postfix_width) = postfix_result;
 6179|    970|        }
 6180|       |
 6181|  1.28k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.28k|                                                 value_width, postfix_width);
 6183|  1.28k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 376, False: 908]
  ------------------
 6184|    376|            return unexpected(e);
 6185|    376|        }
 6186|       |
 6187|    908|        return it;
 6188|  1.28k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    738|    {
 3492|    738|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    738|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    738|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    738|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    738|                return unexpected_scan_error(
 3498|    738|                    scan_error::invalid_scanned_value,
 3499|    738|                    "Unexpected '-' sign when parsing an "
 3500|    738|                    "unsigned value");
 3501|    738|            }
 3502|    738|        }
 3503|       |
 3504|    738|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 738]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.47k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.47k|                parse_integer_digits_without_thsep(
 3511|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.47k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.47k|        auto buf = make_contiguous_buffer(
 3515|  1.47k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.47k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 738, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    738|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    738|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    738|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    738|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    738|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.47k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    738|    {
 3492|    738|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    738|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    738|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    738|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 738]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    738|        }
 3503|       |
 3504|    738|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 738]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.47k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 738]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    738|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.47k|                parse_integer_digits_without_thsep(
 3511|  1.47k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.47k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.47k|        auto buf = make_contiguous_buffer(
 3515|  1.47k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.47k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    738|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    738|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    738|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    738|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 738, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    738|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    738|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    738|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    738|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    738|    }                                                  \
  |  |  |  | 3671|    738|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.47k|    }

LLVMFuzzerTestOneInput:
   68|  14.0k|{
   69|  14.0k|    scn::fuzz::run(data, size);
   70|  14.0k|    return 0;
   71|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  14.0k|{
   52|  14.0k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 14.0k]
  |  Branch (52:35): [True: 0, False: 14.0k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  14.0k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  14.0k|    run_for_source(sv);
   59|  14.0k|    run_for_source(wsv_reinterpret);
   60|  14.0k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 14.0k, False: 0]
  ------------------
   61|  14.0k|        run_for_source(wsv_transcode);
   62|  14.0k|    }
   63|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  14.0k|{
   37|  14.0k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  14.0k|    run_for_type<char_type>(source);
   40|  14.0k|    run_for_type<int>(source);
   41|  14.0k|    run_for_type<unsigned>(source);
   42|  14.0k|    run_for_type<double>(source);
   43|  14.0k|    run_for_type<bool>(source);
   44|  14.0k|    run_for_type<void*>(source);
   45|  14.0k|    run_for_type<std::string>(source);
   46|  14.0k|    run_for_type<std::wstring>(source);
   47|  14.0k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  14.0k|{
   25|  14.0k|    {
   26|  14.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  14.0k|    }
   28|  14.0k|    {
   29|  14.0k|        auto _ =
   30|  14.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  14.0k|    }
   32|  14.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  28.1k|{
   37|  28.1k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  28.1k|    run_for_type<char_type>(source);
   40|  28.1k|    run_for_type<int>(source);
   41|  28.1k|    run_for_type<unsigned>(source);
   42|  28.1k|    run_for_type<double>(source);
   43|  28.1k|    run_for_type<bool>(source);
   44|  28.1k|    run_for_type<void*>(source);
   45|  28.1k|    run_for_type<std::string>(source);
   46|  28.1k|    run_for_type<std::wstring>(source);
   47|  28.1k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  28.1k|{
   25|  28.1k|    {
   26|  28.1k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  28.1k|    }
   28|  28.1k|    {
   29|  28.1k|        auto _ =
   30|  28.1k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  28.1k|    }
   32|  28.1k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  14.0k|{
   52|  14.0k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  14.0k|    string_buffer.resize(size);
   56|  14.0k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  14.0k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  14.0k|    const auto wsv_reinterpret_size =
   61|  14.0k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 94, False: 13.9k]
  ------------------
   62|  14.0k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  14.0k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  14.0k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  14.0k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  14.0k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  14.0k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  14.0k|}

