_ZN7simdutf6resultC2ENS_10error_codeEm:
   29|  52.5k|  simdutf_really_inline result(error_code _err, size_t _pos) : error{_err}, count{_pos} {}

_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|   971k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|   258k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|   291k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|   291k|  return idx < lenminusstep;
   70|   291k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  32.3k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  32.3k|  return &buf[idx];
   75|  32.3k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|   291k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|   291k|  idx += STEP_SIZE;
   88|   291k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|   258k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|   258k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 258k]
  ------------------
   80|   258k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|   258k|  std::memcpy(dst, buf + idx, len - idx);
   82|   258k|  return len - idx;
   83|   258k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|   192k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|   192k|    size_t pos = 0;
   12|   192k|    size_t count = 0;
   13|   203k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 11.4k, False: 192k]
  ------------------
   14|  11.4k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  11.4k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  11.4k|      count += count_ones(utf8_continuation_mask);
   17|  11.4k|    }
   18|   192k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|   192k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   480k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   447k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   447k|      size_t pos = 0;
  131|   447k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|   447k|      size_t leading_byte = 0;
  139|   447k|      size_t margin = size;
  140|  1.00M|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 557k, False: 447k]
  |  Branch (140:27): [True: 557k, False: 0]
  ------------------
  141|   557k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   557k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   447k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   447k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 447k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   447k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 447k]
  ------------------
  195|   447k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 447k, False: 0]
  ------------------
  196|   447k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   447k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 34.8k, False: 412k]
  ------------------
  198|   412k|        utf32_output += howmany;
  199|   412k|      }
  200|   412k|      return utf32_output - start;
  201|   447k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  119|    432|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  120|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  121|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  122|    432|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  123|    432|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  124|    432|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  125|    432|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3219check_special_casesENS1_4simd5simd8IhEES5_:
   11|    432|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
   12|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   13|       |// Bit 1 = Too Long (ASCII followed by continuation)
   14|       |// Bit 2 = Overlong 3-byte
   15|       |// Bit 4 = Surrogate
   16|       |// Bit 5 = Overlong 2-byte
   17|       |// Bit 7 = Two Continuations
   18|    432|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   19|       |                                                // 11______ 11______
   20|    432|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   21|    432|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   22|    432|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   23|    432|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   24|    432|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   25|    432|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   26|       |                                                // 11110100 101_____
   27|       |                                                // 11110101 1001____
   28|       |                                                // 11110101 101_____
   29|       |                                                // 1111011_ 1001____
   30|       |                                                // 1111011_ 101_____
   31|       |                                                // 11111___ 1001____
   32|       |                                                // 11111___ 101_____
   33|    432|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   34|       |                                                // 11110101 1000____
   35|       |                                                // 1111011_ 1000____
   36|       |                                                // 11111___ 1000____
   37|    432|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   38|       |
   39|    432|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   40|       |      // 0_______ ________ <ASCII in byte 1>
   41|    432|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   42|    432|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   43|       |      // 10______ ________ <continuation in byte 1>
   44|    432|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   45|       |      // 1100____ ________ <two byte lead in byte 1>
   46|    432|      TOO_SHORT | OVERLONG_2,
   47|       |      // 1101____ ________ <two byte lead in byte 1>
   48|    432|      TOO_SHORT,
   49|       |      // 1110____ ________ <three byte lead in byte 1>
   50|    432|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   51|       |      // 1111____ ________ <four+ byte lead in byte 1>
   52|    432|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   53|    432|    );
   54|    432|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   55|    432|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   56|       |      // ____0000 ________
   57|    432|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   58|       |      // ____0001 ________
   59|    432|      CARRY | OVERLONG_2,
   60|       |      // ____001_ ________
   61|    432|      CARRY,
   62|    432|      CARRY,
   63|       |
   64|       |      // ____0100 ________
   65|    432|      CARRY | TOO_LARGE,
   66|       |      // ____0101 ________
   67|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |      // ____011_ ________
   69|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   70|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|       |
   72|       |      // ____1___ ________
   73|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   76|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   77|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|       |      // ____1101 ________
   79|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   80|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   81|    432|      CARRY | TOO_LARGE | TOO_LARGE_1000
   82|    432|    );
   83|    432|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   84|       |      // ________ 0_______ <ASCII in byte 2>
   85|    432|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   86|    432|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   87|       |
   88|       |      // ________ 1000____
   89|    432|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   90|       |      // ________ 1001____
   91|    432|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   92|       |      // ________ 101_____
   93|    432|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   94|    432|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   95|       |
   96|       |      // ________ 11______
   97|    432|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   98|    432|    );
   99|    432|    return (byte_1_high & byte_1_low & byte_2_high);
  100|    432|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3223check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
  102|    432|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  103|    432|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  104|    432|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  105|    432|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  106|    432|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  107|    432|    return must23_80 ^ sc;
  108|    432|  }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   480k|    simdutf_really_inline bool errors() const {
  291|   480k|      return this->error.any_bits_set_anywhere();
  292|   480k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder19convert_with_errorsEPKcmPDi:
  203|  32.9k|    simdutf_really_inline result convert_with_errors(const char* in, size_t size, char32_t* utf32_output) {
  204|  32.9k|      size_t pos = 0;
  205|  32.9k|      char32_t* start{utf32_output};
  206|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  207|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  208|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  209|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  210|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  211|       |      // to give us a good margin.
  212|  32.9k|      size_t leading_byte = 0;
  213|  32.9k|      size_t margin = size;
  214|   317k|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (214:13): [True: 316k, False: 1.17k]
  |  Branch (214:27): [True: 284k, False: 31.7k]
  ------------------
  215|   284k|        leading_byte += (int8_t(in[margin-1]) > -65);
  216|   284k|      }
  217|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  218|  32.9k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  219|  32.9k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (219:13): [True: 216, False: 32.7k]
  ------------------
  220|    216|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  221|    216|        if(input.is_ascii()) {
  ------------------
  |  Branch (221:12): [True: 0, False: 216]
  ------------------
  222|      0|          input.store_ascii_as_utf32(utf32_output);
  223|      0|          utf32_output += 64;
  224|      0|          pos += 64;
  225|    216|        } else {
  226|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  227|    216|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  228|    216|              "We support either two or four chunks per 64-byte block.");
  229|    216|          auto zero = simd8<uint8_t>{uint8_t(0)};
  230|    216|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (230:14): [Folded - Ignored]
  ------------------
  231|    216|            this->check_utf8_bytes(input.chunks[0], zero);
  232|    216|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  233|    216|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (233:21): [Folded - Ignored]
  ------------------
  234|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  235|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  236|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  237|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  238|      0|          }
  239|    216|          if (errors()) {
  ------------------
  |  Branch (239:15): [True: 216, False: 0]
  ------------------
  240|    216|            result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  241|    216|            res.count += pos;
  242|    216|            return res;
  243|    216|          }
  244|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  245|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  246|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  247|       |          // We process in blocks of up to 12 bytes except possibly
  248|       |          // for fast paths which may process up to 16 bytes. For the
  249|       |          // slow path to work, we should have at least 12 input bytes left.
  250|      0|          size_t max_starting_point = (pos + 64) - 12;
  251|       |          // Next loop is going to run at least five times.
  252|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (252:17): [True: 0, False: 0]
  ------------------
  253|       |            // Performance note: our ability to compute 'consumed' and
  254|       |            // then shift and recompute is critical. If there is a
  255|       |            // latency of, say, 4 cycles on getting 'consumed', then
  256|       |            // the inner loop might have a total latency of about 6 cycles.
  257|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  258|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  259|       |            // for this section of the code. Hence, there is a limit
  260|       |            // to how much we can further increase this latency before
  261|       |            // it seriously harms performance.
  262|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  263|      0|                            utf8_end_of_code_point_mask, utf32_output);
  264|      0|            pos += consumed;
  265|      0|            utf8_end_of_code_point_mask >>= consumed;
  266|      0|          }
  267|       |          // At this point there may remain between 0 and 12 bytes in the
  268|       |          // 64-byte block. These bytes will be processed again. So we have an
  269|       |          // 80% efficiency (in the worst case). In practice we expect an
  270|       |          // 85% to 90% efficiency.
  271|      0|        }
  272|    216|      }
  273|  32.7k|      if(errors()) {
  ------------------
  |  Branch (273:10): [True: 0, False: 32.7k]
  ------------------
  274|      0|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  275|      0|        res.count += pos;
  276|      0|        return res;
  277|      0|      }
  278|  32.7k|      if(pos < size) {
  ------------------
  |  Branch (278:10): [True: 32.7k, False: 0]
  ------------------
  279|  32.7k|        result res = scalar::utf8_to_utf32::rewind_and_convert_with_errors(pos, in + pos, size - pos, utf32_output);
  280|  32.7k|        if (res.error) {    // In case of error, we want the error position
  ------------------
  |  Branch (280:13): [True: 13.1k, False: 19.5k]
  ------------------
  281|  13.1k|          res.count += pos;
  282|  13.1k|          return res;
  283|  19.5k|        } else {    // In case of success, we want the number of word written
  284|  19.5k|          utf32_output += res.count;
  285|  19.5k|        }
  286|  32.7k|      }
  287|  19.5k|      return result(error_code::SUCCESS, utf32_output - start);
  288|  32.7k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  14.9k|    char32_t* utf32_output) noexcept {
   13|  14.9k|  size_t pos = 0;
   14|  14.9k|  char32_t* start{utf32_output};
   15|  14.9k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  24.5k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 9.64k, False: 14.9k]
  ------------------
   17|  9.64k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  9.64k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 6.31k, False: 3.32k]
  ------------------
   19|  6.31k|      in.store_ascii_as_utf32(utf32_output);
   20|  6.31k|      utf32_output += 64;
   21|  6.31k|      pos += 64;
   22|  6.31k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|  3.32k|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|  3.32k|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|  3.32k|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|  3.32k|    size_t max_starting_point = (pos + 64) - 12;
   28|  26.0k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 22.7k, False: 3.32k]
  ------------------
   29|  22.7k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  22.7k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  22.7k|      pos += consumed;
   32|  22.7k|      utf8_end_of_code_point_mask >>= consumed;
   33|  22.7k|      }
   34|  3.32k|    }
   35|  9.64k|  }
   36|  14.9k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  14.9k|  return utf32_output - start;
   38|  14.9k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|   291k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|   291k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|   291k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 205k, False: 85.2k]
  |  |  ------------------
  ------------------
  154|   205k|        this->error |= this->prev_incomplete;
  155|   205k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  85.2k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  85.2k|            "We support either two or four chunks per 64-byte block.");
  159|  85.2k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  85.2k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  85.2k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  85.2k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  85.2k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  85.2k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  85.2k|      }
  172|   291k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|   170k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|   170k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|   170k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|   170k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|   170k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|   170k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|   170k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|   170k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|   170k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|   170k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|   170k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|   170k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|   170k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|   170k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|   170k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|   170k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|   170k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|   170k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|   170k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|   170k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|   170k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|   170k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|   170k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|   170k|    );
   51|   170k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|   170k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|   170k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|   170k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|   170k|      CARRY,
   59|   170k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|   170k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|   170k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|   170k|    );
   80|   170k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|   170k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|   170k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|   170k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|   170k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|   170k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|   170k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|   170k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|   170k|    );
   96|   170k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|   170k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|   170k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|   170k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|   170k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|   170k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|   170k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|   170k|    return must23_80 ^ sc;
  105|   170k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  85.2k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  85.2k|    static const uint8_t max_array[32] = {
  115|  85.2k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  85.2k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  85.2k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  85.2k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  85.2k|    };
  120|  85.2k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  85.2k|    return input.gt_bits(max_value);
  122|  85.2k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|   258k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|   258k|      this->error |= this->prev_incomplete;
  150|   258k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|   258k|    simdutf_really_inline bool errors() const {
  176|   258k|      return this->error.any_bits_set_anywhere();
  177|   258k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|   258k|bool generic_validate_utf8(const char * input, size_t length) {
   28|   258k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|   258k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|   258k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|   258k|    checker c{};
   12|   258k|    buf_block_reader<64> reader(input, length);
   13|   291k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 32.3k, False: 258k]
  ------------------
   14|  32.3k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  32.3k|      c.check_next_input(in);
   16|  32.3k|      reader.advance();
   17|  32.3k|    }
   18|   258k|    uint8_t block[64]{};
   19|   258k|    reader.get_remainder(block);
   20|   258k|    simd::simd8x64<uint8_t> in(block);
   21|   258k|    c.check_next_input(in);
   22|   258k|    reader.advance();
   23|   258k|    c.check_eof();
   24|   258k|    return !c.errors();
   25|   258k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_126avx2_convert_utf32_to_utf8EPKDimPc:
    1|  2.56k|std::pair<const char32_t*, char*> avx2_convert_utf32_to_utf8(const char32_t* buf, size_t len, char* utf8_output) {
    2|  2.56k|  const char32_t* end = buf + len;
    3|  2.56k|  const __m256i v_0000 = _mm256_setzero_si256();
    4|  2.56k|  const __m256i v_ffff0000 = _mm256_set1_epi32((uint32_t)0xffff0000);
    5|  2.56k|  const __m256i v_ff80 = _mm256_set1_epi16((uint16_t)0xff80);
    6|  2.56k|  const __m256i v_f800 = _mm256_set1_epi16((uint16_t)0xf800);
    7|  2.56k|  const __m256i v_c080 = _mm256_set1_epi16((uint16_t)0xc080);
    8|  2.56k|  const __m256i v_7fffffff = _mm256_set1_epi32((uint32_t)0x7fffffff);
    9|  2.56k|  __m256i running_max = _mm256_setzero_si256();
   10|  2.56k|  __m256i forbidden_bytemask = _mm256_setzero_si256();
   11|       |
   12|  2.56k|  const size_t safety_margin = 12; // to avoid overruns, see issue https://github.com/simdutf/simdutf/issues/92
   13|       |
   14|  17.1k|  while (buf + 16 + safety_margin <= end) {
  ------------------
  |  Branch (14:10): [True: 14.5k, False: 2.56k]
  ------------------
   15|  14.5k|    __m256i in = _mm256_loadu_si256((__m256i*)buf);
   16|  14.5k|    __m256i nextin = _mm256_loadu_si256((__m256i*)buf+1);
   17|  14.5k|    running_max = _mm256_max_epu32(_mm256_max_epu32(in, running_max), nextin);
   18|       |
   19|       |    // Pack 32-bit UTF-32 code units to 16-bit UTF-16 code units with unsigned saturation
   20|  14.5k|    __m256i in_16 = _mm256_packus_epi32(_mm256_and_si256(in, v_7fffffff), _mm256_and_si256(nextin, v_7fffffff));
   21|  14.5k|    in_16 = _mm256_permute4x64_epi64(in_16, 0b11011000);
   22|       |
   23|       |    // Try to apply UTF-16 => UTF-8 routine on 256 bits (haswell/avx2_convert_utf16_to_utf8.cpp)
   24|       |
   25|  14.5k|    if(_mm256_testz_si256(in_16, v_ff80)) { // ASCII fast path!!!!
  ------------------
  |  Branch (25:8): [True: 5.64k, False: 8.92k]
  ------------------
   26|       |      // 1. pack the bytes
   27|  5.64k|      const __m128i utf8_packed = _mm_packus_epi16(_mm256_castsi256_si128(in_16),_mm256_extractf128_si256(in_16,1));
   28|       |      // 2. store (16 bytes)
   29|  5.64k|      _mm_storeu_si128((__m128i*)utf8_output, utf8_packed);
   30|       |      // 3. adjust pointers
   31|  5.64k|      buf += 16;
   32|  5.64k|      utf8_output += 16;
   33|  5.64k|      continue; // we are done for this round!
   34|  5.64k|    }
   35|       |    // no bits set above 7th bit
   36|  8.92k|    const __m256i one_byte_bytemask = _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_ff80), v_0000);
   37|  8.92k|    const uint32_t one_byte_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(one_byte_bytemask));
   38|       |
   39|       |    // no bits set above 11th bit
   40|  8.92k|    const __m256i one_or_two_bytes_bytemask = _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_f800), v_0000);
   41|  8.92k|    const uint32_t one_or_two_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(one_or_two_bytes_bytemask));
   42|  8.92k|    if (one_or_two_bytes_bitmask == 0xffffffff) {
  ------------------
  |  Branch (42:9): [True: 7.39k, False: 1.53k]
  ------------------
   43|       |      // 1. prepare 2-byte values
   44|       |      // input 16-bit word : [0000|0aaa|aabb|bbbb] x 8
   45|       |      // expected output   : [110a|aaaa|10bb|bbbb] x 8
   46|  7.39k|      const __m256i v_1f00 = _mm256_set1_epi16((int16_t)0x1f00);
   47|  7.39k|      const __m256i v_003f = _mm256_set1_epi16((int16_t)0x003f);
   48|       |
   49|       |      // t0 = [000a|aaaa|bbbb|bb00]
   50|  7.39k|      const __m256i t0 = _mm256_slli_epi16(in_16, 2);
   51|       |      // t1 = [000a|aaaa|0000|0000]
   52|  7.39k|      const __m256i t1 = _mm256_and_si256(t0, v_1f00);
   53|       |      // t2 = [0000|0000|00bb|bbbb]
   54|  7.39k|      const __m256i t2 = _mm256_and_si256(in_16, v_003f);
   55|       |      // t3 = [000a|aaaa|00bb|bbbb]
   56|  7.39k|      const __m256i t3 = _mm256_or_si256(t1, t2);
   57|       |      // t4 = [110a|aaaa|10bb|bbbb]
   58|  7.39k|      const __m256i t4 = _mm256_or_si256(t3, v_c080);
   59|       |
   60|       |      // 2. merge ASCII and 2-byte codewords
   61|  7.39k|      const __m256i utf8_unpacked = _mm256_blendv_epi8(t4, in_16, one_byte_bytemask);
   62|       |
   63|       |      // 3. prepare bitmask for 8-bit lookup
   64|  7.39k|      const uint32_t M0 = one_byte_bitmask & 0x55555555;
   65|  7.39k|      const uint32_t M1 = M0 >> 7;
   66|  7.39k|      const uint32_t M2 = (M1 | M0)  & 0x00ff00ff;
   67|       |      // 4. pack the bytes
   68|       |
   69|  7.39k|      const uint8_t* row = &simdutf::tables::utf16_to_utf8::pack_1_2_utf8_bytes[uint8_t(M2)][0];
   70|  7.39k|      const uint8_t* row_2 = &simdutf::tables::utf16_to_utf8::pack_1_2_utf8_bytes[uint8_t(M2>>16)][0];
   71|       |
   72|  7.39k|      const __m128i shuffle = _mm_loadu_si128((__m128i*)(row + 1));
   73|  7.39k|      const __m128i shuffle_2 = _mm_loadu_si128((__m128i*)(row_2 + 1));
   74|       |
   75|  7.39k|      const __m256i utf8_packed = _mm256_shuffle_epi8(utf8_unpacked, _mm256_setr_m128i(shuffle,shuffle_2));
  ------------------
  |  |    4|  7.39k|#define _mm256_setr_m128i(xmm2, xmm1)  _mm256_permute2f128_si256(_mm256_castsi128_si256(xmm1), _mm256_castsi128_si256(xmm2), 2)
  ------------------
   76|       |      // 5. store bytes
   77|  7.39k|      _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_packed));
   78|  7.39k|      utf8_output += row[0];
   79|  7.39k|      _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_packed,1));
   80|  7.39k|      utf8_output += row_2[0];
   81|       |
   82|       |      // 6. adjust pointers
   83|  7.39k|      buf += 16;
   84|  7.39k|      continue;
   85|  7.39k|    }
   86|       |    // Must check for overflow in packing
   87|  1.53k|    const __m256i saturation_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(_mm256_or_si256(in, nextin), v_ffff0000), v_0000);
   88|  1.53k|    const uint32_t saturation_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(saturation_bytemask));
   89|  1.53k|    if (saturation_bitmask == 0xffffffff) {
  ------------------
  |  Branch (89:9): [True: 676, False: 856]
  ------------------
   90|       |      // case: code units from register produce either 1, 2 or 3 UTF-8 bytes
   91|    676|      const __m256i v_d800 = _mm256_set1_epi16((uint16_t)0xd800);
   92|    676|      forbidden_bytemask = _mm256_or_si256(forbidden_bytemask, _mm256_cmpeq_epi16(_mm256_and_si256(in_16, v_f800), v_d800));
   93|       |
   94|    676|      const __m256i dup_even = _mm256_setr_epi16(0x0000, 0x0202, 0x0404, 0x0606,
   95|    676|                                              0x0808, 0x0a0a, 0x0c0c, 0x0e0e,
   96|    676|                                              0x0000, 0x0202, 0x0404, 0x0606,
   97|    676|                                              0x0808, 0x0a0a, 0x0c0c, 0x0e0e);
   98|       |
   99|       |      /* In this branch we handle three cases:
  100|       |        1. [0000|0000|0ccc|cccc] => [0ccc|cccc]                           - single UFT-8 byte
  101|       |        2. [0000|0bbb|bbcc|cccc] => [110b|bbbb], [10cc|cccc]              - two UTF-8 bytes
  102|       |        3. [aaaa|bbbb|bbcc|cccc] => [1110|aaaa], [10bb|bbbb], [10cc|cccc] - three UTF-8 bytes
  103|       |
  104|       |        We expand the input word (16-bit) into two code units (32-bit), thus
  105|       |        we have room for four bytes. However, we need five distinct bit
  106|       |        layouts. Note that the last byte in cases #2 and #3 is the same.
  107|       |
  108|       |        We precompute byte 1 for case #1 and the common byte for cases #2 & #3
  109|       |        in register t2.
  110|       |
  111|       |        We precompute byte 1 for case #3 and -- **conditionally** -- precompute
  112|       |        either byte 1 for case #2 or byte 2 for case #3. Note that they
  113|       |        differ by exactly one bit.
  114|       |
  115|       |        Finally from these two code units we build proper UTF-8 sequence, taking
  116|       |        into account the case (i.e, the number of bytes to write).
  117|       |      */
  118|       |      /**
  119|       |       * Given [aaaa|bbbb|bbcc|cccc] our goal is to produce:
  120|       |       * t2 => [0ccc|cccc] [10cc|cccc]
  121|       |       * s4 => [1110|aaaa] ([110b|bbbb] OR [10bb|bbbb])
  122|       |       */
  123|    676|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  124|       |      // [aaaa|bbbb|bbcc|cccc] => [bbcc|cccc|bbcc|cccc]
  125|    676|      const __m256i t0 = _mm256_shuffle_epi8(in_16, dup_even);
  126|       |      // [bbcc|cccc|bbcc|cccc] => [00cc|cccc|0bcc|cccc]
  127|    676|      const __m256i t1 = _mm256_and_si256(t0, simdutf_vec(0b0011111101111111));
  ------------------
  |  |  123|    676|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  128|       |      // [00cc|cccc|0bcc|cccc] => [10cc|cccc|0bcc|cccc]
  129|    676|      const __m256i t2 = _mm256_or_si256 (t1, simdutf_vec(0b1000000000000000));
  ------------------
  |  |  123|    676|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  130|       |
  131|       |      // [aaaa|bbbb|bbcc|cccc] =>  [0000|aaaa|bbbb|bbcc]
  132|    676|      const __m256i s0 = _mm256_srli_epi16(in_16, 4);
  133|       |      // [0000|aaaa|bbbb|bbcc] => [0000|aaaa|bbbb|bb00]
  134|    676|      const __m256i s1 = _mm256_and_si256(s0, simdutf_vec(0b0000111111111100));
  ------------------
  |  |  123|    676|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  135|       |      // [0000|aaaa|bbbb|bb00] => [00bb|bbbb|0000|aaaa]
  136|    676|      const __m256i s2 = _mm256_maddubs_epi16(s1, simdutf_vec(0x0140));
  ------------------
  |  |  123|    676|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  137|       |      // [00bb|bbbb|0000|aaaa] => [11bb|bbbb|1110|aaaa]
  138|    676|      const __m256i s3 = _mm256_or_si256(s2, simdutf_vec(0b1100000011100000));
  ------------------
  |  |  123|    676|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  139|    676|      const __m256i m0 = _mm256_andnot_si256(one_or_two_bytes_bytemask, simdutf_vec(0b0100000000000000));
  ------------------
  |  |  123|    676|#define simdutf_vec(x) _mm256_set1_epi16(static_cast<uint16_t>(x))
  ------------------
  140|    676|      const __m256i s4 = _mm256_xor_si256(s3, m0);
  141|    676|#undef simdutf_vec
  142|       |
  143|       |      // 4. expand code units 16-bit => 32-bit
  144|    676|      const __m256i out0 = _mm256_unpacklo_epi16(t2, s4);
  145|    676|      const __m256i out1 = _mm256_unpackhi_epi16(t2, s4);
  146|       |
  147|       |      // 5. compress 32-bit code units into 1, 2 or 3 bytes -- 2 x shuffle
  148|    676|      const uint32_t mask = (one_byte_bitmask & 0x55555555) |
  149|    676|                            (one_or_two_bytes_bitmask & 0xaaaaaaaa);
  150|       |      // Due to the wider registers, the following path is less likely to be useful.
  151|       |      /*if(mask == 0) {
  152|       |        // We only have three-byte code units. Use fast path.
  153|       |        const __m256i shuffle = _mm256_setr_epi8(2,3,1,6,7,5,10,11,9,14,15,13,-1,-1,-1,-1, 2,3,1,6,7,5,10,11,9,14,15,13,-1,-1,-1,-1);
  154|       |        const __m256i utf8_0 = _mm256_shuffle_epi8(out0, shuffle);
  155|       |        const __m256i utf8_1 = _mm256_shuffle_epi8(out1, shuffle);
  156|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_0));
  157|       |        utf8_output += 12;
  158|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_castsi256_si128(utf8_1));
  159|       |        utf8_output += 12;
  160|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_0,1));
  161|       |        utf8_output += 12;
  162|       |        _mm_storeu_si128((__m128i*)utf8_output, _mm256_extractf128_si256(utf8_1,1));
  163|       |        utf8_output += 12;
  164|       |        buf += 16;
  165|       |        continue;
  166|       |      }*/
  167|    676|      const uint8_t mask0 = uint8_t(mask);
  168|    676|      const uint8_t* row0 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask0][0];
  169|    676|      const __m128i shuffle0 = _mm_loadu_si128((__m128i*)(row0 + 1));
  170|    676|      const __m128i utf8_0 = _mm_shuffle_epi8(_mm256_castsi256_si128(out0), shuffle0);
  171|       |
  172|    676|      const uint8_t mask1 = static_cast<uint8_t>(mask >> 8);
  173|    676|      const uint8_t* row1 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask1][0];
  174|    676|      const __m128i shuffle1 = _mm_loadu_si128((__m128i*)(row1 + 1));
  175|    676|      const __m128i utf8_1 = _mm_shuffle_epi8(_mm256_castsi256_si128(out1), shuffle1);
  176|       |
  177|    676|      const uint8_t mask2 = static_cast<uint8_t>(mask >> 16);
  178|    676|      const uint8_t* row2 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask2][0];
  179|    676|      const __m128i shuffle2 = _mm_loadu_si128((__m128i*)(row2 + 1));
  180|    676|      const __m128i utf8_2 = _mm_shuffle_epi8(_mm256_extractf128_si256(out0,1), shuffle2);
  181|       |
  182|       |
  183|    676|      const uint8_t mask3 = static_cast<uint8_t>(mask >> 24);
  184|    676|      const uint8_t* row3 = &simdutf::tables::utf16_to_utf8::pack_1_2_3_utf8_bytes[mask3][0];
  185|    676|      const __m128i shuffle3 = _mm_loadu_si128((__m128i*)(row3 + 1));
  186|    676|      const __m128i utf8_3 = _mm_shuffle_epi8(_mm256_extractf128_si256(out1,1), shuffle3);
  187|       |
  188|    676|      _mm_storeu_si128((__m128i*)utf8_output, utf8_0);
  189|    676|      utf8_output += row0[0];
  190|    676|      _mm_storeu_si128((__m128i*)utf8_output, utf8_1);
  191|    676|      utf8_output += row1[0];
  192|    676|      _mm_storeu_si128((__m128i*)utf8_output, utf8_2);
  193|    676|      utf8_output += row2[0];
  194|    676|      _mm_storeu_si128((__m128i*)utf8_output, utf8_3);
  195|    676|      utf8_output += row3[0];
  196|    676|      buf += 16;
  197|    856|    } else {
  198|       |      // case: at least one 32-bit word is larger than 0xFFFF <=> it will produce four UTF-8 bytes.
  199|       |      // Let us do a scalar fallback.
  200|       |      // It may seem wasteful to use scalar code, but being efficient with SIMD
  201|       |      // may require large, non-trivial tables?
  202|    856|      size_t forward = 15;
  203|    856|      size_t k = 0;
  204|    856|      if(size_t(end - buf) < forward + 1) { forward = size_t(end - buf - 1);}
  ------------------
  |  Branch (204:10): [True: 0, False: 856]
  ------------------
  205|  13.6k|      for(; k < forward; k++) {
  ------------------
  |  Branch (205:13): [True: 12.8k, False: 856]
  ------------------
  206|  12.8k|        uint32_t word = buf[k];
  207|  12.8k|        if((word & 0xFFFFFF80)==0) {  // 1-byte (ASCII)
  ------------------
  |  Branch (207:12): [True: 11.2k, False: 1.54k]
  ------------------
  208|  11.2k|          *utf8_output++ = char(word);
  209|  11.2k|        } else if((word & 0xFFFFF800)==0) { // 2-byte
  ------------------
  |  Branch (209:19): [True: 136, False: 1.41k]
  ------------------
  210|    136|          *utf8_output++ = char((word>>6) | 0b11000000);
  211|    136|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  212|  1.41k|        } else if((word & 0xFFFF0000 )==0) {  // 3-byte
  ------------------
  |  Branch (212:19): [True: 248, False: 1.16k]
  ------------------
  213|    248|          if (word >= 0xD800 && word <= 0xDFFF) { return std::make_pair(nullptr, utf8_output); }
  ------------------
  |  Branch (213:15): [True: 88, False: 160]
  |  Branch (213:33): [True: 0, False: 88]
  ------------------
  214|    248|          *utf8_output++ = char((word>>12) | 0b11100000);
  215|    248|          *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
  216|    248|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  217|  1.16k|        } else {  // 4-byte
  218|  1.16k|          if (word > 0x10FFFF) { return std::make_pair(nullptr, utf8_output); }
  ------------------
  |  Branch (218:15): [True: 0, False: 1.16k]
  ------------------
  219|  1.16k|          *utf8_output++ = char((word>>18) | 0b11110000);
  220|  1.16k|          *utf8_output++ = char(((word>>12) & 0b111111) | 0b10000000);
  221|  1.16k|          *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
  222|  1.16k|          *utf8_output++ = char((word & 0b111111) | 0b10000000);
  223|  1.16k|        }
  224|  12.8k|      }
  225|    856|      buf += k;
  226|    856|    }
  227|  1.53k|  } // while
  228|       |
  229|       |  // check for invalid input
  230|  2.56k|  const __m256i v_10ffff = _mm256_set1_epi32((uint32_t)0x10ffff);
  231|  2.56k|  if(static_cast<uint32_t>(_mm256_movemask_epi8(_mm256_cmpeq_epi32(_mm256_max_epu32(running_max, v_10ffff), v_10ffff))) != 0xffffffff) {
  ------------------
  |  Branch (231:6): [True: 0, False: 2.56k]
  ------------------
  232|      0|    return std::make_pair(nullptr, utf8_output);
  233|      0|  }
  234|       |
  235|  2.56k|  if (static_cast<uint32_t>(_mm256_movemask_epi8(forbidden_bytemask)) != 0) { return std::make_pair(nullptr, utf8_output); }
  ------------------
  |  Branch (235:7): [True: 0, False: 2.56k]
  ------------------
  236|       |
  237|  2.56k|  return std::make_pair(buf, utf8_output);
  238|  2.56k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  22.7k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  22.7k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  22.7k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  22.7k|      utf8_end_of_code_point_mask & 0xfff;
   24|  22.7k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 3.61k, False: 19.0k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  3.61k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  3.61k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  3.61k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  3.61k|    return 16; // We consumed 16 bytes.
   30|  3.61k|  }
   31|  19.0k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 110, False: 18.9k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|    110|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|    110|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|    110|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|    110|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|    110|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|    110|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|    110|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|    110|    return 16;
   42|    110|  }
   43|  18.9k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 35, False: 18.9k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     35|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     35|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     35|    const __m128i ascii =
   49|     35|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     35|    const __m128i middlebyte =
   51|     35|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     35|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     35|    const __m128i highbyte =
   54|     35|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     35|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     35|    const __m128i composed =
   57|     35|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     35|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     35|    utf32_output += 4;
   60|     35|    return 12;
   61|     35|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  18.9k|  const uint8_t idx =
   65|  18.9k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  18.9k|  const uint8_t consumed =
   67|  18.9k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  18.9k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 16.5k, False: 2.44k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  16.5k|    const __m128i sh =
   75|  16.5k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  16.5k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  16.5k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  16.5k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  16.5k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  16.5k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  16.5k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  16.5k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 1.58k, False: 866]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|  1.58k|    const __m128i sh =
   86|  1.58k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|  1.58k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|  1.58k|    const __m128i ascii =
   89|  1.58k|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|  1.58k|    const __m128i middlebyte =
   91|  1.58k|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|  1.58k|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|  1.58k|    const __m128i highbyte =
   94|  1.58k|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|  1.58k|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|  1.58k|    const __m128i composed =
   97|  1.58k|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|  1.58k|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|  1.58k|    utf32_output += 4;
  100|  1.58k|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 866, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    866|    const __m128i sh =
  103|    866|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    866|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    866|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    866|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    866|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    866|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    866|    const __m128i correct =
  111|    866|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    866|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    866|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    866|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    866|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    866|    const __m128i composed =
  117|    866|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    866|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    866|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    866|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    866|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  18.9k|  return consumed;
  125|  18.9k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_121avx2_validate_utf32leEPKDim:
    5|  18.3k|const char32_t* avx2_validate_utf32le(const char32_t* input, size_t size) {
    6|  18.3k|    const char32_t* end = input + size;
    7|       |
    8|  18.3k|    const __m256i standardmax = _mm256_set1_epi32(0x10ffff);
    9|  18.3k|    const __m256i offset = _mm256_set1_epi32(0xffff2000);
   10|  18.3k|    const __m256i standardoffsetmax = _mm256_set1_epi32(0xfffff7ff);
   11|  18.3k|    __m256i currentmax = _mm256_setzero_si256();
   12|  18.3k|    __m256i currentoffsetmax = _mm256_setzero_si256();
   13|       |
   14|   236k|    while (input + 8 < end) {
  ------------------
  |  Branch (14:12): [True: 218k, False: 18.3k]
  ------------------
   15|   218k|        const __m256i in = _mm256_loadu_si256((__m256i *)input);
   16|   218k|        currentmax = _mm256_max_epu32(in,currentmax);
   17|   218k|        currentoffsetmax = _mm256_max_epu32(_mm256_add_epi32(in, offset), currentoffsetmax);
   18|   218k|        input += 8;
   19|   218k|    }
   20|  18.3k|    __m256i is_zero = _mm256_xor_si256(_mm256_max_epu32(currentmax, standardmax), standardmax);
   21|  18.3k|    if(_mm256_testz_si256(is_zero, is_zero) == 0) {
  ------------------
  |  Branch (21:8): [True: 180, False: 18.1k]
  ------------------
   22|    180|        return nullptr;
   23|    180|    }
   24|       |
   25|  18.1k|    is_zero = _mm256_xor_si256(_mm256_max_epu32(currentoffsetmax, standardoffsetmax), standardoffsetmax);
   26|  18.1k|    if(_mm256_testz_si256(is_zero, is_zero) == 0) {
  ------------------
  |  Branch (26:8): [True: 6, False: 18.1k]
  ------------------
   27|      6|        return nullptr;
   28|      6|    }
   29|       |
   30|  18.1k|    return input;
   31|  18.1k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|   258k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|   258k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|   258k|}
_ZNK7simdutf7haswell14implementation14validate_utf32EPKDim:
  159|  18.3k|simdutf_warn_unused bool implementation::validate_utf32(const char32_t *buf, size_t len) const noexcept {
  160|  18.3k|  const char32_t* tail = avx2_validate_utf32le(buf, len);
  161|  18.3k|  if (tail) {
  ------------------
  |  Branch (161:7): [True: 18.1k, False: 186]
  ------------------
  162|  18.1k|    return scalar::utf32::validate(tail, len - (tail - buf));
  163|  18.1k|  } else {
  164|    186|    return false;
  165|    186|  }
  166|  18.3k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|   447k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|   447k|  utf8_to_utf32::validating_transcoder converter;
  277|   447k|  return converter.convert(buf, len, utf32_output);
  278|   447k|}
_ZNK7simdutf7haswell14implementation33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  280|  32.9k|simdutf_warn_unused result implementation::convert_utf8_to_utf32_with_errors(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  281|  32.9k|  utf8_to_utf32::validating_transcoder converter;
  282|  32.9k|  return converter.convert_with_errors(buf, len, utf32_output);
  283|  32.9k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|  14.9k|    char32_t* utf32_output) const noexcept {
  287|  14.9k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|  14.9k|}
_ZNK7simdutf7haswell14implementation21convert_utf32_to_utf8EPKDimPc:
  431|  2.56k|simdutf_warn_unused size_t implementation::convert_utf32_to_utf8(const char32_t* buf, size_t len, char* utf8_output) const noexcept {
  432|  2.56k|  std::pair<const char32_t*, char*> ret = avx2_convert_utf32_to_utf8(buf, len, utf8_output);
  433|  2.56k|  if (ret.first == nullptr) { return 0; }
  ------------------
  |  Branch (433:7): [True: 0, False: 2.56k]
  ------------------
  434|  2.56k|  size_t saved_bytes = ret.second - utf8_output;
  435|  2.56k|  if (ret.first != buf + len) {
  ------------------
  |  Branch (435:7): [True: 2.56k, False: 0]
  ------------------
  436|  2.56k|    const size_t scalar_saved_bytes = scalar::utf32_to_utf8::convert(
  437|  2.56k|                                        ret.first, len - (ret.first - buf), ret.second);
  438|  2.56k|    if (scalar_saved_bytes == 0) { return 0; }
  ------------------
  |  Branch (438:9): [True: 0, False: 2.56k]
  ------------------
  439|  2.56k|    saved_bytes += scalar_saved_bytes;
  440|  2.56k|  }
  441|  2.56k|  return saved_bytes;
  442|  2.56k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf32_to_utf8EPKDimPc:
  557|  2.56k|simdutf_warn_unused size_t implementation::convert_valid_utf32_to_utf8(const char32_t* buf, size_t len, char* utf8_output) const noexcept {
  558|  2.56k|  return convert_utf32_to_utf8(buf, len, utf8_output);
  559|  2.56k|}
_ZNK7simdutf7haswell14implementation22utf8_length_from_utf32EPKDim:
  736|  5.13k|simdutf_warn_unused size_t implementation::utf8_length_from_utf32(const char32_t * input, size_t length) const noexcept {
  737|  5.13k|  const __m256i v_00000000 = _mm256_setzero_si256();
  738|  5.13k|  const __m256i v_ffffff80 = _mm256_set1_epi32((uint32_t)0xffffff80);
  739|  5.13k|  const __m256i v_fffff800 = _mm256_set1_epi32((uint32_t)0xfffff800);
  740|  5.13k|  const __m256i v_ffff0000 = _mm256_set1_epi32((uint32_t)0xffff0000);
  741|  5.13k|  size_t pos = 0;
  742|  5.13k|  size_t count = 0;
  743|  68.0k|  for(;pos + 8 <= length; pos += 8) {
  ------------------
  |  Branch (743:8): [True: 62.9k, False: 5.13k]
  ------------------
  744|  62.9k|    __m256i in = _mm256_loadu_si256((__m256i*)(input + pos));
  745|  62.9k|    const __m256i ascii_bytes_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(in, v_ffffff80), v_00000000);
  746|  62.9k|    const __m256i one_two_bytes_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(in, v_fffff800), v_00000000);
  747|  62.9k|    const __m256i two_bytes_bytemask = _mm256_xor_si256(one_two_bytes_bytemask, ascii_bytes_bytemask);
  748|  62.9k|    const __m256i one_two_three_bytes_bytemask = _mm256_cmpeq_epi32(_mm256_and_si256(in, v_ffff0000), v_00000000);
  749|  62.9k|    const __m256i three_bytes_bytemask = _mm256_xor_si256(one_two_three_bytes_bytemask, one_two_bytes_bytemask);
  750|  62.9k|    const uint32_t ascii_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(ascii_bytes_bytemask));
  751|  62.9k|    const uint32_t two_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(two_bytes_bytemask));
  752|  62.9k|    const uint32_t three_bytes_bitmask = static_cast<uint32_t>(_mm256_movemask_epi8(three_bytes_bytemask));
  753|       |
  754|  62.9k|    size_t ascii_count = count_ones(ascii_bytes_bitmask) / 4;
  755|  62.9k|    size_t two_bytes_count = count_ones(two_bytes_bitmask) / 4;
  756|  62.9k|    size_t three_bytes_count = count_ones(three_bytes_bitmask) / 4;
  757|  62.9k|    count += 32 - 3*ascii_count - 2*two_bytes_count - three_bytes_count;
  758|  62.9k|  }
  759|  5.13k|  return count + scalar::utf32::utf8_length_from_utf32(input + pos, length - pos);
  760|  5.13k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|   192k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|   192k|  return utf8::count_code_points(input, length);
  779|   192k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|   291k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|   291k|  return input.reduce_or().is_ascii();
   25|   291k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|   170k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|   170k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|   170k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|   170k|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|   170k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|   971k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|   971k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|   971k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|   971k|    return active_implementation;
  913|   971k|#endif
  914|   971k|}
_ZN7simdutf26get_default_implementationEv:
  922|   971k|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|   971k|  return get_active_implementation();
  924|   971k|}
_ZN7simdutf13validate_utf8EPKcm:
  928|   258k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|   258k|  return get_default_implementation()->validate_utf8(buf, len);
  930|   258k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|   447k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|   447k|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|   447k|}
_ZN7simdutf33convert_utf8_to_utf32_with_errorsEPKcmPDi:
  990|  32.9k|simdutf_warn_unused result convert_utf8_to_utf32_with_errors(const char * input, size_t length, char32_t* utf32_output) noexcept {
  991|  32.9k|  return get_default_implementation()->convert_utf8_to_utf32_with_errors(input, length, utf32_output);
  992|  32.9k|}
_ZN7simdutf14validate_utf32EPKDim:
 1019|  18.3k|simdutf_warn_unused bool validate_utf32(const char32_t * buf, size_t len) noexcept {
 1020|  18.3k|  return get_default_implementation()->validate_utf32(buf, len);
 1021|  18.3k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|  14.9k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|  14.9k|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|  14.9k|}
_ZN7simdutf27convert_valid_utf32_to_utf8EPKDimPc:
 1132|  2.56k|simdutf_warn_unused size_t convert_valid_utf32_to_utf8(const char32_t * buf, size_t len, char* utf8_buffer) noexcept {
 1133|  2.56k|  return get_default_implementation()->convert_valid_utf32_to_utf8(buf, len, utf8_buffer);
 1134|  2.56k|}
_ZN7simdutf22utf8_length_from_utf32EPKDim:
 1279|  5.13k|simdutf_warn_unused size_t utf8_length_from_utf32(const char32_t * input, size_t length) noexcept {
 1280|  5.13k|  return get_default_implementation()->utf8_length_from_utf32(input, length);
 1281|  5.13k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|   192k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|   192k|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|   192k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_15utf328validateEPKDim:
    9|  18.1k|inline simdutf_warn_unused bool validate(const char32_t *buf, size_t len) noexcept {
   10|  18.1k|  const uint32_t *data = reinterpret_cast<const uint32_t *>(buf);
   11|  18.1k|  uint64_t pos = 0;
   12|  93.4k|  for(;pos < len; pos++) {
  ------------------
  |  Branch (12:8): [True: 75.5k, False: 17.9k]
  ------------------
   13|  75.5k|    uint32_t word = data[pos];
   14|  75.5k|    if(word > 0x10FFFF || (word >= 0xD800 && word <= 0xDFFF)) {
  ------------------
  |  Branch (14:8): [True: 216, False: 75.2k]
  |  Branch (14:28): [True: 1.03k, False: 74.2k]
  |  Branch (14:46): [True: 6, False: 1.02k]
  ------------------
   15|    222|        return false;
   16|    222|    }
   17|  75.5k|  }
   18|  17.9k|  return true;
   19|  18.1k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_15utf3222utf8_length_from_utf32EPKDim:
   36|  5.13k|inline size_t utf8_length_from_utf32(const char32_t* buf, size_t len) {
   37|       |  // We are not BOM aware.
   38|  5.13k|  const uint32_t * p = reinterpret_cast<const uint32_t *>(buf);
   39|  5.13k|  size_t counter{0};
   40|  20.5k|  for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (40:21): [True: 15.4k, False: 5.13k]
  ------------------
   41|       |    // credit: @ttsugriy  for the vectorizable approach
   42|  15.4k|    counter++;                                      // ASCII
   43|  15.4k|    counter += static_cast<size_t>(p[i] > 0x7F);    // two-byte
   44|  15.4k|    counter += static_cast<size_t>(p[i] > 0x7FF);   // three-byte
   45|  15.4k|    counter += static_cast<size_t>(p[i] > 0xFFFF);  // four-bytes
   46|  15.4k|  }
   47|  5.13k|  return counter;
   48|  5.13k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf32_to_utf87convertEPKDimPc:
    9|  2.56k|inline size_t convert(const char32_t* buf, size_t len, char* utf8_output) {
   10|  2.56k|  const uint32_t *data = reinterpret_cast<const uint32_t *>(buf);
   11|  2.56k|  size_t pos = 0;
   12|  2.56k|  char* start{utf8_output};
   13|  17.8k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 15.3k, False: 2.56k]
  ------------------
   14|       |    // try to convert the next block of 2 ASCII characters
   15|  15.3k|    if (pos + 2 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 14.0k, False: 1.22k]
  ------------------
   16|  14.0k|      uint64_t v;
   17|  14.0k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  14.0k|      if ((v & 0xFFFFFF80FFFFFF80) == 0) {
  ------------------
  |  Branch (18:11): [True: 11.9k, False: 2.13k]
  ------------------
   19|  11.9k|        *utf8_output++ = char(buf[pos]);
   20|  11.9k|				*utf8_output++ = char(buf[pos+1]);
   21|  11.9k|        pos += 2;
   22|  11.9k|        continue;
   23|  11.9k|      }
   24|  14.0k|    }
   25|  3.35k|    uint32_t word = data[pos];
   26|  3.35k|    if((word & 0xFFFFFF80)==0) {
  ------------------
  |  Branch (26:8): [True: 1.66k, False: 1.69k]
  ------------------
   27|       |      // will generate one UTF-8 bytes
   28|  1.66k|      *utf8_output++ = char(word);
   29|  1.66k|      pos++;
   30|  1.69k|    } else if((word & 0xFFFFF800)==0) {
  ------------------
  |  Branch (30:15): [True: 1.17k, False: 518]
  ------------------
   31|       |      // will generate two UTF-8 bytes
   32|       |      // we have 0b110XXXXX 0b10XXXXXX
   33|  1.17k|      *utf8_output++ = char((word>>6) | 0b11000000);
   34|  1.17k|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
   35|  1.17k|      pos++;
   36|  1.17k|    } else if((word & 0xFFFF0000)==0) {
  ------------------
  |  Branch (36:15): [True: 336, False: 182]
  ------------------
   37|       |      // will generate three UTF-8 bytes
   38|       |      // we have 0b1110XXXX 0b10XXXXXX 0b10XXXXXX
   39|    336|			if (word >= 0xD800 && word <= 0xDFFF) { return 0; }
  ------------------
  |  Branch (39:8): [True: 152, False: 184]
  |  Branch (39:26): [True: 0, False: 152]
  ------------------
   40|    336|      *utf8_output++ = char((word>>12) | 0b11100000);
   41|    336|      *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
   42|    336|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
   43|    336|      pos++;
   44|    336|    } else {
   45|       |      // will generate four UTF-8 bytes
   46|       |      // we have 0b11110XXX 0b10XXXXXX 0b10XXXXXX 0b10XXXXXX
   47|    182|			if (word > 0x10FFFF) { return 0; }
  ------------------
  |  Branch (47:8): [True: 0, False: 182]
  ------------------
   48|    182|      *utf8_output++ = char((word>>18) | 0b11110000);
   49|    182|      *utf8_output++ = char(((word>>12) & 0b111111) | 0b10000000);
   50|    182|      *utf8_output++ = char(((word>>6) & 0b111111) | 0b10000000);
   51|    182|      *utf8_output++ = char((word & 0b111111) | 0b10000000);
   52|    182|      pos ++;
   53|    182|    }
   54|  3.35k|  }
   55|  2.56k|  return utf8_output - start;
   56|  2.56k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|   192k|inline size_t count_code_points(const char* buf, size_t len) {
  169|   192k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|   192k|    size_t counter{0};
  171|   528k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 336k, False: 192k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|   336k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 320k, False: 16.1k]
  ------------------
  174|   336k|    }
  175|   192k|    return counter;
  176|   192k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   447k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   447k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   447k|  size_t pos = 0;
   12|   447k|  char32_t* start{utf32_output};
   13|   859k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 447k, False: 412k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   447k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 447k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   447k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   447k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 374k, False: 72.3k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|   374k|      *utf32_output++ = char32_t(leading_byte);
   34|   374k|      pos++;
   35|   374k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 42.3k, False: 29.9k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  42.3k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 42.3k]
  ------------------
   38|  42.3k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 11.6k, False: 30.7k]
  ------------------
   39|       |      // range check
   40|  30.7k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  30.7k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 3.23k, False: 27.5k]
  |  Branch (41:32): [True: 0, False: 27.5k]
  ------------------
   42|  27.5k|      *utf32_output++ = char32_t(code_point);
   43|  27.5k|      pos += 2;
   44|  29.9k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 22.5k, False: 7.41k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  22.5k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 22.5k]
  ------------------
   47|       |
   48|  22.5k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 7.22k, False: 15.3k]
  ------------------
   49|  15.3k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 1.54k, False: 13.8k]
  ------------------
   50|       |      // range check
   51|  13.8k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  13.8k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  13.8k|                   (data[pos + 2] & 0b00111111);
   54|  13.8k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 1.35k, False: 12.4k]
  |  Branch (54:33): [True: 0, False: 12.4k]
  ------------------
   55|  13.8k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 5.90k, False: 6.55k]
  |  Branch (55:35): [True: 2.92k, False: 2.97k]
  ------------------
   56|  4.28k|        return 0;
   57|  4.28k|      }
   58|  9.53k|      *utf32_output++ = char32_t(code_point);
   59|  9.53k|      pos += 3;
   60|  9.53k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 7.41k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  7.41k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 7.41k]
  ------------------
   63|  7.41k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 4.74k, False: 2.66k]
  ------------------
   64|  2.66k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 718, False: 1.95k]
  ------------------
   65|  1.95k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 388, False: 1.56k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.56k|      uint32_t code_point =
   69|  1.56k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.56k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.56k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 778, False: 784]
  |  Branch (71:35): [True: 280, False: 504]
  ------------------
   72|    504|      *utf32_output++ = char32_t(code_point);
   73|    504|      pos += 4;
   74|    504|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   447k|  }
   78|   412k|  return utf32_output - start;
   79|   447k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3219convert_with_errorsEPKcmPDi:
   81|  31.2k|inline result convert_with_errors(const char* buf, size_t len, char32_t* utf32_output) {
   82|  31.2k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   83|  31.2k|  size_t pos = 0;
   84|  31.2k|  char32_t* start{utf32_output};
   85|   262k|  while (pos < len) {
  ------------------
  |  Branch (85:10): [True: 242k, False: 19.5k]
  ------------------
   86|       |    // try to convert the next block of 16 ASCII bytes
   87|   242k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (87:9): [True: 67.0k, False: 175k]
  ------------------
   88|  67.0k|      uint64_t v1;
   89|  67.0k|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   90|  67.0k|      uint64_t v2;
   91|  67.0k|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   92|  67.0k|      uint64_t v{v1 | v2};
   93|  67.0k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (93:11): [True: 9.40k, False: 57.6k]
  ------------------
   94|  9.40k|        size_t final_pos = pos + 16;
   95|   159k|        while(pos < final_pos) {
  ------------------
  |  Branch (95:15): [True: 150k, False: 9.40k]
  ------------------
   96|   150k|          *utf32_output++ = char32_t(buf[pos]);
   97|   150k|          pos++;
   98|   150k|        }
   99|  9.40k|        continue;
  100|  9.40k|      }
  101|  67.0k|    }
  102|   233k|    uint8_t leading_byte = data[pos]; // leading byte
  103|   233k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (103:9): [True: 199k, False: 33.6k]
  ------------------
  104|       |      // converting one ASCII byte !!!
  105|   199k|      *utf32_output++ = char32_t(leading_byte);
  106|   199k|      pos++;
  107|   199k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (107:16): [True: 23.2k, False: 10.3k]
  ------------------
  108|       |      // We have a two-byte UTF-8
  109|  23.2k|      if(pos + 1 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (109:10): [True: 1.24k, False: 22.0k]
  ------------------
  110|  22.0k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (110:11): [True: 1.44k, False: 20.6k]
  ------------------
  111|       |      // range check
  112|  20.6k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
  113|  20.6k|      if (code_point < 0x80 || 0x7ff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (113:11): [True: 1.17k, False: 19.4k]
  |  Branch (113:32): [True: 0, False: 19.4k]
  ------------------
  114|  19.4k|      *utf32_output++ = char32_t(code_point);
  115|  19.4k|      pos += 2;
  116|  19.4k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (116:16): [True: 4.18k, False: 6.13k]
  ------------------
  117|       |      // We have a three-byte UTF-8
  118|  4.18k|      if(pos + 2 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (118:10): [True: 126, False: 4.05k]
  ------------------
  119|       |
  120|  4.05k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (120:11): [True: 564, False: 3.49k]
  ------------------
  121|  3.49k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (121:11): [True: 672, False: 2.82k]
  ------------------
  122|       |      // range check
  123|  2.82k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
  124|  2.82k|                   (data[pos + 1] & 0b00111111) << 6 |
  125|  2.82k|                   (data[pos + 2] & 0b00111111);
  126|  2.82k|      if (code_point < 0x800 || 0xffff < code_point) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (126:11): [True: 768, False: 2.05k]
  |  Branch (126:33): [True: 0, False: 2.05k]
  ------------------
  127|  2.05k|      if (0xd7ff < code_point && code_point < 0xe000) { return result(error_code::SURROGATE, pos); }
  ------------------
  |  Branch (127:11): [True: 1.23k, False: 816]
  |  Branch (127:34): [True: 708, False: 528]
  ------------------
  128|  1.34k|      *utf32_output++ = char32_t(code_point);
  129|  1.34k|      pos += 3;
  130|  6.13k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (130:16): [True: 3.24k, False: 2.89k]
  ------------------
  131|       |      // we have a 4-byte UTF-8 word.
  132|  3.24k|      if(pos + 3 >= len) { return result(error_code::TOO_SHORT, pos); } // minimal bound checking
  ------------------
  |  Branch (132:10): [True: 126, False: 3.11k]
  ------------------
  133|  3.11k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos);}
  ------------------
  |  Branch (133:11): [True: 756, False: 2.35k]
  ------------------
  134|  2.35k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (134:11): [True: 474, False: 1.88k]
  ------------------
  135|  1.88k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return result(error_code::TOO_SHORT, pos); }
  ------------------
  |  Branch (135:11): [True: 90, False: 1.79k]
  ------------------
  136|       |
  137|       |      // range check
  138|  1.79k|      uint32_t code_point =
  139|  1.79k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
  140|  1.79k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
  141|  1.79k|      if (code_point <= 0xffff) { return result(error_code::OVERLONG, pos); }
  ------------------
  |  Branch (141:11): [True: 540, False: 1.25k]
  ------------------
  142|  1.25k|      if (0x10ffff < code_point) { return result(error_code::TOO_LARGE, pos); }
  ------------------
  |  Branch (142:11): [True: 72, False: 1.18k]
  ------------------
  143|  1.18k|      *utf32_output++ = char32_t(code_point);
  144|  1.18k|      pos += 4;
  145|  2.89k|    } else {
  146|       |      // we either have too many continuation bytes or an invalid leading byte
  147|  2.89k|      if ((leading_byte & 0b11000000) == 0b10000000) { return result(error_code::TOO_LONG, pos); }
  ------------------
  |  Branch (147:11): [True: 1.80k, False: 1.09k]
  ------------------
  148|  1.09k|      else { return result(error_code::HEADER_BITS, pos); }
  149|  2.89k|    }
  150|   233k|  }
  151|  19.5k|  return result(error_code::SUCCESS, utf32_output - start);
  152|  31.2k|}
simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3230rewind_and_convert_with_errorsEmPKcmPDi:
  167|  32.9k|inline result rewind_and_convert_with_errors(size_t prior_bytes, const char* buf, size_t len, char32_t* utf32_output) {
  168|  32.9k|  size_t extra_len{0};
  169|       |  // We potentially need to go back in time and find a leading byte.
  170|  32.9k|  size_t how_far_back = 3; // 3 bytes in the past + current position
  171|  32.9k|  if(how_far_back > prior_bytes) { how_far_back = prior_bytes; }
  ------------------
  |  Branch (171:6): [True: 32.9k, False: 0]
  ------------------
  172|  32.9k|  bool found_leading_bytes{false};
  173|       |  // important: it is i <= how_far_back and not 'i < how_far_back'.
  174|  34.6k|  for(size_t i = 0; i <= how_far_back; i++) {
  ------------------
  |  Branch (174:21): [True: 32.9k, False: 1.69k]
  ------------------
  175|  32.9k|    unsigned char byte = buf[0-i];
  176|  32.9k|    found_leading_bytes = ((byte & 0b11000000) != 0b10000000);
  177|  32.9k|    if(found_leading_bytes) {
  ------------------
  |  Branch (177:8): [True: 31.2k, False: 1.69k]
  ------------------
  178|  31.2k|      buf -= i;
  179|  31.2k|      extra_len = i;
  180|  31.2k|      break;
  181|  31.2k|    }
  182|  32.9k|  }
  183|       |  //
  184|       |  // It is possible for this function to return a negative count in its result.
  185|       |  // C++ Standard Section 18.1 defines size_t is in <cstddef> which is described in C Standard as <stddef.h>.
  186|       |  // C Standard Section 4.1.5 defines size_t as an unsigned integral type of the result of the sizeof operator
  187|       |  //
  188|       |  // An unsigned type will simply wrap round arithmetically (well defined).
  189|       |  //
  190|  32.9k|  if(!found_leading_bytes) {
  ------------------
  |  Branch (190:6): [True: 1.69k, False: 31.2k]
  ------------------
  191|       |    // If how_far_back == 3, we may have four consecutive continuation bytes!!!
  192|       |    // [....] [continuation] [continuation] [continuation] | [buf is continuation]
  193|       |    // Or we possibly have a stream that does not start with a leading byte.
  194|  1.69k|    return result(error_code::TOO_LONG, 0-how_far_back);
  195|  1.69k|  }
  196|       |
  197|  31.2k|  result res = convert_with_errors(buf, len + extra_len, utf32_output);
  198|  31.2k|  if (res.error) {
  ------------------
  |  Branch (198:7): [True: 11.6k, False: 19.5k]
  ------------------
  199|  11.6k|    res.count -= extra_len;
  200|  11.6k|  }
  201|  31.2k|  return res;
  202|  32.9k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  14.9k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  14.9k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  14.9k|  size_t pos = 0;
   12|  14.9k|  char32_t* start{utf32_output};
   13|  65.8k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 50.8k, False: 14.9k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  50.8k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 22.6k, False: 28.2k]
  ------------------
   16|  22.6k|      uint64_t v;
   17|  22.6k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  22.6k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 12.2k, False: 10.3k]
  ------------------
   19|  12.2k|        size_t final_pos = pos + 8;
   20|   110k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 97.8k, False: 12.2k]
  ------------------
   21|  97.8k|          *utf32_output++ = char32_t(buf[pos]);
   22|  97.8k|          pos++;
   23|  97.8k|        }
   24|  12.2k|        continue;
   25|  12.2k|      }
   26|  22.6k|    }
   27|  38.6k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  38.6k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 25.9k, False: 12.7k]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  25.9k|      *utf32_output++ = char32_t(leading_byte);
   31|  25.9k|      pos++;
   32|  25.9k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 9.72k, False: 3.01k]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|  9.72k|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 9.72k]
  ------------------
   35|  9.72k|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|  9.72k|      pos += 2;
   37|  9.72k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 2.21k, False: 802]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|  2.21k|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 2.21k]
  ------------------
   40|  2.21k|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|  2.21k|      pos += 3;
   42|  2.21k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 802, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|    802|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 802]
  ------------------
   45|    802|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|    802|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|    802|      *utf32_output++ = char32_t(code_word);
   48|    802|      pos += 4;
   49|    802|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  38.6k|  }
   54|  14.9k|  return utf32_output - start;
   55|  14.9k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|   200k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|   200k|  return _popcnt64(input_num);
   16|   200k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|   776k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|   776k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|   776k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|   776k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|   291k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|   667k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|   667k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|   667k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  6.94M|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  6.94M|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  6.94M|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  6.94M|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|   291k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|   291k|      return this->chunks[0] | this->chunks[1];
  297|   291k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  1.09M|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|  9.60M|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|   291k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|   635k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|   170k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   170k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   170k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|   341k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|   512k|        L replace12, L replace13, L replace14, L replace15) const {
  139|   512k|      return lookup_16(simd8<L>::repeat_16(
  140|   512k|        replace0,  replace1,  replace2,  replace3,
  141|   512k|        replace4,  replace5,  replace6,  replace7,
  142|   512k|        replace8,  replace9,  replace10, replace11,
  143|   512k|        replace12, replace13, replace14, replace15
  144|   512k|      ));
  145|   512k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|   512k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|   512k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|   512k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|   683k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|   512k|    ) {
  218|   512k|      return simd8<uint8_t>(
  219|   512k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|   512k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|   512k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|   512k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|   512k|      );
  224|   512k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|   512k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  1.02M|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  1.50M|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  1.50M|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|   170k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   170k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   170k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|   170k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|   170k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|   170k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|   426k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|   200k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|   200k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|   200k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|   170k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|   170k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  85.2k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  85.2k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   738k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   738k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  21.3k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  42.6k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  42.6k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  42.6k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  67.3k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  67.3k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  67.3k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  67.3k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  9.86k|    simdutf_really_inline bool is_ascii() const {
  300|  9.86k|      return this->reduce_or().is_ascii();
  301|  9.86k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  9.86k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  9.86k|      return this->chunks[0] | this->chunks[1];
  297|  9.86k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  9.86k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|   139k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  9.86k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEcvNS3_IhEEEv:
  262|    648|  simdutf_really_inline simd8<int8_t>::operator simd8<uint8_t>() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|  3.32k|    simdutf_really_inline uint64_t lt(const T m) const {
  363|  3.32k|      const simd8<T> mask = simd8<T>::splat(m);
  364|  3.32k|      return  simd8x64<bool>(
  365|  3.32k|        this->chunks[0] < mask,
  366|  3.32k|        this->chunks[1] < mask
  367|  3.32k|      ).to_bitmask();
  368|  3.32k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  14.7k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  6.65k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  14.7k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  14.7k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  14.7k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  14.7k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  14.7k|      return r_lo | (r_hi << 32);
  287|  14.7k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  29.5k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  29.5k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  6.31k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  6.31k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  6.31k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  6.31k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  12.6k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  12.6k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  12.6k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  12.6k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  12.6k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  12.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  11.4k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  11.4k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  11.4k|      return  simd8x64<bool>(
  373|  11.4k|        this->chunks[0] > mask,
  374|  11.4k|        this->chunks[1] > mask
  375|  11.4k|      ).to_bitmask();
  376|  11.4k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  22.9k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJcEEEvv:
  386|  9.24k|{
  387|  9.24k|    static_assert(
  388|  9.24k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  9.24k|        "Scan argument types must be default constructible");
  390|  9.24k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  9.24k|                  "Scan argument types must be Destructible");
  392|  9.24k|    static_assert(
  393|  9.24k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  9.24k|        "Scan argument types must not be references");
  395|  9.24k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2EONSt3__15tupleIJcEEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJcEE15make_data_arrayIJcEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERc:
  245|  9.24k|    {
  246|  9.24k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (246:23): [Folded - Ignored]
  |  Branch (246:23): [Folded - Ignored]
  ------------------
  247|  9.24k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (247:23): [Folded - Ignored]
  ------------------
  248|  9.24k|            return val;
  249|  9.24k|        }
  250|  9.24k|        else if constexpr (is_type_disabled<char_type>) {
  251|  9.24k|            return unscannable_disabled{val};
  252|  9.24k|        }
  253|  9.24k|        else {
  254|  9.24k|            SCN_UNUSED(val);
  255|  9.24k|            return unscannable_char{};
  256|  9.24k|        }
  257|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRcEEDaOT_:
  340|  9.24k|{
  341|  9.24k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  9.24k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  9.24k|    constexpr bool scannable_char =
  345|  9.24k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  9.24k|    static_assert(scannable_char,
  347|  9.24k|                  "Cannot scan an argument of an unsupported character "
  348|  9.24k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  9.24k|    constexpr bool scannable_const =
  351|  9.24k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  9.24k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  9.24k|    constexpr bool scannable_disabled =
  355|  9.24k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  9.24k|    static_assert(scannable_disabled,
  357|  9.24k|                  "Cannot scan an argument that has been disabled by "
  358|  9.24k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  9.24k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  9.24k|    static_assert(
  362|  9.24k|        scannable,
  363|  9.24k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  9.24k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  9.24k|    return arg_value{arg};
  367|  9.24k|}
_ZN3scn2v26detail9arg_valueC2IcEERT_:
  159|  9.24k|    {
  160|  9.24k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  83.1k|    {
  694|  83.1k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
  553|    206|    {
  554|    206|        return m_args;
  555|    206|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  25.1k|{
  387|  25.1k|    static_assert(
  388|  25.1k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  25.1k|        "Scan argument types must be default constructible");
  390|  25.1k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  25.1k|                  "Scan argument types must be Destructible");
  392|  25.1k|    static_assert(
  393|  25.1k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  25.1k|        "Scan argument types must not be references");
  395|  25.1k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|  9.24k|    {                                                                        \
  217|  9.24k|        return val;                                                          \
  218|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  25.1k|{
  341|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  25.1k|    constexpr bool scannable_char =
  345|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  25.1k|    static_assert(scannable_char,
  347|  25.1k|                  "Cannot scan an argument of an unsupported character "
  348|  25.1k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  25.1k|    constexpr bool scannable_const =
  351|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  25.1k|    constexpr bool scannable_disabled =
  355|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  25.1k|    static_assert(scannable_disabled,
  357|  25.1k|                  "Cannot scan an argument that has been disabled by "
  358|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  25.1k|    static_assert(
  362|  25.1k|        scannable,
  363|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  25.1k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  25.1k|    return arg_value{arg};
  367|  25.1k|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  25.1k|    {
  160|  25.1k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  25.1k|{
  387|  25.1k|    static_assert(
  388|  25.1k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  25.1k|        "Scan argument types must be default constructible");
  390|  25.1k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  25.1k|                  "Scan argument types must be Destructible");
  392|  25.1k|    static_assert(
  393|  25.1k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  25.1k|        "Scan argument types must not be references");
  395|  25.1k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|  9.24k|    {                                                                        \
  217|  9.24k|        return val;                                                          \
  218|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  25.1k|{
  341|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  25.1k|    constexpr bool scannable_char =
  345|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  25.1k|    static_assert(scannable_char,
  347|  25.1k|                  "Cannot scan an argument of an unsupported character "
  348|  25.1k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  25.1k|    constexpr bool scannable_const =
  351|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  25.1k|    constexpr bool scannable_disabled =
  355|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  25.1k|    static_assert(scannable_disabled,
  357|  25.1k|                  "Cannot scan an argument that has been disabled by "
  358|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  25.1k|    static_assert(
  362|  25.1k|        scannable,
  363|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  25.1k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  25.1k|    return arg_value{arg};
  367|  25.1k|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  25.1k|    {
  160|  25.1k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJdEEEvv:
  386|  25.1k|{
  387|  25.1k|    static_assert(
  388|  25.1k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  25.1k|        "Scan argument types must be default constructible");
  390|  25.1k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  25.1k|                  "Scan argument types must be Destructible");
  392|  25.1k|    static_assert(
  393|  25.1k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  25.1k|        "Scan argument types must not be references");
  395|  25.1k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2EONSt3__15tupleIJdEEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERd:
  216|  9.24k|    {                                                                        \
  217|  9.24k|        return val;                                                          \
  218|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRdEEDaOT_:
  340|  25.1k|{
  341|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  25.1k|    constexpr bool scannable_char =
  345|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  25.1k|    static_assert(scannable_char,
  347|  25.1k|                  "Cannot scan an argument of an unsupported character "
  348|  25.1k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  25.1k|    constexpr bool scannable_const =
  351|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  25.1k|    constexpr bool scannable_disabled =
  355|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  25.1k|    static_assert(scannable_disabled,
  357|  25.1k|                  "Cannot scan an argument that has been disabled by "
  358|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  25.1k|    static_assert(
  362|  25.1k|        scannable,
  363|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  25.1k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  25.1k|    return arg_value{arg};
  367|  25.1k|}
_ZN3scn2v26detail9arg_valueC2IdEERT_:
  159|  25.1k|    {
  160|  25.1k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJbEEEvv:
  386|  25.1k|{
  387|  25.1k|    static_assert(
  388|  25.1k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  25.1k|        "Scan argument types must be default constructible");
  390|  25.1k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  25.1k|                  "Scan argument types must be Destructible");
  392|  25.1k|    static_assert(
  393|  25.1k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  25.1k|        "Scan argument types must not be references");
  395|  25.1k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2EONSt3__15tupleIJbEEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJbEE15make_data_arrayIJbEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERb:
  216|  9.24k|    {                                                                        \
  217|  9.24k|        return val;                                                          \
  218|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRbEEDaOT_:
  340|  25.1k|{
  341|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  25.1k|    constexpr bool scannable_char =
  345|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  25.1k|    static_assert(scannable_char,
  347|  25.1k|                  "Cannot scan an argument of an unsupported character "
  348|  25.1k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  25.1k|    constexpr bool scannable_const =
  351|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  25.1k|    constexpr bool scannable_disabled =
  355|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  25.1k|    static_assert(scannable_disabled,
  357|  25.1k|                  "Cannot scan an argument that has been disabled by "
  358|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  25.1k|    static_assert(
  362|  25.1k|        scannable,
  363|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  25.1k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  25.1k|    return arg_value{arg};
  367|  25.1k|}
_ZN3scn2v26detail9arg_valueC2IbEERT_:
  159|  25.1k|    {
  160|  25.1k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJPvEEEvv:
  386|  25.1k|{
  387|  25.1k|    static_assert(
  388|  25.1k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  25.1k|        "Scan argument types must be default constructible");
  390|  25.1k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  25.1k|                  "Scan argument types must be Destructible");
  392|  25.1k|    static_assert(
  393|  25.1k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  25.1k|        "Scan argument types must not be references");
  395|  25.1k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2EONSt3__15tupleIJS4_EEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE15make_data_arrayIJS4_EEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERPv:
  216|  9.24k|    {                                                                        \
  217|  9.24k|        return val;                                                          \
  218|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRPvEEDaOT_:
  340|  25.1k|{
  341|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  25.1k|    constexpr bool scannable_char =
  345|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  25.1k|    static_assert(scannable_char,
  347|  25.1k|                  "Cannot scan an argument of an unsupported character "
  348|  25.1k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  25.1k|    constexpr bool scannable_const =
  351|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  25.1k|    constexpr bool scannable_disabled =
  355|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  25.1k|    static_assert(scannable_disabled,
  357|  25.1k|                  "Cannot scan an argument that has been disabled by "
  358|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  25.1k|    static_assert(
  362|  25.1k|        scannable,
  363|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  25.1k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  25.1k|    return arg_value{arg};
  367|  25.1k|}
_ZN3scn2v26detail9arg_valueC2IPvEERT_:
  159|  25.1k|    {
  160|  25.1k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
  386|  25.1k|{
  387|  25.1k|    static_assert(
  388|  25.1k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  25.1k|        "Scan argument types must be default constructible");
  390|  25.1k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  25.1k|                  "Scan argument types must be Destructible");
  392|  25.1k|    static_assert(
  393|  25.1k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  25.1k|        "Scan argument types must not be references");
  395|  25.1k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEvEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  216|  9.24k|    {                                                                        \
  217|  9.24k|        return val;                                                          \
  218|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
  340|  25.1k|{
  341|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  25.1k|    constexpr bool scannable_char =
  345|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  25.1k|    static_assert(scannable_char,
  347|  25.1k|                  "Cannot scan an argument of an unsupported character "
  348|  25.1k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  25.1k|    constexpr bool scannable_const =
  351|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  25.1k|    constexpr bool scannable_disabled =
  355|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  25.1k|    static_assert(scannable_disabled,
  357|  25.1k|                  "Cannot scan an argument that has been disabled by "
  358|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  25.1k|    static_assert(
  362|  25.1k|        scannable,
  363|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  25.1k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  25.1k|    return arg_value{arg};
  367|  25.1k|}
_ZN3scn2v26detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
  159|  25.1k|    {
  160|  25.1k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE4argsEv:
  553|  1.03k|    {
  554|  1.03k|        return m_args;
  555|  1.03k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
  386|  25.1k|{
  387|  25.1k|    static_assert(
  388|  25.1k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  25.1k|        "Scan argument types must be default constructible");
  390|  25.1k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  25.1k|                  "Scan argument types must be Destructible");
  392|  25.1k|    static_assert(
  393|  25.1k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  25.1k|        "Scan argument types must not be references");
  395|  25.1k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEvEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
  216|  9.24k|    {                                                                        \
  217|  9.24k|        return val;                                                          \
  218|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
  340|  25.1k|{
  341|  25.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  25.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  25.1k|    constexpr bool scannable_char =
  345|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  25.1k|    static_assert(scannable_char,
  347|  25.1k|                  "Cannot scan an argument of an unsupported character "
  348|  25.1k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  25.1k|    constexpr bool scannable_const =
  351|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  25.1k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  25.1k|    constexpr bool scannable_disabled =
  355|  25.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  25.1k|    static_assert(scannable_disabled,
  357|  25.1k|                  "Cannot scan an argument that has been disabled by "
  358|  25.1k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  25.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  25.1k|    static_assert(
  362|  25.1k|        scannable,
  363|  25.1k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  25.1k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  25.1k|    return arg_value{arg};
  367|  25.1k|}
_ZN3scn2v26detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
  159|  25.1k|    {
  160|  25.1k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE4argsEv:
  553|  1.03k|    {
  554|  1.03k|        return m_args;
  555|  1.03k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  9.24k|{
  619|  9.24k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  9.24k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  9.24k|    static_cast<    \
  |  |  247|  9.24k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  9.24k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
  386|  9.24k|{
  387|  9.24k|    static_assert(
  388|  9.24k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  9.24k|        "Scan argument types must be default constructible");
  390|  9.24k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  9.24k|                  "Scan argument types must be Destructible");
  392|  9.24k|    static_assert(
  393|  9.24k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  9.24k|        "Scan argument types must not be references");
  395|  9.24k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEC2EONS4_5tupleIJS8_EEE:
  563|  9.24k|    {
  564|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEE15make_data_arrayIJS8_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  9.24k|    {
  574|  9.24k|        return {
  575|  9.24k|            detail::make_arg<base::is_packed, Context,
  576|  9.24k|                             detail::mapped_type_constant<
  577|  9.24k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  9.24k|                args)...};
  579|  9.24k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEvEENS1_9arg_valueERT2_:
  414|  9.24k|{
  415|  9.24k|    return make_value<Context>(value);
  416|  9.24k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
  371|  9.24k|{
  372|  9.24k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  9.24k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  9.24k|                                  needs_context_tag>) {
  376|  9.24k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  9.24k|    }
  378|  9.24k|    else {
  379|  9.24k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  9.24k|            value, context_tag<Context>{}));
  381|  9.24k|    }
  382|  9.24k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  216|  9.24k|    {                                                                        \
  217|  9.24k|        return val;                                                          \
  218|  9.24k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
  340|  9.24k|{
  341|  9.24k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  9.24k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  9.24k|    constexpr bool scannable_char =
  345|  9.24k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  9.24k|    static_assert(scannable_char,
  347|  9.24k|                  "Cannot scan an argument of an unsupported character "
  348|  9.24k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  9.24k|    constexpr bool scannable_const =
  351|  9.24k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  9.24k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  9.24k|    constexpr bool scannable_disabled =
  355|  9.24k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  9.24k|    static_assert(scannable_disabled,
  357|  9.24k|                  "Cannot scan an argument that has been disabled by "
  358|  9.24k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  9.24k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  9.24k|    static_assert(
  362|  9.24k|        scannable,
  363|  9.24k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  9.24k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  9.24k|    return arg_value{arg};
  367|  9.24k|}
_ZN3scn2v26detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
  159|  9.24k|    {
  160|  9.24k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  9.24k|    {
  647|  9.24k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEE4argsEv:
  553|  1.03k|    {
  554|  1.03k|        return m_args;
  555|  1.03k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v26detail20check_scan_arg_typesIJwEEEvv:
  386|  15.9k|{
  387|  15.9k|    static_assert(
  388|  15.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  15.9k|        "Scan argument types must be default constructible");
  390|  15.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  15.9k|                  "Scan argument types must be Destructible");
  392|  15.9k|    static_assert(
  393|  15.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  15.9k|        "Scan argument types must not be references");
  395|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2EONSt3__15tupleIJwEEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJwEE15make_data_arrayIJwEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERw:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v26detail15make_value_implIRwEEDaOT_:
  340|  15.9k|{
  341|  15.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  15.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  15.9k|    constexpr bool scannable_char =
  345|  15.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  15.9k|    static_assert(scannable_char,
  347|  15.9k|                  "Cannot scan an argument of an unsupported character "
  348|  15.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  15.9k|    constexpr bool scannable_const =
  351|  15.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  15.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  15.9k|    constexpr bool scannable_disabled =
  355|  15.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  15.9k|    static_assert(scannable_disabled,
  357|  15.9k|                  "Cannot scan an argument that has been disabled by "
  358|  15.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  15.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  15.9k|    static_assert(
  362|  15.9k|        scannable,
  363|  15.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  15.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  15.9k|    return arg_value{arg};
  367|  15.9k|}
_ZN3scn2v26detail9arg_valueC2IwEERT_:
  159|  15.9k|    {
  160|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|   143k|    {
  694|   143k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
  553|    238|    {
  554|    238|        return m_args;
  555|    238|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2EONSt3__15tupleIJdEEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJdEE15make_data_arrayIJdEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERd:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2EONSt3__15tupleIJbEEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJbEE15make_data_arrayIJbEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERb:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2EONSt3__15tupleIJS4_EEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE15make_data_arrayIJS4_EEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERPv:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEvEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEE4argsEv:
  553|  1.06k|    {
  554|  1.06k|        return m_args;
  555|  1.06k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEC2EONS4_5tupleIJSA_EEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE15make_data_arrayIJSA_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEvEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEE4argsEv:
  553|  1.06k|    {
  554|  1.06k|        return m_args;
  555|  1.06k|    }
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDaONS4_5tupleIJDpT0_EEE:
  618|  15.9k|{
  619|  15.9k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  15.9k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  15.9k|    static_cast<    \
  |  |  247|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  15.9k|}
_ZN3scn2v26detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
  386|  15.9k|{
  387|  15.9k|    static_assert(
  388|  15.9k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  15.9k|        "Scan argument types must be default constructible");
  390|  15.9k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  15.9k|                  "Scan argument types must be Destructible");
  392|  15.9k|    static_assert(
  393|  15.9k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  15.9k|        "Scan argument types must not be references");
  395|  15.9k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEC2EONS4_5tupleIJS8_EEE:
  563|  15.9k|    {
  564|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEE15make_data_arrayIJS8_EEENS4_5arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  15.9k|    {
  574|  15.9k|        return {
  575|  15.9k|            detail::make_arg<base::is_packed, Context,
  576|  15.9k|                             detail::mapped_type_constant<
  577|  15.9k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  15.9k|                args)...};
  579|  15.9k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEvEENS1_9arg_valueERT2_:
  414|  15.9k|{
  415|  15.9k|    return make_value<Context>(value);
  416|  15.9k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
  371|  15.9k|{
  372|  15.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  15.9k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  15.9k|                                  needs_context_tag>) {
  376|  15.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  15.9k|    }
  378|  15.9k|    else {
  379|  15.9k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  15.9k|            value, context_tag<Context>{}));
  381|  15.9k|    }
  382|  15.9k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  216|  15.9k|    {                                                                        \
  217|  15.9k|        return val;                                                          \
  218|  15.9k|    }
_ZN3scn2v26detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
  340|  15.9k|{
  341|  15.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  15.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  15.9k|    constexpr bool scannable_char =
  345|  15.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  15.9k|    static_assert(scannable_char,
  347|  15.9k|                  "Cannot scan an argument of an unsupported character "
  348|  15.9k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  15.9k|    constexpr bool scannable_const =
  351|  15.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  15.9k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  15.9k|    constexpr bool scannable_disabled =
  355|  15.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  15.9k|    static_assert(scannable_disabled,
  357|  15.9k|                  "Cannot scan an argument that has been disabled by "
  358|  15.9k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  15.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  15.9k|    static_assert(
  362|  15.9k|        scannable,
  363|  15.9k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  15.9k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  15.9k|    return arg_value{arg};
  367|  15.9k|}
_ZN3scn2v26detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
  159|  15.9k|    {
  160|  15.9k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  15.9k|    {
  647|  15.9k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEE4argsEv:
  553|  1.06k|    {
  554|  1.06k|        return m_args;
  555|  1.06k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  83.1k|    {
  682|  83.1k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.1k]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  83.1k|        return static_cast<std::size_t>(m_desc &
  687|  83.1k|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  83.1k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|   163k|    {
  702|   163k|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|   163k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  80.6k|    {
  655|  80.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 80.6k]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  80.6k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 90, False: 80.6k]
  |  |  ------------------
  ------------------
  663|     90|            return {};
  664|     90|        }
  665|       |
  666|  80.6k|        const auto t = type(id);
  667|  80.6k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.72k, False: 78.8k]
  |  |  ------------------
  ------------------
  668|  1.72k|            return {};
  669|  1.72k|        }
  670|       |
  671|  78.8k|        basic_scan_arg<Context> arg;
  672|  78.8k|        arg.m_type = t;
  673|  78.8k|        arg.m_value = m_values[id];
  674|  78.8k|        return arg;
  675|  80.6k|    }
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  80.6k|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|   143k|        arg_value() = default;
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  80.6k|    {
  707|       |        // First (0th) index is size, types start after that
  708|  80.6k|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  80.6k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  80.6k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  80.6k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|   156k|    {
  483|   156k|        return m_type != detail::arg_type::none_type;
  484|   156k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|   140k|    {
  488|   140k|        return m_type;
  489|   140k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|   143k|    {
  682|   143k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 143k]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|   143k|        return static_cast<std::size_t>(m_desc &
  687|   143k|                                        ((1 << detail::packed_arg_bits) - 1));
  688|   143k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|   205k|    {
  702|   205k|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|   205k|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  62.3k|    {
  655|  62.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 62.3k]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  62.3k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 104, False: 62.2k]
  |  |  ------------------
  ------------------
  663|    104|            return {};
  664|    104|        }
  665|       |
  666|  62.2k|        const auto t = type(id);
  667|  62.2k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.43k, False: 60.8k]
  |  |  ------------------
  ------------------
  668|  1.43k|            return {};
  669|  1.43k|        }
  670|       |
  671|  60.8k|        basic_scan_arg<Context> arg;
  672|  60.8k|        arg.m_type = t;
  673|  60.8k|        arg.m_value = m_values[id];
  674|  60.8k|        return arg;
  675|  62.2k|    }
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  62.3k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  62.2k|    {
  707|       |        // First (0th) index is size, types start after that
  708|  62.2k|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  62.2k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  62.2k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  62.2k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|   120k|    {
  483|   120k|        return m_type != detail::arg_type::none_type;
  484|   120k|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|   107k|    {
  488|   107k|        return m_type;
  489|   107k|    }

_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  83.1k|    {
   60|  83.1k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  80.6k|    {
   43|  80.6k|        return m_args.get(id);
   44|  80.6k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
   47|  10.4k|    {
   48|  10.4k|        return m_args;
   49|  10.4k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  76.9k|    {
   53|  76.9k|        return m_locale;
   54|  76.9k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|   143k|    {
   60|   143k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  62.3k|    {
   43|  62.3k|        return m_args.get(id);
   44|  62.3k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
   47|  8.35k|    {
   48|  8.35k|        return m_args;
   49|  8.35k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  58.7k|    {
   53|  58.7k|        return m_locale;
   54|  58.7k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|   267k|    {
   69|   267k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|   267k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|   267k|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  5.52M|    {
   75|  5.52M|        return m_code == good;
   76|  5.52M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   115k|    {
   86|   115k|        return m_code;
   87|   115k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   115k|{
  111|   115k|    return a.code() == b;
  112|   115k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   115k|{
  116|   115k|    return !(a == b);
  117|   115k|}
_ZN3scn2v210scan_errorC2Ev:
   62|   421k|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  83.1k|{
  385|  83.1k|    return s;
  386|  83.1k|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  83.1k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
  674|  9.24k|    {
  675|  9.24k|        return m_str;
  676|  9.24k|    }
_ZN3scn2v224basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  9.24k|    {
  671|  9.24k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|   143k|{
  390|   143k|    return s;
  391|   143k|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|   143k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
  674|  15.9k|    {
  675|  15.9k|        return m_str;
  676|  15.9k|    }
_ZN3scn2v224basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  15.9k|    {
  671|  15.9k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  5.31k|    {
  196|  5.31k|        SCN_GCC_COMPAT_PUSH
  197|  5.31k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  5.31k|        switch (type) {
  199|  1.81k|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.81k, False: 3.50k]
  ------------------
  200|  2.00k|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 196, False: 5.11k]
  ------------------
  201|  2.00k|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 5.31k]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|    156|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 156, False: 5.15k]
  ------------------
  206|    156|                return 2;
  207|     50|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 50, False: 5.26k]
  ------------------
  208|     50|                return 8;
  209|     70|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 70, False: 5.24k]
  ------------------
  210|    102|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 32, False: 5.28k]
  ------------------
  211|    102|                return 10;
  212|  2.99k|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 2.99k, False: 2.31k]
  ------------------
  213|  2.99k|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 5.31k]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  5.31k|        }
  219|  5.31k|        SCN_GCC_COMPAT_POP
  220|  5.31k|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|   124k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter8on_alignENS1_10align_typeE:
  235|  16.9k|    {
  236|  16.9k|        m_specs.align = align;
  237|  16.9k|    }
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|    432|    {
  245|    432|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|    432|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|    432|            m_specs.localized = true;
  247|    432|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|    432|    }
_ZN3scn2v26detail12specs_setter8on_widthEi:
  254|  14.8k|    {
  255|  14.8k|        m_specs.width = width;
  256|  14.8k|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|   138k|    {
  260|   138k|        m_specs.type = type;
  261|   138k|    }
_ZN3scn2v26detail12specs_setter17on_charset_singleEDi:
  264|  3.51M|    {
  265|  3.51M|        const auto cp_value = static_cast<unsigned>(cp);
  266|  3.51M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  152|  3.51M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.13M, False: 379k]
  |  |  ------------------
  ------------------
  267|  3.13M|            m_specs.charset_literals[cp_value / 8] |=
  268|  3.13M|                static_cast<unsigned char>(1ul << (cp_value % 8));
  269|  3.13M|        }
  270|   379k|        else {
  271|   379k|            m_specs.charset_has_nonascii = true;
  272|   379k|        }
  273|  3.51M|    }
_ZN3scn2v26detail12specs_setter16on_charset_rangeEDiDi:
  276|  17.9k|    {
  277|  17.9k|        const auto begin_value = static_cast<unsigned>(begin);
  278|  17.9k|        const auto end_value = static_cast<unsigned>(end);
  279|  17.9k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  242|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  280|       |
  281|  17.9k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  152|  17.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.2k, False: 4.69k]
  |  |  ------------------
  ------------------
  282|       |            // No need to bit-twiddle with a mask, because with the
  283|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
  284|  13.2k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  172|  13.2k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
  285|   711k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (285:40): [True: 698k, False: 13.2k]
  ------------------
  286|   698k|                m_specs.charset_literals[v / 8] |=
  287|   698k|                    static_cast<unsigned char>(1ul << (v % 8));
  288|   698k|            }
  289|  13.2k|        }
  290|  4.69k|        else {
  291|  4.69k|            m_specs.charset_has_nonascii = true;
  292|  4.69k|        }
  293|  17.9k|    }
_ZN3scn2v26detail12specs_setter19on_charset_invertedEv:
  296|  7.67k|    {
  297|  7.67k|        m_specs.charset_is_inverted = true;
  298|  7.67k|    }
_ZN3scn2v26detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
  315|  79.0k|    {
  316|  79.0k|        m_specs.regexp_flags = flags;
  317|  79.0k|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|  13.1k|    {
  322|  13.1k|        SCN_UNLIKELY_ATTR
  323|  13.1k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|  13.1k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  3.67M|    {
  333|  3.67M|        return static_cast<bool>(m_error);
  334|  3.67M|    }
_ZN3scn2v26detailanENS1_11regex_flagsES2_:
   73|   114k|{
   74|   114k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
   75|   114k|                                    static_cast<unsigned>(b));
   76|   114k|}
_ZN3scn2v26detailorENS1_11regex_flagsES2_:
   78|  12.7k|{
   79|  12.7k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
   80|  12.7k|                                    static_cast<unsigned>(b));
   81|  12.7k|}
_ZN3scn2v26detailoRERNS1_11regex_flagsES2_:
   93|  12.7k|{
   94|  12.7k|    return a = a | b;
   95|  12.7k|}
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.09k|{
  987|  1.09k|    switch (type) {
  988|    124|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 124, False: 972]
  ------------------
  989|    124|            return arg_type_category::none;
  990|       |
  991|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 0, False: 1.09k]
  ------------------
  992|      0|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.09k]
  ------------------
  993|    108|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 108, False: 988]
  ------------------
  994|    108|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.09k]
  ------------------
  995|    108|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 1.09k]
  ------------------
  996|    108|            return arg_type_category::integer;
  997|       |
  998|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 0, False: 1.09k]
  ------------------
  999|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.09k]
  ------------------
 1000|    108|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 108, False: 988]
  ------------------
 1001|    108|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.09k]
  ------------------
 1002|    108|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 0, False: 1.09k]
  ------------------
 1003|    108|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|    108|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 108, False: 988]
  ------------------
 1006|    108|            return arg_type_category::pointer;
 1007|    108|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 108, False: 988]
  ------------------
 1008|    108|            return arg_type_category::boolean;
 1009|     56|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 56, False: 1.04k]
  ------------------
 1010|    108|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 52, False: 1.04k]
  ------------------
 1011|    108|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.09k]
  ------------------
 1012|    108|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.09k]
  ------------------
 1015|    108|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 108, False: 988]
  ------------------
 1016|    108|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.09k]
  ------------------
 1017|    108|            return arg_type_category::floating;
 1018|       |
 1019|     56|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 56, False: 1.04k]
  ------------------
 1020|    164|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 108, False: 988]
  ------------------
 1021|    216|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 52, False: 1.04k]
  ------------------
 1022|    324|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 108, False: 988]
  ------------------
 1023|    324|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.09k]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.09k]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|  1.09k|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.09k|            SCN_CLANG_POP
 1034|  1.09k|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.09k|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  83.1k|{
  968|  83.1k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  83.1k|    handler.check_args_exhausted();
  970|  83.1k|    return handler.get_error();
  971|  83.1k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  83.1k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  83.1k|    auto begin = format.data();
  937|  83.1k|    auto it = begin;
  938|  83.1k|    const auto end = format.data() + format.size();
  939|       |
  940|   326k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 318k, False: 8.09k]
  ------------------
  941|   318k|        const auto ch = *it++;
  942|   318k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 92.4k, False: 226k]
  ------------------
  943|  92.4k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  92.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  92.4k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 74.2k, False: 18.2k]
  ------------------
  947|  74.2k|                return;
  948|  74.2k|            }
  949|  92.4k|        }
  950|   226k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 2.72k, False: 223k]
  ------------------
  951|  2.72k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|  5.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 878, False: 1.84k]
  |  |  |  Branch (153:45): [True: 172, False: 2.55k]
  |  |  |  Branch (153:45): [True: 706, False: 1.84k]
  |  |  ------------------
  ------------------
  952|    878|                handler.on_error("Unmatched '}' in format string");
  953|    878|                return;
  954|    878|            }
  955|       |
  956|  1.84k|            handler.on_literal_text(begin, it);
  957|  1.84k|            begin = ++it;
  958|  1.84k|        }
  959|   318k|    }
  960|       |
  961|  8.09k|    handler.on_literal_text(begin, end);
  962|  8.09k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  92.4k|{
  866|  92.4k|    struct id_adapter {
  867|  92.4k|        constexpr void operator()()
  868|  92.4k|        {
  869|  92.4k|            arg_id = handler.on_arg_id();
  870|  92.4k|        }
  871|  92.4k|        constexpr void operator()(std::size_t id)
  872|  92.4k|        {
  873|  92.4k|            arg_id = handler.on_arg_id(id);
  874|  92.4k|        }
  875|       |
  876|  92.4k|        constexpr void on_error(const char* msg)
  877|  92.4k|        {
  878|  92.4k|            SCN_UNLIKELY_ATTR
  879|  92.4k|            handler.on_error(msg);
  880|  92.4k|        }
  881|       |
  882|  92.4k|        Handler& handler;
  883|  92.4k|        std::size_t arg_id;
  884|  92.4k|    };
  885|       |
  886|  92.4k|    ++begin;
  887|  92.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  92.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 90, False: 92.3k]
  |  |  ------------------
  ------------------
  888|     90|        handler.on_error("Unexpected end of replacement field");
  889|     90|        return begin;
  890|     90|    }
  891|       |
  892|  92.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 10.2k, False: 82.1k]
  ------------------
  893|  10.2k|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|  10.2k|    }
  895|  82.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 9.36k, False: 72.7k]
  ------------------
  896|  9.36k|        handler.on_literal_text(begin, begin + 1);
  897|  9.36k|    }
  898|  72.7k|    else {
  899|  72.7k|        auto adapter = id_adapter{handler, 0};
  900|  72.7k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  72.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  72.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 122, False: 72.6k]
  |  |  ------------------
  ------------------
  903|    122|            handler.on_error("Missing '}' in format string");
  904|    122|            return begin;
  905|    122|        }
  906|       |
  907|  72.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 240, False: 72.4k]
  ------------------
  908|    240|            handler.on_replacement_field(adapter.arg_id, begin);
  909|    240|        }
  910|  72.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 70.3k, False: 2.10k]
  ------------------
  911|  70.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  70.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 92, False: 70.2k]
  |  |  ------------------
  ------------------
  912|     92|                handler.on_error("Unexpected end of replacement field");
  913|     92|                return begin;
  914|     92|            }
  915|  70.2k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  70.2k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.50k, False: 66.7k]
  |  |  |  Branch (153:45): [True: 0, False: 70.2k]
  |  |  |  Branch (153:45): [True: 3.50k, False: 66.7k]
  |  |  ------------------
  ------------------
  917|  3.50k|                handler.on_error("Unknown format specifier");
  918|  3.50k|                return begin;
  919|  3.50k|            }
  920|  70.2k|        }
  921|  2.10k|        else {
  922|  2.10k|            SCN_UNLIKELY_ATTR
  923|  2.10k|            handler.on_error("Missing '}' in format string");
  924|  2.10k|            return begin;
  925|  2.10k|        }
  926|  72.6k|    }
  927|  86.5k|    return begin + 1;
  928|  92.3k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  72.7k|{
  400|  72.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  72.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  72.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  72.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 72.7k, False: 0]
  |  Branch (401:26): [True: 7.33k, False: 65.4k]
  ------------------
  402|  7.33k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|  7.33k|    }
  404|       |
  405|  65.4k|    handler();
  406|  65.4k|    return begin;
  407|  72.7k|}
vscan.cpp:_ZN3scn2v26detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  369|  7.33k|{
  370|  7.33k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  7.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  371|       |
  372|  7.33k|    CharT c = *begin;
  373|  7.33k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (373:9): [True: 1.75k, False: 5.58k]
  |  Branch (373:27): [True: 174, False: 5.40k]
  ------------------
  374|  1.92k|        handler.on_error("Invalid argument ID");
  375|  1.92k|        return begin;
  376|  1.92k|    }
  377|       |
  378|  5.40k|    int idx = 0;
  379|  5.40k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (379:9): [True: 438, False: 4.97k]
  ------------------
  380|    438|        idx = parse_simple_int(begin, end);
  381|    438|    }
  382|  4.97k|    else {
  383|  4.97k|        ++begin;
  384|  4.97k|    }
  385|       |
  386|  5.40k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (386:9): [True: 122, False: 5.28k]
  |  Branch (386:26): [True: 5.04k, False: 240]
  |  Branch (386:50): [True: 178, False: 4.86k]
  ------------------
  387|    300|        handler.on_error("Invalid argument ID");
  388|    300|        return begin;
  389|    300|    }
  390|  5.10k|    handler(idx);
  391|       |
  392|  5.10k|    return begin;
  393|  5.40k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
  877|  2.22k|        {
  878|  2.22k|            SCN_UNLIKELY_ATTR
  879|  2.22k|            handler.on_error(msg);
  880|  2.22k|        }
_ZN3scn2v26detail16parse_simple_intIcEEiRPKT_S5_:
  348|  8.83k|{
  349|  8.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  8.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  350|  8.83k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  242|  8.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  351|       |
  352|  8.83k|    unsigned long long value = 0;
  353|  26.3k|    do {
  354|  26.3k|        value *= 10;
  355|  26.3k|        value += static_cast<unsigned long long>(*begin - '0');
  356|  26.3k|        if (value >
  ------------------
  |  Branch (356:13): [True: 72, False: 26.2k]
  ------------------
  357|  26.3k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
  358|     72|            return -1;
  359|     72|        }
  360|  26.2k|        ++begin;
  361|  26.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (361:14): [True: 26.0k, False: 216]
  |  Branch (361:30): [True: 24.1k, False: 1.86k]
  |  Branch (361:47): [True: 17.4k, False: 6.68k]
  ------------------
  362|  8.75k|    return static_cast<int>(value);
  363|  8.83k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
  872|  5.10k|        {
  873|  5.10k|            arg_id = handler.on_arg_id(id);
  874|  5.10k|        }
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  65.4k|        {
  869|  65.4k|            arg_id = handler.on_arg_id();
  870|  65.4k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  70.2k|    {
 1046|  70.2k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  70.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  70.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  70.2k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  70.2k|{
  795|  70.2k|    auto do_presentation = [&]() -> const CharT* {
  796|  70.2k|        if (*begin == CharT{'['}) {
  797|  70.2k|            auto set = parse_presentation_set(begin, end, handler);
  798|  70.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  70.2k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  70.2k|                return begin;
  803|  70.2k|            }
  804|  70.2k|            handler.on_character_set_string(set);
  805|  70.2k|            return begin;
  806|  70.2k|        }
  807|  70.2k|        if (*begin == CharT{'/'}) {
  808|  70.2k|            return parse_presentation_regex(begin, end, handler);
  809|  70.2k|        }
  810|  70.2k|        presentation_type type = parse_presentation_type(*begin++);
  811|  70.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  70.2k|            handler.on_error("Invalid type specifier in format string");
  813|  70.2k|            return begin;
  814|  70.2k|        }
  815|  70.2k|        handler.on_type(type);
  816|  70.2k|        return begin;
  817|  70.2k|    };
  818|       |
  819|  70.2k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 69.0k, False: 1.14k]
  |  Branch (819:28): [True: 3.89k, False: 65.1k]
  ------------------
  820|  70.2k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.65k, False: 2.23k]
  |  Branch (820:36): [True: 1.54k, False: 108]
  ------------------
  821|  1.54k|        return do_presentation();
  822|  1.54k|    }
  823|       |
  824|  68.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 68.6k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  68.6k|    begin = parse_align(begin, end, handler);
  830|  68.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 132, False: 68.5k]
  |  |  ------------------
  ------------------
  831|    132|        handler.on_error("Unexpected end of format string");
  832|    132|        return begin;
  833|    132|    }
  834|       |
  835|  68.5k|    begin = parse_width(begin, end, handler);
  836|  68.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  68.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 128, False: 68.4k]
  |  |  ------------------
  ------------------
  837|    128|        handler.on_error("Unexpected end of format string");
  838|    128|        return begin;
  839|    128|    }
  840|       |
  841|  68.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 568, False: 67.8k]
  ------------------
  842|    568|        handler.on_localized();
  843|    568|        ++begin;
  844|    568|    }
  845|  68.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72, False: 68.3k]
  |  |  ------------------
  ------------------
  846|     72|        handler.on_error("Unexpected end of format string");
  847|     72|        return begin;
  848|     72|    }
  849|       |
  850|  68.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 68.3k, False: 0]
  |  Branch (850:25): [True: 64.0k, False: 4.30k]
  ------------------
  851|  64.0k|        do_presentation();
  852|  64.0k|    }
  853|  68.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  68.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.16k, False: 66.1k]
  |  |  ------------------
  ------------------
  854|  2.16k|        handler.on_error("Unexpected end of format string");
  855|  2.16k|        return begin;
  856|  2.16k|    }
  857|       |
  858|  66.1k|    return begin;
  859|  68.3k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  3.89k|{
  464|  3.89k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.00k, False: 1.88k]
  |  Branch (464:33): [True: 1.45k, False: 548]
  ------------------
  465|  3.89k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 784, False: 1.65k]
  |  Branch (465:33): [True: 198, False: 586]
  ------------------
  466|  3.89k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  65.5k|    auto do_presentation = [&]() -> const CharT* {
  796|  65.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 16.1k, False: 49.4k]
  ------------------
  797|  16.1k|            auto set = parse_presentation_set(begin, end, handler);
  798|  16.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.24k, False: 14.9k]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|  1.24k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  1.24k|                return begin;
  803|  1.24k|            }
  804|  14.9k|            handler.on_character_set_string(set);
  805|  14.9k|            return begin;
  806|  16.1k|        }
  807|  49.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 44.9k, False: 4.41k]
  ------------------
  808|  44.9k|            return parse_presentation_regex(begin, end, handler);
  809|  44.9k|        }
  810|  4.41k|        presentation_type type = parse_presentation_type(*begin++);
  811|  4.41k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  4.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 394, False: 4.02k]
  |  |  ------------------
  ------------------
  812|    394|            handler.on_error("Invalid type specifier in format string");
  813|    394|            return begin;
  814|    394|        }
  815|  4.02k|        handler.on_type(type);
  816|  4.02k|        return begin;
  817|  4.41k|    };
vscan.cpp:_ZN3scn2v26detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
  633|  16.1k|{
  634|  16.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  16.1k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|  16.1k|    auto start = begin;
  638|  16.1k|    ++begin;
  639|       |
  640|  16.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44, False: 16.1k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|     44|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|     44|        return {};
  645|     44|    }
  646|  16.1k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 5.42k, False: 10.7k]
  ------------------
  647|  5.42k|        handler.on_charset_inverted();
  648|  5.42k|        ++begin;
  649|  5.42k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  5.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 5.39k]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|     36|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|     36|            return {};
  654|     36|        }
  655|  5.39k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 72, False: 5.31k]
  ------------------
  656|     72|            handler.on_charset_single(char32_t{']'});
  657|     72|            ++begin;
  658|     72|        }
  659|  5.39k|    }
  660|  10.7k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 36, False: 10.6k]
  ------------------
  661|     36|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|     36|    }
  663|       |
  664|  1.88M|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 1.88M, False: 668]
  ------------------
  665|  1.88M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 464, False: 1.88M]
  |  |  ------------------
  ------------------
  666|    464|            break;
  667|    464|        }
  668|       |
  669|  1.88M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 14.9k, False: 1.87M]
  ------------------
  670|  14.9k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  14.9k|        }
  672|       |
  673|  1.87M|        parse_presentation_set_literal(begin, end, handler);
  674|  1.87M|    }
  675|       |
  676|  1.13k|    SCN_UNLIKELY_ATTR
  677|  1.13k|    handler.on_error("Invalid [character set] specifier in format string");
  678|  1.13k|    return {};
  679|  16.0k|}
vscan.cpp:_ZN3scn2v26detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
  597|  1.87M|{
  598|  1.87M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|  1.87M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|  1.87M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 302, False: 1.87M]
  |  |  ------------------
  ------------------
  602|    302|        return;
  603|    302|    }
  604|       |
  605|  1.87M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 1.87M, False: 402]
  |  Branch (605:25): [True: 9.91k, False: 1.86M]
  |  Branch (605:49): [True: 9.88k, False: 36]
  ------------------
  606|  1.87M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 9.72k, False: 162]
  ------------------
  607|  9.72k|        ++begin;
  608|       |
  609|  9.72k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  9.72k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  9.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 70, False: 9.65k]
  |  |  ------------------
  ------------------
  611|     70|            return;
  612|     70|        }
  613|       |
  614|  9.65k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  9.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60, False: 9.59k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|     60|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|     60|            return;
  619|     60|        }
  620|       |
  621|  9.59k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  9.59k|        return;
  623|  9.65k|    }
  624|       |
  625|  1.86M|    handler.on_charset_single(cp_first);
  626|  1.86M|}
vscan.cpp:_ZN3scn2v26detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
  573|  1.88M|{
  574|  1.88M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|  1.88M|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|  1.88M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  3.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 100, False: 1.88M]
  |  |  |  Branch (153:45): [True: 74, False: 1.88M]
  |  |  |  Branch (153:45): [True: 26, False: 1.88M]
  |  |  ------------------
  ------------------
  578|    100|        handler.on_error("Invalid encoding in format string");
  579|    100|        return invalid_code_point;
  580|    100|    }
  581|       |
  582|  1.88M|    const auto cp = decode_utf_code_point_exhaustive(
  583|  1.88M|        std::basic_string_view<CharT>{begin, len});
  584|  1.88M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 272, False: 1.88M]
  |  |  ------------------
  ------------------
  585|    272|        handler.on_error("Invalid encoding in format string");
  586|    272|        return invalid_code_point;
  587|    272|    }
  588|       |
  589|  1.88M|    begin += len;
  590|  1.88M|    return cp;
  591|  1.88M|}
_ZN3scn2v26detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  302|  14.9k|    {
  303|  14.9k|        m_specs.charset_string_data = fmt.data();
  304|  14.9k|        m_specs.charset_string_size = fmt.size();
  305|  14.9k|        on_type(presentation_type::string_set);
  306|  14.9k|    }
vscan.cpp:_ZN3scn2v26detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
  685|  44.9k|{
  686|  44.9k|#if !SCN_DISABLE_REGEX
  687|  44.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  44.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  44.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  688|  44.9k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  242|  44.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  44.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  689|       |
  690|  44.9k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  89.9k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (690:19): [Folded - Ignored]
  |  Branch (690:19): [Folded - Ignored]
  ------------------
  691|  44.9k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (691:19): [Folded - Ignored]
  ------------------
  692|  44.9k|        handler.on_error("Regex backend doesn't support wide strings as input");
  693|  44.9k|        return begin;
  694|  44.9k|    }
  695|       |
  696|  44.9k|    auto start = begin;
  697|  44.9k|    ++begin;
  698|       |
  699|  44.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60, False: 44.9k]
  |  |  ------------------
  ------------------
  700|     60|        handler.on_error("Unexpected end of regex in format string");
  701|     60|        return begin;
  702|     60|    }
  703|       |
  704|  44.9k|    handler.on_type(presentation_type::regex);
  705|  12.1M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (705:12): [True: 12.1M, False: 214]
  ------------------
  706|  12.1M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (706:13): [True: 59.9k, False: 12.1M]
  ------------------
  707|  59.9k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (707:17): [True: 44.7k, False: 15.2k]
  ------------------
  708|  44.7k|                break;
  709|  44.7k|            }
  710|  15.2k|            else {
  711|  15.2k|                handler.on_type(presentation_type::regex_escaped);
  712|  15.2k|            }
  713|  59.9k|        }
  714|  12.1M|    }
  715|  44.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 214, False: 44.7k]
  |  |  ------------------
  ------------------
  716|    214|        handler.on_error("Unexpected end of regex in format string");
  717|    214|        return begin;
  718|    214|    }
  719|       |
  720|  44.7k|    auto regex_end = begin;
  721|  44.7k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
  722|  44.7k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  153|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54, False: 44.6k]
  |  |  ------------------
  ------------------
  723|     54|        handler.on_error("Invalid (empty) regex in format string");
  724|     54|        return begin;
  725|     54|    }
  726|  44.6k|    handler.on_regex_pattern(regex_pattern);
  727|  44.6k|    ++begin;
  728|       |
  729|  44.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  44.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 36, False: 44.6k]
  |  |  ------------------
  ------------------
  730|     36|        handler.on_error("Unexpected end of regex in format string");
  731|     36|        return begin;
  732|     36|    }
  733|       |
  734|  44.6k|    regex_flags flags{regex_flags::none};
  735|  44.6k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
  736|  44.6k|        {{'m', regex_flags::multiline},
  737|  44.6k|         {'s', regex_flags::singleline},
  738|  44.6k|         {'i', regex_flags::nocase},
  739|  44.6k|         {'n', regex_flags::nocapture}}};
  740|  51.7k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (740:12): [True: 51.6k, False: 62]
  ------------------
  741|  51.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (741:13): [True: 44.3k, False: 7.28k]
  ------------------
  742|  44.3k|            break;
  743|  44.3k|        }
  744|  7.28k|        bool found_flag = false;
  745|  19.0k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (745:24): [True: 19.0k, False: 140]
  ------------------
  746|  19.0k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (746:17): [True: 11.8k, False: 7.14k]
  ------------------
  747|  11.8k|                continue;
  748|  11.8k|            }
  749|  7.14k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (749:17): [True: 36, False: 7.10k]
  ------------------
  750|     36|                handler.on_error("Flag set multiple times in regex");
  751|     36|                return begin;
  752|     36|            }
  753|  7.10k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
  754|  7.10k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (754:17): [True: 54, False: 7.05k]
  ------------------
  755|       |                // clang-format off
  756|     54|                handler.on_error("/s flag for regex isn't supported by regex backend");
  757|       |                // clang-format on
  758|     54|            }
  759|       |#if !SCN_HAS_STD_REGEX_MULTILINE
  760|       |            if (*begin == CharT{'m'}) {
  761|       |                // clang-format off
  762|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
  763|       |                // clang-format on
  764|       |            }
  765|       |#endif
  766|  7.10k|#endif
  767|  7.10k|            flags |= flag.second;
  768|  7.10k|            found_flag = true;
  769|  7.10k|            break;
  770|  7.14k|        }
  771|  7.24k|        if (!found_flag) {
  ------------------
  |  Branch (771:13): [True: 140, False: 7.10k]
  ------------------
  772|    140|            handler.on_error("Invalid flag in regex");
  773|    140|            return begin;
  774|    140|        }
  775|  7.24k|    }
  776|  44.4k|    handler.on_regex_flags(flags);
  777|       |
  778|  44.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 62, False: 44.3k]
  |  |  ------------------
  ------------------
  779|     62|        handler.on_error("Unexpected end of regex in format string");
  780|     62|        return begin;
  781|     62|    }
  782|       |
  783|  44.3k|    return begin;
  784|       |#else
  785|       |    handler.on_error("Regular expression support is disabled");
  786|       |    return {};
  787|       |#endif
  788|  44.4k|}
_ZN3scn2v26detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  310|  44.6k|    {
  311|  44.6k|        m_specs.charset_string_data = pattern.data();
  312|  44.6k|        m_specs.charset_string_size = pattern.size();
  313|  44.6k|    }
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  4.41k|{
  412|  4.41k|    switch (type) {
  413|    270|        case 'b':
  ------------------
  |  Branch (413:9): [True: 270, False: 4.14k]
  ------------------
  414|    324|        case 'B':
  ------------------
  |  Branch (414:9): [True: 54, False: 4.36k]
  ------------------
  415|    324|            return presentation_type::int_binary;
  416|    152|        case 'd':
  ------------------
  |  Branch (416:9): [True: 152, False: 4.26k]
  ------------------
  417|    152|            return presentation_type::int_decimal;
  418|    360|        case 'i':
  ------------------
  |  Branch (418:9): [True: 360, False: 4.05k]
  ------------------
  419|    360|            return presentation_type::int_generic;
  420|     90|        case 'u':
  ------------------
  |  Branch (420:9): [True: 90, False: 4.32k]
  ------------------
  421|     90|            return presentation_type::int_unsigned_decimal;
  422|    126|        case 'o':
  ------------------
  |  Branch (422:9): [True: 126, False: 4.29k]
  ------------------
  423|    126|            return presentation_type::int_octal;
  424|    144|        case 'x':
  ------------------
  |  Branch (424:9): [True: 144, False: 4.27k]
  ------------------
  425|    196|        case 'X':
  ------------------
  |  Branch (425:9): [True: 52, False: 4.36k]
  ------------------
  426|    196|            return presentation_type::int_hex;
  427|     44|        case 'r':
  ------------------
  |  Branch (427:9): [True: 44, False: 4.37k]
  ------------------
  428|     80|        case 'R':
  ------------------
  |  Branch (428:9): [True: 36, False: 4.38k]
  ------------------
  429|     80|            return presentation_type::int_arbitrary_base;
  430|     90|        case 'a':
  ------------------
  |  Branch (430:9): [True: 90, False: 4.32k]
  ------------------
  431|    180|        case 'A':
  ------------------
  |  Branch (431:9): [True: 90, False: 4.32k]
  ------------------
  432|    180|            return presentation_type::float_hex;
  433|     90|        case 'e':
  ------------------
  |  Branch (433:9): [True: 90, False: 4.32k]
  ------------------
  434|    144|        case 'E':
  ------------------
  |  Branch (434:9): [True: 54, False: 4.36k]
  ------------------
  435|    144|            return presentation_type::float_scientific;
  436|    306|        case 'f':
  ------------------
  |  Branch (436:9): [True: 306, False: 4.11k]
  ------------------
  437|    378|        case 'F':
  ------------------
  |  Branch (437:9): [True: 72, False: 4.34k]
  ------------------
  438|    378|            return presentation_type::float_fixed;
  439|     44|        case 'g':
  ------------------
  |  Branch (439:9): [True: 44, False: 4.37k]
  ------------------
  440|    142|        case 'G':
  ------------------
  |  Branch (440:9): [True: 98, False: 4.31k]
  ------------------
  441|    142|            return presentation_type::float_general;
  442|    648|        case 's':
  ------------------
  |  Branch (442:9): [True: 648, False: 3.76k]
  ------------------
  443|    648|            return presentation_type::string;
  444|  1.06k|        case 'c':
  ------------------
  |  Branch (444:9): [True: 1.06k, False: 3.35k]
  ------------------
  445|  1.06k|            return presentation_type::character;
  446|     36|        case '?':
  ------------------
  |  Branch (446:9): [True: 36, False: 4.38k]
  ------------------
  447|     36|            return presentation_type::escaped_character;
  448|    104|        case 'p':
  ------------------
  |  Branch (448:9): [True: 104, False: 4.31k]
  ------------------
  449|    104|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 4.41k]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 4.41k]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|    394|        default:
  ------------------
  |  Branch (456:9): [True: 394, False: 4.02k]
  ------------------
  457|    394|            return presentation_type::none;
  458|  4.41k|    }
  459|  4.41k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  68.6k|{
  489|  68.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  68.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  68.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|  68.6k|    auto check_align = [](wchar_t ch) {
  492|  68.6k|        switch (ch) {
  493|  68.6k|            case L'<':
  494|  68.6k|                return align_type::left;
  495|  68.6k|            case L'>':
  496|  68.6k|                return align_type::right;
  497|  68.6k|            case L'^':
  498|  68.6k|                return align_type::center;
  499|  68.6k|            default:
  500|  68.6k|                return align_type::none;
  501|  68.6k|        }
  502|  68.6k|    };
  503|       |
  504|  68.6k|    auto potential_fill_len = code_point_length(begin, end);
  505|  68.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40, False: 68.6k]
  |  |  |  Branch (153:45): [True: 36, False: 68.6k]
  |  |  |  Branch (153:45): [True: 4, False: 68.6k]
  |  |  ------------------
  ------------------
  506|  68.6k|                     std::distance(begin, end) < potential_fill_len)) {
  507|     40|        handler.on_error("Invalid encoding in fill character");
  508|     40|        return begin;
  509|     40|    }
  510|       |
  511|  68.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  68.6k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  68.6k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  68.6k|    const auto begin_before_fill = begin;
  516|  68.6k|    begin += potential_fill_len;
  517|       |
  518|  68.6k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 1.10k, False: 67.5k]
  ------------------
  519|  1.10k|        return begin_before_fill;
  520|  1.10k|    }
  521|       |
  522|  67.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  67.5k|    const auto begin_after_fill = begin;
  524|  67.5k|    ++begin;
  525|       |
  526|  67.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 67.3k, False: 186]
  ------------------
  527|  67.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  67.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80, False: 67.2k]
  |  |  ------------------
  ------------------
  528|     80|            handler.on_error("Invalid fill character '{' in format string");
  529|     80|            return begin;
  530|     80|        }
  531|  67.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 13.6k, False: 53.6k]
  ------------------
  532|  13.6k|            return begin_before_fill;
  533|  13.6k|        }
  534|  67.2k|    }
  535|       |
  536|  53.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 45.0k, False: 8.75k]
  ------------------
  537|  45.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 1.65k, False: 43.4k]
  ------------------
  538|  1.65k|            handler.on_align(potential_align_on_fill);
  539|  1.65k|            return begin_after_fill;
  540|  1.65k|        }
  541|  43.4k|        return begin_before_fill;
  542|  45.0k|    }
  543|       |
  544|  8.75k|    handler.on_fill(potential_fill);
  545|  8.75k|    handler.on_align(potential_align_after_fill);
  546|  8.75k|    return begin;
  547|  53.8k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  68.6k|{
  471|  68.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  68.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  68.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  68.6k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  68.6k|        return 1;
  474|  68.6k|    }
  475|  68.6k|    else {
  476|  68.6k|        const auto lengths =
  477|  68.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  68.6k|            "\3\4";
  479|  68.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  68.6k|        return len;
  481|  68.6k|    }
  482|  68.6k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   136k|    auto check_align = [](wchar_t ch) {
  492|   136k|        switch (ch) {
  493|    516|            case L'<':
  ------------------
  |  Branch (493:13): [True: 516, False: 135k]
  ------------------
  494|    516|                return align_type::left;
  495|    682|            case L'>':
  ------------------
  |  Branch (495:13): [True: 682, False: 135k]
  ------------------
  496|    682|                return align_type::right;
  497|  13.2k|            case L'^':
  ------------------
  |  Branch (497:13): [True: 13.2k, False: 122k]
  ------------------
  498|  13.2k|                return align_type::center;
  499|   121k|            default:
  ------------------
  |  Branch (499:13): [True: 121k, False: 14.4k]
  ------------------
  500|   121k|                return align_type::none;
  501|   136k|        }
  502|   136k|    };
_ZN3scn2v26detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  240|  8.75k|    {
  241|  8.75k|        m_specs.fill = fill;
  242|  8.75k|    }
_ZN3scn2v26detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  111|  8.75k|    {
  112|  8.75k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  242|  8.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  113|  8.75k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  242|  8.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  114|  8.75k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (114:23): [Folded - Ignored]
  ------------------
  115|  17.7k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (115:32): [True: 8.97k, False: 8.75k]
  ------------------
  116|  8.97k|                SCN_GCC_PUSH
  117|  8.97k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
  118|  8.97k|                m_data[i] = s[i];
  119|  8.97k|                SCN_GCC_POP
  120|  8.97k|            }
  121|  8.75k|            m_size = static_cast<unsigned char>(s.size());
  122|  8.75k|        }
  123|  8.75k|        else if constexpr (sizeof(CharT) == 2) {
  124|  8.75k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
  125|  8.75k|            m_data[1] =
  126|  8.75k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
  127|  8.75k|            if (s.size() == 1) {
  128|  8.75k|                return;
  129|  8.75k|            }
  130|  8.75k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
  131|  8.75k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
  132|  8.75k|        }
  133|  8.75k|        else {
  134|  8.75k|            const auto front = static_cast<unsigned>(s.front());
  135|  8.75k|            m_data[0] = static_cast<char>(front);
  136|  8.75k|            m_data[1] = static_cast<char>(front >> 8);
  137|  8.75k|            m_data[2] = static_cast<char>(front >> 16);
  138|  8.75k|            m_data[3] = static_cast<char>(front >> 24);
  139|  8.75k|        }
  140|  8.75k|    }
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  68.5k|{
  554|  68.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  68.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  68.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  68.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 25.1k, False: 43.3k]
  |  Branch (556:33): [True: 8.39k, False: 16.7k]
  ------------------
  557|  8.39k|        int width = parse_simple_int(begin, end);
  558|  8.39k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|  8.39k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 8.35k, False: 36]
  |  |  ------------------
  ------------------
  559|  8.35k|            handler.on_width(width);
  560|  8.35k|        }
  561|     36|        else {
  562|     36|            handler.on_error("Invalid field width");
  563|     36|            return begin;
  564|     36|        }
  565|  8.39k|    }
  566|  68.5k|    return begin;
  567|  68.5k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|    568|    {
 1051|    568|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|    568|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 512, False: 56]
  ------------------
 1053|    568|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 456, False: 56]
  ------------------
 1054|    568|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 400, False: 56]
  ------------------
 1055|    568|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 344, False: 56]
  ------------------
 1056|    344|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|    344|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|    344|        }
 1061|       |
 1062|    224|        Handler::on_localized();
 1063|    224|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  25.9k|{
 1073|  25.9k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.7k, False: 2.24k]
  |  |  ------------------
  ------------------
 1074|  23.7k|        return handler.on_error("Invalid type specifier for integer type");
 1075|  23.7k|    }
 1076|  2.24k|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 132, False: 2.10k]
  ------------------
 1077|    132|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16, False: 116]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|     16|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|     16|            return;
 1082|     16|        }
 1083|    116|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|    116|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 116]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|    116|    }
 1089|  2.24k|}
_ZN3scn2v26detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1151|  12.8k|{
 1152|  12.8k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1152:9): [True: 12.0k, False: 876]
  ------------------
 1153|  12.8k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (1153:9): [True: 12.0k, False: 14]
  ------------------
 1154|  12.0k|        SCN_UNLIKELY_ATTR
 1155|  12.0k|        return handler.on_error("Invalid type specifier for pointer");
 1156|  12.0k|    }
 1157|  12.8k|}
_ZN3scn2v26detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1162|  12.9k|{
 1163|  12.9k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1163:9): [True: 12.0k, False: 906]
  ------------------
 1164|  12.9k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (1164:9): [True: 11.9k, False: 130]
  ------------------
 1165|  12.9k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (1165:9): [True: 11.8k, False: 68]
  ------------------
 1166|  12.9k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (1166:9): [True: 11.8k, False: 30]
  ------------------
 1167|  12.9k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (1167:9): [True: 11.7k, False: 60]
  ------------------
 1168|  12.9k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (1168:9): [True: 11.7k, False: 12]
  ------------------
 1169|  12.9k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (1169:9): [True: 11.7k, False: 18]
  ------------------
 1170|  12.9k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (1170:9): [True: 11.7k, False: 26]
  ------------------
 1171|  11.7k|        SCN_UNLIKELY_ATTR
 1172|  11.7k|        return handler.on_error("Invalid type specifier for boolean");
 1173|  11.7k|    }
 1174|  12.9k|}
_ZN3scn2v26detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1094|  12.8k|{
 1095|  12.8k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (1095:9): [True: 11.8k, False: 1.05k]
  ------------------
 1096|  12.8k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (1096:9): [True: 0, False: 1.05k]
  ------------------
 1097|  11.8k|        SCN_UNLIKELY_ATTR
 1098|  11.8k|        return handler.on_error("Invalid type specifier for character type");
 1099|  11.8k|    }
 1100|  12.8k|}
_ZN3scn2v26detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1116|  12.9k|{
 1117|  12.9k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (1117:9): [True: 12.0k, False: 906]
  ------------------
 1118|  12.9k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (1118:10): [True: 214, False: 11.8k]
  ------------------
 1119|  12.0k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (1119:10): [True: 11.7k, False: 110]
  ------------------
 1120|  11.9k|        SCN_UNLIKELY_ATTR
 1121|  11.9k|        return handler.on_error("Invalid type specifier for float type");
 1122|  11.9k|    }
 1123|  12.9k|}
_ZN3scn2v26detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1128|  38.6k|{
 1129|  38.6k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (1129:9): [True: 2.62k, False: 36.0k]
  ------------------
 1130|  38.6k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (1130:9): [True: 366, False: 35.6k]
  ------------------
 1131|  38.6k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (1131:9): [True: 8.01k, False: 27.6k]
  ------------------
 1132|  38.6k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (1132:9): [True: 24.5k, False: 3.15k]
  ------------------
 1133|  38.6k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (1133:9): [True: 1.68k, False: 1.47k]
  ------------------
 1134|  37.2k|        return;
 1135|  37.2k|    }
 1136|  1.47k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (1136:9): [True: 594, False: 876]
  ------------------
 1137|    594|        if (SCN_UNLIKELY(specs.width == 0)) {
  ------------------
  |  |  153|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30, False: 564]
  |  |  ------------------
  ------------------
 1138|       |            // clang-format off
 1139|     30|            return handler.on_error("'c' type specifier for strings requires the field width to be specified");
 1140|       |            // clang-format on
 1141|     30|        }
 1142|    564|        return;
 1143|    594|    }
 1144|    876|    SCN_UNLIKELY_ATTR
 1145|    876|    handler.on_error("Invalid type specifier for string");
 1146|    876|}
_ZN3scn2v26detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
  633|  4.35k|{
  634|  4.35k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  4.35k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  4.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|  4.35k|    auto start = begin;
  638|  4.35k|    ++begin;
  639|       |
  640|  4.35k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.35k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|      0|        return {};
  645|      0|    }
  646|  4.35k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 1.40k, False: 2.95k]
  ------------------
  647|  1.40k|        handler.on_charset_inverted();
  648|  1.40k|        ++begin;
  649|  1.40k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.40k]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|      0|            return {};
  654|      0|        }
  655|  1.40k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 12, False: 1.39k]
  ------------------
  656|     12|            handler.on_charset_single(char32_t{']'});
  657|     12|            ++begin;
  658|     12|        }
  659|  1.40k|    }
  660|  2.95k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 0, False: 2.95k]
  ------------------
  661|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|      0|    }
  663|       |
  664|   624k|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 624k, False: 0]
  ------------------
  665|   624k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 624k]
  |  |  ------------------
  ------------------
  666|      0|            break;
  667|      0|        }
  668|       |
  669|   624k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 4.35k, False: 620k]
  ------------------
  670|  4.35k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  4.35k|        }
  672|       |
  673|   620k|        parse_presentation_set_literal(begin, end, handler);
  674|   620k|    }
  675|       |
  676|      0|    SCN_UNLIKELY_ATTR
  677|      0|    handler.on_error("Invalid [character set] specifier in format string");
  678|      0|    return {};
  679|  4.35k|}
_ZN3scn2v26detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
  597|   620k|{
  598|   620k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|   620k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|   620k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 620k]
  |  |  ------------------
  ------------------
  602|      0|        return;
  603|      0|    }
  604|       |
  605|   620k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 620k, False: 0]
  |  Branch (605:25): [True: 2.92k, False: 617k]
  |  Branch (605:49): [True: 2.92k, False: 0]
  ------------------
  606|   620k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 2.88k, False: 42]
  ------------------
  607|  2.88k|        ++begin;
  608|       |
  609|  2.88k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  2.88k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.88k]
  |  |  ------------------
  ------------------
  611|      0|            return;
  612|      0|        }
  613|       |
  614|  2.88k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.88k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|      0|            return;
  619|      0|        }
  620|       |
  621|  2.88k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  2.88k|        return;
  623|  2.88k|    }
  624|       |
  625|   617k|    handler.on_charset_single(cp_first);
  626|   617k|}
_ZN3scn2v26detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
  573|   623k|{
  574|   623k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|   623k|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|   623k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 623k]
  |  |  |  Branch (153:45): [True: 0, False: 623k]
  |  |  |  Branch (153:45): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|   623k|    const auto cp = decode_utf_code_point_exhaustive(
  583|   623k|        std::basic_string_view<CharT>{begin, len});
  584|   623k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|   623k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 623k]
  |  |  ------------------
  ------------------
  585|      0|        handler.on_error("Invalid encoding in format string");
  586|      0|        return invalid_code_point;
  587|      0|    }
  588|       |
  589|   623k|    begin += len;
  590|   623k|    return cp;
  591|   623k|}
_ZNK3scn2v26detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
  224|  19.0k|    {
  225|  19.0k|        return {reinterpret_cast<const CharT*>(charset_string_data),
  226|  19.0k|                charset_string_size};
  227|  19.0k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   143k|{
  968|   143k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   143k|    handler.check_args_exhausted();
  970|   143k|    return handler.get_error();
  971|   143k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   143k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   143k|    auto begin = format.data();
  937|   143k|    auto it = begin;
  938|   143k|    const auto end = format.data() + format.size();
  939|       |
  940|  4.42M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 4.33M, False: 86.2k]
  ------------------
  941|  4.33M|        const auto ch = *it++;
  942|  4.33M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 73.1k, False: 4.26M]
  ------------------
  943|  73.1k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  73.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  73.1k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 55.3k, False: 17.8k]
  ------------------
  947|  55.3k|                return;
  948|  55.3k|            }
  949|  73.1k|        }
  950|  4.26M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 3.31k, False: 4.25M]
  ------------------
  951|  3.31k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|  6.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.64k, False: 1.67k]
  |  |  |  Branch (153:45): [True: 322, False: 2.99k]
  |  |  |  Branch (153:45): [True: 1.32k, False: 1.67k]
  |  |  ------------------
  ------------------
  952|  1.64k|                handler.on_error("Unmatched '}' in format string");
  953|  1.64k|                return;
  954|  1.64k|            }
  955|       |
  956|  1.67k|            handler.on_literal_text(begin, it);
  957|  1.67k|            begin = ++it;
  958|  1.67k|        }
  959|  4.33M|    }
  960|       |
  961|  86.2k|    handler.on_literal_text(begin, end);
  962|  86.2k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  73.1k|{
  866|  73.1k|    struct id_adapter {
  867|  73.1k|        constexpr void operator()()
  868|  73.1k|        {
  869|  73.1k|            arg_id = handler.on_arg_id();
  870|  73.1k|        }
  871|  73.1k|        constexpr void operator()(std::size_t id)
  872|  73.1k|        {
  873|  73.1k|            arg_id = handler.on_arg_id(id);
  874|  73.1k|        }
  875|       |
  876|  73.1k|        constexpr void on_error(const char* msg)
  877|  73.1k|        {
  878|  73.1k|            SCN_UNLIKELY_ATTR
  879|  73.1k|            handler.on_error(msg);
  880|  73.1k|        }
  881|       |
  882|  73.1k|        Handler& handler;
  883|  73.1k|        std::size_t arg_id;
  884|  73.1k|    };
  885|       |
  886|  73.1k|    ++begin;
  887|  73.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108, False: 73.0k]
  |  |  ------------------
  ------------------
  888|    108|        handler.on_error("Unexpected end of replacement field");
  889|    108|        return begin;
  890|    108|    }
  891|       |
  892|  73.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 8.12k, False: 64.9k]
  ------------------
  893|  8.12k|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|  8.12k|    }
  895|  64.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 9.05k, False: 55.9k]
  ------------------
  896|  9.05k|        handler.on_literal_text(begin, begin + 1);
  897|  9.05k|    }
  898|  55.9k|    else {
  899|  55.9k|        auto adapter = id_adapter{handler, 0};
  900|  55.9k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  55.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 156, False: 55.7k]
  |  |  ------------------
  ------------------
  903|    156|            handler.on_error("Missing '}' in format string");
  904|    156|            return begin;
  905|    156|        }
  906|       |
  907|  55.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 232, False: 55.5k]
  ------------------
  908|    232|            handler.on_replacement_field(adapter.arg_id, begin);
  909|    232|        }
  910|  55.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 54.1k, False: 1.41k]
  ------------------
  911|  54.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 124, False: 53.9k]
  |  |  ------------------
  ------------------
  912|    124|                handler.on_error("Unexpected end of replacement field");
  913|    124|                return begin;
  914|    124|            }
  915|  53.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  53.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.36k, False: 50.6k]
  |  |  |  Branch (153:45): [True: 0, False: 53.9k]
  |  |  |  Branch (153:45): [True: 3.36k, False: 50.6k]
  |  |  ------------------
  ------------------
  917|  3.36k|                handler.on_error("Unknown format specifier");
  918|  3.36k|                return begin;
  919|  3.36k|            }
  920|  53.9k|        }
  921|  1.41k|        else {
  922|  1.41k|            SCN_UNLIKELY_ATTR
  923|  1.41k|            handler.on_error("Missing '}' in format string");
  924|  1.41k|            return begin;
  925|  1.41k|        }
  926|  55.7k|    }
  927|  68.0k|    return begin + 1;
  928|  73.0k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  55.9k|{
  400|  55.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  55.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  55.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  55.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 55.9k, False: 0]
  |  Branch (401:26): [True: 5.37k, False: 50.5k]
  ------------------
  402|  5.37k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|  5.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|  5.37k|    }
  404|       |
  405|  50.5k|    handler();
  406|  50.5k|    return begin;
  407|  55.9k|}
vscan.cpp:_ZN3scn2v26detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  369|  5.37k|{
  370|  5.37k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  5.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  371|       |
  372|  5.37k|    CharT c = *begin;
  373|  5.37k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (373:9): [True: 822, False: 4.54k]
  |  Branch (373:27): [True: 404, False: 4.14k]
  ------------------
  374|  1.22k|        handler.on_error("Invalid argument ID");
  375|  1.22k|        return begin;
  376|  1.22k|    }
  377|       |
  378|  4.14k|    int idx = 0;
  379|  4.14k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (379:9): [True: 496, False: 3.64k]
  ------------------
  380|    496|        idx = parse_simple_int(begin, end);
  381|    496|    }
  382|  3.64k|    else {
  383|  3.64k|        ++begin;
  384|  3.64k|    }
  385|       |
  386|  4.14k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (386:9): [True: 156, False: 3.98k]
  |  Branch (386:26): [True: 3.75k, False: 232]
  |  Branch (386:50): [True: 188, False: 3.56k]
  ------------------
  387|    344|        handler.on_error("Invalid argument ID");
  388|    344|        return begin;
  389|    344|    }
  390|  3.80k|    handler(idx);
  391|       |
  392|  3.80k|    return begin;
  393|  4.14k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
  877|  1.57k|        {
  878|  1.57k|            SCN_UNLIKELY_ATTR
  879|  1.57k|            handler.on_error(msg);
  880|  1.57k|        }
_ZN3scn2v26detail16parse_simple_intIwEEiRPKT_S5_:
  348|  7.00k|{
  349|  7.00k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  7.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  350|  7.00k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  242|  7.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  351|       |
  352|  7.00k|    unsigned long long value = 0;
  353|  23.7k|    do {
  354|  23.7k|        value *= 10;
  355|  23.7k|        value += static_cast<unsigned long long>(*begin - '0');
  356|  23.7k|        if (value >
  ------------------
  |  Branch (356:13): [True: 68, False: 23.6k]
  ------------------
  357|  23.7k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
  358|     68|            return -1;
  359|     68|        }
  360|  23.6k|        ++begin;
  361|  23.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (361:14): [True: 23.4k, False: 246]
  |  Branch (361:30): [True: 22.4k, False: 920]
  |  Branch (361:47): [True: 16.7k, False: 5.77k]
  ------------------
  362|  6.94k|    return static_cast<int>(value);
  363|  7.00k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
  872|  3.80k|        {
  873|  3.80k|            arg_id = handler.on_arg_id(id);
  874|  3.80k|        }
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  50.5k|        {
  869|  50.5k|            arg_id = handler.on_arg_id();
  870|  50.5k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  53.9k|    {
 1046|  53.9k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  53.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  53.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  53.9k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  53.9k|{
  795|  53.9k|    auto do_presentation = [&]() -> const CharT* {
  796|  53.9k|        if (*begin == CharT{'['}) {
  797|  53.9k|            auto set = parse_presentation_set(begin, end, handler);
  798|  53.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  53.9k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  53.9k|                return begin;
  803|  53.9k|            }
  804|  53.9k|            handler.on_character_set_string(set);
  805|  53.9k|            return begin;
  806|  53.9k|        }
  807|  53.9k|        if (*begin == CharT{'/'}) {
  808|  53.9k|            return parse_presentation_regex(begin, end, handler);
  809|  53.9k|        }
  810|  53.9k|        presentation_type type = parse_presentation_type(*begin++);
  811|  53.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  53.9k|            handler.on_error("Invalid type specifier in format string");
  813|  53.9k|            return begin;
  814|  53.9k|        }
  815|  53.9k|        handler.on_type(type);
  816|  53.9k|        return begin;
  817|  53.9k|    };
  818|       |
  819|  53.9k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 52.7k, False: 1.28k]
  |  Branch (819:28): [True: 4.24k, False: 48.4k]
  ------------------
  820|  53.9k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 1.65k, False: 2.58k]
  |  Branch (820:36): [True: 1.56k, False: 88]
  ------------------
  821|  1.56k|        return do_presentation();
  822|  1.56k|    }
  823|       |
  824|  52.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 52.4k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  52.4k|    begin = parse_align(begin, end, handler);
  830|  52.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 138, False: 52.2k]
  |  |  ------------------
  ------------------
  831|    138|        handler.on_error("Unexpected end of format string");
  832|    138|        return begin;
  833|    138|    }
  834|       |
  835|  52.2k|    begin = parse_width(begin, end, handler);
  836|  52.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142, False: 52.1k]
  |  |  ------------------
  ------------------
  837|    142|        handler.on_error("Unexpected end of format string");
  838|    142|        return begin;
  839|    142|    }
  840|       |
  841|  52.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 528, False: 51.6k]
  ------------------
  842|    528|        handler.on_localized();
  843|    528|        ++begin;
  844|    528|    }
  845|  52.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 70, False: 52.0k]
  |  |  ------------------
  ------------------
  846|     70|        handler.on_error("Unexpected end of format string");
  847|     70|        return begin;
  848|     70|    }
  849|       |
  850|  52.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 52.0k, False: 0]
  |  Branch (850:25): [True: 48.0k, False: 4.02k]
  ------------------
  851|  48.0k|        do_presentation();
  852|  48.0k|    }
  853|  52.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.23k, False: 49.8k]
  |  |  ------------------
  ------------------
  854|  2.23k|        handler.on_error("Unexpected end of format string");
  855|  2.23k|        return begin;
  856|  2.23k|    }
  857|       |
  858|  49.8k|    return begin;
  859|  52.0k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  4.24k|{
  464|  4.24k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.05k, False: 2.18k]
  |  Branch (464:33): [True: 1.47k, False: 582]
  ------------------
  465|  4.24k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 760, False: 2.00k]
  |  Branch (465:33): [True: 178, False: 582]
  ------------------
  466|  4.24k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  49.6k|    auto do_presentation = [&]() -> const CharT* {
  796|  49.6k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 10.1k, False: 39.4k]
  ------------------
  797|  10.1k|            auto set = parse_presentation_set(begin, end, handler);
  798|  10.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 968, False: 9.22k]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|    968|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|    968|                return begin;
  803|    968|            }
  804|  9.22k|            handler.on_character_set_string(set);
  805|  9.22k|            return begin;
  806|  10.1k|        }
  807|  39.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 35.1k, False: 4.31k]
  ------------------
  808|  35.1k|            return parse_presentation_regex(begin, end, handler);
  809|  35.1k|        }
  810|  4.31k|        presentation_type type = parse_presentation_type(*begin++);
  811|  4.31k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  4.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 476, False: 3.83k]
  |  |  ------------------
  ------------------
  812|    476|            handler.on_error("Invalid type specifier in format string");
  813|    476|            return begin;
  814|    476|        }
  815|  3.83k|        handler.on_type(type);
  816|  3.83k|        return begin;
  817|  4.31k|    };
vscan.cpp:_ZN3scn2v26detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
  633|  10.1k|{
  634|  10.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  10.1k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|  10.1k|    auto start = begin;
  638|  10.1k|    ++begin;
  639|       |
  640|  10.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60, False: 10.1k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|     60|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|     60|        return {};
  645|     60|    }
  646|  10.1k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 2.25k, False: 7.88k]
  ------------------
  647|  2.25k|        handler.on_charset_inverted();
  648|  2.25k|        ++begin;
  649|  2.25k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34, False: 2.21k]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|     34|            return {};
  654|     34|        }
  655|  2.21k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 70, False: 2.14k]
  ------------------
  656|     70|            handler.on_charset_single(char32_t{']'});
  657|     70|            ++begin;
  658|     70|        }
  659|  2.21k|    }
  660|  7.88k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 34, False: 7.84k]
  ------------------
  661|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|     34|    }
  663|       |
  664|  1.66M|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 1.66M, False: 676]
  ------------------
  665|  1.66M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 164, False: 1.66M]
  |  |  ------------------
  ------------------
  666|    164|            break;
  667|    164|        }
  668|       |
  669|  1.66M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 9.22k, False: 1.65M]
  ------------------
  670|  9.22k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  9.22k|        }
  672|       |
  673|  1.65M|        parse_presentation_set_literal(begin, end, handler);
  674|  1.65M|    }
  675|       |
  676|    840|    SCN_UNLIKELY_ATTR
  677|    840|    handler.on_error("Invalid [character set] specifier in format string");
  678|    840|    return {};
  679|  10.0k|}
vscan.cpp:_ZN3scn2v26detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
  597|  1.65M|{
  598|  1.65M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|  1.65M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|  1.65M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 46, False: 1.65M]
  |  |  ------------------
  ------------------
  602|     46|        return;
  603|     46|    }
  604|       |
  605|  1.65M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 1.65M, False: 414]
  |  Branch (605:25): [True: 8.58k, False: 1.65M]
  |  Branch (605:49): [True: 8.55k, False: 34]
  ------------------
  606|  1.65M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 8.41k, False: 142]
  ------------------
  607|  8.41k|        ++begin;
  608|       |
  609|  8.41k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  8.41k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  8.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28, False: 8.38k]
  |  |  ------------------
  ------------------
  611|     28|            return;
  612|     28|        }
  613|       |
  614|  8.38k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  8.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58, False: 8.32k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|     58|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|     58|            return;
  619|     58|        }
  620|       |
  621|  8.32k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  8.32k|        return;
  623|  8.38k|    }
  624|       |
  625|  1.65M|    handler.on_charset_single(cp_first);
  626|  1.65M|}
vscan.cpp:_ZN3scn2v26detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
  573|  1.66M|{
  574|  1.66M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|  1.66M|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|  1.66M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.66M]
  |  |  |  Branch (153:45): [True: 0, False: 1.66M]
  |  |  |  Branch (153:45): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|  1.66M|    const auto cp = decode_utf_code_point_exhaustive(
  583|  1.66M|        std::basic_string_view<CharT>{begin, len});
  584|  1.66M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74, False: 1.66M]
  |  |  ------------------
  ------------------
  585|     74|        handler.on_error("Invalid encoding in format string");
  586|     74|        return invalid_code_point;
  587|     74|    }
  588|       |
  589|  1.66M|    begin += len;
  590|  1.66M|    return cp;
  591|  1.66M|}
_ZN3scn2v26detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  302|  9.22k|    {
  303|  9.22k|        m_specs.charset_string_data = fmt.data();
  304|  9.22k|        m_specs.charset_string_size = fmt.size();
  305|  9.22k|        on_type(presentation_type::string_set);
  306|  9.22k|    }
vscan.cpp:_ZN3scn2v26detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
  685|  35.1k|{
  686|  35.1k|#if !SCN_DISABLE_REGEX
  687|  35.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  35.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  35.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  688|  35.1k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  242|  35.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  35.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  689|       |
  690|  35.1k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  70.2k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (690:19): [Folded - Ignored]
  |  Branch (690:19): [Folded - Ignored]
  ------------------
  691|  35.1k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (691:19): [Folded - Ignored]
  ------------------
  692|  35.1k|        handler.on_error("Regex backend doesn't support wide strings as input");
  693|  35.1k|        return begin;
  694|  35.1k|    }
  695|       |
  696|  35.1k|    auto start = begin;
  697|  35.1k|    ++begin;
  698|       |
  699|  35.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58, False: 35.0k]
  |  |  ------------------
  ------------------
  700|     58|        handler.on_error("Unexpected end of regex in format string");
  701|     58|        return begin;
  702|     58|    }
  703|       |
  704|  35.0k|    handler.on_type(presentation_type::regex);
  705|  7.15M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (705:12): [True: 7.15M, False: 174]
  ------------------
  706|  7.15M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (706:13): [True: 46.4k, False: 7.10M]
  ------------------
  707|  46.4k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (707:17): [True: 34.8k, False: 11.5k]
  ------------------
  708|  34.8k|                break;
  709|  34.8k|            }
  710|  11.5k|            else {
  711|  11.5k|                handler.on_type(presentation_type::regex_escaped);
  712|  11.5k|            }
  713|  46.4k|        }
  714|  7.15M|    }
  715|  35.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 174, False: 34.8k]
  |  |  ------------------
  ------------------
  716|    174|        handler.on_error("Unexpected end of regex in format string");
  717|    174|        return begin;
  718|    174|    }
  719|       |
  720|  34.8k|    auto regex_end = begin;
  721|  34.8k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
  722|  34.8k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  153|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 70, False: 34.8k]
  |  |  ------------------
  ------------------
  723|     70|        handler.on_error("Invalid (empty) regex in format string");
  724|     70|        return begin;
  725|     70|    }
  726|  34.8k|    handler.on_regex_pattern(regex_pattern);
  727|  34.8k|    ++begin;
  728|       |
  729|  34.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34, False: 34.7k]
  |  |  ------------------
  ------------------
  730|     34|        handler.on_error("Unexpected end of regex in format string");
  731|     34|        return begin;
  732|     34|    }
  733|       |
  734|  34.7k|    regex_flags flags{regex_flags::none};
  735|  34.7k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
  736|  34.7k|        {{'m', regex_flags::multiline},
  737|  34.7k|         {'s', regex_flags::singleline},
  738|  34.7k|         {'i', regex_flags::nocase},
  739|  34.7k|         {'n', regex_flags::nocapture}}};
  740|  40.4k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (740:12): [True: 40.3k, False: 58]
  ------------------
  741|  40.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (741:13): [True: 34.5k, False: 5.82k]
  ------------------
  742|  34.5k|            break;
  743|  34.5k|        }
  744|  5.82k|        bool found_flag = false;
  745|  14.8k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (745:24): [True: 14.8k, False: 154]
  ------------------
  746|  14.8k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (746:17): [True: 9.16k, False: 5.66k]
  ------------------
  747|  9.16k|                continue;
  748|  9.16k|            }
  749|  5.66k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (749:17): [True: 34, False: 5.63k]
  ------------------
  750|     34|                handler.on_error("Flag set multiple times in regex");
  751|     34|                return begin;
  752|     34|            }
  753|  5.63k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
  754|  5.63k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (754:17): [True: 52, False: 5.58k]
  ------------------
  755|       |                // clang-format off
  756|     52|                handler.on_error("/s flag for regex isn't supported by regex backend");
  757|       |                // clang-format on
  758|     52|            }
  759|       |#if !SCN_HAS_STD_REGEX_MULTILINE
  760|       |            if (*begin == CharT{'m'}) {
  761|       |                // clang-format off
  762|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
  763|       |                // clang-format on
  764|       |            }
  765|       |#endif
  766|  5.63k|#endif
  767|  5.63k|            flags |= flag.second;
  768|  5.63k|            found_flag = true;
  769|  5.63k|            break;
  770|  5.66k|        }
  771|  5.78k|        if (!found_flag) {
  ------------------
  |  Branch (771:13): [True: 154, False: 5.63k]
  ------------------
  772|    154|            handler.on_error("Invalid flag in regex");
  773|    154|            return begin;
  774|    154|        }
  775|  5.78k|    }
  776|  34.5k|    handler.on_regex_flags(flags);
  777|       |
  778|  34.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 58, False: 34.5k]
  |  |  ------------------
  ------------------
  779|     58|        handler.on_error("Unexpected end of regex in format string");
  780|     58|        return begin;
  781|     58|    }
  782|       |
  783|  34.5k|    return begin;
  784|       |#else
  785|       |    handler.on_error("Regular expression support is disabled");
  786|       |    return {};
  787|       |#endif
  788|  34.5k|}
_ZN3scn2v26detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  310|  34.8k|    {
  311|  34.8k|        m_specs.charset_string_data = pattern.data();
  312|  34.8k|        m_specs.charset_string_size = pattern.size();
  313|  34.8k|    }
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  4.31k|{
  412|  4.31k|    switch (type) {
  413|    322|        case 'b':
  ------------------
  |  Branch (413:9): [True: 322, False: 3.99k]
  ------------------
  414|    374|        case 'B':
  ------------------
  |  Branch (414:9): [True: 52, False: 4.26k]
  ------------------
  415|    374|            return presentation_type::int_binary;
  416|    168|        case 'd':
  ------------------
  |  Branch (416:9): [True: 168, False: 4.14k]
  ------------------
  417|    168|            return presentation_type::int_decimal;
  418|    376|        case 'i':
  ------------------
  |  Branch (418:9): [True: 376, False: 3.93k]
  ------------------
  419|    376|            return presentation_type::int_generic;
  420|     88|        case 'u':
  ------------------
  |  Branch (420:9): [True: 88, False: 4.22k]
  ------------------
  421|     88|            return presentation_type::int_unsigned_decimal;
  422|    106|        case 'o':
  ------------------
  |  Branch (422:9): [True: 106, False: 4.20k]
  ------------------
  423|    106|            return presentation_type::int_octal;
  424|    160|        case 'x':
  ------------------
  |  Branch (424:9): [True: 160, False: 4.15k]
  ------------------
  425|    230|        case 'X':
  ------------------
  |  Branch (425:9): [True: 70, False: 4.24k]
  ------------------
  426|    230|            return presentation_type::int_hex;
  427|     42|        case 'r':
  ------------------
  |  Branch (427:9): [True: 42, False: 4.27k]
  ------------------
  428|     76|        case 'R':
  ------------------
  |  Branch (428:9): [True: 34, False: 4.27k]
  ------------------
  429|     76|            return presentation_type::int_arbitrary_base;
  430|     88|        case 'a':
  ------------------
  |  Branch (430:9): [True: 88, False: 4.22k]
  ------------------
  431|    158|        case 'A':
  ------------------
  |  Branch (431:9): [True: 70, False: 4.24k]
  ------------------
  432|    158|            return presentation_type::float_hex;
  433|    106|        case 'e':
  ------------------
  |  Branch (433:9): [True: 106, False: 4.20k]
  ------------------
  434|    158|        case 'E':
  ------------------
  |  Branch (434:9): [True: 52, False: 4.26k]
  ------------------
  435|    158|            return presentation_type::float_scientific;
  436|    268|        case 'f':
  ------------------
  |  Branch (436:9): [True: 268, False: 4.04k]
  ------------------
  437|    338|        case 'F':
  ------------------
  |  Branch (437:9): [True: 70, False: 4.24k]
  ------------------
  438|    338|            return presentation_type::float_fixed;
  439|     42|        case 'g':
  ------------------
  |  Branch (439:9): [True: 42, False: 4.27k]
  ------------------
  440|    120|        case 'G':
  ------------------
  |  Branch (440:9): [True: 78, False: 4.23k]
  ------------------
  441|    120|            return presentation_type::float_general;
  442|    592|        case 's':
  ------------------
  |  Branch (442:9): [True: 592, False: 3.72k]
  ------------------
  443|    592|            return presentation_type::string;
  444|    934|        case 'c':
  ------------------
  |  Branch (444:9): [True: 934, False: 3.37k]
  ------------------
  445|    934|            return presentation_type::character;
  446|     34|        case '?':
  ------------------
  |  Branch (446:9): [True: 34, False: 4.27k]
  ------------------
  447|     34|            return presentation_type::escaped_character;
  448|     84|        case 'p':
  ------------------
  |  Branch (448:9): [True: 84, False: 4.22k]
  ------------------
  449|     84|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 4.31k]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 4.31k]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|    476|        default:
  ------------------
  |  Branch (456:9): [True: 476, False: 3.83k]
  ------------------
  457|    476|            return presentation_type::none;
  458|  4.31k|    }
  459|  4.31k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  52.4k|{
  489|  52.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  52.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  52.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|  52.4k|    auto check_align = [](wchar_t ch) {
  492|  52.4k|        switch (ch) {
  493|  52.4k|            case L'<':
  494|  52.4k|                return align_type::left;
  495|  52.4k|            case L'>':
  496|  52.4k|                return align_type::right;
  497|  52.4k|            case L'^':
  498|  52.4k|                return align_type::center;
  499|  52.4k|            default:
  500|  52.4k|                return align_type::none;
  501|  52.4k|        }
  502|  52.4k|    };
  503|       |
  504|  52.4k|    auto potential_fill_len = code_point_length(begin, end);
  505|  52.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 52.4k]
  |  |  |  Branch (153:45): [True: 0, False: 52.4k]
  |  |  |  Branch (153:45): [True: 0, False: 52.4k]
  |  |  ------------------
  ------------------
  506|  52.4k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  52.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  52.4k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  52.4k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  52.4k|    const auto begin_before_fill = begin;
  516|  52.4k|    begin += potential_fill_len;
  517|       |
  518|  52.4k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 1.28k, False: 51.1k]
  ------------------
  519|  1.28k|        return begin_before_fill;
  520|  1.28k|    }
  521|       |
  522|  51.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  51.1k|    const auto begin_after_fill = begin;
  524|  51.1k|    ++begin;
  525|       |
  526|  51.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 51.1k, False: 0]
  ------------------
  527|  51.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 94, False: 51.0k]
  |  |  ------------------
  ------------------
  528|     94|            handler.on_error("Invalid fill character '{' in format string");
  529|     94|            return begin;
  530|     94|        }
  531|  51.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 8.24k, False: 42.8k]
  ------------------
  532|  8.24k|            return begin_before_fill;
  533|  8.24k|        }
  534|  51.0k|    }
  535|       |
  536|  42.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 37.5k, False: 5.25k]
  ------------------
  537|  37.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 1.28k, False: 36.2k]
  ------------------
  538|  1.28k|            handler.on_align(potential_align_on_fill);
  539|  1.28k|            return begin_after_fill;
  540|  1.28k|        }
  541|  36.2k|        return begin_before_fill;
  542|  37.5k|    }
  543|       |
  544|  5.25k|    handler.on_fill(potential_fill);
  545|  5.25k|    handler.on_align(potential_align_after_fill);
  546|  5.25k|    return begin;
  547|  42.8k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  52.4k|{
  471|  52.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  52.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  52.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  52.4k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  52.4k|        return 1;
  474|  52.4k|    }
  475|  52.4k|    else {
  476|  52.4k|        const auto lengths =
  477|  52.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  52.4k|            "\3\4";
  479|  52.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  52.4k|        return len;
  481|  52.4k|    }
  482|  52.4k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   103k|    auto check_align = [](wchar_t ch) {
  492|   103k|        switch (ch) {
  493|    204|            case L'<':
  ------------------
  |  Branch (493:13): [True: 204, False: 103k]
  ------------------
  494|    204|                return align_type::left;
  495|    706|            case L'>':
  ------------------
  |  Branch (495:13): [True: 706, False: 102k]
  ------------------
  496|    706|                return align_type::right;
  497|  7.05k|            case L'^':
  ------------------
  |  Branch (497:13): [True: 7.05k, False: 96.5k]
  ------------------
  498|  7.05k|                return align_type::center;
  499|  95.6k|            default:
  ------------------
  |  Branch (499:13): [True: 95.6k, False: 7.96k]
  ------------------
  500|  95.6k|                return align_type::none;
  501|   103k|        }
  502|   103k|    };
_ZN3scn2v26detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  240|  5.25k|    {
  241|  5.25k|        m_specs.fill = fill;
  242|  5.25k|    }
_ZN3scn2v26detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
  111|  5.25k|    {
  112|  5.25k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  242|  5.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  113|  5.25k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  242|  5.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  114|  5.25k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (114:23): [Folded - Ignored]
  ------------------
  115|  5.25k|            for (size_t i = 0; i < s.size(); ++i) {
  116|  5.25k|                SCN_GCC_PUSH
  117|  5.25k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
  118|  5.25k|                m_data[i] = s[i];
  119|  5.25k|                SCN_GCC_POP
  120|  5.25k|            }
  121|  5.25k|            m_size = static_cast<unsigned char>(s.size());
  122|  5.25k|        }
  123|  5.25k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (123:28): [Folded - Ignored]
  ------------------
  124|  5.25k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
  125|  5.25k|            m_data[1] =
  126|  5.25k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
  127|  5.25k|            if (s.size() == 1) {
  128|  5.25k|                return;
  129|  5.25k|            }
  130|  5.25k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
  131|  5.25k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
  132|  5.25k|        }
  133|  5.25k|        else {
  134|  5.25k|            const auto front = static_cast<unsigned>(s.front());
  135|  5.25k|            m_data[0] = static_cast<char>(front);
  136|  5.25k|            m_data[1] = static_cast<char>(front >> 8);
  137|  5.25k|            m_data[2] = static_cast<char>(front >> 16);
  138|  5.25k|            m_data[3] = static_cast<char>(front >> 24);
  139|  5.25k|        }
  140|  5.25k|    }
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  52.2k|{
  554|  52.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  52.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  52.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  52.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 17.8k, False: 34.4k]
  |  Branch (556:33): [True: 6.51k, False: 11.3k]
  ------------------
  557|  6.51k|        int width = parse_simple_int(begin, end);
  558|  6.51k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|  6.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.47k, False: 34]
  |  |  ------------------
  ------------------
  559|  6.47k|            handler.on_width(width);
  560|  6.47k|        }
  561|     34|        else {
  562|     34|            handler.on_error("Invalid field width");
  563|     34|            return begin;
  564|     34|        }
  565|  6.51k|    }
  566|  52.2k|    return begin;
  567|  52.2k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|    528|    {
 1051|    528|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|    528|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 476, False: 52]
  ------------------
 1053|    528|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 424, False: 52]
  ------------------
 1054|    528|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 372, False: 52]
  ------------------
 1055|    528|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 320, False: 52]
  ------------------
 1056|    320|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|    320|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|    320|        }
 1061|       |
 1062|    208|        Handler::on_localized();
 1063|    208|    }
_ZN3scn2v26detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
  633|  2.62k|{
  634|  2.62k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  635|  2.62k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  242|  2.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  636|       |
  637|  2.62k|    auto start = begin;
  638|  2.62k|    ++begin;
  639|       |
  640|  2.62k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
  641|       |        // clang-format off
  642|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
  643|       |        // clang-format on
  644|      0|        return {};
  645|      0|    }
  646|  2.62k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (646:9): [True: 498, False: 2.12k]
  ------------------
  647|    498|        handler.on_charset_inverted();
  648|    498|        ++begin;
  649|    498|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 498]
  |  |  ------------------
  ------------------
  650|       |            // clang-format off
  651|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
  652|       |            // clang-format on
  653|      0|            return {};
  654|      0|        }
  655|    498|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (655:13): [True: 12, False: 486]
  ------------------
  656|     12|            handler.on_charset_single(char32_t{']'});
  657|     12|            ++begin;
  658|     12|        }
  659|    498|    }
  660|  2.12k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (660:14): [True: 0, False: 2.12k]
  ------------------
  661|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
  662|      0|    }
  663|       |
  664|   552k|    while (begin != end) {
  ------------------
  |  Branch (664:12): [True: 552k, False: 0]
  ------------------
  665|   552k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 552k]
  |  |  ------------------
  ------------------
  666|      0|            break;
  667|      0|        }
  668|       |
  669|   552k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (669:13): [True: 2.62k, False: 550k]
  ------------------
  670|  2.62k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
  671|  2.62k|        }
  672|       |
  673|   550k|        parse_presentation_set_literal(begin, end, handler);
  674|   550k|    }
  675|       |
  676|      0|    SCN_UNLIKELY_ATTR
  677|      0|    handler.on_error("Invalid [character set] specifier in format string");
  678|      0|    return {};
  679|  2.62k|}
_ZN3scn2v26detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
  597|   550k|{
  598|   550k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   550k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   550k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  599|       |
  600|   550k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
  601|   550k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  153|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 550k]
  |  |  ------------------
  ------------------
  602|      0|        return;
  603|      0|    }
  604|       |
  605|   550k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (605:9): [True: 550k, False: 0]
  |  Branch (605:25): [True: 2.50k, False: 547k]
  |  Branch (605:49): [True: 2.50k, False: 0]
  ------------------
  606|   550k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (606:9): [True: 2.47k, False: 36]
  ------------------
  607|  2.47k|        ++begin;
  608|       |
  609|  2.47k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
  610|  2.47k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  153|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.47k]
  |  |  ------------------
  ------------------
  611|      0|            return;
  612|      0|        }
  613|       |
  614|  2.47k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  153|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.47k]
  |  |  ------------------
  ------------------
  615|       |            // clang-format off
  616|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
  617|       |            // clang-format on
  618|      0|            return;
  619|      0|        }
  620|       |
  621|  2.47k|        handler.on_charset_range(cp_first, cp_second + 1);
  622|  2.47k|        return;
  623|  2.47k|    }
  624|       |
  625|   547k|    handler.on_charset_single(cp_first);
  626|   547k|}
_ZN3scn2v26detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
  573|   552k|{
  574|   552k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  575|       |
  576|   552k|    auto len = utf_code_point_length_by_starting_code_unit(*begin);
  577|   552k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  153|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 552k]
  |  |  |  Branch (153:45): [True: 0, False: 552k]
  |  |  |  Branch (153:45): [True: 0, False: 552k]
  |  |  ------------------
  ------------------
  578|      0|        handler.on_error("Invalid encoding in format string");
  579|      0|        return invalid_code_point;
  580|      0|    }
  581|       |
  582|   552k|    const auto cp = decode_utf_code_point_exhaustive(
  583|   552k|        std::basic_string_view<CharT>{begin, len});
  584|   552k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  153|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 552k]
  |  |  ------------------
  ------------------
  585|      0|        handler.on_error("Invalid encoding in format string");
  586|      0|        return invalid_code_point;
  587|      0|    }
  588|       |
  589|   552k|    begin += len;
  590|   552k|    return cp;
  591|   552k|}
_ZNK3scn2v26detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
  224|  14.1k|    {
  225|  14.1k|        return {reinterpret_cast<const CharT*>(charset_string_data),
  226|  14.1k|                charset_string_size};
  227|  14.1k|    }

_ZN3scn2v26detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
  225|  83.1k|{
  226|  83.1k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  83.1k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  83.1k|                  "\n"
  230|  83.1k|                  "Unsupported range type given as input to a scanning "
  231|  83.1k|                  "function.\n"
  232|  83.1k|                  "A range needs to have a character type (value type) "
  233|  83.1k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  83.1k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  83.1k|                  "to be included.\n"
  236|  83.1k|                  "See the scnlib documentation for more details.");
  237|  83.1k|    static_assert(
  238|  83.1k|        !std::is_same_v<T, custom_char_traits>,
  239|  83.1k|        "\n"
  240|  83.1k|        "Unsupported range type given as input to a scanning "
  241|  83.1k|        "function.\n"
  242|  83.1k|        "String types (std::basic_string, and std::basic_string_view) "
  243|  83.1k|        "need to use std::char_traits. Strings with custom Traits are "
  244|  83.1k|        "not supported.");
  245|  83.1k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  83.1k|                  "\n"
  247|  83.1k|                  "Unsupported range type given as input to a scanning "
  248|  83.1k|                  "function.\n"
  249|  83.1k|                  "file_marker_found cannot be used as an "
  250|  83.1k|                  "source range type to scn::scan.\n"
  251|  83.1k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  83.1k|                  "and do not provide an explicit source range, "
  253|  83.1k|                  "or use scn::scan with a FILE* directly.");
  254|  83.1k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  83.1k|                  "\n"
  256|  83.1k|                  "Unsupported range type given as input to a scanning "
  257|  83.1k|                  "function.\n"
  258|  83.1k|                  "In order to be scannable, a range needs to satisfy "
  259|  83.1k|                  "`forward_range`. `input_range` is not sufficient.");
  260|  83.1k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  83.1k|                  "\n"
  262|  83.1k|                  "Unsupported range type given as input to a scanning "
  263|  83.1k|                  "function.\n"
  264|  83.1k|                  "A range needs to model forward_range and have a valid "
  265|  83.1k|                  "character type (char or wchar_t) to be scannable.\n"
  266|  83.1k|                  "Examples of scannable ranges are std::string, "
  267|  83.1k|                  "std::string_view, "
  268|  83.1k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  83.1k|                  "See the scnlib documentation for more details.");
  270|       |
  271|  83.1k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  83.1k|}
_ZN3scn2v26detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
  100|  83.1k|{
  101|  83.1k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (101:19): [Folded - Ignored]
  ------------------
  102|  83.1k|        return r;
  103|       |        // return make_string_scan_buffer(r);
  104|  83.1k|    }
  105|  83.1k|    else {
  106|  83.1k|        return invalid_char_type{};
  107|  83.1k|    }
  108|  83.1k|}
_ZN3scn2v26detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
  225|   143k|{
  226|   143k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   143k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   143k|                  "\n"
  230|   143k|                  "Unsupported range type given as input to a scanning "
  231|   143k|                  "function.\n"
  232|   143k|                  "A range needs to have a character type (value type) "
  233|   143k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   143k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   143k|                  "to be included.\n"
  236|   143k|                  "See the scnlib documentation for more details.");
  237|   143k|    static_assert(
  238|   143k|        !std::is_same_v<T, custom_char_traits>,
  239|   143k|        "\n"
  240|   143k|        "Unsupported range type given as input to a scanning "
  241|   143k|        "function.\n"
  242|   143k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   143k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   143k|        "not supported.");
  245|   143k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   143k|                  "\n"
  247|   143k|                  "Unsupported range type given as input to a scanning "
  248|   143k|                  "function.\n"
  249|   143k|                  "file_marker_found cannot be used as an "
  250|   143k|                  "source range type to scn::scan.\n"
  251|   143k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   143k|                  "and do not provide an explicit source range, "
  253|   143k|                  "or use scn::scan with a FILE* directly.");
  254|   143k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   143k|                  "\n"
  256|   143k|                  "Unsupported range type given as input to a scanning "
  257|   143k|                  "function.\n"
  258|   143k|                  "In order to be scannable, a range needs to satisfy "
  259|   143k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   143k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   143k|                  "\n"
  262|   143k|                  "Unsupported range type given as input to a scanning "
  263|   143k|                  "function.\n"
  264|   143k|                  "A range needs to model forward_range and have a valid "
  265|   143k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   143k|                  "Examples of scannable ranges are std::string, "
  267|   143k|                  "std::string_view, "
  268|   143k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   143k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   143k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   143k|}
_ZN3scn2v26detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
  100|   143k|{
  101|   143k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (101:19): [Folded - Ignored]
  ------------------
  102|   143k|        return r;
  103|       |        // return make_string_scan_buffer(r);
  104|   143k|    }
  105|   143k|    else {
  106|   143k|        return invalid_char_type{};
  107|   143k|    }
  108|   143k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|   124k|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  83.1k|    {
   45|  83.1k|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  75.6k|    {
   66|  75.6k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 62, False: 75.5k]
  |  |  ------------------
  ------------------
   67|     62|            on_error(
   68|     62|                "Cannot switch from manual to automatic argument indexing");
   69|     62|            return 0;
   70|     62|        }
   71|       |
   72|  75.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  75.5k|        do_check_arg_id(id);
   74|  75.5k|        return id;
   75|  75.6k|    }
_ZNK3scn2v224basic_scan_parse_contextIcE8on_errorEPKc:
   89|    148|    {
   90|    148|        return detail::handle_error(
   91|    148|            scan_error{scan_error::invalid_format_string, msg});
   92|    148|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  80.6k|{
  210|  80.6k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  80.6k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  80.6k|}
_ZN3scn2v224basic_scan_parse_contextIcE12check_arg_idEm:
   78|  5.10k|    {
   79|  5.10k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  153|  5.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 86, False: 5.02k]
  |  |  ------------------
  ------------------
   80|     86|            on_error(
   81|     86|                "Cannot switch from manual to automatic argument indexing");
   82|     86|            return;
   83|     86|        }
   84|  5.02k|        m_next_arg_id = -1;
   85|  5.02k|        do_check_arg_id(id);
   86|  5.02k|    }
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  66.4k|    {
   61|  66.4k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  66.4k|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|   136k|    {
   50|   136k|        return m_format.data();
   51|   136k|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|   143k|    {
   45|   143k|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  58.6k|    {
   66|  58.6k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56, False: 58.6k]
  |  |  ------------------
  ------------------
   67|     56|            on_error(
   68|     56|                "Cannot switch from manual to automatic argument indexing");
   69|     56|            return 0;
   70|     56|        }
   71|       |
   72|  58.6k|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  58.6k|        do_check_arg_id(id);
   74|  58.6k|        return id;
   75|  58.6k|    }
_ZNK3scn2v224basic_scan_parse_contextIwE8on_errorEPKc:
   89|    130|    {
   90|    130|        return detail::handle_error(
   91|    130|            scan_error{scan_error::invalid_format_string, msg});
   92|    130|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  62.3k|{
  210|  62.3k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  62.3k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  62.3k|}
_ZN3scn2v224basic_scan_parse_contextIwE12check_arg_idEm:
   78|  3.80k|    {
   79|  3.80k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  153|  3.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 74, False: 3.72k]
  |  |  ------------------
  ------------------
   80|     74|            on_error(
   81|     74|                "Cannot switch from manual to automatic argument indexing");
   82|     74|            return;
   83|     74|        }
   84|  3.72k|        m_next_arg_id = -1;
   85|  3.72k|        do_check_arg_id(id);
   86|  3.72k|    }
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  50.3k|    {
   61|  50.3k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  50.3k|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|   104k|    {
   50|   104k|        return m_format.data();
   51|   104k|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEEENKUlSM_T0_E_clIccEEDaSM_SW_:
  153|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEEENKUlSM_T0_E_clIwcEEDaSM_SW_:
  153|  2.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  13.3k|    {
  482|  13.3k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  13.3k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISR_EE4typeE_EEOSK_:
  472|  13.3k|    {
  473|  13.3k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  13.3k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   338k|    {
  482|   338k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   338k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISQ_EE4typeE_EEOSJ_:
  472|   338k|    {
  473|   338k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   338k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.14k|    {
  513|  2.14k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.14k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.14k|    {
  505|  2.14k|        return ranges::next(it, n);
  506|  2.14k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.28k|    {
  549|  3.28k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.28k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.28k|    {
  541|  3.28k|        return ranges::distance(lhs, rhs);
  542|  3.28k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.76k|    {
  482|  3.76k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.76k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSD_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSI_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISP_EE4typeE_EEOSI_:
  472|  3.76k|    {
  473|  3.76k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.76k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|    852|    {
  513|    852|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|    852|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|    852|    {
  505|    852|        return ranges::next(it, n);
  506|    852|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  12.3k|    {
  482|  12.3k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  12.3k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISQ_EE4typeE_EEOSJ_:
  472|  12.3k|    {
  473|  12.3k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  12.3k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  1.82k|    {
  513|  1.82k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.82k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  1.82k|    {
  505|  1.82k|        return ranges::next(it, n);
  506|  1.82k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.42k|    {
  549|  3.42k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.42k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.42k|    {
  541|  3.42k|        return ranges::distance(lhs, rhs);
  542|  3.42k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.88k|    {
  482|  2.88k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.88k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTcmclL_ZN4nano6ranges16function_objects4sizeEEscDtfp_Efp_EcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeIT_EENSD_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSI_EEEEE15difference_typeEE4typeELm8EEmu15__make_unsignedISP_EE4typeE_EEOSI_:
  472|  2.88k|    {
  473|  2.88k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.88k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
  342|  3.29k|{
  343|  3.29k|    return {ranges::next(ranges::begin(source), n),
  344|  3.29k|            make_vscan_result_range_end(source)};
  345|  3.29k|}
_ZN3scn2v26detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
  329|  3.29k|{
  330|  3.29k|    return ranges::end(source);
  331|  3.29k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJcEEC2ES9_ONSt3__15tupleIJcEEE:
  252|    206|    {
  253|    206|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.29k|    {
  104|  3.29k|    }
_ZN3scn2v26detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
   38|    206|    {
   39|    206|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|  1.03k|    {
  253|  1.03k|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
   38|  2.09k|    {
   39|  2.09k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2EOSH_:
  244|  1.03k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEED2Ev:
  248|  2.06k|    ~scan_result() = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|  1.03k|    {
  253|  1.03k|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
   38|  2.09k|    {
   39|  2.09k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2EOSH_:
  244|  1.03k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEED2Ev:
  248|  2.06k|    ~scan_result() = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEC2ES9_ONSA_5tupleIJSE_EEE:
  252|  1.03k|    {
  253|  1.03k|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
   38|  1.03k|    {
   39|  1.03k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
  342|  3.43k|{
  343|  3.43k|    return {ranges::next(ranges::begin(source), n),
  344|  3.43k|            make_vscan_result_range_end(source)};
  345|  3.43k|}
_ZN3scn2v26detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
  329|  3.43k|{
  330|  3.43k|    return ranges::end(source);
  331|  3.43k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJwEEC2ES9_ONSt3__15tupleIJwEEE:
  252|    238|    {
  253|    238|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.43k|    {
  104|  3.43k|    }
_ZN3scn2v26detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
   38|    238|    {
   39|    238|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|  1.06k|    {
  253|  1.06k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEC2EOSH_:
  244|  1.06k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEED2Ev:
  248|  2.12k|    ~scan_result() = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2ES9_ONSA_5tupleIJSG_EEE:
  252|  1.06k|    {
  253|  1.06k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEC2EOSH_:
  244|  1.06k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEED2Ev:
  248|  2.12k|    ~scan_result() = default;
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEC2ES9_ONSA_5tupleIJSE_EEE:
  252|  1.06k|    {
  253|  1.06k|    }
_ZN3scn2v26detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
   38|  1.06k|    {
   39|  1.06k|    }

_ZN3scn2v24scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISB_E4typeEJDpNSS_ISL_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJcERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JcEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.03k, False: 206]
  |  |  ------------------
  ------------------
   56|  9.03k|        return unexpected(result.error());
   57|  9.03k|    }
   58|    206|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    206|    static_cast<    \
  |  |  247|    206|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    206|    static_cast<    \
  |  |  247|    206|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISC_E4typeEJDpNSW_ISM_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJcENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JcEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v24scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISB_E4typeEJDpNSS_ISL_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJiERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.24k, False: 0]
  |  |  ------------------
  ------------------
   56|  9.24k|        return unexpected(result.error());
   57|  9.24k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISC_E4typeEJDpNSW_ISM_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v24scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISB_E4typeEJDpNSS_ISL_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJjERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.24k, False: 0]
  |  |  ------------------
  ------------------
   56|  9.24k|        return unexpected(result.error());
   57|  9.24k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISC_E4typeEJDpNSW_ISM_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v24scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISB_E4typeEJDpNSS_ISL_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJdERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.24k, False: 0]
  |  |  ------------------
  ------------------
   56|  9.24k|        return unexpected(result.error());
   57|  9.24k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISC_E4typeEJDpNSW_ISM_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJdENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v24scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISB_E4typeEJDpNSS_ISL_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJbERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS8_JbEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.24k, False: 0]
  |  |  ------------------
  ------------------
   56|  9.24k|        return unexpected(result.error());
   57|  9.24k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISC_E4typeEJDpNSW_ISM_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJbENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JbEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v24scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISC_E4typeEJDpNST_ISM_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJPvERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_24basic_scan_format_stringIcS9_JS3_EEEEENS0_13scan_expectedINS0_11scan_resultINS4_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEEOSF_T2_NS4_5tupleIJSQ_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSD_ISF_EEONS0_14scan_arg_storeIT0_JSH_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.24k, False: 0]
  |  |  ------------------
  ------------------
   56|  9.24k|        return unexpected(result.error());
   57|  9.24k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISD_E4typeEJDpNSX_ISN_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJPvENSt3__16localeERNS4_17basic_string_viewIcNS4_11char_traitsIcEEEENS0_24basic_scan_format_stringIcSA_JS3_EEEEENS0_13scan_expectedINS0_11scan_resultINS4_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSG_T3_NS4_5tupleIJSR_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISF_E4typeEJDpNSW_ISP_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEERNS3_17basic_string_viewIcS6_EENS0_24basic_scan_format_stringIcSC_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEEOSI_T2_NS3_5tupleIJST_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.21k, False: 1.03k]
  |  |  ------------------
  ------------------
   56|  8.21k|        return unexpected(result.error());
   57|  8.21k|    }
   58|  1.03k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.03k|    static_cast<    \
  |  |  247|  1.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.03k|    static_cast<    \
  |  |  247|  1.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNS10_ISQ_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEENS3_6localeERNS3_17basic_string_viewIcS6_EENS0_24basic_scan_format_stringIcSD_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSJ_T3_NS3_5tupleIJSU_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSX_ISQ_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEERNS3_17basic_string_viewIcNS5_IcEEEENS0_24basic_scan_format_stringIcSD_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NS3_5tupleIJSU_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.21k, False: 1.03k]
  |  |  ------------------
  ------------------
   56|  8.21k|        return unexpected(result.error());
   57|  8.21k|    }
   58|  1.03k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.03k|    static_cast<    \
  |  |  247|  1.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.03k|    static_cast<    \
  |  |  247|  1.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS11_ISR_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEENS3_6localeERNS3_17basic_string_viewIcNS5_IcEEEENS0_24basic_scan_format_stringIcSE_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSV_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISB_E4typeEJDpNSS_ISL_E4typeEEEE:
  116|  4.62k|{
  117|  4.62k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  4.62k|}
_ZN3scn2v26detail9scan_implIcJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEERS7_NS0_24basic_scan_format_stringIcS8_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  4.62k|{
   77|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  4.62k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  4.62k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSH_ISJ_EEONS0_14scan_arg_storeIT0_JSL_EEE:
   54|  9.24k|{
   55|  9.24k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  9.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.21k, False: 1.03k]
  |  |  ------------------
  ------------------
   56|  8.21k|        return unexpected(result.error());
   57|  8.21k|    }
   58|  1.03k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.03k|    static_cast<    \
  |  |  247|  1.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.03k|    static_cast<    \
  |  |  247|  1.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  9.24k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISC_E4typeEJDpNSW_ISM_E4typeEEEE:
  200|  4.62k|{
  201|  4.62k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  4.62k|                                                      format, {});
  203|  4.62k|}
_ZN3scn2v26detail19scan_localized_implIcJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEENS3_6localeERS7_NS0_24basic_scan_format_stringIcS9_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  4.62k|{
  163|  4.62k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  4.62k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  4.62k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  4.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  4.62k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  4.62k|    static_cast<    \
  |  |  247|  4.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.62k|}
_ZN3scn2v26detail9scan_implIwJwERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JwEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.6k, False: 238]
  |  |  ------------------
  ------------------
   56|  15.6k|        return unexpected(result.error());
   57|  15.6k|    }
   58|    238|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    238|    static_cast<    \
  |  |  247|    238|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|    238|    static_cast<    \
  |  |  247|    238|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJwENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JwEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}
_ZN3scn2v26detail9scan_implIwJiERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.9k, False: 0]
  |  |  ------------------
  ------------------
   56|  15.9k|        return unexpected(result.error());
   57|  15.9k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}
_ZN3scn2v26detail9scan_implIwJjERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.9k, False: 0]
  |  |  ------------------
  ------------------
   56|  15.9k|        return unexpected(result.error());
   57|  15.9k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}
_ZN3scn2v26detail9scan_implIwJdERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.9k, False: 0]
  |  |  ------------------
  ------------------
   56|  15.9k|        return unexpected(result.error());
   57|  15.9k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJdENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JdEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}
_ZN3scn2v26detail9scan_implIwJbERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS8_JbEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.9k, False: 0]
  |  |  ------------------
  ------------------
   56|  15.9k|        return unexpected(result.error());
   57|  15.9k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJbENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JbEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}
_ZN3scn2v26detail9scan_implIwJPvERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEENS0_24basic_scan_format_stringIwS9_JS3_EEEEENS0_13scan_expectedINS0_11scan_resultINS4_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEEOSF_T2_NS4_5tupleIJSQ_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSD_ISF_EEONS0_14scan_arg_storeIT0_JSH_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.9k, False: 0]
  |  |  ------------------
  ------------------
   56|  15.9k|        return unexpected(result.error());
   57|  15.9k|    }
   58|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJPvENSt3__16localeERNS4_17basic_string_viewIwNS4_11char_traitsIwEEEENS0_24basic_scan_format_stringIwSA_JS3_EEEEENS0_13scan_expectedINS0_11scan_resultINS4_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSG_T3_NS4_5tupleIJSR_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}
_ZN3scn2v26detail9scan_implIwJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEERNS3_17basic_string_viewIwNS5_IwEEEENS0_24basic_scan_format_stringIwSD_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NS3_5tupleIJSU_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.8k, False: 1.06k]
  |  |  ------------------
  ------------------
   56|  14.8k|        return unexpected(result.error());
   57|  14.8k|    }
   58|  1.06k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEENS3_6localeERNS3_17basic_string_viewIwNS5_IwEEEENS0_24basic_scan_format_stringIwSE_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSV_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}
_ZN3scn2v26detail9scan_implIwJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEERNS3_17basic_string_viewIwS6_EENS0_24basic_scan_format_stringIwSC_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT0_EEEEEOSI_T2_NS3_5tupleIJST_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSJ_ISL_EEONS0_14scan_arg_storeIT0_JSN_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.8k, False: 1.06k]
  |  |  ------------------
  ------------------
   56|  14.8k|        return unexpected(result.error());
   57|  14.8k|    }
   58|  1.06k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEENS3_6localeERNS3_17basic_string_viewIwS6_EENS0_24basic_scan_format_stringIwSD_JS9_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSJ_T3_NS3_5tupleIJSU_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}
_ZN3scn2v26detail9scan_implIwJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEERS7_NS0_24basic_scan_format_stringIwS8_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_31borrowed_subrange_with_sentinelISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT0_EEEEEOSE_T2_NS3_5tupleIJSP_EEE:
   76|  7.96k|{
   77|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  7.96k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  7.96k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSH_ISJ_EEONS0_14scan_arg_storeIT0_JSL_EEE:
   54|  15.9k|{
   55|  15.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.8k, False: 1.06k]
  |  |  ------------------
  ------------------
   56|  14.8k|        return unexpected(result.error());
   57|  14.8k|    }
   58|  1.06k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  15.9k|}
_ZN3scn2v26detail19scan_localized_implIwJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEENS3_6localeERS7_NS0_24basic_scan_format_stringIwS9_JS7_EEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT2_EEP8_IO_FILEEESJ_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSF_T3_NS3_5tupleIJSQ_EEE:
  162|  7.96k|{
  163|  7.96k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  7.96k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  7.96k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  7.96k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  7.96k|    static_cast<    \
  |  |  247|  7.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.96k|}

_ZN3scn2v26detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
   90|  2.50M|{
   91|  2.50M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  242|  2.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|       |
   93|  2.50M|    const auto is_trailing_code_unit = [](char ch) {
   94|  2.50M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
   95|  2.50M|    };
   96|       |
   97|  2.50M|    if (input.size() == 1) {
  ------------------
  |  Branch (97:9): [True: 2.22M, False: 277k]
  ------------------
   98|  2.22M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (98:13): [True: 0, False: 2.22M]
  ------------------
   99|      0|            SCN_UNLIKELY_ATTR
  100|      0|            return invalid_code_point;
  101|      0|        }
  102|  2.22M|        return static_cast<char32_t>(input[0]);
  103|  2.22M|    }
  104|       |
  105|   277k|    if (input.size() == 2) {
  ------------------
  |  Branch (105:9): [True: 259k, False: 17.7k]
  ------------------
  106|   259k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (106:13): [True: 0, False: 259k]
  ------------------
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|            return invalid_code_point;
  109|      0|        }
  110|   259k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (110:13): [True: 62, False: 259k]
  ------------------
  111|     62|            SCN_UNLIKELY_ATTR
  112|     62|            return invalid_code_point;
  113|     62|        }
  114|       |
  115|   259k|        char32_t cp{};
  116|   259k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
  117|   259k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
  118|   259k|        return cp;
  119|   259k|    }
  120|       |
  121|  17.7k|    if (input.size() == 3) {
  ------------------
  |  Branch (121:9): [True: 8.81k, False: 8.93k]
  ------------------
  122|  8.81k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (122:13): [True: 0, False: 8.81k]
  ------------------
  123|      0|            SCN_UNLIKELY_ATTR
  124|      0|            return invalid_code_point;
  125|      0|        }
  126|  8.81k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (126:13): [True: 34, False: 8.78k]
  ------------------
  127|  8.81k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (127:13): [True: 34, False: 8.74k]
  ------------------
  128|     68|            SCN_UNLIKELY_ATTR
  129|     68|            return invalid_code_point;
  130|     68|        }
  131|       |
  132|  8.74k|        char32_t cp{};
  133|  8.74k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
  134|  8.74k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
  135|  8.74k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
  136|  8.74k|        return cp;
  137|  8.81k|    }
  138|       |
  139|  8.93k|    if (input.size() == 4) {
  ------------------
  |  Branch (139:9): [True: 8.93k, False: 0]
  ------------------
  140|  8.93k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (140:13): [True: 0, False: 8.93k]
  ------------------
  141|      0|            SCN_UNLIKELY_ATTR
  142|      0|            return invalid_code_point;
  143|      0|        }
  144|  8.93k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (144:13): [True: 40, False: 8.89k]
  ------------------
  145|     40|            SCN_UNLIKELY_ATTR
  146|     40|            return invalid_code_point;
  147|     40|        }
  148|  8.89k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (148:13): [True: 34, False: 8.85k]
  ------------------
  149|  8.89k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (149:13): [True: 34, False: 8.82k]
  ------------------
  150|  8.89k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (150:13): [True: 34, False: 8.78k]
  ------------------
  151|    102|            SCN_UNLIKELY_ATTR
  152|    102|            return invalid_code_point;
  153|    102|        }
  154|       |
  155|  8.78k|        char32_t cp{};
  156|  8.78k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
  157|  8.78k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
  158|  8.78k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
  159|  8.78k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
  160|  8.78k|        return cp;
  161|  8.89k|    }
  162|       |
  163|      0|    SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  164|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  165|      0|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|  4.04M|{
   72|  4.04M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  4.04M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  4.04M|    }
   75|  4.04M|    else if constexpr (sizeof(U) == 2) {
   76|  4.04M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  4.04M|    }
   78|  4.04M|    else {
   79|       |        // utf-32
   80|  4.04M|        static_assert(sizeof(U) == 4);
   81|  4.04M|        SCN_UNUSED(ch);
   82|  4.04M|        return 1;
   83|  4.04M|    }
   84|  4.04M|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|  4.04M|{
   36|  4.04M|    static_assert(sizeof(U8) == 1);
   37|       |
   38|  4.04M|    SCN_GCC_COMPAT_PUSH
   39|  4.04M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|  4.04M|    constexpr char lengths[] =
   41|  4.04M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|  4.04M|        "\1\1\1\1\1\1\1\1"
   43|  4.04M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|  4.04M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|  4.04M|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|  4.04M|        "\4";               // highest bits 11110 -> 4-byte cp
   48|  4.04M|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|  4.04M|    SCN_GCC_COMPAT_POP
   50|  4.04M|}
_ZN3scn2v26detail32decode_utf_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  247|  2.50M|{
  248|  2.50M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (248:19): [Folded - Ignored]
  ------------------
  249|  2.50M|        return decode_utf8_code_point_exhaustive(input);
  250|  2.50M|    }
  251|  2.50M|    else if constexpr (sizeof(CharT) == 2) {
  252|  2.50M|        return decode_utf16_code_point_exhaustive(input);
  253|  2.50M|    }
  254|  2.50M|    else {
  255|  2.50M|        SCN_EXPECT(input.size() == 1);
  256|  2.50M|        return static_cast<char32_t>(input.front());
  257|  2.50M|    }
  258|  2.50M|}
_ZZN3scn2v26detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
   93|   303k|    const auto is_trailing_code_unit = [](char ch) {
   94|   303k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
   95|   303k|    };
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  9.31M|{
   72|  9.31M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  9.31M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  9.31M|    }
   75|  9.31M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  9.31M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  9.31M|    }
   78|  9.31M|    else {
   79|       |        // utf-32
   80|  9.31M|        static_assert(sizeof(U) == 4);
   81|  9.31M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  9.31M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  9.31M|        return 1;
   83|  9.31M|    }
   84|  9.31M|}
_ZN3scn2v26detail32decode_utf_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  247|  2.22M|{
  248|  2.22M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (248:19): [Folded - Ignored]
  ------------------
  249|  2.22M|        return decode_utf8_code_point_exhaustive(input);
  250|  2.22M|    }
  251|  2.22M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (251:24): [Folded - Ignored]
  ------------------
  252|  2.22M|        return decode_utf16_code_point_exhaustive(input);
  253|  2.22M|    }
  254|  2.22M|    else {
  255|  2.22M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  242|  2.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  256|  2.22M|        return static_cast<char32_t>(input.front());
  257|  2.22M|    }
  258|  2.22M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  10.1k|{
   36|  10.1k|#define SCN_VISIT(Type)                                         \
   37|  10.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  10.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  10.1k|    }                                                           \
   40|  10.1k|    else {                                                      \
   41|  10.1k|        return vis(monostate_val);                              \
   42|  10.1k|    }
   43|       |
   44|  10.1k|    monostate monostate_val{};
   45|       |
   46|  10.1k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 10.1k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 10.1k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  1.12k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 1.12k, False: 9.02k]
  ------------------
   52|  1.12k|            SCN_VISIT(int);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 10.1k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 10.1k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 10.1k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 10.1k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  1.12k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 1.12k, False: 9.02k]
  ------------------
   62|  1.12k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 10.1k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 10.1k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|  1.12k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 1.12k, False: 9.02k]
  ------------------
   68|  1.12k|            SCN_VISIT(void*);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   69|  1.12k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 1.12k, False: 9.02k]
  ------------------
   70|  1.12k|            SCN_VISIT(bool);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   71|  1.12k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 1.12k, False: 9.02k]
  ------------------
   72|  1.12k|            SCN_VISIT(char);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 10.1k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 10.1k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 10.1k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|  1.12k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 1.12k, False: 9.02k]
  ------------------
   80|  1.12k|            SCN_VISIT(double);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 10.1k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|  1.12k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 1.12k, False: 9.02k]
  ------------------
   84|  1.12k|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   85|  1.12k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 1.12k, False: 9.02k]
  ------------------
   86|  1.12k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 10.1k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|  1.12k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 1.12k, False: 9.02k]
  ------------------
   90|  1.12k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  1.12k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.12k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.12k|    }                                                           \
  |  |   40|  1.12k|    else {                                                      \
  |  |   41|  1.12k|        return vis(monostate_val);                              \
  |  |   42|  1.12k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 10.1k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 10.1k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 10.1k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 10.1k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 10.1k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  10.1k|            SCN_CLANG_POP
  114|  10.1k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  66.0k|{
   36|  66.0k|#define SCN_VISIT(Type)                                         \
   37|  66.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  66.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  66.0k|    }                                                           \
   40|  66.0k|    else {                                                      \
   41|  66.0k|        return vis(monostate_val);                              \
   42|  66.0k|    }
   43|       |
   44|  66.0k|    monostate monostate_val{};
   45|       |
   46|  66.0k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 66.0k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 66.0k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  7.36k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 7.36k, False: 58.7k]
  ------------------
   52|  7.36k|            SCN_VISIT(int);
  ------------------
  |  |   37|  7.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.36k|    }                                                           \
  |  |   40|  7.36k|    else {                                                      \
  |  |   41|  7.36k|        return vis(monostate_val);                              \
  |  |   42|  7.36k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 66.0k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 66.0k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 66.0k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 66.0k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  7.36k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 7.36k, False: 58.7k]
  ------------------
   62|  7.36k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  7.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.36k|    }                                                           \
  |  |   40|  7.36k|    else {                                                      \
  |  |   41|  7.36k|        return vis(monostate_val);                              \
  |  |   42|  7.36k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 66.0k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 66.0k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|  7.32k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 7.32k, False: 58.7k]
  ------------------
   68|  7.32k|            SCN_VISIT(void*);
  ------------------
  |  |   37|  7.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.32k|    }                                                           \
  |  |   40|  7.32k|    else {                                                      \
  |  |   41|  7.32k|        return vis(monostate_val);                              \
  |  |   42|  7.32k|    }
  ------------------
   69|  7.36k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 7.36k, False: 58.7k]
  ------------------
   70|  7.36k|            SCN_VISIT(bool);
  ------------------
  |  |   37|  7.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.36k|    }                                                           \
  |  |   40|  7.36k|    else {                                                      \
  |  |   41|  7.36k|        return vis(monostate_val);                              \
  |  |   42|  7.36k|    }
  ------------------
   71|  7.32k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 7.32k, False: 58.7k]
  ------------------
   72|  7.32k|            SCN_VISIT(char);
  ------------------
  |  |   37|  7.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.32k|    }                                                           \
  |  |   40|  7.32k|    else {                                                      \
  |  |   41|  7.32k|        return vis(monostate_val);                              \
  |  |   42|  7.32k|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 66.0k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 66.0k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 66.0k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|  7.36k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 7.36k, False: 58.7k]
  ------------------
   80|  7.36k|            SCN_VISIT(double);
  ------------------
  |  |   37|  7.36k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.36k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.36k|    }                                                           \
  |  |   40|  7.36k|    else {                                                      \
  |  |   41|  7.36k|        return vis(monostate_val);                              \
  |  |   42|  7.36k|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 66.0k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|  7.32k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 7.32k, False: 58.7k]
  ------------------
   84|  7.32k|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|  7.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.32k|    }                                                           \
  |  |   40|  7.32k|    else {                                                      \
  |  |   41|  7.32k|        return vis(monostate_val);                              \
  |  |   42|  7.32k|    }
  ------------------
   85|  7.32k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 7.32k, False: 58.7k]
  ------------------
   86|  7.32k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  7.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.32k|    }                                                           \
  |  |   40|  7.32k|    else {                                                      \
  |  |   41|  7.32k|        return vis(monostate_val);                              \
  |  |   42|  7.32k|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 66.0k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|  7.32k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 7.32k, False: 58.7k]
  ------------------
   90|  7.32k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  7.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  7.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  7.32k|    }                                                           \
  |  |   40|  7.32k|    else {                                                      \
  |  |   41|  7.32k|        return vis(monostate_val);                              \
  |  |   42|  7.32k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 66.0k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 66.0k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 66.0k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 66.0k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 66.0k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  66.0k|            SCN_CLANG_POP
  114|  66.0k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  8.02k|{
   36|  8.02k|#define SCN_VISIT(Type)                                         \
   37|  8.02k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  8.02k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  8.02k|    }                                                           \
   40|  8.02k|    else {                                                      \
   41|  8.02k|        return vis(monostate_val);                              \
   42|  8.02k|    }
   43|       |
   44|  8.02k|    monostate monostate_val{};
   45|       |
   46|  8.02k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 8.02k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 8.02k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|    892|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 892, False: 7.13k]
  ------------------
   52|    892|            SCN_VISIT(int);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 8.02k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 8.02k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 8.02k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 8.02k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|    892|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 892, False: 7.13k]
  ------------------
   62|    892|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 8.02k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 8.02k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|    892|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 892, False: 7.13k]
  ------------------
   68|    892|            SCN_VISIT(void*);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   69|    892|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 892, False: 7.13k]
  ------------------
   70|    892|            SCN_VISIT(bool);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 8.02k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|    892|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 892, False: 7.13k]
  ------------------
   74|    892|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 8.02k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 8.02k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|    892|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 892, False: 7.13k]
  ------------------
   80|    892|            SCN_VISIT(double);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 8.02k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 8.02k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|    892|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 892, False: 7.13k]
  ------------------
   86|    892|            SCN_VISIT(std::string);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   87|    892|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 892, False: 7.13k]
  ------------------
   88|    892|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   89|    892|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 892, False: 7.13k]
  ------------------
   90|    892|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|    892|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|    892|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|    892|    }                                                           \
  |  |   40|    892|    else {                                                      \
  |  |   41|    892|        return vis(monostate_val);                              \
  |  |   42|    892|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 8.02k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 8.02k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 8.02k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 8.02k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 8.02k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  8.02k|            SCN_CLANG_POP
  114|  8.02k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  50.2k|{
   36|  50.2k|#define SCN_VISIT(Type)                                         \
   37|  50.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  50.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  50.2k|    }                                                           \
   40|  50.2k|    else {                                                      \
   41|  50.2k|        return vis(monostate_val);                              \
   42|  50.2k|    }
   43|       |
   44|  50.2k|    monostate monostate_val{};
   45|       |
   46|  50.2k|    switch (arg.m_type) {
   47|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 0, False: 50.2k]
  ------------------
   48|      0|            SCN_VISIT(signed char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 50.2k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  5.60k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 5.60k, False: 44.6k]
  ------------------
   52|  5.60k|            SCN_VISIT(int);
  ------------------
  |  |   37|  5.60k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.60k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.60k|    }                                                           \
  |  |   40|  5.60k|    else {                                                      \
  |  |   41|  5.60k|        return vis(monostate_val);                              \
  |  |   42|  5.60k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 50.2k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 0, False: 50.2k]
  ------------------
   56|      0|            SCN_VISIT(long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   57|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 0, False: 50.2k]
  ------------------
   58|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 50.2k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  5.60k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 5.60k, False: 44.6k]
  ------------------
   62|  5.60k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  5.60k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.60k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.60k|    }                                                           \
  |  |   40|  5.60k|    else {                                                      \
  |  |   41|  5.60k|        return vis(monostate_val);                              \
  |  |   42|  5.60k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 50.2k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 0, False: 50.2k]
  ------------------
   66|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   67|  5.56k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 5.56k, False: 44.6k]
  ------------------
   68|  5.56k|            SCN_VISIT(void*);
  ------------------
  |  |   37|  5.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.56k|    }                                                           \
  |  |   40|  5.56k|    else {                                                      \
  |  |   41|  5.56k|        return vis(monostate_val);                              \
  |  |   42|  5.56k|    }
  ------------------
   69|  5.60k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 5.60k, False: 44.6k]
  ------------------
   70|  5.60k|            SCN_VISIT(bool);
  ------------------
  |  |   37|  5.60k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.60k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.60k|    }                                                           \
  |  |   40|  5.60k|    else {                                                      \
  |  |   41|  5.60k|        return vis(monostate_val);                              \
  |  |   42|  5.60k|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 50.2k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|  5.56k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 5.56k, False: 44.6k]
  ------------------
   74|  5.56k|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|  5.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.56k|    }                                                           \
  |  |   40|  5.56k|    else {                                                      \
  |  |   41|  5.56k|        return vis(monostate_val);                              \
  |  |   42|  5.56k|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 50.2k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 50.2k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|  5.60k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 5.60k, False: 44.6k]
  ------------------
   80|  5.60k|            SCN_VISIT(double);
  ------------------
  |  |   37|  5.60k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.60k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.60k|    }                                                           \
  |  |   40|  5.60k|    else {                                                      \
  |  |   41|  5.60k|        return vis(monostate_val);                              \
  |  |   42|  5.60k|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 50.2k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 50.2k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|  5.56k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 5.56k, False: 44.6k]
  ------------------
   86|  5.56k|            SCN_VISIT(std::string);
  ------------------
  |  |   37|  5.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.56k|    }                                                           \
  |  |   40|  5.56k|    else {                                                      \
  |  |   41|  5.56k|        return vis(monostate_val);                              \
  |  |   42|  5.56k|    }
  ------------------
   87|  5.56k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 5.56k, False: 44.6k]
  ------------------
   88|  5.56k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|  5.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.56k|    }                                                           \
  |  |   40|  5.56k|    else {                                                      \
  |  |   41|  5.56k|        return vis(monostate_val);                              \
  |  |   42|  5.56k|    }
  ------------------
   89|  5.56k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 5.56k, False: 44.6k]
  ------------------
   90|  5.56k|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|  5.56k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  5.56k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  5.56k|    }                                                           \
  |  |   40|  5.56k|    else {                                                      \
  |  |   41|  5.56k|        return vis(monostate_val);                              \
  |  |   42|  5.56k|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 50.2k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 50.2k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 50.2k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 50.2k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 50.2k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  50.2k|            SCN_CLANG_POP
  114|  50.2k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|      0|}  // namespace scn

_ZN3scn2v25vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_31borrowed_subrange_with_sentinelISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  41.5k|{
  174|  41.5k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  41.5k|}
_ZN3scn2v26detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
  110|  41.5k|{
  111|  41.5k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  41.5k|    auto result = vscan_impl(buffer, format, args);
  114|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39.9k, False: 1.64k]
  |  |  ------------------
  ------------------
  115|  39.9k|        return unexpected(result.error());
  116|  39.9k|    }
  117|  1.64k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  41.5k|}
_ZN3scn2v25vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  41.5k|{
  192|  41.5k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  41.5k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  126|  41.5k|{
  127|  41.5k|#if !SCN_DISABLE_LOCALE
  128|  41.5k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  41.5k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  41.5k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  41.5k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  41.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39.9k, False: 1.64k]
  |  |  ------------------
  ------------------
  135|  39.9k|        return unexpected(result.error());
  136|  39.9k|    }
  137|  1.64k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.64k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  41.5k|}
_ZN3scn2v26detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_31borrowed_subrange_with_sentinelISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
  110|  71.6k|{
  111|  71.6k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  71.6k|    auto result = vscan_impl(buffer, format, args);
  114|  71.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  71.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 69.9k, False: 1.71k]
  |  |  ------------------
  ------------------
  115|  69.9k|        return unexpected(result.error());
  116|  69.9k|    }
  117|  1.71k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  71.6k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
  126|  71.6k|{
  127|  71.6k|#if !SCN_DISABLE_LOCALE
  128|  71.6k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  71.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  71.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  71.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  71.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  71.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 69.9k, False: 1.71k]
  |  |  ------------------
  ------------------
  135|  69.9k|        return unexpected(result.error());
  136|  69.9k|    }
  137|  1.71k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  71.6k|}

_ZN3scn2v24scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISC_E4typeEJDpNST_ISM_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v25vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_31borrowed_subrange_with_sentinelISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  71.6k|{
   45|  71.6k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  71.6k|}
_ZN3scn2v24scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISD_E4typeEJDpNSX_ISN_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}
_ZN3scn2v25vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  71.6k|{
   61|  71.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  71.6k|}
_ZN3scn2v24scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISC_E4typeEJDpNST_ISM_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v24scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISD_E4typeEJDpNSX_ISN_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}
_ZN3scn2v24scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISC_E4typeEJDpNST_ISM_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v24scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISD_E4typeEJDpNSX_ISN_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}
_ZN3scn2v24scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISC_E4typeEJDpNST_ISM_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v24scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISD_E4typeEJDpNSX_ISN_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}
_ZN3scn2v24scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISC_E4typeEJDpNST_ISM_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v24scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISD_E4typeEJDpNSX_ISN_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}
_ZN3scn2v24scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISC_E4typeEJDpNST_ISM_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v24scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISD_E4typeEJDpNSX_ISN_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNSY_ISR_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS12_ISS_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISG_E4typeEJDpNSX_ISQ_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v24scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS11_ISR_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_31borrowed_subrange_with_sentinelISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISC_E4typeEJDpNST_ISM_E4typeEEEE:
   89|  7.96k|{
   90|  7.96k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  7.96k|}
_ZN3scn2v24scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_31borrowed_subrange_with_sentinelISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISD_E4typeEJDpNSX_ISN_E4typeEEEE:
  124|  7.96k|{
  125|  7.96k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  7.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  7.96k|                                                         format, {});
  127|  7.96k|}

_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|   162k|            {
 3788|   162k|                ranges::advance(x, n);
 3789|   162k|                return x;
 3790|   162k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|   162k|            {
 3678|   162k|                fn::impl(i, n);
 3679|   162k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|   188k|            {
 3562|   188k|                r += n;
 3563|   188k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   134k|            {
 2693|   134k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   134k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   134k|            {
 2672|   134k|                return decay_copy(t.begin());
 2673|   134k|            }
_ZN4nano6ranges6detail10decay_copyIPKcEEu7__decayIT_EOS5_:
 2605|  2.58M|    {
 2606|  2.58M|        return std::forward<T>(t);
 2607|  2.58M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|   134k|            {
 2759|   134k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   134k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|   134k|            {
 2739|   134k|                return decay_copy(std::forward<T>(t).end());
 2740|   134k|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|   748k|        {
 6375|   748k|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|   748k|        {
 6294|   748k|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  18.6k|            {
 3788|  18.6k|                ranges::advance(x, n);
 3789|  18.6k|                return x;
 3790|  18.6k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  18.6k|            {
 3678|  18.6k|                fn::impl(i, n);
 3679|  18.6k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  18.6k|            {
 3562|  18.6k|                r += n;
 3563|  18.6k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  4.44k|            {
 2693|  4.44k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.44k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  4.44k|            {
 2672|  4.44k|                return decay_copy(t.begin());
 2673|  4.44k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEEu7__decayIT_EOS5_:
 2605|  3.63M|    {
 2606|  3.63M|        return std::forward<T>(t);
 2607|  3.63M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  4.44k|            {
 2759|  4.44k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.44k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  4.44k|            {
 2739|  4.44k|                return decay_copy(std::forward<T>(t).end());
 2740|  4.44k|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|   392k|        {
 6375|   392k|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|   392k|        {
 6294|   392k|        }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.32M|        {
 6444|  1.32M|            return data_.begin_;
 6445|  1.32M|        }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|   131k|            {
 2672|   131k|                return decay_copy(t.begin());
 2673|   131k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|   131k|            {
 2693|   131k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   131k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.59M|        {
 6449|  1.59M|            return data_.end_;
 6450|  1.59M|        }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   180k|            {
 2739|   180k|                return decay_copy(std::forward<T>(t).end());
 2740|   180k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   180k|            {
 2759|   180k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   180k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   609k|        {
 6444|   609k|            return data_.begin_;
 6445|   609k|        }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|   105k|            {
 2672|   105k|                return decay_copy(t.begin());
 2673|   105k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|   105k|            {
 2693|   105k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   105k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  11.6M|        {
 6449|  11.6M|            return data_.end_;
 6450|  11.6M|        }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   285k|            {
 2739|   285k|                return decay_copy(std::forward<T>(t).end());
 2740|   285k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   285k|            {
 2759|   285k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   285k|            }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  13.3k|            {
 3178|  13.3k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  13.3k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  13.3k|            {
 3158|  13.3k|                return t.data();
 3159|  13.3k|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  13.3k|    {
 6095|  13.3k|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 0, False: 13.3k]
  ------------------
 6096|  13.3k|                   ? nullptr
 6097|  13.3k|                   : std::addressof(*ranges::begin(derived()));
 6098|  13.3k|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  13.3k|            {
 3127|  13.3k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  13.3k|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  13.3k|            {
 3098|  13.3k|                return bool((std::forward<T>(t).empty()));
 3099|  13.3k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|   379k|        {
 6454|   379k|            return data_.begin_ == data_.end_;
 6455|   379k|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  26.6k|    {
 6049|  26.6k|        return static_cast<const D&>(*this);
 6050|  26.6k|    }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  13.3k|            {
 3038|  13.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  13.3k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  13.3k|            {
 3000|  13.3k|                return decay_copy(std::forward<T>(t).size());
 3001|  13.3k|            }
_ZN4nano6ranges6detail10decay_copyIlEEu7__decayIT_EOS3_:
 2605|   407k|    {
 2606|   407k|        return std::forward<T>(t);
 2607|   407k|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|   387k|        {
 6462|   387k|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|   387k|                return data_.size_;
 6464|   387k|            }
 6465|   387k|            else {
 6466|   387k|                return data_.end_ - data_.begin_;
 6467|   387k|            }
 6468|   387k|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  36.6k|            {
 3780|  36.6k|                ++x;
 3781|  36.6k|                return x;
 3782|  36.6k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|   368k|            {
 3038|   368k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   368k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|   368k|            {
 3000|   368k|                return decay_copy(std::forward<T>(t).size());
 3001|   368k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|   351k|            {
 3178|   351k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   351k|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   351k|            {
 3158|   351k|                return t.data();
 3159|   351k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|   366k|    {
 6085|   366k|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 654, False: 365k]
  ------------------
 6086|   366k|                   ? nullptr
 6087|   366k|                   : std::addressof(*ranges::begin(derived()));
 6088|   366k|    }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|   366k|            {
 3127|   366k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|   366k|            }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|   366k|            {
 3098|   366k|                return bool((std::forward<T>(t).empty()));
 3099|   366k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|   731k|    {
 6044|   731k|        return static_cast<D&>(*this);
 6045|   731k|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  1.10M|            {
 2693|  1.10M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.10M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  1.10M|            {
 2672|  1.10M|                return decay_copy(t.begin());
 2673|  1.10M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   896k|            {
 2759|   896k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   896k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|   896k|            {
 2739|   896k|                return decay_copy(std::forward<T>(t).end());
 2740|   896k|            }
_ZN4nano6ranges6detail10decay_copyImEEu7__decayIT_EOS3_:
 2605|  35.0k|    {
 2606|  35.0k|        return std::forward<T>(t);
 2607|  35.0k|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  16.4k|            {
 3077|  16.4k|                return fn::impl(std::forward<T>(t));
 3078|  16.4k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  16.4k|            {
 3067|  16.4k|                return static_cast<ssize_return_t<T>>(
 3068|  16.4k|                    ranges::size(std::forward<T>(t)));
 3069|  16.4k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  22.9k|            {
 3077|  22.9k|                return fn::impl(std::forward<T>(t));
 3078|  22.9k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  22.9k|            {
 3067|  22.9k|                return static_cast<ssize_return_t<T>>(
 3068|  22.9k|                    ranges::size(std::forward<T>(t)));
 3069|  22.9k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  22.9k|            {
 3038|  22.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  22.9k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  22.9k|            {
 3000|  22.9k|                return decay_copy(std::forward<T>(t).size());
 3001|  22.9k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeERS9_SD_SA_:
 3696|  29.7k|            {
 3697|  29.7k|                return n - fn::impl(i, n, bound);
 3698|  29.7k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SD_S9_:
 3619|  29.7k|            {
 3620|  29.7k|                if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (3620:21): [True: 4.30k, False: 25.4k]
  ------------------
 3621|  4.30k|                    auto dist = bound - i;
 3622|  4.30k|                    fn::impl(i, bound, priority_tag<2>{});
 3623|  4.30k|                    return dist;
 3624|  4.30k|                }
 3625|  25.4k|                else {
 3626|  25.4k|                    fn::impl(i, n);
 3627|  25.4k|                    return n;
 3628|  25.4k|                }
 3629|  29.7k|            }
_ZN4nano6ranges6detail8advance_2fn3absIlEET_S5_:
 3551|  59.4k|            {
 3552|  59.4k|                if (t < T{0}) {
  ------------------
  |  Branch (3552:21): [True: 0, False: 59.4k]
  ------------------
 3553|      0|                    return -t;
 3554|      0|                }
 3555|  59.4k|                return t;
 3556|  59.4k|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  5.62k|            {
 3597|  5.62k|                i = std::move(bound);
 3598|  5.62k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.74k|            {
 3038|  2.74k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.74k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  2.74k|            {
 3000|  2.74k|                return decay_copy(std::forward<T>(t).size());
 3001|  2.74k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKcS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbcESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|    400|        {
 6793|    400|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    400|                                    proj);
 6795|    400|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_N3scn2v24impl12function_refIFbcESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|    400|        {
 6761|  6.67k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 6.59k, False: 72]
  ------------------
 6762|  6.59k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 328, False: 6.27k]
  ------------------
 6763|    328|                    return first;
 6764|    328|                }
 6765|  6.27k|                ++first;
 6766|  6.27k|            }
 6767|     72|            return first;
 6768|    400|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  14.1k|            {
 1300|  14.1k|                return fn::impl(std::forward<F>(f),
 1301|  14.1k|                                std::forward<Args>(args)...);
 1302|  14.1k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISG_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSG_DpOSI_:
 1288|  14.1k|            {
 1289|  14.1k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  14.1k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|   299k|            {
 1300|   299k|                return fn::impl(std::forward<F>(f),
 1301|   299k|                                std::forward<Args>(args)...);
 1302|   299k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSD_:
 1288|   299k|            {
 1289|   299k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   299k|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|   299k|    {
 1142|   299k|        return std::forward<T>(t);
 1143|   299k|    }
_ZNK4nano6ranges6detail5next_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.32k|            {
 3798|  1.32k|                ranges::advance(x, bound);
 3799|  1.32k|                return x;
 3800|  1.32k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.32k|            {
 3686|  1.32k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.32k|            }
_ZNK4nano6ranges6detail5data_2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  3.76k|            {
 3178|  3.76k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.76k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.76k|            {
 3158|  3.76k|                return t.data();
 3159|  3.76k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  3.76k|            {
 3038|  3.76k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.76k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESD_E4typeEOSF_NS1_12priority_tagILm2EEE:
 2999|  3.76k|            {
 3000|  3.76k|                return decay_copy(std::forward<T>(t).size());
 3001|  3.76k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  5.44k|            {
 3178|  5.44k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.44k|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEPwEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.44k|            {
 3158|  5.44k|                return t.data();
 3159|  5.44k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.72k|            {
 3038|  2.72k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.72k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  2.72k|            {
 3000|  2.72k|                return decay_copy(std::forward<T>(t).size());
 3001|  2.72k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|   208k|            {
 3756|   208k|                return fn::impl(std::move(first), std::move(last));
 3757|   208k|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|   208k|            {
 3716|   208k|                return s - i;
 3717|   208k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.79k|            {
 2693|  2.79k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.79k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.79k|            {
 2672|  2.79k|                return decay_copy(t.begin());
 2673|  2.79k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEEu7__decayIT_EOSB_:
 2605|   263k|    {
 2606|   263k|        return std::forward<T>(t);
 2607|   263k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.12k|            {
 2759|  2.12k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.12k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSR_NS1_12priority_tagILm1EEE:
 2738|  2.12k|            {
 2739|  2.12k|                return decay_copy(std::forward<T>(t).end());
 2740|  2.12k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEEu7__decayIT_EOSG_:
 2605|   239k|    {
 2606|   239k|        return std::forward<T>(t);
 2607|   239k|    }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESF_E4typeESF_:
 3779|  2.72k|            {
 3780|  2.72k|                ++x;
 3781|  2.72k|                return x;
 3782|  2.72k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSN_:
 2758|   185k|            {
 2759|   185k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   185k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEESK_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSR_NS1_12priority_tagILm1EEE:
 2738|   185k|            {
 2739|   185k|                return decay_copy(std::forward<T>(t).end());
 2740|   185k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EE3endEv:
 6448|   186k|        {
 6449|   186k|            return data_.end_;
 6450|   186k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSO_:
 2692|    600|            {
 2693|    600|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|    600|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESR_E4typeEOSQ_NS1_12priority_tagILm1EEE:
 2671|    600|            {
 2672|    600|                return decay_copy(t.begin());
 2673|    600|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EE5beginEv:
 6443|   152k|        {
 6444|   152k|            return data_.begin_;
 6445|   152k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSO_:
 2758|    600|            {
 2759|    600|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|    600|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEESK_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSS_NS1_12priority_tagILm1EEE:
 2738|    600|            {
 2739|    600|                return decay_copy(std::forward<T>(t).end());
 2740|    600|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSN_:
 2692|   151k|            {
 2693|   151k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   151k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESQ_E4typeEOSP_NS1_12priority_tagILm1EEE:
 2671|   151k|            {
 2672|   151k|                return decay_copy(t.begin());
 2673|   151k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  11.4k|            {
 2693|  11.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  11.4k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  11.4k|            {
 2672|  11.4k|                return decay_copy(t.begin());
 2673|  11.4k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS5_ISC_SC_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEENS0_8identityENS8_12function_refIFbcESO_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SM_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSS_EEEENS1_16projected_helperIS10_SV_vEEEEEENSU_IX14borrowed_rangeISS_EEE4typeIS10_NS0_8danglingEEEE4typeEOSS_ST_SV_:
 6792|  1.20k|        {
 6793|  1.20k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.20k|                                    proj);
 6795|  1.20k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS0_9subrange_8subrangeISA_SA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEENS6_12function_refIFbcESL_EENS0_8identityEEET_SO_T0_RT1_RT2_:
 6760|  1.44k|        {
 6761|  7.68k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 7.52k, False: 156]
  ------------------
 6762|  7.52k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.29k, False: 6.23k]
  ------------------
 6763|  1.29k|                    return first;
 6764|  1.29k|                }
 6765|  6.23k|                ++first;
 6766|  6.23k|            }
 6767|    156|            return first;
 6768|  1.44k|        }
_ZNK4nano6ranges6detail4end_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  51.4k|            {
 2759|  51.4k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  51.4k|            }
_ZN4nano6ranges6detail4end_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSQ_NS1_12priority_tagILm1EEE:
 2738|  51.4k|            {
 2739|  51.4k|                return decay_copy(std::forward<T>(t).end());
 2740|  51.4k|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EEC2ISA_Lb0EvEET_SG_:
 6374|  49.8k|        {
 6375|  49.8k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS0_9subrange_8subrangeIS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELb0EEC2EOSA_OSI_:
 6293|  49.8k|        {
 6294|  49.8k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  48.2k|            {
 2693|  48.2k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  48.2k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  48.2k|            {
 2672|  48.2k|                return decay_copy(t.begin());
 2673|  48.2k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EE5beginEv:
 6443|  48.2k|        {
 6444|  48.2k|            return data_.begin_;
 6445|  48.2k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  48.2k|            {
 2759|  48.2k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  48.2k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EESE_LNS0_13subrange_kindE0EEESE_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  48.2k|            {
 2739|  48.2k|                return decay_copy(std::forward<T>(t).end());
 2740|  48.2k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EE3endEv:
 6448|  48.2k|        {
 6449|  48.2k|            return data_.end_;
 6450|  48.2k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_LNS0_13subrange_kindE0EEC2ISA_Lb0EvEET_SA_:
 6374|  48.2k|        {
 6375|  48.2k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_Lb0EEC2EOSA_SC_:
 6293|  48.2k|        {
 6294|  48.2k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESF_E4typeESF_NS0_20incrementable_traitsISF_E15difference_typeE:
 3787|    852|            {
 3788|    852|                ranges::advance(x, n);
 3789|    852|                return x;
 3790|    852|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSF_NS0_20incrementable_traitsISF_E15difference_typeE:
 3677|    852|            {
 3678|    852|                fn::impl(i, n);
 3679|    852|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISF_EEvE4typeERSF_NS0_20incrementable_traitsISF_E15difference_typeE:
 3569|    852|            {
 3570|    852|                constexpr auto zero = iter_difference_t<I>{0};
 3571|       |
 3572|    852|                if (n > zero) {
  ------------------
  |  Branch (3572:21): [True: 0, False: 852]
  ------------------
 3573|      0|                    while (n-- > zero) {
  ------------------
  |  Branch (3573:28): [True: 0, False: 0]
  ------------------
 3574|      0|                        ++i;
 3575|      0|                    }
 3576|      0|                }
 3577|    852|                else {
 3578|    852|                    while (n++ < zero) {
  ------------------
  |  Branch (3578:28): [True: 0, False: 852]
  ------------------
 3579|      0|                        --i;
 3580|      0|                    }
 3581|    852|                }
 3582|    852|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EENS0_20incrementable_traitsISN_E15difference_typeEE4typeERSN_SR_SO_:
 3696|  6.26k|            {
 3697|  6.26k|                return n - fn::impl(i, n, bound);
 3698|  6.26k|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SN_EENS0_20incrementable_traitsISN_E15difference_typeEE4typeERSN_SR_SO_:
 3636|  6.26k|            {
 3637|  6.26k|                constexpr iter_difference_t<I> zero{0};
 3638|  6.26k|                iter_difference_t<I> counter{0};
 3639|       |
 3640|  6.26k|                if (n < zero) {
  ------------------
  |  Branch (3640:21): [True: 0, False: 6.26k]
  ------------------
 3641|      0|                    do {
 3642|      0|                        --i;
 3643|      0|                        --counter;  // Yes, really
 3644|      0|                    } while (++n < zero && i != bound);
  ------------------
  |  Branch (3644:30): [True: 0, False: 0]
  |  Branch (3644:44): [True: 0, False: 0]
  ------------------
 3645|      0|                }
 3646|  6.26k|                else {
 3647|  20.9k|                    while (n-- > zero && i != bound) {
  ------------------
  |  Branch (3647:28): [True: 14.7k, False: 6.18k]
  |  Branch (3647:42): [True: 14.6k, False: 84]
  ------------------
 3648|  14.6k|                        ++i;
 3649|  14.6k|                        ++counter;
 3650|  14.6k|                    }
 3651|  6.26k|                }
 3652|       |
 3653|  6.26k|                return counter;
 3654|  6.26k|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EESN_E4typeESN_SO_:
 3797|    312|            {
 3798|    312|                ranges::advance(x, bound);
 3799|    312|                return x;
 3800|    312|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EEvE4typeERSN_SO_:
 3685|    312|            {
 3686|    312|                fn::impl(i, bound, priority_tag<2>{});
 3687|    312|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEEvRT_T0_NS1_12priority_tagILm0EEE:
 3609|    312|            {
 3610|  10.8k|                while (i != bound) {
  ------------------
  |  Branch (3610:24): [True: 10.4k, False: 312]
  ------------------
 3611|  10.4k|                    ++i;
 3612|  10.4k|                }
 3613|    312|            }
_ZNK4nano6ranges6detail7sort_fnclIRNSt3__16vectorINS4_4pairIDiDiEENS4_9allocatorIS7_EEEENS0_4lessENS0_8identityEEENS4_9enable_ifIXaa19random_access_rangeIT_E8sortableIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSF_EEEET0_T1_EENS1_11conditionalIX14borrowed_rangeISF_EEE4typeISI_NS0_8danglingEEEE4typeEOSF_SJ_SK_:
14808|  6.97k|        {
14809|  6.97k|            iterator_t<Rng> last_it =
14810|  6.97k|                nano::next(nano::begin(rng), nano::end(rng));
14811|  6.97k|            detail::pdqsort(nano::begin(rng), last_it, comp, proj);
14812|  6.97k|            return last_it;
14813|  6.97k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EESC_E4typeESC_SD_:
 3797|  6.97k|            {
 3798|  6.97k|                ranges::advance(x, bound);
 3799|  6.97k|                return x;
 3800|  6.97k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EEvE4typeERSC_SD_:
 3685|  6.97k|            {
 3686|  6.97k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  6.97k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIX15assignable_fromIRT_T0_EEvE4typeESD_SE_NS1_12priority_tagILm2EEE:
 3596|  6.97k|            {
 3597|  6.97k|                i = std::move(bound);
 3598|  6.97k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  13.9k|            {
 2693|  13.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  13.9k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  13.9k|            {
 2672|  13.9k|                return decay_copy(t.begin());
 2673|  13.9k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEEEEu7__decayIT_EOS9_:
 2605|  20.9k|    {
 2606|  20.9k|        return std::forward<T>(t);
 2607|  20.9k|    }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  6.97k|            {
 2759|  6.97k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.97k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEENS5_11__wrap_iterIPS8_EESF_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSJ_NS1_12priority_tagILm1EEE:
 2738|  6.97k|            {
 2739|  6.97k|                return decay_copy(std::forward<T>(t).end());
 2740|  6.97k|            }
_ZN4nano6ranges6detail7pdqsortINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityELb0EEEvT_SB_RT0_RT1_:
14762|  6.97k|    {
14763|  6.97k|        if (begin == end) {
  ------------------
  |  Branch (14763:13): [True: 0, False: 6.97k]
  ------------------
14764|      0|            return;
14765|      0|        }
14766|       |
14767|  6.97k|        detail::pdqsort_loop<Branchless>(
14768|  6.97k|            std::move(begin), std::move(end), comp, proj,
14769|  6.97k|            detail::log2(nano::distance(begin, end)));
14770|  6.97k|    }
_ZN4nano6ranges6detail12pdqsort_loopILb0ENSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT0_SB_RT1_RT2_ib:
14639|  12.4k|    {
14640|  12.4k|        using diff_t = iter_difference_t<I>;
14641|       |
14642|       |        // Use a while loop for tail recursion elimination.
14643|  20.5k|        while (true) {
  ------------------
  |  Branch (14643:16): [Folded - Ignored]
  ------------------
14644|  20.5k|            diff_t size = nano::distance(begin, end);
14645|       |
14646|       |            // Insertion sort is faster for small arrays.
14647|  20.5k|            if (size < pdqsort_insertion_sort_threshold) {
  ------------------
  |  Branch (14647:17): [True: 11.9k, False: 8.62k]
  ------------------
14648|  11.9k|                if (leftmost) {
  ------------------
  |  Branch (14648:21): [True: 6.66k, False: 5.31k]
  ------------------
14649|  6.66k|                    insertion_sort(begin, end, comp, proj);
14650|  6.66k|                }
14651|  5.31k|                else {
14652|  5.31k|                    unguarded_insertion_sort(begin, end, comp, proj);
14653|  5.31k|                }
14654|  11.9k|                return;
14655|  11.9k|            }
14656|       |
14657|       |            // Choose pivot as median of 3 or pseudomedian of 9.
14658|  8.62k|            diff_t s2 = size / 2;
14659|  8.62k|            if (size > pdqsort_ninther_threshold) {
  ------------------
  |  Branch (14659:17): [True: 2.14k, False: 6.48k]
  ------------------
14660|  2.14k|                sort3(begin, begin + s2, end - 1, comp, proj);
14661|  2.14k|                sort3(begin + 1, begin + (s2 - 1), end - 2, comp, proj);
14662|  2.14k|                sort3(begin + 2, begin + (s2 + 1), end - 3, comp, proj);
14663|  2.14k|                sort3(begin + (s2 - 1), begin + s2, begin + (s2 + 1), comp,
14664|  2.14k|                      proj);
14665|  2.14k|                nano::iter_swap(begin, begin + s2);
14666|  2.14k|            }
14667|  6.48k|            else {
14668|  6.48k|                sort3(begin + s2, begin, end - 1, comp, proj);
14669|  6.48k|            }
14670|       |
14671|       |            // If *(begin - 1) is the end of the right partition of a previous
14672|       |            // partition operation there is no element in [begin, end) that is
14673|       |            // smaller than *(begin - 1). Then if our pivot compares equal to
14674|       |            // *(begin - 1) we change strategy, putting equal elements in the
14675|       |            // left partition, greater elements in the right partition. We do
14676|       |            // not have to recurse on the left partition, since it's sorted (all
14677|       |            // equal).
14678|  8.62k|            if (!leftmost &&
  ------------------
  |  Branch (14678:17): [True: 4.38k, False: 4.24k]
  |  Branch (14678:17): [True: 2.73k, False: 5.89k]
  ------------------
14679|  8.62k|                !nano::invoke(comp, nano::invoke(proj, *(begin - 1)),
  ------------------
  |  Branch (14679:17): [True: 2.73k, False: 1.65k]
  ------------------
14680|  4.38k|                              nano::invoke(proj, *begin))) {
14681|  2.73k|                begin = partition_left(begin, end, comp, proj) + 1;
14682|  2.73k|                continue;
14683|  2.73k|            }
14684|       |
14685|       |            // Partition and get results.
14686|  5.89k|            std::pair<I, bool> part_result =
14687|  5.89k|                Branchless ? partition_right_branchless(begin, end, comp, proj)
  ------------------
  |  Branch (14687:17): [Folded - Ignored]
  ------------------
14688|  5.89k|                           : partition_right(begin, end, comp, proj);
14689|  5.89k|            I pivot_pos = part_result.first;
14690|  5.89k|            bool already_partitioned = part_result.second;
14691|       |
14692|       |            // Check for a highly unbalanced partition.
14693|  5.89k|            diff_t l_size = pivot_pos - begin;
14694|  5.89k|            diff_t r_size = end - (pivot_pos + 1);
14695|  5.89k|            bool highly_unbalanced = l_size < size / 8 || r_size < size / 8;
  ------------------
  |  Branch (14695:38): [True: 2.74k, False: 3.14k]
  |  Branch (14695:59): [True: 666, False: 2.47k]
  ------------------
14696|       |
14697|       |            // If we got a highly unbalanced partition we shuffle elements to
14698|       |            // break many patterns.
14699|  5.89k|            if (highly_unbalanced) {
  ------------------
  |  Branch (14699:17): [True: 3.41k, False: 2.47k]
  ------------------
14700|       |                // If we had too many bad partitions, switch to heapsort to
14701|       |                // guarantee O(n log n).
14702|  3.41k|                if (--bad_allowed == 0) {
  ------------------
  |  Branch (14702:21): [True: 72, False: 3.34k]
  ------------------
14703|     72|                    nano::make_heap(begin, end, comp, proj);
14704|     72|                    nano::sort_heap(begin, end, comp, proj);
14705|     72|                    return;
14706|     72|                }
14707|       |
14708|  3.34k|                if (l_size >= pdqsort_insertion_sort_threshold) {
  ------------------
  |  Branch (14708:21): [True: 504, False: 2.83k]
  ------------------
14709|    504|                    nano::iter_swap(begin, begin + l_size / 4);
14710|    504|                    nano::iter_swap(pivot_pos - 1, pivot_pos - l_size / 4);
14711|       |
14712|    504|                    if (l_size > pdqsort_ninther_threshold) {
  ------------------
  |  Branch (14712:25): [True: 156, False: 348]
  ------------------
14713|    156|                        nano::iter_swap(begin + 1, begin + (l_size / 4 + 1));
14714|    156|                        nano::iter_swap(begin + 2, begin + (l_size / 4 + 2));
14715|    156|                        nano::iter_swap(pivot_pos - 2,
14716|    156|                                        pivot_pos - (l_size / 4 + 1));
14717|    156|                        nano::iter_swap(pivot_pos - 3,
14718|    156|                                        pivot_pos - (l_size / 4 + 2));
14719|    156|                    }
14720|    504|                }
14721|       |
14722|  3.34k|                if (r_size >= pdqsort_insertion_sort_threshold) {
  ------------------
  |  Branch (14722:21): [True: 2.52k, False: 816]
  ------------------
14723|  2.52k|                    nano::iter_swap(pivot_pos + 1,
14724|  2.52k|                                    pivot_pos + (1 + r_size / 4));
14725|  2.52k|                    nano::iter_swap(end - 1, end - r_size / 4);
14726|       |
14727|  2.52k|                    if (r_size > pdqsort_ninther_threshold) {
  ------------------
  |  Branch (14727:25): [True: 696, False: 1.83k]
  ------------------
14728|    696|                        nano::iter_swap(pivot_pos + 2,
14729|    696|                                        pivot_pos + (2 + r_size / 4));
14730|    696|                        nano::iter_swap(pivot_pos + 3,
14731|    696|                                        pivot_pos + (3 + r_size / 4));
14732|    696|                        nano::iter_swap(end - 2, end - (1 + r_size / 4));
14733|    696|                        nano::iter_swap(end - 3, end - (2 + r_size / 4));
14734|    696|                    }
14735|  2.52k|                }
14736|  3.34k|            }
14737|  2.47k|            else {
14738|       |                // If we were decently balanced and we tried to sort an already
14739|       |                // partitioned sequence try to use insertion sort.
14740|  2.47k|                if (already_partitioned &&
  ------------------
  |  Branch (14740:21): [True: 540, False: 1.93k]
  ------------------
14741|  2.47k|                    partial_insertion_sort(begin, pivot_pos, comp, proj) &&
  ------------------
  |  Branch (14741:21): [True: 408, False: 132]
  ------------------
14742|  2.47k|                    partial_insertion_sort(pivot_pos + 1, end, comp, proj))
  ------------------
  |  Branch (14742:21): [True: 378, False: 30]
  ------------------
14743|    378|                    return;
14744|  2.47k|            }
14745|       |
14746|       |            // Sort the left partition first using recursion and do tail
14747|       |            // recursion elimination for the right-hand partition.
14748|  5.44k|            detail::pdqsort_loop<Branchless>(begin, pivot_pos, comp, proj,
14749|  5.44k|                                             bad_allowed, leftmost);
14750|  5.44k|            begin = pivot_pos + 1;
14751|  5.44k|            leftmost = false;
14752|  5.44k|        }
14753|  12.4k|    }
_ZN4nano6ranges6detail14insertion_sortINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_SB_RT0_RT1_:
14145|  6.66k|    {
14146|  6.66k|        using T = iter_value_t<I>;
14147|       |
14148|  6.66k|        if (begin == end) {
  ------------------
  |  Branch (14148:13): [True: 1.40k, False: 5.25k]
  ------------------
14149|  1.40k|            return;
14150|  1.40k|        }
14151|       |
14152|  26.0k|        for (I cur = begin + 1; cur != end; ++cur) {
  ------------------
  |  Branch (14152:33): [True: 20.7k, False: 5.25k]
  ------------------
14153|  20.7k|            I sift = cur;
14154|  20.7k|            I sift_1 = cur - 1;
14155|       |
14156|       |            // Compare first so we can avoid 2 moves for an element already
14157|       |            // positioned correctly.
14158|  20.7k|            if (nano::invoke(comp, nano::invoke(proj, *sift),
  ------------------
  |  Branch (14158:17): [True: 9.66k, False: 11.1k]
  ------------------
14159|  20.7k|                             nano::invoke(proj, *sift_1))) {
14160|  9.66k|                T tmp = nano::iter_move(sift);
14161|       |
14162|  24.8k|                do {
14163|  24.8k|                    *sift-- = nano::iter_move(sift_1);
14164|  24.8k|                } while (sift != begin &&
  ------------------
  |  Branch (14164:26): [True: 23.5k, False: 1.33k]
  ------------------
14165|  24.8k|                         nano::invoke(comp, nano::invoke(proj, tmp),
  ------------------
  |  Branch (14165:26): [True: 15.1k, False: 8.32k]
  ------------------
14166|  23.5k|                                      nano::invoke(proj, *--sift_1)));
14167|       |
14168|  9.66k|                *sift = std::move(tmp);
14169|  9.66k|            }
14170|  20.7k|        }
14171|  5.25k|    }
_ZNK4nano6ranges6detail10iter_move_2fnclIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 1721|  93.3k|            {
 1722|  93.3k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 1723|  93.3k|            }
_ZN4nano6ranges6detail10iter_move_2fn4implIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEEEENS5_9enable_ifIXsr3std19is_lvalue_referenceIDTdeclsr3stdE7forwardIT_Efp_EEEE5valueEDTclsr3stdE4movedeclsr3stdE7forwardISD_Efp_EEEE4typeEOSD_NS1_12priority_tagILm1EEE:
 1704|  93.3k|            {
 1705|  93.3k|                return std::move(*std::forward<T>(t));
 1706|  93.3k|            }
_ZN4nano6ranges6detail24unguarded_insertion_sortINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_SB_RT0_RT1_:
14182|  5.31k|    {
14183|  5.31k|        using T = iter_value_t<I>;
14184|       |
14185|  5.31k|        if (begin == end) {
  ------------------
  |  Branch (14185:13): [True: 1.58k, False: 3.72k]
  ------------------
14186|  1.58k|            return;
14187|  1.58k|        }
14188|       |
14189|  29.9k|        for (I cur = begin + 1; cur != end; ++cur) {
  ------------------
  |  Branch (14189:33): [True: 26.2k, False: 3.72k]
  ------------------
14190|  26.2k|            I sift = cur;
14191|  26.2k|            I sift_1 = cur - 1;
14192|       |
14193|       |            // Compare first so we can avoid 2 moves for an element already
14194|       |            // positioned correctly.
14195|  26.2k|            if (nano::invoke(comp, nano::invoke(proj, *sift),
  ------------------
  |  Branch (14195:17): [True: 8.40k, False: 17.8k]
  ------------------
14196|  26.2k|                             nano::invoke(proj, *sift_1))) {
14197|  8.40k|                T tmp = nano::iter_move(sift);
14198|       |
14199|  19.2k|                do {
14200|  19.2k|                    *sift-- = nano::iter_move(sift_1);
14201|  19.2k|                } while (nano::invoke(comp, nano::invoke(proj, tmp),
  ------------------
  |  Branch (14201:26): [True: 10.8k, False: 8.40k]
  ------------------
14202|  19.2k|                                      nano::invoke(proj, *--sift_1)));
14203|       |
14204|  8.40k|                *sift = std::move(tmp);
14205|  8.40k|            }
14206|  26.2k|        }
14207|  3.72k|    }
_ZN4nano6ranges6detail5sort3INSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_SB_SB_RT0_RT1_:
14265|  15.0k|    {
14266|  15.0k|        sort2(a, b, comp, proj);
14267|  15.0k|        sort2(b, c, comp, proj);
14268|  15.0k|        sort2(a, b, comp, proj);
14269|  15.0k|    }
_ZN4nano6ranges6detail5sort2INSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_SB_RT0_RT1_:
14255|  45.1k|    {
14256|  45.1k|        if (nano::invoke(comp, nano::invoke(proj, *b),
  ------------------
  |  Branch (14256:13): [True: 8.60k, False: 36.5k]
  ------------------
14257|  45.1k|                         nano::invoke(proj, *a))) {
14258|  8.60k|            nano::iter_swap(a, b);
14259|  8.60k|        }
14260|  45.1k|    }
_ZNK4nano6ranges6detail10iter_swap_2fnclIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESB_EEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EtlNS1_12priority_tagILm2EEEEEEOSC_OSD_:
 2437|  61.2k|            {
 2438|  61.2k|                return fn::impl(std::forward<T>(t), std::forward<U>(u),
 2439|  61.2k|                                priority_tag<2>{});
 2440|  61.2k|            }
_ZN4nano6ranges6detail10iter_swap_2fn4implIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESB_EENS5_9enable_ifIXaaaa8readableIu20__remove_reference_tIT_EE8readableIu20__remove_reference_tIT0_EE14swappable_withINSC_IXsr6detailE15dereferenceableISD_EEDTdeclsr3stdE7declvalIRSD_EEEE4typeENSC_IXsr6detailE15dereferenceableISF_EEDTdeclsr3stdE7declvalIRSF_EEEE4typeEEEvE4typeEOSD_OSF_NS1_12priority_tagILm1EEE:
 2413|  61.2k|            {
 2414|  61.2k|                ranges::swap(*std::forward<T>(t), *std::forward<U>(u));
 2415|  61.2k|            }
_ZNK4nano6ranges6detail5swap_2fnclIRNSt3__14pairIDiDiEES8_EEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EtlNS1_12priority_tagILm2EEEEEEOS9_OSA_:
  865|  74.5k|            {
  866|  74.5k|                return fn::impl(std::forward<T>(t), std::forward<U>(u),
  867|  74.5k|                                priority_tag<2>{});
  868|  74.5k|            }
_ZN4nano6ranges6detail5swap_2fn4implIRNSt3__14pairIDiDiEES8_EEDTscvcl4swapclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EEEOS9_OSA_NS1_12priority_tagILm2EEE:
  828|  74.5k|            {
  829|  74.5k|                (void)swap(std::forward<T>(t), std::forward<U>(u));
  830|  74.5k|            }
_ZNK4nano6ranges6detail10iter_swap_2fnclIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EtlNS1_12priority_tagILm2EEEEEEOSC_OSD_:
 2437|  4.33k|            {
 2438|  4.33k|                return fn::impl(std::forward<T>(t), std::forward<U>(u),
 2439|  4.33k|                                priority_tag<2>{});
 2440|  4.33k|            }
_ZN4nano6ranges6detail10iter_swap_2fn4implIRNSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaaaa8readableIu20__remove_reference_tIT_EE8readableIu20__remove_reference_tIT0_EE14swappable_withINSC_IXsr6detailE15dereferenceableISD_EEDTdeclsr3stdE7declvalIRSD_EEEE4typeENSC_IXsr6detailE15dereferenceableISF_EEDTdeclsr3stdE7declvalIRSF_EEEE4typeEEEvE4typeEOSD_OSF_NS1_12priority_tagILm1EEE:
 2413|  4.33k|            {
 2414|  4.33k|                ranges::swap(*std::forward<T>(t), *std::forward<U>(u));
 2415|  4.33k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_4lessEJRNSt3__14pairIDiDiEESA_EEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSB_DpOSC_:
 1299|   856k|            {
 1300|   856k|                return fn::impl(std::forward<F>(f),
 1301|   856k|                                std::forward<Args>(args)...);
 1302|   856k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_4lessEJRNSt3__14pairIDiDiEESA_EEENS7_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSE_:
 1288|   856k|            {
 1289|   856k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   856k|            }
_ZNK4nano6ranges4lessclIRNSt3__14pairIDiDiEES6_EENS3_9enable_ifIX20totally_ordered_withIT_T0_EEbE4typeEOS8_OS9_:
 1081|   856k|    {
 1082|   856k|        return std::less<>{}(std::forward<T>(t), std::forward<U>(u));
 1083|   856k|    }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRNSt3__14pairIDiDiEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSB_DpOSC_:
 1299|  1.71M|            {
 1300|  1.71M|                return fn::impl(std::forward<F>(f),
 1301|  1.71M|                                std::forward<Args>(args)...);
 1302|  1.71M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRNSt3__14pairIDiDiEEEEENS7_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSE_:
 1288|  1.71M|            {
 1289|  1.71M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.71M|            }
_ZNK4nano6ranges8identityclIRNSt3__14pairIDiDiEEEEOT_S8_:
 1141|  1.71M|    {
 1142|  1.71M|        return std::forward<T>(t);
 1143|  1.71M|    }
_ZN4nano6ranges6detail14partition_leftINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEET_SB_SB_RT0_RT1_:
14592|  2.73k|    {
14593|  2.73k|        using T = iter_value_t<I>;
14594|       |
14595|  2.73k|        T pivot(nano::iter_move(begin));
14596|  2.73k|        I first = begin;
14597|  2.73k|        I last = end;
14598|       |
14599|  4.75k|        while (nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14599:16): [True: 2.02k, False: 2.73k]
  ------------------
14600|  4.75k|                            nano::invoke(proj, *--last)))
14601|  2.02k|            ;
14602|       |
14603|  2.73k|        if (last + 1 == end) {
  ------------------
  |  Branch (14603:13): [True: 2.01k, False: 720]
  ------------------
14604|   114k|            while (first < last &&
  ------------------
  |  Branch (14604:20): [True: 113k, False: 1.24k]
  ------------------
14605|   114k|                   !nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14605:20): [True: 112k, False: 768]
  ------------------
14606|   113k|                                 nano::invoke(proj, *++first)))
14607|   112k|                ;
14608|  2.01k|        }
14609|    720|        else {
14610|  9.66k|            while (!nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14610:20): [True: 8.94k, False: 720]
  ------------------
14611|  9.66k|                                 nano::invoke(proj, *++first)))
14612|  8.94k|                ;
14613|    720|        }
14614|       |
14615|  15.0k|        while (first < last) {
  ------------------
  |  Branch (14615:16): [True: 12.3k, False: 2.73k]
  ------------------
14616|  12.3k|            nano::iter_swap(first, last);
14617|  20.7k|            while (nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14617:20): [True: 8.41k, False: 12.3k]
  ------------------
14618|  20.7k|                                nano::invoke(proj, *--last)))
14619|  8.41k|                ;
14620|  74.5k|            while (!nano::invoke(comp, nano::invoke(proj, pivot),
  ------------------
  |  Branch (14620:20): [True: 62.2k, False: 12.3k]
  ------------------
14621|  74.5k|                                 nano::invoke(proj, *++first)))
14622|  62.2k|                ;
14623|  12.3k|        }
14624|       |
14625|  2.73k|        I pivot_pos = last;
14626|  2.73k|        *begin = nano::iter_move(pivot_pos);
14627|  2.73k|        *pivot_pos = std::move(pivot);
14628|       |
14629|  2.73k|        return pivot_pos;
14630|  2.73k|    }
_ZN4nano6ranges6detail15partition_rightINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEENS5_IT_bEESB_SB_RT0_RT1_:
14533|  5.89k|    {
14534|  5.89k|        using T = iter_value_t<I>;
14535|       |
14536|       |        // Move pivot into local for speed.
14537|  5.89k|        T pivot(nano::iter_move(begin));
14538|       |
14539|  5.89k|        I first = begin;
14540|  5.89k|        I last = end;
14541|       |
14542|       |        // Find the first element greater than or equal than the pivot (the
14543|       |        // median of 3 guarantees this exists).
14544|  40.2k|        while (nano::invoke(comp, nano::invoke(proj, *++first),
  ------------------
  |  Branch (14544:16): [True: 34.3k, False: 5.89k]
  ------------------
14545|  40.2k|                            nano::invoke(proj, pivot))) {}
14546|       |
14547|       |        // Find the first element strictly smaller than the pivot. We have to
14548|       |        // guard this search if there was no element before *first.
14549|  5.89k|        if (first - 1 == begin) {
  ------------------
  |  Branch (14549:13): [True: 3.48k, False: 2.40k]
  ------------------
14550|   172k|            while (first < last &&
  ------------------
  |  Branch (14550:20): [True: 170k, False: 1.74k]
  ------------------
14551|   172k|                   !nano::invoke(comp, nano::invoke(proj, *--last),
  ------------------
  |  Branch (14551:20): [True: 168k, False: 1.74k]
  ------------------
14552|   170k|                                 nano::invoke(proj, pivot))) {}
14553|  3.48k|        }
14554|  2.40k|        else {
14555|  13.9k|            while (!nano::invoke(comp, nano::invoke(proj, *--last),
  ------------------
  |  Branch (14555:20): [True: 11.5k, False: 2.40k]
  ------------------
14556|  13.9k|                                 nano::invoke(proj, pivot))) {}
14557|  2.40k|        }
14558|       |
14559|       |        // If the first pair of elements that should be swapped to partition are
14560|       |        // the same element, the passed in sequence already was correctly
14561|       |        // partitioned.
14562|  5.89k|        bool already_partitioned = first >= last;
14563|       |
14564|       |        // Keep swapping pairs of elements that are on the wrong side of the
14565|       |        // pivot. Previously swapped pairs guard the searches, which is why the
14566|       |        // first iteration is special-cased above.
14567|  46.1k|        while (first < last) {
  ------------------
  |  Branch (14567:16): [True: 40.2k, False: 5.89k]
  ------------------
14568|  40.2k|            nano::iter_swap(first, last);
14569|   126k|            while (nano::invoke(comp, nano::invoke(proj, *++first),
  ------------------
  |  Branch (14569:20): [True: 85.8k, False: 40.2k]
  ------------------
14570|   126k|                                nano::invoke(proj, pivot)))
14571|  85.8k|                ;
14572|   116k|            while (!nano::invoke(comp, nano::invoke(proj, *--last),
  ------------------
  |  Branch (14572:20): [True: 76.6k, False: 40.2k]
  ------------------
14573|   116k|                                 nano::invoke(proj, pivot)))
14574|  76.6k|                ;
14575|  40.2k|        }
14576|       |
14577|       |        // Put the pivot in the right place.
14578|  5.89k|        I pivot_pos = first - 1;
14579|  5.89k|        *begin = nano::iter_move(pivot_pos);
14580|  5.89k|        *pivot_pos = std::move(pivot);
14581|       |
14582|  5.89k|        return std::make_pair(std::move(pivot_pos), already_partitioned);
14583|  5.89k|    }
_ZNK4nano6ranges6detail12make_heap_fnclINSt3__111__wrap_iterIPNS4_4pairIDiDiEEEES9_NS0_4lessENS0_8identityEEENS4_9enable_ifIXaaaa22random_access_iteratorIT_E12sentinel_forIT0_SD_E8sortableISD_T1_T2_EESD_E4typeESD_SE_SF_SG_:
10577|     72|        {
10578|     72|            const auto n = nano::distance(first, last);
10579|     72|            return make_heap_fn::impl(std::move(first), n, comp, proj);
10580|     72|        }
_ZN4nano6ranges6detail12make_heap_fn4implINSt3__111__wrap_iterIPNS4_4pairIDiDiEEEENS0_4lessENS0_8identityEEET_SC_NS0_20incrementable_traitsISC_E15difference_typeERT0_RT1_:
10552|     72|        {
10553|     72|            if (n > 1) {
  ------------------
  |  Branch (10553:17): [True: 72, False: 0]
  ------------------
10554|       |                // start from the first parent, there is no need to consider
10555|       |                // children
10556|    936|                for (auto start = (n - 2) / 2; start >= 0; --start) {
  ------------------
  |  Branch (10556:48): [True: 864, False: 72]
  ------------------
10557|    864|                    detail::sift_down_n(first, n, first + start, comp, proj);
10558|    864|                }
10559|     72|            }
10560|       |
10561|     72|            return first + n;
10562|     72|        }
_ZN4nano6ranges6detail11sift_down_nINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEvT_NS0_20incrementable_traitsISB_E15difference_typeESB_RT0_RT1_:
10480|  2.55k|    {
10481|       |        // left-child of start is at 2 * start + 1
10482|       |        // right-child of start is at 2 * start + 2
10483|  2.55k|        auto child = start - first;
10484|       |
10485|  2.55k|        if (n < 2 || (n - 2) / 2 < child) {
  ------------------
  |  Branch (10485:13): [True: 72, False: 2.48k]
  |  Branch (10485:22): [True: 0, False: 2.48k]
  ------------------
10486|     72|            return;
10487|     72|        }
10488|       |
10489|  2.48k|        child = 2 * child + 1;
10490|  2.48k|        I child_i = first + child;
10491|       |
10492|  2.48k|        if ((child + 1) < n &&
  ------------------
  |  Branch (10492:13): [True: 2.37k, False: 108]
  |  Branch (10492:13): [True: 312, False: 2.17k]
  ------------------
10493|  2.48k|            nano::invoke(comp, nano::invoke(proj, *child_i),
  ------------------
  |  Branch (10493:13): [True: 312, False: 2.06k]
  ------------------
10494|  2.37k|                         nano::invoke(proj, *(child_i + 1)))) {
10495|       |            // right-child exists and is greater than left-child
10496|    312|            ++child_i;
10497|    312|            ++child;
10498|    312|        }
10499|       |
10500|       |        // check if we are in heap-order
10501|  2.48k|        if (nano::invoke(comp, nano::invoke(proj, *child_i),
  ------------------
  |  Branch (10501:13): [True: 0, False: 2.48k]
  ------------------
10502|  2.48k|                         nano::invoke(proj, *start))) {
10503|       |            // we are, start is larger than its largest child
10504|      0|            return;
10505|      0|        }
10506|       |
10507|  2.48k|        iter_value_t<I> top = nano::iter_move(start);
10508|  6.42k|        do {
10509|       |            // we are not in heap-order, swap the parent with it's largest child
10510|  6.42k|            *start = nano::iter_move(child_i);
10511|  6.42k|            start = child_i;
10512|       |
10513|  6.42k|            if ((n - 2) / 2 < child) {
  ------------------
  |  Branch (10513:17): [True: 2.48k, False: 3.94k]
  ------------------
10514|  2.48k|                break;
10515|  2.48k|            }
10516|       |
10517|       |            // recompute the child based off of the updated parent
10518|  3.94k|            child = 2 * child + 1;
10519|  3.94k|            child_i = first + child;
10520|       |
10521|  3.94k|            if ((child + 1) < n &&
  ------------------
  |  Branch (10521:17): [True: 3.63k, False: 312]
  |  Branch (10521:17): [True: 108, False: 3.83k]
  ------------------
10522|  3.94k|                nano::invoke(comp, nano::invoke(proj, *child_i),
  ------------------
  |  Branch (10522:17): [True: 108, False: 3.52k]
  ------------------
10523|  3.63k|                             nano::invoke(proj, *(child_i + 1)))) {
10524|       |                // right-child exists and is greater than left-child
10525|    108|                ++child_i;
10526|    108|                ++child;
10527|    108|            }
10528|       |
10529|       |            // check if we are in heap-order
10530|  3.94k|        } while (!nano::invoke(comp, nano::invoke(proj, *child_i),
  ------------------
  |  Branch (10530:18): [True: 3.94k, False: 0]
  ------------------
10531|  3.94k|                               nano::invoke(proj, top)));
10532|      0|        *start = std::move(top);
10533|  2.48k|    }
_ZNK4nano6ranges6detail12sort_heap_fnclINSt3__111__wrap_iterIPNS4_4pairIDiDiEEEES9_NS0_4lessENS0_8identityEEENS4_9enable_ifIXaaaa22random_access_iteratorIT_E12sentinel_forIT0_SD_E8sortableISD_T1_T2_EESD_E4typeESD_SE_SF_SG_:
11794|     72|        {
11795|     72|            const auto n = nano::distance(first, last);
11796|     72|            return sort_heap_fn::impl(std::move(first), n, comp, proj);
11797|     72|        }
_ZN4nano6ranges6detail12sort_heap_fn4implINSt3__111__wrap_iterIPNS4_4pairIDiDiEEEENS0_4lessENS0_8identityEEET_SC_NS0_20incrementable_traitsISC_E15difference_typeERT0_RT1_:
11769|     72|        {
11770|     72|            if (n < 2) {
  ------------------
  |  Branch (11770:17): [True: 0, False: 72]
  ------------------
11771|      0|                return first + n;
11772|      0|            }
11773|       |
11774|  1.76k|            for (auto i = n; i > 1; --i) {
  ------------------
  |  Branch (11774:30): [True: 1.69k, False: 72]
  ------------------
11775|  1.69k|                pop_heap_fn::impl(first, i, comp, proj);
11776|  1.69k|            }
11777|       |
11778|     72|            return first + n;
11779|     72|        }
_ZN4nano6ranges6detail11pop_heap_fn4implINSt3__111__wrap_iterIPNS4_4pairIDiDiEEEENS0_4lessENS0_8identityEEET_SC_NS0_20incrementable_traitsISC_E15difference_typeERT0_RT1_:
11710|  1.69k|        {
11711|  1.69k|            if (n > 1) {
  ------------------
  |  Branch (11711:17): [True: 1.69k, False: 0]
  ------------------
11712|  1.69k|                nano::iter_swap(first, first + (n - 1));
11713|  1.69k|                detail::sift_down_n(first, n - 1, first, comp, proj);
11714|  1.69k|            }
11715|       |
11716|  1.69k|            return first + n;
11717|  1.69k|        }
_ZNK4nano6ranges6detail10iter_swap_2fnclINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Eclsr3stdE7forwardIT0_Efp0_EtlNS1_12priority_tagILm2EEEEEEOSB_OSC_:
 2437|  8.96k|            {
 2438|  8.96k|                return fn::impl(std::forward<T>(t), std::forward<U>(u),
 2439|  8.96k|                                priority_tag<2>{});
 2440|  8.96k|            }
_ZN4nano6ranges6detail10iter_swap_2fn4implINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaaaa8readableIu20__remove_reference_tIT_EE8readableIu20__remove_reference_tIT0_EE14swappable_withINSB_IXsr6detailE15dereferenceableISC_EEDTdeclsr3stdE7declvalIRSC_EEEE4typeENSB_IXsr6detailE15dereferenceableISE_EEDTdeclsr3stdE7declvalIRSE_EEEE4typeEEEvE4typeEOSC_OSE_NS1_12priority_tagILm1EEE:
 2413|  8.96k|            {
 2414|  8.96k|                ranges::swap(*std::forward<T>(t), *std::forward<U>(u));
 2415|  8.96k|            }
_ZN4nano6ranges6detail22partial_insertion_sortINSt3__111__wrap_iterIPNS3_4pairIDiDiEEEENS0_4lessENS0_8identityEEEbT_SB_RT0_RT1_:
14217|    948|    {
14218|    948|        using T = iter_value_t<I>;
14219|       |
14220|    948|        if (begin == end) {
  ------------------
  |  Branch (14220:13): [True: 0, False: 948]
  ------------------
14221|      0|            return true;
14222|      0|        }
14223|       |
14224|    948|        iter_difference_t<I> limit = 0;
14225|  11.5k|        for (I cur = begin + 1; cur != end; ++cur) {
  ------------------
  |  Branch (14225:33): [True: 10.7k, False: 786]
  ------------------
14226|  10.7k|            if (limit > pqdsort_partial_insertion_sort_limit) {
  ------------------
  |  Branch (14226:17): [True: 162, False: 10.6k]
  ------------------
14227|    162|                return false;
14228|    162|            }
14229|       |
14230|  10.6k|            I sift = cur;
14231|  10.6k|            I sift_1 = cur - 1;
14232|       |
14233|       |            // Compare first so we can avoid 2 moves for an element already
14234|       |            // positioned correctly.
14235|  10.6k|            if (nano::invoke(comp, nano::invoke(proj, *sift),
  ------------------
  |  Branch (14235:17): [True: 1.72k, False: 8.90k]
  ------------------
14236|  10.6k|                             nano::invoke(proj, *sift_1))) {
14237|  1.72k|                T tmp = nano::iter_move(sift);
14238|       |
14239|  3.32k|                do {
14240|  3.32k|                    *sift-- = nano::iter_move(sift_1);
14241|  3.32k|                } while (sift != begin &&
  ------------------
  |  Branch (14241:26): [True: 2.89k, False: 426]
  ------------------
14242|  3.32k|                         nano::invoke(comp, nano::invoke(proj, tmp),
  ------------------
  |  Branch (14242:26): [True: 1.60k, False: 1.29k]
  ------------------
14243|  2.89k|                                      nano::invoke(proj, *--sift_1)));
14244|       |
14245|  1.72k|                *sift = std::move(tmp);
14246|  1.72k|                limit += cur - sift;
14247|  1.72k|            }
14248|  10.6k|        }
14249|       |
14250|    786|        return true;
14251|    948|    }
_ZN4nano6ranges6detail4log2IlEEiT_:
14134|  6.97k|    {
14135|  6.97k|        int log = 0;
14136|  26.1k|        while (n >>= 1)
  ------------------
  |  Branch (14136:16): [True: 19.2k, False: 6.97k]
  ------------------
14137|  19.2k|            ++log;
14138|  6.97k|        return log;
14139|  6.97k|    }
_ZNK4nano6ranges6detail9distance_2fnclINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS0_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
 3755|  27.7k|            {
 3756|  27.7k|                return fn::impl(std::move(first), std::move(last));
 3757|  27.7k|            }
_ZN4nano6ranges6detail9distance_2fn4implINSt3__111__wrap_iterIPNS5_4pairIDiDiEEEESA_EENS5_9enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_:
 3715|  27.7k|            {
 3716|  27.7k|                return s - i;
 3717|  27.7k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRKNSt3__16vectorINS4_4pairIDiDiEENS4_9allocatorIS7_EEEENS0_8identityEZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_EENS4_9enable_ifIXaa11input_rangeISK_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SD_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISW_SR_vEEEEEENSQ_IX14borrowed_rangeISK_EEE4typeISW_NS0_8danglingEEEE4typeEOSK_SP_SR_:
 6792|  62.0k|        {
 6793|  62.0k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  62.0k|                                    proj);
 6795|  62.0k|        }
_ZN4nano6ranges6detail10find_if_fn4implINSt3__111__wrap_iterIPKNS4_4pairIDiDiEEEESA_ZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_NS0_8identityEEESH_SH_T0_RT1_RT2_:
 6760|  62.0k|        {
 6761|   928k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 882k, False: 45.4k]
  ------------------
 6762|   882k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 16.5k, False: 866k]
  ------------------
 6763|  16.5k|                    return first;
 6764|  16.5k|                }
 6765|   866k|                ++first;
 6766|   866k|            }
 6767|  45.4k|            return first;
 6768|  62.0k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_JRKNSt3__14pairIDiDiEEEEEDTclsr2fnE4implclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSB_DpOSL_:
 1299|   882k|            {
 1300|   882k|                return fn::impl(std::forward<F>(f),
 1301|   882k|                                std::forward<Args>(args)...);
 1302|   882k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_JRKNSt3__14pairIDiDiEEEEENSG_9enable_ifIXntsr3std17is_member_pointerIu7__decayISB_EEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSN_:
 1288|   882k|            {
 1289|   882k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   882k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKNSt3__14pairIDiDiEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  5.67M|            {
 1300|  5.67M|                return fn::impl(std::forward<F>(f),
 1301|  5.67M|                                std::forward<Args>(args)...);
 1302|  5.67M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKNSt3__14pairIDiDiEEEEENS7_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISD_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSD_DpOSF_:
 1288|  5.67M|            {
 1289|  5.67M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  5.67M|            }
_ZNK4nano6ranges8identityclIRKNSt3__14pairIDiDiEEEEOT_S9_:
 1141|  5.67M|    {
 1142|  5.67M|        return std::forward<T>(t);
 1143|  5.67M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 2692|   118k|            {
 2693|   118k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   118k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|   118k|            {
 2672|   118k|                return decay_copy(t.begin());
 2673|   118k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__111__wrap_iterIPKNS3_4pairIDiDiEEEEEEu7__decayIT_EOSA_:
 2605|   237k|    {
 2606|   237k|        return std::forward<T>(t);
 2607|   237k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 2758|   118k|            {
 2759|   118k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   118k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__16vectorINS5_4pairIDiDiEENS5_9allocatorIS8_EEEENS5_11__wrap_iterIPKS8_EESH_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   118k|            {
 2739|   118k|                return decay_copy(std::forward<T>(t).end());
 2740|   118k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKcSB_LNS0_13subrange_kindE1EEEEENS0_8identityENS6_12function_refIFbcESI_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSM_EEEENS1_16projected_helperISU_SP_vEEEEEENSO_IX14borrowed_rangeISM_EEE4typeISU_NS0_8danglingEEEE4typeEOSM_SN_SP_:
 6792|    240|        {
 6793|    240|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    240|                                    proj);
 6795|    240|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   357k|            {
 2693|   357k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   357k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|   357k|            {
 2672|   357k|                return decay_copy(t.begin());
 2673|   357k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  2.87M|            {
 2759|  2.87M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.87M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  2.87M|            {
 2739|  2.87M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.87M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  12.3k|            {
 3178|  12.3k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  12.3k|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  12.3k|            {
 3158|  12.3k|                return t.data();
 3159|  12.3k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  24.7k|    {
 6085|  24.7k|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 546, False: 24.1k]
  ------------------
 6086|  24.7k|                   ? nullptr
 6087|  24.7k|                   : std::addressof(*ranges::begin(derived()));
 6088|  24.7k|    }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  24.7k|            {
 3127|  24.7k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  24.7k|            }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  24.7k|            {
 3098|  24.7k|                return bool((std::forward<T>(t).empty()));
 3099|  24.7k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  24.7k|        {
 6454|  24.7k|            return data_.begin_ == data_.end_;
 6455|  24.7k|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  48.8k|    {
 6044|  48.8k|        return static_cast<D&>(*this);
 6045|  48.8k|    }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  26.0k|            {
 3038|  26.0k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  26.0k|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  26.0k|            {
 3000|  26.0k|                return decay_copy(std::forward<T>(t).size());
 3001|  26.0k|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  31.2k|        {
 6462|  31.2k|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  31.2k|                return data_.size_;
 6464|  31.2k|            }
 6465|  31.2k|            else {
 6466|  31.2k|                return data_.end_ - data_.begin_;
 6467|  31.2k|            }
 6468|  31.2k|        }
_ZN4nano6ranges6detail8advance_2fn4implIPKwS6_EENSt3__19enable_ifIX15assignable_fromIRT_T0_EEvE4typeESA_SB_NS1_12priority_tagILm2EEE:
 3596|  1.10k|            {
 3597|  1.10k|                i = std::move(bound);
 3598|  1.10k|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  4.04M|            {
 3780|  4.04M|                ++x;
 3781|  4.04M|                return x;
 3782|  4.04M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  13.6k|            {
 3077|  13.6k|                return fn::impl(std::forward<T>(t));
 3078|  13.6k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  13.6k|            {
 3067|  13.6k|                return static_cast<ssize_return_t<T>>(
 3068|  13.6k|                    ranges::size(std::forward<T>(t)));
 3069|  13.6k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIPKwS7_LNS0_13subrange_kindE1EEENS0_8identityEN3scn2v24impl12function_refIFbwESG_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SB_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISS_SN_vEEEEEENSM_IX14borrowed_rangeISK_EEE4typeISS_NS0_8danglingEEEE4typeEOSK_SL_SN_:
 6792|    332|        {
 6793|    332|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    332|                                    proj);
 6795|    332|        }
_ZN4nano6ranges6detail10find_if_fn4implIPKwS5_N3scn2v24impl12function_refIFbwESA_EENS0_8identityEEET_SD_T0_RT1_RT2_:
 6760|    332|        {
 6761|  4.32k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 4.29k, False: 24]
  ------------------
 6762|  4.29k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 308, False: 3.99k]
  ------------------
 6763|    308|                    return first;
 6764|    308|                }
 6765|  3.99k|                ++first;
 6766|  3.99k|            }
 6767|     24|            return first;
 6768|    332|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSE_DpOSF_:
 1299|  7.12k|            {
 1300|  7.12k|                return fn::impl(std::forward<F>(f),
 1301|  7.12k|                                std::forward<Args>(args)...);
 1302|  7.12k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISG_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSG_DpOSI_:
 1288|  7.12k|            {
 1289|  7.12k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.12k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  7.12k|            {
 1300|  7.12k|                return fn::impl(std::forward<F>(f),
 1301|  7.12k|                                std::forward<Args>(args)...);
 1302|  7.12k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKwEEENSt3__19enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSD_:
 1288|  7.12k|            {
 1289|  7.12k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  7.12k|            }
_ZNK4nano6ranges8identityclIRKwEEOT_S6_:
 1141|  7.12k|    {
 1142|  7.12k|        return std::forward<T>(t);
 1143|  7.12k|    }
_ZNK4nano6ranges6detail5next_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
 3797|  1.10k|            {
 3798|  1.10k|                ranges::advance(x, bound);
 3799|  1.10k|                return x;
 3800|  1.10k|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EEvE4typeERS9_SA_:
 3685|  1.10k|            {
 3686|  1.10k|                fn::impl(i, bound, priority_tag<2>{});
 3687|  1.10k|            }
_ZNK4nano6ranges6detail5data_2fnclIRNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  5.49k|            {
 3178|  5.49k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  5.49k|            }
_ZN4nano6ranges6detail5data_2fn4implINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEPcEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  5.49k|            {
 3158|  5.49k|                return t.data();
 3159|  5.49k|            }
_ZNK4nano6ranges6detail5data_2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  2.88k|            {
 3178|  2.88k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.88k|            }
_ZN4nano6ranges6detail5data_2fn4implIKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwEENS5_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.88k|            {
 3158|  2.88k|                return t.data();
 3159|  2.88k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  2.88k|            {
 3038|  2.88k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.88k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESD_E4typeEOSF_NS1_12priority_tagILm2EEE:
 2999|  2.88k|            {
 3000|  2.88k|                return decay_copy(std::forward<T>(t).size());
 3001|  2.88k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  7.07k|            {
 3756|  7.07k|                return fn::impl(std::move(first), std::move(last));
 3757|  7.07k|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  7.07k|            {
 3716|  7.07k|                return s - i;
 3717|  7.07k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.22k|            {
 2693|  2.22k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.22k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.22k|            {
 2672|  2.22k|                return decay_copy(t.begin());
 2673|  2.22k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEEu7__decayIT_EOSB_:
 2605|   158k|    {
 2606|   158k|        return std::forward<T>(t);
 2607|   158k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.77k|            {
 2759|  1.77k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.77k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSR_NS1_12priority_tagILm1EEE:
 2738|  1.77k|            {
 2739|  1.77k|                return decay_copy(std::forward<T>(t).end());
 2740|  1.77k|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEEu7__decayIT_EOSG_:
 2605|  96.2k|    {
 2606|  96.2k|        return std::forward<T>(t);
 2607|  96.2k|    }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESF_E4typeESF_:
 3779|  2.27k|            {
 3780|  2.27k|                ++x;
 3781|  2.27k|                return x;
 3782|  2.27k|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSN_:
 2758|  56.9k|            {
 2759|  56.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  56.9k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEESK_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSR_NS1_12priority_tagILm1EEE:
 2738|  56.9k|            {
 2739|  56.9k|                return decay_copy(std::forward<T>(t).end());
 2740|  56.9k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EE3endEv:
 6448|  57.4k|        {
 6449|  57.4k|            return data_.end_;
 6450|  57.4k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSO_:
 2692|    500|            {
 2693|    500|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|    500|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESR_E4typeEOSQ_NS1_12priority_tagILm1EEE:
 2671|    500|            {
 2672|    500|                return decay_copy(t.begin());
 2673|    500|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EE5beginEv:
 6443|  91.4k|        {
 6444|  91.4k|            return data_.begin_;
 6445|  91.4k|        }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSO_:
 2758|    500|            {
 2759|    500|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|    500|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEESK_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSS_NS1_12priority_tagILm1EEE:
 2738|    500|            {
 2739|    500|                return decay_copy(std::forward<T>(t).end());
 2740|    500|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSN_:
 2692|  90.9k|            {
 2693|  90.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  90.9k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS9_15take_width_viewINS6_ISD_SD_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESQ_E4typeEOSP_NS1_12priority_tagILm1EEE:
 2671|  90.9k|            {
 2672|  90.9k|                return decay_copy(t.begin());
 2673|  90.9k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  9.23k|            {
 2693|  9.23k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.23k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  9.23k|            {
 2672|  9.23k|                return decay_copy(t.begin());
 2673|  9.23k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS5_ISC_SC_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEENS0_8identityENS8_12function_refIFbwESO_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SM_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSS_EEEENS1_16projected_helperIS10_SV_vEEEEEENSU_IX14borrowed_rangeISS_EEE4typeIS10_NS0_8danglingEEEE4typeEOSS_ST_SV_:
 6792|  1.00k|        {
 6793|  1.00k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.00k|                                    proj);
 6795|  1.00k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS0_9subrange_8subrangeISA_SA_LNS0_13subrange_kindE1EEEE8sentinelILb1EEENS6_12function_refIFbwESL_EENS0_8identityEEET_SO_T0_RT1_RT2_:
 6760|  1.14k|        {
 6761|  2.88k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 2.82k, False: 60]
  ------------------
 6762|  2.82k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.08k, False: 1.74k]
  ------------------
 6763|  1.08k|                    return first;
 6764|  1.08k|                }
 6765|  1.74k|                ++first;
 6766|  1.74k|            }
 6767|     60|            return first;
 6768|  1.14k|        }
_ZNK4nano6ranges6detail4end_2fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  37.0k|            {
 2759|  37.0k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  37.0k|            }
_ZN4nano6ranges6detail4end_2fn4implIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSC_LNS0_13subrange_kindE1EEEEENSF_8sentinelILb1EEENS7_27counted_width_iterator_impl22counted_width_iteratorISC_SC_EEEENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSQ_NS1_12priority_tagILm1EEE:
 2738|  37.0k|            {
 2739|  37.0k|                return decay_copy(std::forward<T>(t).end());
 2740|  37.0k|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS2_IS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELSC_0EEC2ISA_Lb0EvEET_SG_:
 6374|  29.7k|        {
 6375|  29.7k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS0_9subrange_8subrangeIS9_S9_LNS0_13subrange_kindE1EEEE8sentinelILb1EEELb0EEC2EOSA_OSI_:
 6293|  29.7k|        {
 6294|  29.7k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  27.9k|            {
 2693|  27.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  27.9k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  27.9k|            {
 2672|  27.9k|                return decay_copy(t.begin());
 2673|  27.9k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EE5beginEv:
 6443|  27.9k|        {
 6444|  27.9k|            return data_.begin_;
 6445|  27.9k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  27.9k|            {
 2759|  27.9k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  27.9k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EESE_LNS0_13subrange_kindE0EEESE_SE_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  27.9k|            {
 2739|  27.9k|                return decay_copy(std::forward<T>(t).end());
 2740|  27.9k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EE3endEv:
 6448|  27.9k|        {
 6449|  27.9k|            return data_.end_;
 6450|  27.9k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_LNS0_13subrange_kindE0EEC2ISA_Lb0EvEET_SA_:
 6374|  27.9k|        {
 6375|  27.9k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_Lb0EEC2EOSA_SC_:
 6293|  27.9k|        {
 6294|  27.9k|        }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|     36|            {
 3077|     36|                return fn::impl(std::forward<T>(t));
 3078|     36|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|     36|            {
 3067|     36|                return static_cast<ssize_return_t<T>>(
 3068|     36|                    ranges::size(std::forward<T>(t)));
 3069|     36|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|     36|            {
 3038|     36|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|     36|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|     36|            {
 3000|     36|                return decay_copy(std::forward<T>(t).size());
 3001|     36|            }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EESN_E4typeESN_SO_:
 3797|    252|            {
 3798|    252|                ranges::advance(x, bound);
 3799|    252|                return x;
 3800|    252|            }
_ZNK4nano6ranges6detail8advance_2fnclIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SN_EEvE4typeERSN_SO_:
 3685|    252|            {
 3686|    252|                fn::impl(i, bound, priority_tag<2>{});
 3687|    252|            }
_ZN4nano6ranges6detail8advance_2fn4implIN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwSB_EENS7_15take_width_viewINS0_9subrange_8subrangeISB_SB_LNS0_13subrange_kindE1EEEE8sentinelILb1EEEEEvRT_T0_NS1_12priority_tagILm0EEE:
 3609|    252|            {
 3610|  8.16k|                while (i != bound) {
  ------------------
  |  Branch (3610:24): [True: 7.90k, False: 252]
  ------------------
 3611|  7.90k|                    ++i;
 3612|  7.90k|                }
 3613|    252|            }
_ZNK4nano6ranges6detail10find_if_fnclIRKNSt3__16vectorINS4_4pairIDiDiEENS4_9allocatorIS7_EEEENS0_8identityEZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_EENS4_9enable_ifIXaa11input_rangeISK_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SD_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSK_EEEENS1_16projected_helperISW_SR_vEEEEEENSQ_IX14borrowed_rangeISK_EEE4typeISW_NS0_8danglingEEEE4typeEOSK_SP_SR_:
 6792|  56.7k|        {
 6793|  56.7k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  56.7k|                                    proj);
 6795|  56.7k|        }
_ZN4nano6ranges6detail10find_if_fn4implINSt3__111__wrap_iterIPKNS4_4pairIDiDiEEEESA_ZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_NS0_8identityEEESH_SH_T0_RT1_RT2_:
 6760|  56.7k|        {
 6761|  4.79M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 4.79M, False: 2.97k]
  ------------------
 6762|  4.79M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 53.7k, False: 4.74M]
  ------------------
 6763|  53.7k|                    return first;
 6764|  53.7k|                }
 6765|  4.74M|                ++first;
 6766|  4.74M|            }
 6767|  2.97k|            return first;
 6768|  56.7k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_JRKNSt3__14pairIDiDiEEEEEDTclsr2fnE4implclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSB_DpOSL_:
 1299|  4.79M|            {
 1300|  4.79M|                return fn::impl(std::forward<F>(f),
 1301|  4.79M|                                std::forward<Args>(args)...);
 1302|  4.79M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiEUlRKT_E_JRKNSt3__14pairIDiDiEEEEENSG_9enable_ifIXntsr3std17is_member_pointerIu7__decayISB_EEE5valueEDTclclsr3stdE7forwardISB_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSB_DpOSN_:
 1288|  4.79M|            {
 1289|  4.79M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  4.79M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRN3scn2v24impl15take_width_viewINS0_9subrange_8subrangeIPKwSB_LNS0_13subrange_kindE1EEEEENS0_8identityENS6_12function_refIFbwESI_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSM_EEEENS1_16projected_helperISU_SP_vEEEEEENSO_IX14borrowed_rangeISM_EEE4typeISU_NS0_8danglingEEEE4typeEOSM_SN_SP_:
 6792|    138|        {
 6793|    138|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|    138|                                    proj);
 6795|    138|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl30find_classic_space_narrow_fastES8_E3$_0EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  20.4k|        {
 6793|  20.4k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  20.4k|                                    proj);
 6795|  20.4k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_0NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  20.4k|        {
 6761|   172k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 152k, False: 19.7k]
  ------------------
 6762|   152k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 696, False: 151k]
  ------------------
 6763|    696|                    return first;
 6764|    696|                }
 6765|   151k|                ++first;
 6766|   151k|            }
 6767|  19.7k|            return first;
 6768|  20.4k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|   152k|            {
 1300|   152k|                return fn::impl(std::forward<F>(f),
 1301|   152k|                                std::forward<Args>(args)...);
 1302|   152k|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISI_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSI_DpOSK_:
 1288|   152k|            {
 1289|   152k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   152k|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_0EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|   109k|        {
 6793|   109k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   109k|                                    proj);
 6795|   109k|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_0NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   109k|        {
 6761|   136k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 133k, False: 3.53k]
  ------------------
 6762|   133k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 106k, False: 27.2k]
  ------------------
 6763|   106k|                    return first;
 6764|   106k|                }
 6765|  27.2k|                ++first;
 6766|  27.2k|            }
 6767|  3.53k|            return first;
 6768|   109k|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|   133k|            {
 1300|   133k|                return fn::impl(std::forward<F>(f),
 1301|   133k|                                std::forward<Args>(args)...);
 1302|   133k|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_0JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerIu7__decayIT_EEE5valueEDTclclsr3stdE7forwardISI_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSI_DpOSK_:
 1288|   133k|            {
 1289|   133k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   133k|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|  7.56k|{
   50|  7.56k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  7.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  7.56k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|  1.76k|{
   50|  1.76k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  1.76k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
   49|  6.15k|{
   50|  6.15k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  6.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  6.15k|}
_ZN3scn2v213scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  1.40k|    {
   44|  1.40k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
   49|  2.36k|{
   50|  2.36k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.36k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
   49|  1.18k|{
   50|  1.18k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  1.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  1.18k|}
_ZN3scn2v213scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
   43|  1.50k|    {
   44|  1.50k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
   49|     38|{
   50|     38|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|     38|}
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_ENKUlSM_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSE_8sentinelILb1EEELSC_0EEEEEDaSM_:
   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_ENKUlSM_E_clIRNS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSE_8sentinelILb1EEELSC_0EEEEEDaSM_:
   66|    286|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
   49|    792|{
   50|    792|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|    792|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|    792|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
   49|  13.9k|{
   50|  13.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  13.9k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
   49|  6.85k|{
   50|  6.85k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  6.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  6.85k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
   49|    630|{
   50|    630|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|    630|}
_ZN3scn2v213scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
   43|  1.17k|    {
   44|  1.17k|    }
_ZN3scn2v213scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
   43|  1.24k|    {
   44|  1.24k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_ENKUlSM_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSE_8sentinelILb1EEELSC_0EEEEEDaSM_:
   66|      2|    auto&& SCN_TRY_TMP = (x);                          \
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_ENKUlSM_E_clIRNS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSE_8sentinelILb1EEELSC_0EEEEEDaSM_:
   66|    236|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
   49|  2.42k|{
   50|  2.42k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  2.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  2.42k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|   231k|    {
 1191|   231k|        return has_value();
 1192|   231k|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|   462k|    {
  189|   462k|        return m_has_value;
  190|   462k|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|   224k|    {
 1197|   224k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   224k|        return this->get_unexpected().error();
 1199|   224k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   224k|    {
  172|   224k|        return m_unexpected;
  173|   224k|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  1.47M|    {
   72|  1.47M|        return m_unexpected;
   73|  1.47M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|   802k|    {
   58|   802k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   802k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   802k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|  79.9k|    {
 1078|  79.9k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|  79.9k|    {
  151|  79.9k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|   851k|    {
   67|   851k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   851k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   851k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  83.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  6.72k|    {
 1251|  6.72k|        return value();
 1252|  6.72k|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  6.72k|    {
 1221|  6.72k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  6.72k|        return this->get_value();
 1223|  6.72k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  6.72k|    {
  155|  6.72k|        return m_value;
  156|  6.72k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.29k|    {
 1034|  3.29k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.29k|    {
  142|  3.29k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  83.1k|    {
 1191|  83.1k|        return has_value();
 1192|  83.1k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   166k|    {
  189|   166k|        return m_has_value;
  190|   166k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  79.9k|    {
 1197|  79.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  79.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  79.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  79.9k|        return this->get_unexpected().error();
 1199|  79.9k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  79.9k|    {
  172|  79.9k|        return m_unexpected;
  173|  79.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJcEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  9.03k|    {
 1078|  9.03k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJcEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  9.03k|    {
  151|  9.03k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  3.29k|    {
 1251|  3.29k|        return value();
 1252|  3.29k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.29k|    {
 1221|  3.29k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.29k|        return this->get_value();
 1223|  3.29k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.29k|    {
  155|  3.29k|        return m_value;
  156|  3.29k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJcEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|    206|    {
 1034|    206|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|    206|    {
  142|    206|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  9.24k|    {
 1078|  9.24k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  9.24k|    {
  151|  9.24k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  9.24k|    {
 1078|  9.24k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  9.24k|    {
  151|  9.24k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  9.24k|    {
 1078|  9.24k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  9.24k|    {
  151|  9.24k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJbEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  9.24k|    {
 1078|  9.24k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJbEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  9.24k|    {
  151|  9.24k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJPvEEENS0_10scan_errorEEC2ISD_LSB_0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  9.24k|    {
 1078|  9.24k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJPvEEENS0_10scan_errorELb1EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  150|  9.24k|    {
  151|  9.24k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  8.21k|    {
 1078|  8.21k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  8.21k|    {
  312|  8.21k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  8.21k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  8.21k|    {
  373|  8.21k|        scn::detail::construct_at(unexpected_ptr(),
  374|  8.21k|                                  std::forward<Args>(args)...);
  375|  8.21k|        m_has_value = false;
  376|  8.21k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|  46.2k|{
  102|  46.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  46.2k|        T(std::forward<Args>(args)...);
  104|  46.2k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  16.4k|    {
  403|  16.4k|        return reinterpret_cast<unexpected<E>*>(
  404|  16.4k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  16.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  16.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  9.24k|    {
  317|  9.24k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 1.03k, False: 8.21k]
  ------------------
  318|  1.03k|            destroy_value();
  319|  1.03k|        }
  320|  8.21k|        else {
  321|  8.21k|            destroy_unexpected();
  322|  8.21k|        }
  323|  9.24k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  9.24k|    {
  361|  9.24k|        return m_has_value;
  362|  9.24k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  1.03k|    {
  380|  1.03k|        scn::detail::destroy_at(value_ptr());
  381|  1.03k|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEEEvPT_:
  107|  1.03k|{
  108|  1.03k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.03k|        for (auto& elem : *p) {
  110|  1.03k|            scn::detail::destroy_at(std::addressof(elem));
  111|  1.03k|        }
  112|  1.03k|    }
  113|  1.03k|    else {
  114|  1.03k|        p->~T();
  115|  1.03k|    }
  116|  1.03k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  2.06k|    {
  390|  2.06k|        return reinterpret_cast<T*>(
  391|  2.06k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  2.06k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  2.06k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  8.21k|    {
  384|  8.21k|        scn::detail::destroy_at(unexpected_ptr());
  385|  8.21k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|  46.2k|{
  108|  46.2k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  46.2k|        for (auto& elem : *p) {
  110|  46.2k|            scn::detail::destroy_at(std::addressof(elem));
  111|  46.2k|        }
  112|  46.2k|    }
  113|  46.2k|    else {
  114|  46.2k|        p->~T();
  115|  46.2k|    }
  116|  46.2k|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|  1.03k|    {
 1034|  1.03k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|  1.03k|    {
  303|  1.03k|        construct(std::forward<Args>(args)...);
  304|  1.03k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|  1.03k|    {
  367|  1.03k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  1.03k|        m_has_value = true;
  369|  1.03k|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|  1.03k|{
  102|  1.03k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  1.03k|        T(std::forward<Args>(args)...);
  104|  1.03k|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  8.21k|    {
 1078|  8.21k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  8.21k|    {
  312|  8.21k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  8.21k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  8.21k|    {
  373|  8.21k|        scn::detail::construct_at(unexpected_ptr(),
  374|  8.21k|                                  std::forward<Args>(args)...);
  375|  8.21k|        m_has_value = false;
  376|  8.21k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  16.4k|    {
  403|  16.4k|        return reinterpret_cast<unexpected<E>*>(
  404|  16.4k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  16.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  16.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  9.24k|    {
  317|  9.24k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 1.03k, False: 8.21k]
  ------------------
  318|  1.03k|            destroy_value();
  319|  1.03k|        }
  320|  8.21k|        else {
  321|  8.21k|            destroy_unexpected();
  322|  8.21k|        }
  323|  9.24k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  9.24k|    {
  361|  9.24k|        return m_has_value;
  362|  9.24k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  1.03k|    {
  380|  1.03k|        scn::detail::destroy_at(value_ptr());
  381|  1.03k|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEEEvPT_:
  107|  1.03k|{
  108|  1.03k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.03k|        for (auto& elem : *p) {
  110|  1.03k|            scn::detail::destroy_at(std::addressof(elem));
  111|  1.03k|        }
  112|  1.03k|    }
  113|  1.03k|    else {
  114|  1.03k|        p->~T();
  115|  1.03k|    }
  116|  1.03k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  2.06k|    {
  390|  2.06k|        return reinterpret_cast<T*>(
  391|  2.06k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  2.06k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  2.06k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  8.21k|    {
  384|  8.21k|        scn::detail::destroy_at(unexpected_ptr());
  385|  8.21k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|  1.03k|    {
 1034|  1.03k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|  1.03k|    {
  303|  1.03k|        construct(std::forward<Args>(args)...);
  304|  1.03k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|  1.03k|    {
  367|  1.03k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  1.03k|        m_has_value = true;
  369|  1.03k|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|  1.03k|{
  102|  1.03k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  1.03k|        T(std::forward<Args>(args)...);
  104|  1.03k|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1077|  8.21k|    {
 1078|  8.21k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  150|  8.21k|    {
  151|  8.21k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.24k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1033|  1.03k|    {
 1034|  1.03k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENSC_10in_place_tEDpOT_:
  141|  1.03k|    {
  142|  1.03k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   139k|    {
 1078|   139k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   139k|    {
  151|   139k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   143k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.43k|    {
 1034|  3.43k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.43k|    {
  142|  3.43k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   143k|    {
 1191|   143k|        return has_value();
 1192|   143k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   286k|    {
  189|   286k|        return m_has_value;
  190|   286k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   139k|    {
 1197|   139k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   139k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   139k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|   139k|        return this->get_unexpected().error();
 1199|   139k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   139k|    {
  172|   139k|        return m_unexpected;
  173|   139k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJwEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  15.6k|    {
 1078|  15.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJwEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  15.6k|    {
  151|  15.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  3.43k|    {
 1251|  3.43k|        return value();
 1252|  3.43k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.43k|    {
 1221|  3.43k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.43k|        return this->get_value();
 1223|  3.43k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.43k|    {
  155|  3.43k|        return m_value;
  156|  3.43k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJwEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|    238|    {
 1034|    238|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|    238|    {
  142|    238|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  15.9k|    {
 1078|  15.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  15.9k|    {
  151|  15.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  15.9k|    {
 1078|  15.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  15.9k|    {
  151|  15.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJdEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  15.9k|    {
 1078|  15.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  15.9k|    {
  151|  15.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJbEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  15.9k|    {
 1078|  15.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJbEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  15.9k|    {
  151|  15.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJPvEEENS0_10scan_errorEEC2ISD_LSB_0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  15.9k|    {
 1078|  15.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJPvEEENS0_10scan_errorELb1EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  150|  15.9k|    {
  151|  15.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  14.8k|    {
 1078|  14.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  14.8k|    {
  312|  14.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  14.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  14.8k|    {
  373|  14.8k|        scn::detail::construct_at(unexpected_ptr(),
  374|  14.8k|                                  std::forward<Args>(args)...);
  375|  14.8k|        m_has_value = false;
  376|  14.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  29.7k|    {
  403|  29.7k|        return reinterpret_cast<unexpected<E>*>(
  404|  29.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  29.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  29.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  15.9k|    {
  317|  15.9k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 1.06k, False: 14.8k]
  ------------------
  318|  1.06k|            destroy_value();
  319|  1.06k|        }
  320|  14.8k|        else {
  321|  14.8k|            destroy_unexpected();
  322|  14.8k|        }
  323|  15.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  15.9k|    {
  361|  15.9k|        return m_has_value;
  362|  15.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  1.06k|    {
  380|  1.06k|        scn::detail::destroy_at(value_ptr());
  381|  1.06k|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEEEvPT_:
  107|  1.06k|{
  108|  1.06k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.06k|        for (auto& elem : *p) {
  110|  1.06k|            scn::detail::destroy_at(std::addressof(elem));
  111|  1.06k|        }
  112|  1.06k|    }
  113|  1.06k|    else {
  114|  1.06k|        p->~T();
  115|  1.06k|    }
  116|  1.06k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  2.12k|    {
  390|  2.12k|        return reinterpret_cast<T*>(
  391|  2.12k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  2.12k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  2.12k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  14.8k|    {
  384|  14.8k|        scn::detail::destroy_at(unexpected_ptr());
  385|  14.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|  1.06k|    {
 1034|  1.06k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|  1.06k|    {
  303|  1.06k|        construct(std::forward<Args>(args)...);
  304|  1.06k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|  1.06k|    {
  367|  1.06k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  1.06k|        m_has_value = true;
  369|  1.06k|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|  1.06k|{
  102|  1.06k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  1.06k|        T(std::forward<Args>(args)...);
  104|  1.06k|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISJ_LPv0ELSM_0EEEONS0_10unexpectedIT_EE:
 1077|  14.8k|    {
 1078|  14.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS0_10unexpect_tEDpOT_:
  311|  14.8k|    {
  312|  14.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  14.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSC_10in_place_tESK_EEEvDpOT_:
  372|  14.8k|    {
  373|  14.8k|        scn::detail::construct_at(unexpected_ptr(),
  374|  14.8k|                                  std::forward<Args>(args)...);
  375|  14.8k|        m_has_value = false;
  376|  14.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  29.7k|    {
  403|  29.7k|        return reinterpret_cast<unexpected<E>*>(
  404|  29.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  29.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  29.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  15.9k|    {
  317|  15.9k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 1.06k, False: 14.8k]
  ------------------
  318|  1.06k|            destroy_value();
  319|  1.06k|        }
  320|  14.8k|        else {
  321|  14.8k|            destroy_unexpected();
  322|  14.8k|        }
  323|  15.9k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  15.9k|    {
  361|  15.9k|        return m_has_value;
  362|  15.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  1.06k|    {
  380|  1.06k|        scn::detail::destroy_at(value_ptr());
  381|  1.06k|    }
_ZN3scn2v26detail10destroy_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEEEvPT_:
  107|  1.06k|{
  108|  1.06k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  1.06k|        for (auto& elem : *p) {
  110|  1.06k|            scn::detail::destroy_at(std::addressof(elem));
  111|  1.06k|        }
  112|  1.06k|    }
  113|  1.06k|    else {
  114|  1.06k|        p->~T();
  115|  1.06k|    }
  116|  1.06k|}
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  2.12k|    {
  390|  2.12k|        return reinterpret_cast<T*>(
  391|  2.12k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  2.12k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  2.12k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  14.8k|    {
  384|  14.8k|        scn::detail::destroy_at(unexpected_ptr());
  385|  14.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_vEEOT_:
 1033|  1.06k|    {
 1034|  1.06k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENSC_10in_place_tEDpOT_:
  302|  1.06k|    {
  303|  1.06k|        construct(std::forward<Args>(args)...);
  304|  1.06k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSJ_EEEvDpOT_:
  366|  1.06k|    {
  367|  1.06k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  1.06k|        m_has_value = true;
  369|  1.06k|    }
_ZN3scn2v26detail12construct_atINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEEEJSJ_EEEPT_SL_DpOT0_:
  101|  1.06k|{
  102|  1.06k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  1.06k|        T(std::forward<Args>(args)...);
  104|  1.06k|}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1077|  14.8k|    {
 1078|  14.8k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  150|  14.8k|    {
  151|  14.8k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.9k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1033|  1.06k|    {
 1034|  1.06k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJNSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENSC_10in_place_tEDpOT_:
  141|  1.06k|    {
  142|  1.06k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  36.2k|    {
 1405|  36.2k|        return detail::transform_error_impl(std::move(*this),
 1406|  36.2k|                                            std::forward<F>(f));
 1407|  36.2k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  36.2k|{
  927|  36.2k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  36.2k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  36.2k|        if (SCN_LIKELY(exp.has_value())) {
  930|  36.2k|            return result(*std::forward<Exp>(exp));
  931|  36.2k|        }
  932|       |
  933|  36.2k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  36.2k|        return result(unexpect, monostate{});
  935|  36.2k|    }
  936|  36.2k|    else {
  937|  36.2k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  36.2k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  36.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 36.2k, False: 0]
  |  |  ------------------
  ------------------
  939|  36.2k|                   ? result(*std::forward<Exp>(exp))
  940|  36.2k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  36.2k|    }
  944|  36.2k|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|   116k|    {
  189|   116k|        return m_has_value;
  190|   116k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  38.8k|    {
 1263|  38.8k|        return std::move(value());
 1264|  38.8k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  52.2k|    {
 1221|  52.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  52.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  52.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  52.2k|        return this->get_value();
 1223|  52.2k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  52.2k|    {
  155|  52.2k|        return m_value;
  156|  52.2k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  57.0k|    {
 1034|  57.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  57.0k|    {
  142|  57.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   161k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|    166|    {
 1207|    166|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    166|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    166|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    166|        return std::move(this->get_unexpected().error());
 1209|    166|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    166|    {
  172|    166|        return m_unexpected;
  173|    166|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|  1.96k|    {
   72|  1.96k|        return m_unexpected;
   73|  1.96k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.40k|    {
 1088|  1.40k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   101k|    {
  151|   101k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|   162k|    {
 1191|   162k|        return has_value();
 1192|   162k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|   321k|    {
  189|   321k|        return m_has_value;
  190|   321k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|  99.7k|    {
 1197|  99.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  99.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  99.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  99.7k|        return this->get_unexpected().error();
 1199|  99.7k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  99.7k|    {
  172|  99.7k|        return m_unexpected;
  173|  99.7k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  99.7k|    {
 1078|  99.7k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  45.9k|    {
 1263|  45.9k|        return std::move(value());
 1264|  45.9k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  59.0k|    {
 1221|  59.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  59.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  59.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  59.0k|        return this->get_value();
 1223|  59.0k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  59.0k|    {
  155|  59.0k|        return m_value;
  156|  59.0k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|  43.7k|    {
   58|  43.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  43.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  43.7k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|   224k|    {
 1078|   224k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|   224k|    {
  151|   224k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   231k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|    384|    {
 1078|    384|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|    384|    {
  151|    384|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  1.09k|    {
   67|  1.09k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  1.09k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  63.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  63.2k|    {
 1034|  63.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  63.2k|    {
  142|  63.2k|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  24.6k|    {
 1191|  24.6k|        return has_value();
 1192|  24.6k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|      8|    {
   58|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|      8|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  1.53k|    {
 1078|  1.53k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  25.5k|    {
   72|  25.5k|        return m_unexpected;
   73|  25.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.70k|    {
  151|  1.70k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|  4.79k|    {
   67|  4.79k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  4.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  4.79k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  34.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  13.4k|    {
 1251|  13.4k|        return value();
 1252|  13.4k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  68.7k|    {
   58|  68.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  68.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  68.7k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  29.8k|    {
 1078|  29.8k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  68.7k|    {
   72|  68.7k|        return m_unexpected;
   73|  68.7k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  29.8k|    {
  151|  29.8k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  68.7k|    {
   67|  68.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  68.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  68.7k|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  35.4k|    {
 1191|  35.4k|        return has_value();
 1192|  35.4k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  47.8k|    {
  189|  47.8k|        return m_has_value;
  190|  47.8k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  8.42k|    {
 1197|  8.42k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  8.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  8.42k|        return this->get_unexpected().error();
 1199|  8.42k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  8.42k|    {
  172|  8.42k|        return m_unexpected;
  173|  8.42k|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  5.49k|    {
 1034|  5.49k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  5.49k|    {
  142|  5.49k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.49k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|  1.09k|    {
   58|  1.09k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  1.09k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  1.09k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  2.57k|    {
 1221|  2.57k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.57k|        return this->get_value();
 1223|  2.57k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  2.57k|    {
  155|  2.57k|        return m_value;
  156|  2.57k|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  4.13k|    {
 1191|  4.13k|        return has_value();
 1192|  4.13k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  10.9k|    {
  189|  10.9k|        return m_has_value;
  190|  10.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.13k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  5.49k|    {
 1263|  5.49k|        return std::move(value());
 1264|  5.49k|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  5.49k|    {
 1221|  5.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  5.49k|        return this->get_value();
 1223|  5.49k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  5.49k|    {
  155|  5.49k|        return m_value;
  156|  5.49k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  2.57k|    {
 1034|  2.57k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.57k|    {
  142|  2.57k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  4.13k|    {
 1034|  4.13k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.13k|    {
  142|  4.13k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  4.13k|    {
 1405|  4.13k|        return detail::transform_error_impl(std::move(*this),
 1406|  4.13k|                                            std::forward<F>(f));
 1407|  4.13k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  4.13k|{
  927|  4.13k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.13k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.13k|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.13k|            return result(*std::forward<Exp>(exp));
  931|  4.13k|        }
  932|       |
  933|  4.13k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.13k|        return result(unexpect, monostate{});
  935|  4.13k|    }
  936|  4.13k|    else {
  937|  4.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.13k, False: 0]
  |  |  ------------------
  ------------------
  939|  4.13k|                   ? result(*std::forward<Exp>(exp))
  940|  4.13k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  4.13k|    }
  944|  4.13k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  8.27k|    {
  189|  8.27k|        return m_has_value;
  190|  8.27k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.13k|    {
 1263|  4.13k|        return std::move(value());
 1264|  4.13k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.13k|    {
 1221|  4.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  4.13k|        return this->get_value();
 1223|  4.13k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  4.13k|    {
  155|  4.13k|        return m_value;
  156|  4.13k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  4.13k|    {
 1034|  4.13k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.13k|    {
  142|  4.13k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.13k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  4.13k|    {
 1191|  4.13k|        return has_value();
 1192|  4.13k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  8.27k|    {
  189|  8.27k|        return m_has_value;
  190|  8.27k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.13k|    {
 1263|  4.13k|        return std::move(value());
 1264|  4.13k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.13k|    {
 1221|  4.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  4.13k|        return this->get_value();
 1223|  4.13k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.13k|    {
  155|  4.13k|        return m_value;
  156|  4.13k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|     44|    {
 1078|     44|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|     44|    {
  312|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     44|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|     44|    {
  373|     44|        scn::detail::construct_at(unexpected_ptr(),
  374|     44|                                  std::forward<Args>(args)...);
  375|     44|        m_has_value = false;
  376|     44|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|    132|    {
  403|    132|        return reinterpret_cast<unexpected<E>*>(
  404|    132|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|    132|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|     44|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|     44|    {
  317|     44|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 44]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|     44|        else {
  321|     44|            destroy_unexpected();
  322|     44|        }
  323|     44|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|    132|    {
  361|    132|        return m_has_value;
  362|    132|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     44|    {
  384|     44|        scn::detail::destroy_at(unexpected_ptr());
  385|     44|    }
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|     44|    {
 1191|     44|        return has_value();
 1192|     44|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|     44|    {
 1197|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|     44|        return this->get_unexpected().error();
 1199|     44|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     44|    {
  344|     44|        return *unexpected_ptr();
  345|     44|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  13.0k|    {
 1251|  13.0k|        return value();
 1252|  13.0k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  2.74k|    {
 1405|  2.74k|        return detail::transform_error_impl(std::move(*this),
 1406|  2.74k|                                            std::forward<F>(f));
 1407|  2.74k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.74k|{
  927|  2.74k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.74k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.74k|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.74k|            return result(*std::forward<Exp>(exp));
  931|  2.74k|        }
  932|       |
  933|  2.74k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.74k|        return result(unexpect, monostate{});
  935|  2.74k|    }
  936|  2.74k|    else {
  937|  2.74k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.74k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.74k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.57k, False: 166]
  |  |  ------------------
  ------------------
  939|  2.74k|                   ? result(*std::forward<Exp>(exp))
  940|  2.74k|                   : result(unexpect,
  941|    166|                            std::invoke(std::forward<F>(f),
  942|    166|                                        std::forward<Exp>(exp).error()));
  943|  2.74k|    }
  944|  2.74k|}
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|    166|    {
 1088|    166|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  3.91k|    {
   58|  3.91k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  3.91k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  3.91k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.57k|    {
 1263|  2.57k|        return std::move(value());
 1264|  2.57k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  1.36k|    {
 1405|  1.36k|        return detail::transform_error_impl(std::move(*this),
 1406|  1.36k|                                            std::forward<F>(f));
 1407|  1.36k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  1.36k|{
  927|  1.36k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.36k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.36k|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.36k|            return result(*std::forward<Exp>(exp));
  931|  1.36k|        }
  932|       |
  933|  1.36k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.36k|        return result(unexpect, monostate{});
  935|  1.36k|    }
  936|  1.36k|    else {
  937|  1.36k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.36k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.36k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.36k, False: 0]
  |  |  ------------------
  ------------------
  939|  1.36k|                   ? result(*std::forward<Exp>(exp))
  940|  1.36k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  1.36k|    }
  944|  1.36k|}
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  1.36k|    {
 1034|  1.36k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  1.36k|    {
  142|  1.36k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.36k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  1.36k|    {
 1191|  1.36k|        return has_value();
 1192|  1.36k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.72k|    {
  189|  2.72k|        return m_has_value;
  190|  2.72k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.36k|    {
 1263|  1.36k|        return std::move(value());
 1264|  1.36k|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.36k|    {
 1221|  1.36k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.36k|        return this->get_value();
 1223|  1.36k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.36k|    {
  155|  1.36k|        return m_value;
  156|  1.36k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDaOT_:
 1394|  1.40k|    {
 1395|  1.40k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  1.40k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  1.40k|{
  927|  1.40k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.40k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.40k|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.40k|            return result(*std::forward<Exp>(exp));
  931|  1.40k|        }
  932|       |
  933|  1.40k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.40k|        return result(unexpect, monostate{});
  935|  1.40k|    }
  936|  1.40k|    else {
  937|  1.40k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.40k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.40k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 1.40k]
  |  |  ------------------
  ------------------
  939|  1.40k|                   ? result(*std::forward<Exp>(exp))
  940|  1.40k|                   : result(unexpect,
  941|  1.40k|                            std::invoke(std::forward<F>(f),
  942|  1.40k|                                        std::forward<Exp>(exp).error()));
  943|  1.40k|    }
  944|  1.40k|}
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  6.72k|    {
 1034|  6.72k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  6.72k|    {
  142|  6.72k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|    192|    {
 1078|    192|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|    192|    {
  151|    192|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.29k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1033|  6.09k|    {
 1034|  6.09k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  6.09k|    {
  142|  6.09k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1190|  2.44k|    {
 1191|  2.44k|        return has_value();
 1192|  2.44k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  188|  10.1k|    {
  189|  10.1k|        return m_has_value;
  190|  10.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  171|    192|    {
  172|    192|        return m_unexpected;
  173|    192|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|    486|    {
 1078|    486|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|    678|    {
  151|    678|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1220|  3.65k|    {
 1221|  3.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.65k|        return this->get_value();
 1223|  3.65k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.65k|    {
  155|  3.65k|        return m_value;
  156|  3.65k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|  7.62k|    {
 1078|  7.62k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  7.62k|    {
  151|  7.62k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1190|  11.0k|    {
 1191|  11.0k|        return has_value();
 1192|  11.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  188|  19.1k|    {
  189|  19.1k|        return m_has_value;
  190|  19.1k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1196|  2.29k|    {
 1197|  2.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  2.29k|        return this->get_unexpected().error();
 1199|  2.29k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  171|  3.20k|    {
  172|  3.20k|        return m_unexpected;
  173|  3.20k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1033|  1.22k|    {
 1034|  1.22k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  141|  1.22k|    {
  142|  1.22k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1220|  3.37k|    {
 1221|  3.37k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.37k|        return this->get_value();
 1223|  3.37k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  154|  3.37k|    {
  155|  3.37k|        return m_value;
  156|  3.37k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1190|    928|    {
 1191|    928|        return has_value();
 1192|    928|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  188|  2.44k|    {
  189|  2.44k|        return m_has_value;
  190|  2.44k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    928|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1262|  1.22k|    {
 1263|  1.22k|        return std::move(value());
 1264|  1.22k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.22k|    {
 1221|  1.22k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.22k|        return this->get_value();
 1223|  1.22k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  154|  1.22k|    {
  155|  1.22k|        return m_value;
  156|  1.22k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDaOT_:
 1404|  3.56k|    {
 1405|  3.56k|        return detail::transform_error_impl(std::move(*this),
 1406|  3.56k|                                            std::forward<F>(f));
 1407|  3.56k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|  3.56k|{
  927|  3.56k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.56k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.56k|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.56k|            return result(*std::forward<Exp>(exp));
  931|  3.56k|        }
  932|       |
  933|  3.56k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.56k|        return result(unexpect, monostate{});
  935|  3.56k|    }
  936|  3.56k|    else {
  937|  3.56k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.56k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.37k, False: 192]
  |  |  ------------------
  ------------------
  939|  3.56k|                   ? result(*std::forward<Exp>(exp))
  940|  3.56k|                   : result(unexpect,
  941|    192|                            std::invoke(std::forward<F>(f),
  942|    192|                                        std::forward<Exp>(exp).error()));
  943|  3.56k|    }
  944|  3.56k|}
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1262|  3.65k|    {
 1263|  3.65k|        return std::move(value());
 1264|  3.65k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1033|  3.37k|    {
 1034|  3.37k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  3.37k|    {
  142|  3.37k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1206|    192|    {
 1207|    192|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    192|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    192|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    192|        return std::move(this->get_unexpected().error());
 1209|    192|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1087|    192|    {
 1088|    192|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1262|  3.37k|    {
 1263|  3.37k|        return std::move(value());
 1264|  3.37k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1033|    928|    {
 1034|    928|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|    928|    {
  142|    928|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDaOT_:
 1404|    928|    {
 1405|    928|        return detail::transform_error_impl(std::move(*this),
 1406|    928|                                            std::forward<F>(f));
 1407|    928|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|    928|{
  927|    928|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    928|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    928|        if (SCN_LIKELY(exp.has_value())) {
  930|    928|            return result(*std::forward<Exp>(exp));
  931|    928|        }
  932|       |
  933|    928|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    928|        return result(unexpect, monostate{});
  935|    928|    }
  936|    928|    else {
  937|    928|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    928|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    928|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 928, False: 0]
  |  |  ------------------
  ------------------
  939|    928|                   ? result(*std::forward<Exp>(exp))
  940|    928|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    928|    }
  944|    928|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.85k|    {
  189|  1.85k|        return m_has_value;
  190|  1.85k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1262|    928|    {
 1263|    928|        return std::move(value());
 1264|    928|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1220|    928|    {
 1221|    928|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    928|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    928|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|    928|        return this->get_value();
 1223|    928|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  154|    928|    {
  155|    928|        return m_value;
  156|    928|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|    928|    {
 1034|    928|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|    928|    {
  142|    928|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    928|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1190|    928|    {
 1191|    928|        return has_value();
 1192|    928|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.85k|    {
  189|  1.85k|        return m_has_value;
  190|  1.85k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  4.60k|    {
 1078|  4.60k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|  6.10k|    {
  151|  6.10k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.39k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|    928|    {
 1263|    928|        return std::move(value());
 1264|    928|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|    928|    {
 1221|    928|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    928|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    928|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|    928|        return this->get_value();
 1223|    928|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    928|    {
  155|    928|        return m_value;
  156|    928|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1033|  1.66k|    {
 1034|  1.66k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  1.66k|    {
  142|  1.66k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDaOT_:
 1404|    912|    {
 1405|    912|        return detail::transform_error_impl(std::move(*this),
 1406|    912|                                            std::forward<F>(f));
 1407|    912|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
  926|    912|{
  927|    912|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    912|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    912|        if (SCN_LIKELY(exp.has_value())) {
  930|    912|            return result(*std::forward<Exp>(exp));
  931|    912|        }
  932|       |
  933|    912|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    912|        return result(unexpect, monostate{});
  935|    912|    }
  936|    912|    else {
  937|    912|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    912|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    912|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 912]
  |  |  ------------------
  ------------------
  939|    912|                   ? result(*std::forward<Exp>(exp))
  940|    912|                   : result(unexpect,
  941|    912|                            std::invoke(std::forward<F>(f),
  942|    912|                                        std::forward<Exp>(exp).error()));
  943|    912|    }
  944|    912|}
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1206|    912|    {
 1207|    912|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    912|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    912|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    912|        return std::move(this->get_unexpected().error());
 1209|    912|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.50k|    {
 1088|  1.50k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1077|     16|    {
 1078|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|     16|    {
  312|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|     16|    {
  373|     16|        scn::detail::construct_at(unexpected_ptr(),
  374|     16|                                  std::forward<Args>(args)...);
  375|     16|        m_has_value = false;
  376|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|     48|    {
  403|     48|        return reinterpret_cast<unexpected<E>*>(
  404|     48|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|     48|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|     16|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  316|     16|    {
  317|     16|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 16]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|     16|        else {
  321|     16|            destroy_unexpected();
  322|     16|        }
  323|     16|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|     48|    {
  361|     48|        return m_has_value;
  362|     48|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     16|    {
  384|     16|        scn::detail::destroy_at(unexpected_ptr());
  385|     16|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1190|     16|    {
 1191|     16|        return has_value();
 1192|     16|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1196|     16|    {
 1197|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|     16|        return this->get_unexpected().error();
 1199|     16|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     16|    {
  344|     16|        return *unexpected_ptr();
  345|     16|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1190|  8.69k|    {
 1191|  8.69k|        return has_value();
 1192|  8.69k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  188|  16.7k|    {
  189|  16.7k|        return m_has_value;
  190|  16.7k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1196|  5.80k|    {
 1197|  5.80k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  5.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  5.80k|        return this->get_unexpected().error();
 1199|  5.80k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  5.80k|    {
  172|  5.80k|        return m_unexpected;
  173|  5.80k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1262|  1.66k|    {
 1263|  1.66k|        return std::move(value());
 1264|  1.66k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1220|  2.29k|    {
 1221|  2.29k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.29k|        return this->get_value();
 1223|  2.29k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.29k|    {
  155|  2.29k|        return m_value;
  156|  2.29k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1250|    630|    {
 1251|    630|        return value();
 1252|    630|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDaOT_:
 1404|    280|    {
 1405|    280|        return detail::transform_error_impl(std::move(*this),
 1406|    280|                                            std::forward<F>(f));
 1407|    280|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|    280|{
  927|    280|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    280|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    280|        if (SCN_LIKELY(exp.has_value())) {
  930|    280|            return result(*std::forward<Exp>(exp));
  931|    280|        }
  932|       |
  933|    280|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    280|        return result(unexpect, monostate{});
  935|    280|    }
  936|    280|    else {
  937|    280|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    280|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    280|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 280, False: 0]
  |  |  ------------------
  ------------------
  939|    280|                   ? result(*std::forward<Exp>(exp))
  940|    280|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    280|    }
  944|    280|}
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDaOT_:
 1404|    294|    {
 1405|    294|        return detail::transform_error_impl(std::move(*this),
 1406|    294|                                            std::forward<F>(f));
 1407|    294|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
  926|    294|{
  927|    294|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    294|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    294|        if (SCN_LIKELY(exp.has_value())) {
  930|    294|            return result(*std::forward<Exp>(exp));
  931|    294|        }
  932|       |
  933|    294|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    294|        return result(unexpect, monostate{});
  935|    294|    }
  936|    294|    else {
  937|    294|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    294|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    294|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 294, False: 0]
  |  |  ------------------
  ------------------
  939|    294|                   ? result(*std::forward<Exp>(exp))
  940|    294|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    294|    }
  944|    294|}
_ZN3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|    294|    {
 1034|    294|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  141|    294|    {
  142|    294|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    294|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|    294|    {
 1191|    294|        return has_value();
 1192|    294|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|    588|    {
  189|    588|        return m_has_value;
  190|    588|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1262|    294|    {
 1263|    294|        return std::move(value());
 1264|    294|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|    294|    {
 1221|    294|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    294|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    294|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|    294|        return this->get_value();
 1223|    294|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    294|    {
  155|    294|        return m_value;
  156|    294|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDaOT_:
 1394|    588|    {
 1395|    588|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|    588|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
  926|    588|{
  927|    588|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    588|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    588|        if (SCN_LIKELY(exp.has_value())) {
  930|    588|            return result(*std::forward<Exp>(exp));
  931|    588|        }
  932|       |
  933|    588|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    588|        return result(unexpect, monostate{});
  935|    588|    }
  936|    588|    else {
  937|    588|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    588|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    588|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 588]
  |  |  ------------------
  ------------------
  939|    588|                   ? result(*std::forward<Exp>(exp))
  940|    588|                   : result(unexpect,
  941|    588|                            std::invoke(std::forward<F>(f),
  942|    588|                                        std::forward<Exp>(exp).error()));
  943|    588|    }
  944|    588|}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1033|    630|    {
 1034|    630|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  141|    630|    {
  142|    630|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  25.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1033|  25.4k|    {
 1034|  25.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  141|  25.4k|    {
  142|  25.4k|    }
_ZNK3scn2v28expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1190|  25.4k|    {
 1191|  25.4k|        return has_value();
 1192|  25.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  188|  50.8k|    {
  189|  50.8k|        return m_has_value;
  190|  50.8k|    }
_ZNO3scn2v28expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1262|  25.4k|    {
 1263|  25.4k|        return std::move(value());
 1264|  25.4k|    }
_ZNR3scn2v28expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1220|  25.4k|    {
 1221|  25.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  25.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  25.4k|        return this->get_value();
 1223|  25.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  154|  25.4k|    {
  155|  25.4k|        return m_value;
  156|  25.4k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1033|  3.27k|    {
 1034|  3.27k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  141|  3.27k|    {
  142|  3.27k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|    278|    {
 1078|    278|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|    278|    {
  151|    278|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  51.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  51.1k|    {
 1034|  51.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  51.1k|    {
  142|  51.1k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  28.4k|    {
 1405|  28.4k|        return detail::transform_error_impl(std::move(*this),
 1406|  28.4k|                                            std::forward<F>(f));
 1407|  28.4k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  28.4k|{
  927|  28.4k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  28.4k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  28.4k|        if (SCN_LIKELY(exp.has_value())) {
  930|  28.4k|            return result(*std::forward<Exp>(exp));
  931|  28.4k|        }
  932|       |
  933|  28.4k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  28.4k|        return result(unexpect, monostate{});
  935|  28.4k|    }
  936|  28.4k|    else {
  937|  28.4k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  28.4k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  28.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 28.4k, False: 0]
  |  |  ------------------
  ------------------
  939|  28.4k|                   ? result(*std::forward<Exp>(exp))
  940|  28.4k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  28.4k|    }
  944|  28.4k|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  93.6k|    {
  189|  93.6k|        return m_has_value;
  190|  93.6k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  41.8k|    {
 1263|  41.8k|        return std::move(value());
 1264|  41.8k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  41.8k|    {
 1221|  41.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  41.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  41.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  41.8k|        return this->get_value();
 1223|  41.8k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  41.8k|    {
  155|  41.8k|        return m_value;
  156|  41.8k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  47.3k|    {
 1034|  47.3k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  47.3k|    {
  142|  47.3k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   125k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|    278|    {
 1207|    278|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    278|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    278|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    278|        return std::move(this->get_unexpected().error());
 1209|    278|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    278|    {
  172|    278|        return m_unexpected;
  173|    278|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.17k|    {
 1088|  1.17k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  76.2k|    {
  151|  76.2k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  75.0k|    {
 1078|  75.0k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  9.28k|    {
 1191|  9.28k|        return has_value();
 1192|  9.28k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  1.41k|    {
 1078|  1.41k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.69k|    {
  151|  1.69k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.1k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  25.0k|    {
 1078|  25.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  25.0k|    {
  151|  25.0k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  41.2k|    {
 1191|  41.2k|        return has_value();
 1192|  41.2k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  63.0k|    {
  189|  63.0k|        return m_has_value;
  190|  63.0k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  7.24k|    {
 1197|  7.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  7.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  7.24k|        return this->get_unexpected().error();
 1199|  7.24k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  7.24k|    {
  172|  7.24k|        return m_unexpected;
  173|  7.24k|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  4.65k|    {
 1034|  4.65k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  4.65k|    {
  142|  4.65k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.65k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.4k|    {
 1221|  13.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  13.4k|        return this->get_value();
 1223|  13.4k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  13.4k|    {
  155|  13.4k|        return m_value;
  156|  13.4k|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.51k|    {
 1191|  3.51k|        return has_value();
 1192|  3.51k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  9.30k|    {
  189|  9.30k|        return m_has_value;
  190|  9.30k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.51k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  4.65k|    {
 1263|  4.65k|        return std::move(value());
 1264|  4.65k|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  4.65k|    {
 1221|  4.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  4.65k|        return this->get_value();
 1223|  4.65k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  4.65k|    {
  155|  4.65k|        return m_value;
  156|  4.65k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  13.6k|    {
 1405|  13.6k|        return detail::transform_error_impl(std::move(*this),
 1406|  13.6k|                                            std::forward<F>(f));
 1407|  13.6k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  13.6k|{
  927|  13.6k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  13.6k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  13.6k|        if (SCN_LIKELY(exp.has_value())) {
  930|  13.6k|            return result(*std::forward<Exp>(exp));
  931|  13.6k|        }
  932|       |
  933|  13.6k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  13.6k|        return result(unexpect, monostate{});
  935|  13.6k|    }
  936|  13.6k|    else {
  937|  13.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  13.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  13.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.4k, False: 278]
  |  |  ------------------
  ------------------
  939|  13.6k|                   ? result(*std::forward<Exp>(exp))
  940|  13.6k|                   : result(unexpect,
  941|    278|                            std::invoke(std::forward<F>(f),
  942|    278|                                        std::forward<Exp>(exp).error()));
  943|  13.6k|    }
  944|  13.6k|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  13.4k|    {
 1034|  13.4k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.4k|    {
  142|  13.4k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|    278|    {
 1088|    278|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  13.4k|    {
 1263|  13.4k|        return std::move(value());
 1264|  13.4k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.51k|    {
 1034|  3.51k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.51k|    {
  142|  3.51k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.51k|    {
 1405|  3.51k|        return detail::transform_error_impl(std::move(*this),
 1406|  3.51k|                                            std::forward<F>(f));
 1407|  3.51k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.51k|{
  927|  3.51k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.51k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.51k|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.51k|            return result(*std::forward<Exp>(exp));
  931|  3.51k|        }
  932|       |
  933|  3.51k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.51k|        return result(unexpect, monostate{});
  935|  3.51k|    }
  936|  3.51k|    else {
  937|  3.51k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.51k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.51k, False: 0]
  |  |  ------------------
  ------------------
  939|  3.51k|                   ? result(*std::forward<Exp>(exp))
  940|  3.51k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.51k|    }
  944|  3.51k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  7.02k|    {
  189|  7.02k|        return m_has_value;
  190|  7.02k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.51k|    {
 1263|  3.51k|        return std::move(value());
 1264|  3.51k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.51k|    {
 1221|  3.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.51k|        return this->get_value();
 1223|  3.51k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.51k|    {
  155|  3.51k|        return m_value;
  156|  3.51k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.51k|    {
 1034|  3.51k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.51k|    {
  142|  3.51k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.51k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  3.51k|    {
 1191|  3.51k|        return has_value();
 1192|  3.51k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  7.02k|    {
  189|  7.02k|        return m_has_value;
  190|  7.02k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.51k|    {
 1263|  3.51k|        return std::move(value());
 1264|  3.51k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.51k|    {
 1221|  3.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  3.51k|        return this->get_value();
 1223|  3.51k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.51k|    {
  155|  3.51k|        return m_value;
  156|  3.51k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|     40|    {
 1078|     40|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|     40|    {
  312|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     40|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|     40|    {
  373|     40|        scn::detail::construct_at(unexpected_ptr(),
  374|     40|                                  std::forward<Args>(args)...);
  375|     40|        m_has_value = false;
  376|     40|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|    120|    {
  403|    120|        return reinterpret_cast<unexpected<E>*>(
  404|    120|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|    120|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|     40|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|     40|    {
  317|     40|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 40]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|     40|        else {
  321|     40|            destroy_unexpected();
  322|     40|        }
  323|     40|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|    120|    {
  361|    120|        return m_has_value;
  362|    120|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     40|    {
  384|     40|        scn::detail::destroy_at(unexpected_ptr());
  385|     40|    }
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|     40|    {
 1191|     40|        return has_value();
 1192|     40|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|     40|    {
 1197|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|     40|        return this->get_unexpected().error();
 1199|     40|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     40|    {
  344|     40|        return *unexpected_ptr();
  345|     40|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  11.5k|    {
 1251|  11.5k|        return value();
 1252|  11.5k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  48.2k|    {
 1221|  48.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  48.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  48.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  48.2k|        return this->get_value();
 1223|  48.2k|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|   250k|    {
  189|   250k|        return m_has_value;
  190|   250k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  48.2k|    {
  155|  48.2k|        return m_value;
  156|  48.2k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|  1.14k|    {
 1405|  1.14k|        return detail::transform_error_impl(std::move(*this),
 1406|  1.14k|                                            std::forward<F>(f));
 1407|  1.14k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
  926|  1.14k|{
  927|  1.14k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.14k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.14k|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.14k|            return result(*std::forward<Exp>(exp));
  931|  1.14k|        }
  932|       |
  933|  1.14k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.14k|        return result(unexpect, monostate{});
  935|  1.14k|    }
  936|  1.14k|    else {
  937|  1.14k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.14k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.14k, False: 0]
  |  |  ------------------
  ------------------
  939|  1.14k|                   ? result(*std::forward<Exp>(exp))
  940|  1.14k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  1.14k|    }
  944|  1.14k|}
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|  1.14k|    {
 1034|  1.14k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  1.14k|    {
  142|  1.14k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.14k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|  1.14k|    {
 1191|  1.14k|        return has_value();
 1192|  1.14k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.28k|    {
  189|  2.28k|        return m_has_value;
  190|  2.28k|    }
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.14k|    {
 1263|  1.14k|        return std::move(value());
 1264|  1.14k|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.14k|    {
 1221|  1.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.14k|        return this->get_value();
 1223|  1.14k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.14k|    {
  155|  1.14k|        return m_value;
  156|  1.14k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDaOT_:
 1394|  1.17k|    {
 1395|  1.17k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|  1.17k|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
  926|  1.17k|{
  927|  1.17k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.17k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.17k|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.17k|            return result(*std::forward<Exp>(exp));
  931|  1.17k|        }
  932|       |
  933|  1.17k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.17k|        return result(unexpect, monostate{});
  935|  1.17k|    }
  936|  1.17k|    else {
  937|  1.17k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.17k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.17k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 1.17k]
  |  |  ------------------
  ------------------
  939|  1.17k|                   ? result(*std::forward<Exp>(exp))
  940|  1.17k|                   : result(unexpect,
  941|  1.17k|                            std::invoke(std::forward<F>(f),
  942|  1.17k|                                        std::forward<Exp>(exp).error()));
  943|  1.17k|    }
  944|  1.17k|}
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|   126k|    {
 1191|   126k|        return has_value();
 1192|   126k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  75.1k|    {
 1197|  75.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  75.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  75.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  75.1k|        return this->get_unexpected().error();
 1199|  75.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  75.1k|    {
  172|  75.1k|        return m_unexpected;
  173|  75.1k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  36.7k|    {
 1263|  36.7k|        return std::move(value());
 1264|  36.7k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|    238|    {
 1078|    238|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|    238|    {
  151|    238|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.22k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1033|  4.98k|    {
 1034|  4.98k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  4.98k|    {
  142|  4.98k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1190|  2.04k|    {
 1191|  2.04k|        return has_value();
 1192|  2.04k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  188|  8.41k|    {
  189|  8.41k|        return m_has_value;
  190|  8.41k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  171|    238|    {
  172|    238|        return m_unexpected;
  173|    238|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|    480|    {
 1078|    480|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|    718|    {
  151|    718|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.69k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1220|  2.94k|    {
 1221|  2.94k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.94k|        return this->get_value();
 1223|  2.94k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  154|  2.94k|    {
  155|  2.94k|        return m_value;
  156|  2.94k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1077|  6.26k|    {
 1078|  6.26k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  6.26k|    {
  151|  6.26k|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1190|  9.17k|    {
 1191|  9.17k|        return has_value();
 1192|  9.17k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  188|  15.8k|    {
  189|  15.8k|        return m_has_value;
  190|  15.8k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1196|  1.98k|    {
 1197|  1.98k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  1.98k|        return this->get_unexpected().error();
 1199|  1.98k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  171|  2.74k|    {
  172|  2.74k|        return m_unexpected;
  173|  2.74k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1033|  1.01k|    {
 1034|  1.01k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  141|  1.01k|    {
  142|  1.01k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.01k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1220|  2.71k|    {
 1221|  2.71k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.71k|        return this->get_value();
 1223|  2.71k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  154|  2.71k|    {
  155|  2.71k|        return m_value;
  156|  2.71k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1190|    776|    {
 1191|    776|        return has_value();
 1192|    776|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  188|  2.03k|    {
  189|  2.03k|        return m_has_value;
  190|  2.03k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    776|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1262|  1.01k|    {
 1263|  1.01k|        return std::move(value());
 1264|  1.01k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.01k|    {
 1221|  1.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  1.01k|        return this->get_value();
 1223|  1.01k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  154|  1.01k|    {
  155|  1.01k|        return m_value;
  156|  1.01k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDaOT_:
 1404|  2.95k|    {
 1405|  2.95k|        return detail::transform_error_impl(std::move(*this),
 1406|  2.95k|                                            std::forward<F>(f));
 1407|  2.95k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|  2.95k|{
  927|  2.95k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.95k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.95k|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.95k|            return result(*std::forward<Exp>(exp));
  931|  2.95k|        }
  932|       |
  933|  2.95k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.95k|        return result(unexpect, monostate{});
  935|  2.95k|    }
  936|  2.95k|    else {
  937|  2.95k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.95k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.71k, False: 238]
  |  |  ------------------
  ------------------
  939|  2.95k|                   ? result(*std::forward<Exp>(exp))
  940|  2.95k|                   : result(unexpect,
  941|    238|                            std::invoke(std::forward<F>(f),
  942|    238|                                        std::forward<Exp>(exp).error()));
  943|  2.95k|    }
  944|  2.95k|}
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1262|  2.94k|    {
 1263|  2.94k|        return std::move(value());
 1264|  2.94k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1033|  2.71k|    {
 1034|  2.71k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  2.71k|    {
  142|  2.71k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1206|    238|    {
 1207|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    238|        return std::move(this->get_unexpected().error());
 1209|    238|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1087|    238|    {
 1088|    238|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1262|  2.71k|    {
 1263|  2.71k|        return std::move(value());
 1264|  2.71k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1033|    776|    {
 1034|    776|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|    776|    {
  142|    776|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDaOT_:
 1404|    776|    {
 1405|    776|        return detail::transform_error_impl(std::move(*this),
 1406|    776|                                            std::forward<F>(f));
 1407|    776|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
  926|    776|{
  927|    776|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    776|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    776|        if (SCN_LIKELY(exp.has_value())) {
  930|    776|            return result(*std::forward<Exp>(exp));
  931|    776|        }
  932|       |
  933|    776|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    776|        return result(unexpect, monostate{});
  935|    776|    }
  936|    776|    else {
  937|    776|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    776|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    776|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 776, False: 0]
  |  |  ------------------
  ------------------
  939|    776|                   ? result(*std::forward<Exp>(exp))
  940|    776|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    776|    }
  944|    776|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.55k|    {
  189|  1.55k|        return m_has_value;
  190|  1.55k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1262|    776|    {
 1263|    776|        return std::move(value());
 1264|    776|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1220|    776|    {
 1221|    776|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    776|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    776|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|    776|        return this->get_value();
 1223|    776|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  154|    776|    {
  155|    776|        return m_value;
  156|    776|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|    776|    {
 1034|    776|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|    776|    {
  142|    776|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    776|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1190|    776|    {
 1191|    776|        return has_value();
 1192|    776|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.55k|    {
  189|  1.55k|        return m_has_value;
  190|  1.55k|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  2.95k|    {
 1078|  2.95k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  150|  4.19k|    {
  151|  4.19k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.29k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|    776|    {
 1263|    776|        return std::move(value());
 1264|    776|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|    776|    {
 1221|    776|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    776|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    776|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|    776|        return this->get_value();
 1223|    776|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    776|    {
  155|    776|        return m_value;
  156|    776|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1033|  1.67k|    {
 1034|  1.67k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|  1.67k|    {
  142|  1.67k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDaOT_:
 1404|    760|    {
 1405|    760|        return detail::transform_error_impl(std::move(*this),
 1406|    760|                                            std::forward<F>(f));
 1407|    760|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
  926|    760|{
  927|    760|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    760|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    760|        if (SCN_LIKELY(exp.has_value())) {
  930|    760|            return result(*std::forward<Exp>(exp));
  931|    760|        }
  932|       |
  933|    760|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    760|        return result(unexpect, monostate{});
  935|    760|    }
  936|    760|    else {
  937|    760|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    760|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    760|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 760]
  |  |  ------------------
  ------------------
  939|    760|                   ? result(*std::forward<Exp>(exp))
  940|    760|                   : result(unexpect,
  941|    760|                            std::invoke(std::forward<F>(f),
  942|    760|                                        std::forward<Exp>(exp).error()));
  943|    760|    }
  944|    760|}
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1206|    760|    {
 1207|    760|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    760|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    760|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|    760|        return std::move(this->get_unexpected().error());
 1209|    760|    }
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1087|  1.24k|    {
 1088|  1.24k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1077|     16|    {
 1078|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  311|     16|    {
  312|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  372|     16|    {
  373|     16|        scn::detail::construct_at(unexpected_ptr(),
  374|     16|                                  std::forward<Args>(args)...);
  375|     16|        m_has_value = false;
  376|     16|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|     48|    {
  403|     48|        return reinterpret_cast<unexpected<E>*>(
  404|     48|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|     48|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|     16|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|     16|    {
  317|     16|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 16]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|     16|        else {
  321|     16|            destroy_unexpected();
  322|     16|        }
  323|     16|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|     48|    {
  361|     48|        return m_has_value;
  362|     48|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|     16|    {
  384|     16|        scn::detail::destroy_at(unexpected_ptr());
  385|     16|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|     16|    {
 1191|     16|        return has_value();
 1192|     16|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|     16|    {
 1197|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|     16|        return this->get_unexpected().error();
 1199|     16|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|     16|    {
  344|     16|        return *unexpected_ptr();
  345|     16|    }
_ZNK3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1190|  6.53k|    {
 1191|  6.53k|        return has_value();
 1192|  6.53k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  188|  12.5k|    {
  189|  12.5k|        return m_has_value;
  190|  12.5k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1196|  3.95k|    {
 1197|  3.95k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|  3.95k|        return this->get_unexpected().error();
 1199|  3.95k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  3.95k|    {
  172|  3.95k|        return m_unexpected;
  173|  3.95k|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1262|  1.67k|    {
 1263|  1.67k|        return std::move(value());
 1264|  1.67k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1220|  2.09k|    {
 1221|  2.09k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|  2.09k|        return this->get_value();
 1223|  2.09k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  154|  2.09k|    {
  155|  2.09k|        return m_value;
  156|  2.09k|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1250|    426|    {
 1251|    426|        return value();
 1252|    426|    }
_ZNO3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDaOT_:
 1404|    230|    {
 1405|    230|        return detail::transform_error_impl(std::move(*this),
 1406|    230|                                            std::forward<F>(f));
 1407|    230|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|    230|{
  927|    230|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    230|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    230|        if (SCN_LIKELY(exp.has_value())) {
  930|    230|            return result(*std::forward<Exp>(exp));
  931|    230|        }
  932|       |
  933|    230|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    230|        return result(unexpect, monostate{});
  935|    230|    }
  936|    230|    else {
  937|    230|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    230|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    230|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 230, False: 0]
  |  |  ------------------
  ------------------
  939|    230|                   ? result(*std::forward<Exp>(exp))
  940|    230|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    230|    }
  944|    230|}
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDaOT_:
 1404|    242|    {
 1405|    242|        return detail::transform_error_impl(std::move(*this),
 1406|    242|                                            std::forward<F>(f));
 1407|    242|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
  926|    242|{
  927|    242|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    242|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    242|        if (SCN_LIKELY(exp.has_value())) {
  930|    242|            return result(*std::forward<Exp>(exp));
  931|    242|        }
  932|       |
  933|    242|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    242|        return result(unexpect, monostate{});
  935|    242|    }
  936|    242|    else {
  937|    242|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    242|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    242|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 242, False: 0]
  |  |  ------------------
  ------------------
  939|    242|                   ? result(*std::forward<Exp>(exp))
  940|    242|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|    242|    }
  944|    242|}
_ZN3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|    242|    {
 1034|    242|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  141|    242|    {
  142|    242|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|    242|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1190|    242|    {
 1191|    242|        return has_value();
 1192|    242|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  188|    484|    {
  189|    484|        return m_has_value;
  190|    484|    }
_ZNO3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1262|    242|    {
 1263|    242|        return std::move(value());
 1264|    242|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|    242|    {
 1221|    242|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|    242|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    242|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|    242|        return this->get_value();
 1223|    242|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  154|    242|    {
  155|    242|        return m_value;
  156|    242|    }
_ZNR3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDaOT_:
 1394|    484|    {
 1395|    484|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1396|    484|    }
_ZN3scn2v26detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
  926|    484|{
  927|    484|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|    484|        using result = expected<expected_value_type<Exp>, monostate>;
  929|    484|        if (SCN_LIKELY(exp.has_value())) {
  930|    484|            return result(*std::forward<Exp>(exp));
  931|    484|        }
  932|       |
  933|    484|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|    484|        return result(unexpect, monostate{});
  935|    484|    }
  936|    484|    else {
  937|    484|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|    484|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|    484|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 484]
  |  |  ------------------
  ------------------
  939|    484|                   ? result(*std::forward<Exp>(exp))
  940|    484|                   : result(unexpect,
  941|    484|                            std::invoke(std::forward<F>(f),
  942|    484|                                        std::forward<Exp>(exp).error()));
  943|    484|    }
  944|    484|}
_ZN3scn2v28expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1033|    426|    {
 1034|    426|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  141|    426|    {
  142|    426|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1033|  2.02k|    {
 1034|  2.02k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.02k|    {
  142|  2.02k|    }

_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  9.24k|{
  200|  9.24k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  9.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  9.24k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  9.24k|{
  180|  9.24k|    return p;
  181|  9.24k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   957k|{
  200|   957k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   957k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   957k|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  1.09M|{
  180|  1.09M|    return p;
  181|  1.09M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   439k|{
  200|   439k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   439k|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|   439k|{
  180|   439k|    return p;
  181|   439k|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   136k|{
  200|   136k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   136k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   373k|{
  200|   373k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   373k|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|   506k|{
  180|   506k|    return p;
  181|   506k|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   132k|{
  200|   132k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   132k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  32.2k|    {
  242|  32.2k|        return static_cast<size_type>(m_end - m_ptr);
  243|  32.2k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  4.62k|    {
  181|  4.62k|        return m_ptr;
  182|  4.62k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  4.62k|    {
  185|  4.62k|        return m_end;
  186|  4.62k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  4.62k|    {
  238|  4.62k|        return m_ptr;
  239|  4.62k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  4.62k|    {
  120|  4.62k|    }
_ZNK3scn2v24spanIwE4sizeEv:
  241|  2.50k|    {
  242|  2.50k|        return static_cast<size_type>(m_end - m_ptr);
  243|  2.50k|    }
_ZNK3scn2v24spanIwE4dataEv:
  237|  2.50k|    {
  238|  2.50k|        return m_ptr;
  239|  2.50k|    }
_ZN3scn2v24spanIwEC2IRNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEELPv0EEEOT_:
  167|  2.72k|    {
  168|  2.72k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|   219k|    {
  120|   219k|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|   219k|    {
  238|   219k|        return m_ptr;
  239|   219k|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|   206k|    {
  242|   206k|        return static_cast<size_type>(m_end - m_ptr);
  243|   206k|    }
_ZNK3scn2v24spanIcE4sizeEv:
  241|  2.56k|    {
  242|  2.56k|        return static_cast<size_type>(m_end - m_ptr);
  243|  2.56k|    }
_ZNK3scn2v24spanIcE4dataEv:
  237|  2.56k|    {
  238|  2.56k|        return m_ptr;
  239|  2.56k|    }
_ZN3scn2v24spanIcEC2IRNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEELPv0EEEOT_:
  167|  2.74k|    {
  168|  2.74k|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|   230k|{
   60|   230k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|   230k|                                          const CharT*, const CharT*>) {
   62|   230k|        return {first, last};
   63|   230k|    }
   64|   230k|    else {
   65|   230k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|   230k|    }
   67|   230k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  4.38M|{
   60|  4.38M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  4.38M|                                          const CharT*, const CharT*>) {
   62|  4.38M|        return {first, last};
   63|  4.38M|    }
   64|  4.38M|    else {
   65|  4.38M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  4.38M|    }
   67|  4.38M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|   277k|{
   44|   277k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|   277k|                                          decltype(first), decltype(last)> &&
   46|   277k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|   277k|        return {first, last};
   48|   277k|    }
   49|   277k|    else {
   50|   277k|        return {to_address(first), static_cast<size_t>(std::distance(
   51|   277k|                                       to_address(first), to_address(last)))};
   52|   277k|    }
   53|   277k|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|   309k|{
   75|   309k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|   309k|                      typename std::basic_string_view<CharT>::iterator,
   77|   309k|                      decltype(it)> &&
   78|   309k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|   309k|        SCN_UNUSED(sv);
  ------------------
  |  |  227|   309k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|   309k|        return it;
   81|   309k|    }
   82|   309k|    else {
   83|   309k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|   309k|    }
   85|   309k|}

_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEmRKT_:
  165|  2.98k|{
  166|  2.98k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  2.98k|        return ranges_polyfill::usize(r);
  168|  2.98k|    }
  169|  2.98k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  2.98k|                           ranges::iterator_t<Range>,
  171|  2.98k|                           typename detail::basic_scan_buffer<
  172|  2.98k|                               detail::char_t<Range>>::forward_iterator>) {
  173|  2.98k|        if constexpr (ranges::common_range<Range>) {
  174|  2.98k|            return static_cast<size_t>(ranges::end(r).position() -
  175|  2.98k|                                       ranges::begin(r).position());
  176|  2.98k|        }
  177|  2.98k|        else {
  178|  2.98k|            if (ranges::begin(r).stores_parent()) {
  179|  2.98k|                return static_cast<size_t>(
  180|  2.98k|                    ranges::begin(r).parent()->chars_available() -
  181|  2.98k|                    ranges::begin(r).position());
  182|  2.98k|            }
  183|  2.98k|            return ranges::begin(r).contiguous_segment().size();
  184|  2.98k|        }
  185|  2.98k|    }
  186|  2.98k|    else {
  187|  2.98k|        return 0;
  188|  2.98k|    }
  189|  2.98k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEEmRKT_:
  165|    584|{
  166|    584|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|    584|        return ranges_polyfill::usize(r);
  168|    584|    }
  169|    584|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|    584|                           ranges::iterator_t<Range>,
  171|    584|                           typename detail::basic_scan_buffer<
  172|    584|                               detail::char_t<Range>>::forward_iterator>) {
  173|    584|        if constexpr (ranges::common_range<Range>) {
  174|    584|            return static_cast<size_t>(ranges::end(r).position() -
  175|    584|                                       ranges::begin(r).position());
  176|    584|        }
  177|    584|        else {
  178|    584|            if (ranges::begin(r).stores_parent()) {
  179|    584|                return static_cast<size_t>(
  180|    584|                    ranges::begin(r).parent()->chars_available() -
  181|    584|                    ranges::begin(r).position());
  182|    584|            }
  183|    584|            return ranges::begin(r).contiguous_segment().size();
  184|    584|        }
  185|    584|    }
  186|    584|    else {
  187|    584|        return 0;
  188|    584|    }
  189|    584|}
_ZN3scn2v24impl24get_contiguous_beginningINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEEDaRKT_:
  111|  1.27k|{
  112|  1.27k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|  1.27k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|  1.27k|        return r;
  115|  1.27k|    }
  116|  1.27k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|  1.27k|                           ranges::iterator_t<Range>,
  118|  1.27k|                           typename detail::basic_scan_buffer<
  119|  1.27k|                               detail::char_t<Range>>::forward_iterator>) {
  120|  1.27k|        if constexpr (ranges::common_range<Range>) {
  121|  1.27k|            auto seg = ranges::begin(r).contiguous_segment();
  122|  1.27k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|  1.27k|                ranges::begin(r), ranges::end(r)));
  124|  1.27k|            return seg.substr(0, std::min(seg.size(), dist));
  125|  1.27k|        }
  126|  1.27k|        else {
  127|  1.27k|            return ranges::begin(r).contiguous_segment();
  128|  1.27k|        }
  129|  1.27k|    }
  130|  1.27k|    else {
  131|  1.27k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|  1.27k|    }
  133|  1.27k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEDaRKT_:
  111|    852|{
  112|    852|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|    852|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|    852|        return r;
  115|    852|    }
  116|    852|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|    852|                           ranges::iterator_t<Range>,
  118|    852|                           typename detail::basic_scan_buffer<
  119|    852|                               detail::char_t<Range>>::forward_iterator>) {
  120|    852|        if constexpr (ranges::common_range<Range>) {
  121|    852|            auto seg = ranges::begin(r).contiguous_segment();
  122|    852|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|    852|                ranges::begin(r), ranges::end(r)));
  124|    852|            return seg.substr(0, std::min(seg.size(), dist));
  125|    852|        }
  126|    852|        else {
  127|    852|            return ranges::begin(r).contiguous_segment();
  128|    852|        }
  129|    852|    }
  130|    852|    else {
  131|    852|        return std::basic_string_view<detail::char_t<Range>>{};
  132|    852|    }
  133|    852|}
_ZN3scn2v24impl27is_entire_source_contiguousINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEEbRKT_:
   31|    558|{
   32|    558|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (32:19): [Folded - Ignored]
  |  Branch (32:19): [Folded - Ignored]
  ------------------
   33|    558|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (33:19): [Folded - Ignored]
  ------------------
   34|    558|        return true;
   35|    558|    }
   36|    558|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (36:24): [Folded - Ignored]
  ------------------
   37|    558|                           ranges::iterator_t<Range>,
   38|    558|                           typename detail::basic_scan_buffer<
   39|    558|                               detail::char_t<Range>>::forward_iterator>) {
   40|    558|        auto beg = ranges::begin(r);
   41|    558|        if (!beg.stores_parent()) {
   42|    558|            return true;
   43|    558|        }
   44|    558|        return beg.parent()->is_contiguous();
   45|    558|    }
   46|    558|    else {
   47|    558|        return false;
   48|    558|    }
   49|    558|}
_ZN3scn2v24impl27is_entire_source_contiguousIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   31|  14.1k|{
   32|  14.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (32:19): [Folded - Ignored]
  |  Branch (32:19): [Folded - Ignored]
  ------------------
   33|  14.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (33:19): [Folded - Ignored]
  ------------------
   34|  14.1k|        return true;
   35|  14.1k|    }
   36|  14.1k|    else if constexpr (std::is_same_v<
   37|  14.1k|                           ranges::iterator_t<Range>,
   38|  14.1k|                           typename detail::basic_scan_buffer<
   39|  14.1k|                               detail::char_t<Range>>::forward_iterator>) {
   40|  14.1k|        auto beg = ranges::begin(r);
   41|  14.1k|        if (!beg.stores_parent()) {
   42|  14.1k|            return true;
   43|  14.1k|        }
   44|  14.1k|        return beg.parent()->is_contiguous();
   45|  14.1k|    }
   46|  14.1k|    else {
   47|  14.1k|        return false;
   48|  14.1k|    }
   49|  14.1k|}
_ZN3scn2v24impl17get_as_contiguousIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  137|  14.1k|{
  138|  14.1k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  242|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  14.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (139:19): [Folded - Ignored]
  |  Branch (139:19): [Folded - Ignored]
  ------------------
  140|  14.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (140:19): [Folded - Ignored]
  ------------------
  141|  14.1k|        return r;
  142|  14.1k|    }
  143|  14.1k|    else if constexpr (std::is_same_v<
  144|  14.1k|                           ranges::iterator_t<Range>,
  145|  14.1k|                           typename detail::basic_scan_buffer<
  146|  14.1k|                               detail::char_t<Range>>::forward_iterator>) {
  147|  14.1k|        if constexpr (ranges::common_range<Range>) {
  148|  14.1k|            return detail::make_string_view_from_pointers(
  149|  14.1k|                ranges::begin(r).to_contiguous_segment_iterator(),
  150|  14.1k|                ranges::end(r).to_contiguous_segment_iterator());
  151|  14.1k|        }
  152|  14.1k|        else {
  153|  14.1k|            return ranges::begin(r).contiguous_segment();
  154|  14.1k|        }
  155|  14.1k|    }
  156|  14.1k|    else {
  157|  14.1k|        SCN_EXPECT(false);
  158|  14.1k|        SCN_UNREACHABLE;
  159|  14.1k|        return std::basic_string_view<detail::char_t<Range>>{};
  160|  14.1k|    }
  161|  14.1k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   53|  14.1k|{
   54|  14.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  14.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  14.1k|        return true;
   57|  14.1k|    }
   58|  14.1k|    else if constexpr (std::is_same_v<
   59|  14.1k|                           ranges::iterator_t<Range>,
   60|  14.1k|                           typename detail::basic_scan_buffer<
   61|  14.1k|                               detail::char_t<Range>>::forward_iterator>) {
   62|  14.1k|        auto beg = ranges::begin(r);
   63|  14.1k|        if (beg.contiguous_segment().empty()) {
   64|  14.1k|            return false;
   65|  14.1k|        }
   66|  14.1k|        if constexpr (ranges::common_range<Range>) {
   67|  14.1k|            return beg.contiguous_segment().end() ==
   68|  14.1k|                   ranges::end(r).contiguous_segment().end();
   69|  14.1k|        }
   70|  14.1k|        else {
   71|  14.1k|            if (beg.stores_parent()) {
   72|  14.1k|                return beg.contiguous_segment().end() ==
   73|  14.1k|                       beg.parent()->current_view().end();
   74|  14.1k|            }
   75|  14.1k|            return true;
   76|  14.1k|        }
   77|  14.1k|    }
   78|  14.1k|    else {
   79|  14.1k|        return false;
   80|  14.1k|    }
   81|  14.1k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEmRKT_:
  165|  2.47k|{
  166|  2.47k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  2.47k|        return ranges_polyfill::usize(r);
  168|  2.47k|    }
  169|  2.47k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  2.47k|                           ranges::iterator_t<Range>,
  171|  2.47k|                           typename detail::basic_scan_buffer<
  172|  2.47k|                               detail::char_t<Range>>::forward_iterator>) {
  173|  2.47k|        if constexpr (ranges::common_range<Range>) {
  174|  2.47k|            return static_cast<size_t>(ranges::end(r).position() -
  175|  2.47k|                                       ranges::begin(r).position());
  176|  2.47k|        }
  177|  2.47k|        else {
  178|  2.47k|            if (ranges::begin(r).stores_parent()) {
  179|  2.47k|                return static_cast<size_t>(
  180|  2.47k|                    ranges::begin(r).parent()->chars_available() -
  181|  2.47k|                    ranges::begin(r).position());
  182|  2.47k|            }
  183|  2.47k|            return ranges::begin(r).contiguous_segment().size();
  184|  2.47k|        }
  185|  2.47k|    }
  186|  2.47k|    else {
  187|  2.47k|        return 0;
  188|  2.47k|    }
  189|  2.47k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEEmRKT_:
  165|    480|{
  166|    480|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|    480|        return ranges_polyfill::usize(r);
  168|    480|    }
  169|    480|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|    480|                           ranges::iterator_t<Range>,
  171|    480|                           typename detail::basic_scan_buffer<
  172|    480|                               detail::char_t<Range>>::forward_iterator>) {
  173|    480|        if constexpr (ranges::common_range<Range>) {
  174|    480|            return static_cast<size_t>(ranges::end(r).position() -
  175|    480|                                       ranges::begin(r).position());
  176|    480|        }
  177|    480|        else {
  178|    480|            if (ranges::begin(r).stores_parent()) {
  179|    480|                return static_cast<size_t>(
  180|    480|                    ranges::begin(r).parent()->chars_available() -
  181|    480|                    ranges::begin(r).position());
  182|    480|            }
  183|    480|            return ranges::begin(r).contiguous_segment().size();
  184|    480|        }
  185|    480|    }
  186|    480|    else {
  187|    480|        return 0;
  188|    480|    }
  189|    480|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEDaRKT_:
  111|    696|{
  112|    696|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|    696|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|    696|        return r;
  115|    696|    }
  116|    696|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|    696|                           ranges::iterator_t<Range>,
  118|    696|                           typename detail::basic_scan_buffer<
  119|    696|                               detail::char_t<Range>>::forward_iterator>) {
  120|    696|        if constexpr (ranges::common_range<Range>) {
  121|    696|            auto seg = ranges::begin(r).contiguous_segment();
  122|    696|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|    696|                ranges::begin(r), ranges::end(r)));
  124|    696|            return seg.substr(0, std::min(seg.size(), dist));
  125|    696|        }
  126|    696|        else {
  127|    696|            return ranges::begin(r).contiguous_segment();
  128|    696|        }
  129|    696|    }
  130|    696|    else {
  131|    696|        return std::basic_string_view<detail::char_t<Range>>{};
  132|    696|    }
  133|    696|}
_ZN3scn2v24impl24get_contiguous_beginningINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEEDaRKT_:
  111|    318|{
  112|    318|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|    318|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|    318|        return r;
  115|    318|    }
  116|    318|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|    318|                           ranges::iterator_t<Range>,
  118|    318|                           typename detail::basic_scan_buffer<
  119|    318|                               detail::char_t<Range>>::forward_iterator>) {
  120|    318|        if constexpr (ranges::common_range<Range>) {
  121|    318|            auto seg = ranges::begin(r).contiguous_segment();
  122|    318|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|    318|                ranges::begin(r), ranges::end(r)));
  124|    318|            return seg.substr(0, std::min(seg.size(), dist));
  125|    318|        }
  126|    318|        else {
  127|    318|            return ranges::begin(r).contiguous_segment();
  128|    318|        }
  129|    318|    }
  130|    318|    else {
  131|    318|        return std::basic_string_view<detail::char_t<Range>>{};
  132|    318|    }
  133|    318|}
_ZN3scn2v24impl27is_entire_source_contiguousINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEEbRKT_:
   31|    234|{
   32|    234|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (32:19): [Folded - Ignored]
  |  Branch (32:19): [Folded - Ignored]
  ------------------
   33|    234|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (33:19): [Folded - Ignored]
  ------------------
   34|    234|        return true;
   35|    234|    }
   36|    234|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (36:24): [Folded - Ignored]
  ------------------
   37|    234|                           ranges::iterator_t<Range>,
   38|    234|                           typename detail::basic_scan_buffer<
   39|    234|                               detail::char_t<Range>>::forward_iterator>) {
   40|    234|        auto beg = ranges::begin(r);
   41|    234|        if (!beg.stores_parent()) {
   42|    234|            return true;
   43|    234|        }
   44|    234|        return beg.parent()->is_contiguous();
   45|    234|    }
   46|    234|    else {
   47|    234|        return false;
   48|    234|    }
   49|    234|}
_ZN3scn2v24impl27is_entire_source_contiguousIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   31|  11.2k|{
   32|  11.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (32:19): [Folded - Ignored]
  |  Branch (32:19): [Folded - Ignored]
  ------------------
   33|  11.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (33:19): [Folded - Ignored]
  ------------------
   34|  11.2k|        return true;
   35|  11.2k|    }
   36|  11.2k|    else if constexpr (std::is_same_v<
   37|  11.2k|                           ranges::iterator_t<Range>,
   38|  11.2k|                           typename detail::basic_scan_buffer<
   39|  11.2k|                               detail::char_t<Range>>::forward_iterator>) {
   40|  11.2k|        auto beg = ranges::begin(r);
   41|  11.2k|        if (!beg.stores_parent()) {
   42|  11.2k|            return true;
   43|  11.2k|        }
   44|  11.2k|        return beg.parent()->is_contiguous();
   45|  11.2k|    }
   46|  11.2k|    else {
   47|  11.2k|        return false;
   48|  11.2k|    }
   49|  11.2k|}
_ZN3scn2v24impl17get_as_contiguousIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  137|  11.2k|{
  138|  11.2k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  242|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  11.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (139:19): [Folded - Ignored]
  |  Branch (139:19): [Folded - Ignored]
  ------------------
  140|  11.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (140:19): [Folded - Ignored]
  ------------------
  141|  11.2k|        return r;
  142|  11.2k|    }
  143|  11.2k|    else if constexpr (std::is_same_v<
  144|  11.2k|                           ranges::iterator_t<Range>,
  145|  11.2k|                           typename detail::basic_scan_buffer<
  146|  11.2k|                               detail::char_t<Range>>::forward_iterator>) {
  147|  11.2k|        if constexpr (ranges::common_range<Range>) {
  148|  11.2k|            return detail::make_string_view_from_pointers(
  149|  11.2k|                ranges::begin(r).to_contiguous_segment_iterator(),
  150|  11.2k|                ranges::end(r).to_contiguous_segment_iterator());
  151|  11.2k|        }
  152|  11.2k|        else {
  153|  11.2k|            return ranges::begin(r).contiguous_segment();
  154|  11.2k|        }
  155|  11.2k|    }
  156|  11.2k|    else {
  157|  11.2k|        SCN_EXPECT(false);
  158|  11.2k|        SCN_UNREACHABLE;
  159|  11.2k|        return std::basic_string_view<detail::char_t<Range>>{};
  160|  11.2k|    }
  161|  11.2k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   53|  11.2k|{
   54|  11.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|  11.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|  11.2k|        return true;
   57|  11.2k|    }
   58|  11.2k|    else if constexpr (std::is_same_v<
   59|  11.2k|                           ranges::iterator_t<Range>,
   60|  11.2k|                           typename detail::basic_scan_buffer<
   61|  11.2k|                               detail::char_t<Range>>::forward_iterator>) {
   62|  11.2k|        auto beg = ranges::begin(r);
   63|  11.2k|        if (beg.contiguous_segment().empty()) {
   64|  11.2k|            return false;
   65|  11.2k|        }
   66|  11.2k|        if constexpr (ranges::common_range<Range>) {
   67|  11.2k|            return beg.contiguous_segment().end() ==
   68|  11.2k|                   ranges::end(r).contiguous_segment().end();
   69|  11.2k|        }
   70|  11.2k|        else {
   71|  11.2k|            if (beg.stores_parent()) {
   72|  11.2k|                return beg.contiguous_segment().end() ==
   73|  11.2k|                       beg.parent()->current_view().end();
   74|  11.2k|            }
   75|  11.2k|            return true;
   76|  11.2k|        }
   77|  11.2k|    }
   78|  11.2k|    else {
   79|  11.2k|        return false;
   80|  11.2k|    }
   81|  11.2k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  13.3k|{
  235|  13.3k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  13.3k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  13.3k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  13.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  13.3k|    }
  240|  13.3k|    else {
  241|  13.3k|        return contiguous_range_factory{SCN_FWD(range)};
  242|  13.3k|    }
  243|  13.3k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  13.3k|    {
   50|  13.3k|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|   505k|    {
   63|   505k|        return sv;
   64|   505k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|   332k|{
  235|   332k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   332k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   332k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   332k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|   332k|    }
  240|   332k|    else {
  241|   332k|        return contiguous_range_factory{SCN_FWD(range)};
  242|   332k|    }
  243|   332k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|   332k|    {
   50|   332k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcEC2ENS1_19string_view_wrapperIcEE:
  102|   178k|    {
  103|   178k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   230k|    {
  142|   230k|        return m_view;
  143|   230k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|   230k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcEC2Ev:
   91|  3.30k|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIcE6assignIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  1.32k|    {
  137|  1.32k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.32k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  1.32k|    {
  181|  1.32k|        using value_t = ranges::range_value_t<Range>;
  182|  1.32k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.32k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.32k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.32k|            m_storage.reset();
  186|  1.32k|            m_view = string_view_type{ranges::data(range),
  187|  1.32k|                                      ranges_polyfill::usize(range)};
  188|  1.32k|        }
  189|  1.32k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  1.32k|                                          std::basic_string<CharT>>) {
  191|  1.32k|            m_storage.emplace(SCN_FWD(range));
  192|  1.32k|            m_view = string_view_type{*m_storage};
  193|  1.32k|        }
  194|  1.32k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.32k|                                          typename detail::basic_scan_buffer<
  196|  1.32k|                                              value_t>::forward_iterator> &&
  197|  1.32k|                           ranges::common_range<Range>) {
  198|  1.32k|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.32k|            auto end_seg = range.end().contiguous_segment();
  200|  1.32k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.32k|                             detail::to_address(end_seg.end()))) {
  202|  1.32k|                auto& str = m_storage.emplace();
  203|  1.32k|                str.reserve(range.end().position() - range.begin().position());
  204|  1.32k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.32k|                m_view = string_view_type{str};
  206|  1.32k|                return;
  207|  1.32k|            }
  208|       |
  209|  1.32k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.32k|                                                            end_seg.data());
  211|  1.32k|            m_storage.reset();
  212|  1.32k|        }
  213|  1.32k|        else {
  214|  1.32k|            auto& str = m_storage.emplace();
  215|  1.32k|            if constexpr (ranges::sized_range<Range>) {
  216|  1.32k|                str.reserve(ranges_polyfill::usize(range));
  217|  1.32k|            }
  218|  1.32k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.32k|                      std::back_inserter(str));
  220|  1.32k|            m_view = string_view_type{str};
  221|  1.32k|        }
  222|  1.32k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
  146|    736|    {
  147|    736|        return m_storage.has_value();
  148|    736|    }
_ZNR3scn2v24impl24contiguous_range_factoryIcE20get_allocated_stringEv:
  151|    368|    {
  152|    368|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|    368|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    368|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|    368|        return *m_storage;
  154|    368|    }
_ZN3scn2v24impl22make_contiguous_bufferIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  4.08k|{
  235|  4.08k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  4.08k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  4.08k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  4.08k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  4.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  4.08k|    }
  240|  4.08k|    else {
  241|  4.08k|        return contiguous_range_factory{SCN_FWD(range)};
  242|  4.08k|    }
  243|  4.08k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  4.08k|    {
   50|  4.08k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  48.2k|{
  235|  48.2k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  48.2k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  48.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  48.2k|        return string_view_wrapper{SCN_FWD(range)};
  239|  48.2k|    }
  240|  48.2k|    else {
  241|  48.2k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  48.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  48.2k|    }
  243|  48.2k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  48.2k|    {
   97|  48.2k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  48.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  48.2k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  48.2k|    {
  181|  48.2k|        using value_t = ranges::range_value_t<Range>;
  182|  48.2k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  48.2k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  48.2k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  48.2k|            m_storage.reset();
  186|  48.2k|            m_view = string_view_type{ranges::data(range),
  187|  48.2k|                                      ranges_polyfill::usize(range)};
  188|  48.2k|        }
  189|  48.2k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  48.2k|                                          std::basic_string<CharT>>) {
  191|  48.2k|            m_storage.emplace(SCN_FWD(range));
  192|  48.2k|            m_view = string_view_type{*m_storage};
  193|  48.2k|        }
  194|  48.2k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  48.2k|                                          typename detail::basic_scan_buffer<
  196|  48.2k|                                              value_t>::forward_iterator> &&
  197|  48.2k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  48.2k|            auto beg_seg = range.begin().contiguous_segment();
  199|  48.2k|            auto end_seg = range.end().contiguous_segment();
  200|  48.2k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  48.2k|                             detail::to_address(end_seg.end()))) {
  202|  48.2k|                auto& str = m_storage.emplace();
  203|  48.2k|                str.reserve(range.end().position() - range.begin().position());
  204|  48.2k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  48.2k|                m_view = string_view_type{str};
  206|  48.2k|                return;
  207|  48.2k|            }
  208|       |
  209|  48.2k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  48.2k|                                                            end_seg.data());
  211|  48.2k|            m_storage.reset();
  212|  48.2k|        }
  213|  48.2k|        else {
  214|  48.2k|            auto& str = m_storage.emplace();
  215|  48.2k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (215:27): [Folded - Ignored]
  ------------------
  216|  48.2k|                str.reserve(ranges_polyfill::usize(range));
  217|  48.2k|            }
  218|  48.2k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  48.2k|                      std::back_inserter(str));
  220|  48.2k|            m_view = string_view_type{str};
  221|  48.2k|        }
  222|  48.2k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  11.2k|{
  235|  11.2k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  11.2k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  11.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  11.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  11.2k|    }
  240|  11.2k|    else {
  241|  11.2k|        return contiguous_range_factory{SCN_FWD(range)};
  242|  11.2k|    }
  243|  11.2k|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  11.2k|    {
   50|  11.2k|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  15.9k|    {
   63|  15.9k|        return sv;
   64|  15.9k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|  30.5k|    {
  142|  30.5k|        return m_view;
  143|  30.5k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  30.6k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwEC2Ev:
   91|  2.76k|    contiguous_range_factory() = default;
_ZN3scn2v24impl24contiguous_range_factoryIwE6assignIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEvOT_:
  136|  1.10k|    {
  137|  1.10k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|  1.10k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEvOT_:
  180|  1.10k|    {
  181|  1.10k|        using value_t = ranges::range_value_t<Range>;
  182|  1.10k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  1.10k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  1.10k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  1.10k|            m_storage.reset();
  186|  1.10k|            m_view = string_view_type{ranges::data(range),
  187|  1.10k|                                      ranges_polyfill::usize(range)};
  188|  1.10k|        }
  189|  1.10k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  190|  1.10k|                                          std::basic_string<CharT>>) {
  191|  1.10k|            m_storage.emplace(SCN_FWD(range));
  192|  1.10k|            m_view = string_view_type{*m_storage};
  193|  1.10k|        }
  194|  1.10k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  195|  1.10k|                                          typename detail::basic_scan_buffer<
  196|  1.10k|                                              value_t>::forward_iterator> &&
  197|  1.10k|                           ranges::common_range<Range>) {
  198|  1.10k|            auto beg_seg = range.begin().contiguous_segment();
  199|  1.10k|            auto end_seg = range.end().contiguous_segment();
  200|  1.10k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  1.10k|                             detail::to_address(end_seg.end()))) {
  202|  1.10k|                auto& str = m_storage.emplace();
  203|  1.10k|                str.reserve(range.end().position() - range.begin().position());
  204|  1.10k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  1.10k|                m_view = string_view_type{str};
  206|  1.10k|                return;
  207|  1.10k|            }
  208|       |
  209|  1.10k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  1.10k|                                                            end_seg.data());
  211|  1.10k|            m_storage.reset();
  212|  1.10k|        }
  213|  1.10k|        else {
  214|  1.10k|            auto& str = m_storage.emplace();
  215|  1.10k|            if constexpr (ranges::sized_range<Range>) {
  216|  1.10k|                str.reserve(ranges_polyfill::usize(range));
  217|  1.10k|            }
  218|  1.10k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  1.10k|                      std::back_inserter(str));
  220|  1.10k|            m_view = string_view_type{str};
  221|  1.10k|        }
  222|  1.10k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
  146|    808|    {
  147|    808|        return m_storage.has_value();
  148|    808|    }
_ZNR3scn2v24impl24contiguous_range_factoryIwE20get_allocated_stringEv:
  151|    404|    {
  152|    404|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  242|    404|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    404|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|    404|        return *m_storage;
  154|    404|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  27.9k|{
  235|  27.9k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  27.9k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  27.9k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  27.9k|        return string_view_wrapper{SCN_FWD(range)};
  239|  27.9k|    }
  240|  27.9k|    else {
  241|  27.9k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  27.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  27.9k|    }
  243|  27.9k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  27.9k|    {
   97|  27.9k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  27.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  27.9k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  27.9k|    {
  181|  27.9k|        using value_t = ranges::range_value_t<Range>;
  182|  27.9k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  27.9k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  27.9k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  27.9k|            m_storage.reset();
  186|  27.9k|            m_view = string_view_type{ranges::data(range),
  187|  27.9k|                                      ranges_polyfill::usize(range)};
  188|  27.9k|        }
  189|  27.9k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  27.9k|                                          std::basic_string<CharT>>) {
  191|  27.9k|            m_storage.emplace(SCN_FWD(range));
  192|  27.9k|            m_view = string_view_type{*m_storage};
  193|  27.9k|        }
  194|  27.9k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  27.9k|                                          typename detail::basic_scan_buffer<
  196|  27.9k|                                              value_t>::forward_iterator> &&
  197|  27.9k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  27.9k|            auto beg_seg = range.begin().contiguous_segment();
  199|  27.9k|            auto end_seg = range.end().contiguous_segment();
  200|  27.9k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  201|  27.9k|                             detail::to_address(end_seg.end()))) {
  202|  27.9k|                auto& str = m_storage.emplace();
  203|  27.9k|                str.reserve(range.end().position() - range.begin().position());
  204|  27.9k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  27.9k|                m_view = string_view_type{str};
  206|  27.9k|                return;
  207|  27.9k|            }
  208|       |
  209|  27.9k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|  27.9k|                                                            end_seg.data());
  211|  27.9k|            m_storage.reset();
  212|  27.9k|        }
  213|  27.9k|        else {
  214|  27.9k|            auto& str = m_storage.emplace();
  215|  27.9k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (215:27): [Folded - Ignored]
  ------------------
  216|  27.9k|                str.reserve(ranges_polyfill::usize(range));
  217|  27.9k|            }
  218|  27.9k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  27.9k|                      std::back_inserter(str));
  220|  27.9k|            m_view = string_view_type{str};
  221|  27.9k|        }
  222|  27.9k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  64.6k|{
   97|  64.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  64.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 64.6k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  64.6k|    return eof_error::good;
  101|  64.6k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  64.6k|{
   91|  64.6k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  64.6k|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|   219k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   219k|    {
   84|   219k|        return begin == end;
   85|   219k|    }
   86|   219k|}
_ZN3scn2v24impl9eof_checkINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_9eof_errorERKT_:
   96|  2.12k|{
   97|  2.12k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.12k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  2.12k|    return eof_error::good;
  101|  2.12k|}
_ZN3scn2v24impl12is_range_eofINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEEbRKT_:
   90|  2.12k|{
   91|  2.12k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.12k|}
_ZN3scn2v24impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS6_S6_LNSA_13subrange_kindE1EEEE8sentinelILb1EEEEEbT_T0_:
   74|  2.72k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.72k|    {
   84|  2.72k|        return begin == end;
   85|  2.72k|    }
   86|  2.72k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_9eof_errorERKT_:
   96|    600|{
   97|    600|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 600]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|    600|    return eof_error::good;
  101|    600|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEbRKT_:
   90|    600|{
   91|    600|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|    600|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  52.4k|{
   97|  52.4k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  52.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 52.4k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  52.4k|    return eof_error::good;
  101|  52.4k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  52.4k|{
   91|  52.4k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  52.4k|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  4.21M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  4.21M|    {
   84|  4.21M|        return begin == end;
   85|  4.21M|    }
   86|  4.21M|}
_ZN3scn2v24impl9eof_checkINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_9eof_errorERKT_:
   96|  1.77k|{
   97|  1.77k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.77k]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|  1.77k|    return eof_error::good;
  101|  1.77k|}
_ZN3scn2v24impl12is_range_eofINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEEbRKT_:
   90|  1.77k|{
   91|  1.77k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.77k|}
_ZN3scn2v24impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS6_S6_LNSA_13subrange_kindE1EEEE8sentinelILb1EEEEEbT_T0_:
   74|  2.27k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.27k|    {
   84|  2.27k|        return begin == end;
   85|  2.27k|    }
   86|  2.27k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_9eof_errorERKT_:
   96|    500|{
   97|    500|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 500]
  |  |  ------------------
  ------------------
   98|      0|        return eof_error::eof;
   99|      0|    }
  100|    500|    return eof_error::good;
  101|    500|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEEbRKT_:
   90|    500|{
   91|    500|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|    500|}

_ZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  119|  4.93k|{
  120|  4.93k|    return find_classic_impl(
  121|  4.93k|        source, [](char ch) { return is_ascii_space(ch); },
  122|  4.93k|        [](char32_t cp) { return is_cp_space(cp); });
  123|  4.93k|}
_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|   137k|{
  128|   137k|    return find_classic_impl(
  129|   137k|        source, [](char ch) { return !is_ascii_space(ch); },
  130|   137k|        [](char32_t cp) { return !is_cp_space(cp); });
  131|   137k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
   43|  4.93k|{
   44|  4.93k|    auto it = source.begin();
   45|       |
   46|  38.9k|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 35.2k, False: 3.77k]
  ------------------
   47|  35.2k|        auto sv =
   48|  35.2k|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  35.2k|                .substr(0, 8);
   50|       |
   51|  35.2k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 20.4k, False: 14.7k]
  ------------------
   52|  20.4k|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  20.4k|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  20.4k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 696, False: 19.7k]
  ------------------
   55|    696|                break;
   56|    696|            }
   57|  19.7k|            continue;
   58|  20.4k|        }
   59|       |
   60|  63.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 48.7k, False: 14.2k]
  ------------------
   61|  48.7k|            auto tmp =
   62|  48.7k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  48.7k|            auto res = get_next_code_point(tmp);
   64|  48.7k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 462, False: 48.2k]
  ------------------
   65|    462|                return it;
   66|    462|            }
   67|  48.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  48.2k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  48.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  48.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  48.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  48.2k|        }
   71|  14.7k|    }
   72|       |
   73|  4.47k|    return detail::make_string_view_iterator(source, it);
   74|  4.93k|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|   178k|{
   31|   178k|    static_assert(sizeof(*source.data()) == 1);
   32|   178k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|   178k|    uint64_t word{};
   34|   178k|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|   178k|    return has_byte_greater(word, 127) != 0;
   37|   178k|}
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  121|   152k|        source, [](char ch) { return is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  122|  48.7k|        [](char32_t cp) { return is_cp_space(cp); });
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
   43|   137k|{
   44|   137k|    auto it = source.begin();
   45|       |
   46|   143k|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 142k, False: 930]
  ------------------
   47|   142k|        auto sv =
   48|   142k|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|   142k|                .substr(0, 8);
   50|       |
   51|   142k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 109k, False: 33.3k]
  ------------------
   52|   109k|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|   109k|            it = detail::make_string_view_iterator(source, tmp_it);
   54|   109k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 106k, False: 3.53k]
  ------------------
   55|   106k|                break;
   56|   106k|            }
   57|  3.53k|            continue;
   58|   109k|        }
   59|       |
   60|  44.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 41.3k, False: 3.10k]
  ------------------
   61|  41.3k|            auto tmp =
   62|  41.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|  41.3k|            auto res = get_next_code_point(tmp);
   64|  41.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 30.2k, False: 11.1k]
  ------------------
   65|  30.2k|                return it;
   66|  30.2k|            }
   67|  11.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  11.1k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  11.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  11.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  11.1k|        }
   71|  33.3k|    }
   72|       |
   73|   106k|    return detail::make_string_view_iterator(source, it);
   74|   137k|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  129|   133k|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  130|  41.3k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  13.3k|{
  300|  13.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  13.3k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  13.3k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  13.3k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  13.3k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  13.3k|        return ranges::next(ranges::begin(range),
  306|  13.3k|                            ranges::distance(buf.view().begin(), it));
  307|  13.3k|    }
  308|  13.3k|    else {
  309|  13.3k|        auto it = ranges::begin(range);
  310|       |
  311|  13.3k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  13.3k|            auto seg = get_contiguous_beginning(range);
  313|  13.3k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  13.3k|                seg_it != seg.end()) {
  315|  13.3k|                return ranges_polyfill::batch_next(
  316|  13.3k|                    it, ranges::distance(seg.begin(), seg_it));
  317|  13.3k|            }
  318|  13.3k|            ranges_polyfill::batch_next(it, seg.size());
  319|  13.3k|        }
  320|       |
  321|  13.3k|        return read_while_code_point(
  322|  13.3k|            SCN_FWD(range),
  323|  13.3k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  13.3k|    }
  325|  13.3k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  5.49k|{
  459|  5.49k|    auto it = read_code_unit(range);
  460|  5.49k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.49k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  10.9k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 10.9k, False: 5.49k]
  ------------------
  465|  10.9k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 10.9k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  10.9k|    }
  469|       |
  470|  5.49k|    return unexpected(parse_error::error);
  471|  5.49k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.40k|{
  482|  1.40k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.40k, False: 0]
  ------------------
  483|  1.40k|        return ranges::begin(range);
  484|  1.40k|    }
  485|      0|    return *result;
  486|  1.40k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  13.5k|{
  418|  13.5k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  13.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  13.5k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  13.5k|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 8, False: 13.5k]
  ------------------
  423|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|      8|        }
  425|  13.5k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 13.5k, False: 0]
  ------------------
  426|  13.5k|            return unexpected(parse_error::error);
  427|  13.5k|        }
  428|      0|        return ranges::next(ranges::begin(range), str.size());
  429|  13.5k|    }
  430|  13.5k|    else {
  431|  13.5k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  13.5k|            if (ch < 'A' || ch > 'Z') {
  433|  13.5k|                return ch;
  434|  13.5k|            }
  435|  13.5k|            return static_cast<char_type>(ch +
  436|  13.5k|                                          static_cast<char_type>('a' - 'A'));
  437|  13.5k|        };
  438|       |
  439|  13.5k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  13.5k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  13.5k|        if (SCN_UNLIKELY(!std::equal(
  443|  13.5k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  13.5k|                    return ascii_tolower(a) ==
  445|  13.5k|                           static_cast<detail::char_t<Range>>(b);
  446|  13.5k|                }))) {
  447|  13.5k|            return unexpected(parse_error::error);
  448|  13.5k|        }
  449|       |
  450|  13.5k|        return it;
  451|  13.5k|    }
  452|  13.5k|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  13.5k|{
  407|  13.5k|    unsigned char running_diff{0};
  408|  43.2k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 29.7k, False: 13.5k]
  ------------------
  409|  29.7k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  29.7k|    }
  411|  13.5k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 0, False: 13.5k]
  |  Branch (411:33): [True: 0, False: 13.5k]
  ------------------
  412|  13.5k|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  5.49k|{
  332|  5.49k|    auto it = read_code_unit(range);
  333|  5.49k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.49k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|  5.49k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.49k, False: 0]
  |  |  ------------------
  ------------------
  338|  5.49k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  5.49k|        return unexpected(parse_error::error);
  340|  5.49k|    }
  341|       |
  342|      0|    return *it;
  343|  5.49k|}
_ZN3scn2v24impl28read_matching_string_classicIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  378|  2.72k|{
  379|  2.72k|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 164, False: 2.55k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    164|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    164|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    164|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    164|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    164|    }                                                  \
  |  |  |  |   70|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|  2.55k|                    .transform_error(make_eof_parse_error));
  381|       |
  382|  2.55k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|  2.55k|        auto sv =
  384|  2.55k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  385|  2.55k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.55k, False: 0]
  |  |  ------------------
  ------------------
  386|  2.55k|            return unexpected(parse_error::error);
  387|  2.55k|        }
  388|      0|        return it;
  389|  2.55k|    }
  390|  2.55k|    else {
  391|  2.55k|        auto range_it = ranges::begin(range);
  392|  2.55k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  393|  2.55k|            if (SCN_UNLIKELY(*range_it !=
  394|  2.55k|                             static_cast<detail::char_t<Range>>(str[i]))) {
  395|  2.55k|                return unexpected(parse_error::error);
  396|  2.55k|            }
  397|  2.55k|        }
  398|  2.55k|        return it;
  399|  2.55k|    }
  400|  2.55k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|     40|{
  159|     40|    auto it = read_while_code_unit(range, pred);
  160|     40|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 40, False: 0]
  ------------------
  161|     40|        return unexpected(parse_error::error);
  162|     40|    }
  163|      0|    return it;
  164|     40|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|    202|{
  139|    202|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    202|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|    202|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|    400|{
  131|    400|    return ranges::find_if(range, pred);
  132|    400|}
_ZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
  269|  4.08k|{
  270|  4.08k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  4.08k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  4.08k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  4.08k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  4.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  274|  4.08k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  4.08k|        return ranges::next(ranges::begin(range),
  276|  4.08k|                            ranges::distance(buf.view().begin(), it));
  277|  4.08k|    }
  278|  4.08k|    else {
  279|  4.08k|        auto it = ranges::begin(range);
  280|       |
  281|  4.08k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  282|  4.08k|            auto seg = get_contiguous_beginning(range);
  283|  4.08k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  4.08k|                seg_it != seg.end()) {
  285|  4.08k|                return ranges_polyfill::batch_next(
  286|  4.08k|                    it, ranges::distance(seg.begin(), seg_it));
  287|  4.08k|            }
  288|  4.08k|            ranges_polyfill::batch_next(it, seg.size());
  289|  4.08k|        }
  290|       |
  291|  4.08k|        return read_until_code_point(
  292|  4.08k|            ranges::subrange{it, ranges::end(range)},
  293|  4.08k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  4.08k|    }
  295|  4.08k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|  1.27k|{
  178|  1.27k|    static_assert(ranges::contiguous_range<Range> &&
  179|  1.27k|                  ranges::sized_range<Range>);
  180|       |
  181|  1.27k|    std::array<char32_t, 16> cp_buf{};
  182|  1.27k|    std::array<uint8_t, 16> idx_buf{};
  183|  1.27k|    auto it = ranges::begin(range);
  184|  1.27k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 0, False: 1.27k]
  ------------------
  185|      0|        auto chunk_begin = it;
  186|      0|        size_t code_point_count = 0;
  187|      0|        uint8_t code_unit_idx = 0;
  188|      0|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 0, False: 0]
  |  Branch (188:52): [True: 0, False: 0]
  ------------------
  189|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 0, False: 0]
  ------------------
  190|      0|                idx_buf[code_point_count] = code_unit_idx;
  191|      0|                ++code_point_count;
  192|      0|            }
  193|      0|            ++it;
  194|      0|            ++code_unit_idx;
  195|      0|        }
  196|       |
  197|      0|        auto input = detail::make_string_view_from_pointers(
  198|      0|            detail::to_address(chunk_begin), detail::to_address(it));
  199|      0|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|      0|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|      0|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|      0|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 0, False: 0]
  ------------------
  217|      0|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 0]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|      0|        }
  221|      0|    }
  222|       |
  223|  1.27k|    return it;
  224|  1.27k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISD_EEE4typeEEEEEOSD_:
   41|   178k|{
   42|   178k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|   178k|    auto it = ranges::begin(range);
   45|   178k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   178k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.66k, False: 169k]
  |  |  ------------------
  ------------------
   48|  44.5k|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 44.4k, False: 168]
  ------------------
   49|  44.4k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 9.49k, False: 34.9k]
  ------------------
   50|  9.49k|                break;
   51|  9.49k|            }
   52|  44.4k|        }
   53|       |
   54|  9.66k|        return {it, make_contiguous_buffer(
   55|  9.66k|                        ranges::subrange{ranges::begin(range), it})};
   56|  9.66k|    }
   57|       |
   58|   169k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 139k, False: 29.7k]
  ------------------
   59|   139k|        ++it;
   60|   139k|        return {it, make_contiguous_buffer(
   61|   139k|                        ranges::subrange{ranges::begin(range), it})};
   62|   139k|    }
   63|       |
   64|  29.7k|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|  29.7k|                    ranges::end(range));
   66|  29.7k|    return {it,
   67|  29.7k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   169k|}
_ZN3scn2v24impl24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_:
  299|   123k|{
  300|   123k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   123k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   123k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   123k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|   123k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   123k|        return ranges::next(ranges::begin(range),
  306|   123k|                            ranges::distance(buf.view().begin(), it));
  307|   123k|    }
  308|   123k|    else {
  309|   123k|        auto it = ranges::begin(range);
  310|       |
  311|   123k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|   123k|            auto seg = get_contiguous_beginning(range);
  313|   123k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   123k|                seg_it != seg.end()) {
  315|   123k|                return ranges_polyfill::batch_next(
  316|   123k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   123k|            }
  318|   123k|            ranges_polyfill::batch_next(it, seg.size());
  319|   123k|        }
  320|       |
  321|   123k|        return read_while_code_point(
  322|   123k|            SCN_FWD(range),
  323|   123k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   123k|    }
  325|   123k|}
_ZN3scn2v24impl21read_one_of_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  458|  1.22k|{
  459|  1.22k|    auto it = read_code_unit(range);
  460|  1.22k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.22k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  2.44k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 2.44k, False: 1.22k]
  ------------------
  465|  2.44k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 2.44k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  2.44k|    }
  469|       |
  470|  1.22k|    return unexpected(parse_error::error);
  471|  1.22k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEE4typeEOSP_OSR_:
  481|    322|{
  482|    322|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 322, False: 0]
  ------------------
  483|    322|        return ranges::begin(range);
  484|    322|    }
  485|      0|    return *result;
  486|    322|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEE:
  417|  2.98k|{
  418|  2.98k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  2.98k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  2.98k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  2.98k|        if (ranges::size(range) < str.size()) {
  423|  2.98k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  2.98k|        }
  425|  2.98k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  2.98k|            return unexpected(parse_error::error);
  427|  2.98k|        }
  428|  2.98k|        return ranges::next(ranges::begin(range), str.size());
  429|  2.98k|    }
  430|  2.98k|    else {
  431|  2.98k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.98k|            if (ch < 'A' || ch > 'Z') {
  433|  2.98k|                return ch;
  434|  2.98k|            }
  435|  2.98k|            return static_cast<char_type>(ch +
  436|  2.98k|                                          static_cast<char_type>('a' - 'A'));
  437|  2.98k|        };
  438|       |
  439|  2.98k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 134, False: 2.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    134|    }                                                  \
  |  |  |  |   70|  2.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  2.84k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  2.84k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.84k, False: 0]
  |  |  ------------------
  ------------------
  443|  2.84k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  2.84k|                    return ascii_tolower(a) ==
  445|  2.84k|                           static_cast<detail::char_t<Range>>(b);
  446|  2.84k|                }))) {
  447|  2.84k|            return unexpected(parse_error::error);
  448|  2.84k|        }
  449|       |
  450|      0|        return it;
  451|  2.84k|    }
  452|  2.98k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEEENKUlcE_clEc:
  431|  2.84k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.84k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 16, False: 2.83k]
  |  Branch (432:29): [True: 2.83k, False: 0]
  ------------------
  433|  2.84k|                return ch;
  434|  2.84k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  2.84k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NDTcl4implISM_EEE4typeE:
  331|    600|{
  332|    600|    auto it = read_code_unit(range);
  333|    600|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 600]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|    600|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 600, False: 0]
  |  |  ------------------
  ------------------
  338|    600|                     static_cast<detail::char_t<Range>>(ch))) {
  339|    600|        return unexpected(parse_error::error);
  340|    600|    }
  341|       |
  342|      0|    return *it;
  343|    600|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS1_12function_refIFbNDTcl4implISM_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
  158|    912|{
  159|    912|    auto it = read_while_code_unit(range, pred);
  160|    912|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 912, False: 0]
  ------------------
  161|    912|        return unexpected(parse_error::error);
  162|    912|    }
  163|      0|    return it;
  164|    912|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
  138|  1.20k|{
  139|  1.20k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.20k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
  130|  1.20k|{
  131|  1.20k|    return ranges::find_if(range, pred);
  132|  1.20k|}
_ZN3scn2v24impl23read_matching_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|    624|{
  332|    624|    auto it = read_code_unit(range);
  333|    624|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    624|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 624]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|    624|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|    624|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 624, False: 0]
  |  |  ------------------
  ------------------
  338|    624|                     static_cast<detail::char_t<Range>>(ch))) {
  339|    624|        return unexpected(parse_error::error);
  340|    624|    }
  341|       |
  342|      0|    return *it;
  343|    624|}
_ZN3scn2v24impl20read_matching_stringIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewINDTcl4implISG_EEE4typeENSL_11char_traitsISO_EEEE:
  362|     16|{
  363|     16|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|      6|                    .transform_error(make_eof_parse_error));
  365|       |
  366|      6|    auto sv =
  367|      6|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  368|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  369|      6|        return unexpected(parse_error::error);
  370|      6|    }
  371|      0|    return it;
  372|      6|}
_ZN3scn2v24impl28read_matching_string_classicIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  378|    568|{
  379|    568|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 48, False: 520]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     48|    }                                                  \
  |  |  |  |   70|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    520|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|    520|                    .transform_error(make_eof_parse_error));
  381|       |
  382|    520|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|    520|        auto sv =
  384|    520|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  385|    520|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|    520|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 520, False: 0]
  |  |  ------------------
  ------------------
  386|    520|            return unexpected(parse_error::error);
  387|    520|        }
  388|      0|        return it;
  389|    520|    }
  390|    520|    else {
  391|    520|        auto range_it = ranges::begin(range);
  392|    520|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  393|    520|            if (SCN_UNLIKELY(*range_it !=
  394|    520|                             static_cast<detail::char_t<Range>>(str[i]))) {
  395|    520|                return unexpected(parse_error::error);
  396|    520|            }
  397|    520|        }
  398|    520|        return it;
  399|    520|    }
  400|    520|}
_ZN3scn2v24impl20read_matching_stringIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewINDTcl4implISE_EEE4typeENSJ_11char_traitsISM_EEEE:
  362|     24|{
  363|     24|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|     24|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     24|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     24|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|     24|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|     22|                    .transform_error(make_eof_parse_error));
  365|       |
  366|     22|    auto sv =
  367|     22|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  368|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
  369|     22|        return unexpected(parse_error::error);
  370|     22|    }
  371|      0|    return it;
  372|     22|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEE:
  158|    294|{
  159|    294|    auto it = read_while_code_unit(range, pred);
  160|    294|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 294, False: 0]
  ------------------
  161|    294|        return unexpected(parse_error::error);
  162|    294|    }
  163|      0|    return it;
  164|    294|}
_ZN3scn2v24impl24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
  269|    852|{
  270|    852|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|    852|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|    852|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|    852|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|    852|        auto it = find_classic_space_narrow_fast(buf.view());
  275|    852|        return ranges::next(ranges::begin(range),
  276|    852|                            ranges::distance(buf.view().begin(), it));
  277|    852|    }
  278|    852|    else {
  279|    852|        auto it = ranges::begin(range);
  280|       |
  281|    852|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|    852|            auto seg = get_contiguous_beginning(range);
  283|    852|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|    852|                seg_it != seg.end()) {
  ------------------
  |  Branch (284:17): [True: 0, False: 852]
  ------------------
  285|      0|                return ranges_polyfill::batch_next(
  286|      0|                    it, ranges::distance(seg.begin(), seg_it));
  287|      0|            }
  288|    852|            ranges_polyfill::batch_next(it, seg.size());
  289|    852|        }
  290|       |
  291|    852|        return read_until_code_point(
  292|    852|            ranges::subrange{it, ranges::end(range)},
  293|    852|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|    852|    }
  295|    852|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_NS1_12function_refIFbDiESP_EE:
  230|    852|{
  231|    852|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|    852|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|    852|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|    852|    }
  235|    852|    else {
  236|    852|        auto it = ranges::begin(range);
  237|    852|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|    852|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|    852|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 852]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  25.1k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 24.4k, False: 720]
  ------------------
  246|  24.4k|            const auto [iter, value] =
  247|  24.4k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  24.4k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  24.4k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 132, False: 24.3k]
  ------------------
  250|    132|                return it;
  251|    132|            }
  252|  24.3k|            it = iter;
  253|  24.3k|        }
  254|       |
  255|    720|        return it;
  256|    852|    }
  257|    852|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISL_EEE4typeEEEEEOSL_:
   41|  46.5k|{
   42|  46.5k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  46.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  46.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|  46.5k|    auto it = ranges::begin(range);
   45|  46.5k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  46.5k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  46.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.77k, False: 41.7k]
  |  |  ------------------
  ------------------
   48|  75.1k|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 74.9k, False: 168]
  ------------------
   49|  74.9k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 4.60k, False: 70.3k]
  ------------------
   50|  4.60k|                break;
   51|  4.60k|            }
   52|  74.9k|        }
   53|       |
   54|  4.77k|        return {it, make_contiguous_buffer(
   55|  4.77k|                        ranges::subrange{ranges::begin(range), it})};
   56|  4.77k|    }
   57|       |
   58|  41.7k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 35.5k, False: 6.26k]
  ------------------
   59|  35.5k|        ++it;
   60|  35.5k|        return {it, make_contiguous_buffer(
   61|  35.5k|                        ranges::subrange{ranges::begin(range), it})};
   62|  35.5k|    }
   63|       |
   64|  6.26k|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|  6.26k|                    ranges::end(range));
   66|  6.26k|    return {it,
   67|  6.26k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  41.7k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_ENKUlDiE_clEDi:
  293|  24.4k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_until_code_pointIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  230|    426|{
  231|    426|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|    426|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|    426|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|    426|    }
  235|    426|    else {
  236|    426|        auto it = ranges::begin(range);
  237|    426|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|    426|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|    426|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 426]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  22.2k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 22.1k, False: 144]
  ------------------
  246|  22.1k|            const auto [iter, value] =
  247|  22.1k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  22.1k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  22.1k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 282, False: 21.8k]
  ------------------
  250|    282|                return it;
  251|    282|            }
  252|  21.8k|            it = iter;
  253|  21.8k|        }
  254|       |
  255|    144|        return it;
  256|    426|    }
  257|    426|}
_ZN3scn2v24impl21read_while_code_pointIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  263|    204|{
  264|    204|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|    204|}
_ZN3scn2v24impl20read_until_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
  130|    240|{
  131|    240|    return ranges::find_if(range, pred);
  132|    240|}
_ZN3scn2v24impl20read_while_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
  138|     66|{
  139|     66|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|     66|}
_ZN3scn2v24impl21read_until_code_pointIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  230|  3.93k|{
  231|  3.93k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  3.93k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  3.93k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  3.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  3.93k|    }
  235|  3.93k|    else {
  236|  3.93k|        auto it = ranges::begin(range);
  237|  3.93k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  3.93k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  3.93k|            seg_it != seg.end()) {
  241|  3.93k|            return ranges_polyfill::batch_next(
  242|  3.93k|                it, ranges::distance(seg.begin(), seg_it));
  243|  3.93k|        }
  244|       |
  245|  3.93k|        while (it != ranges::end(range)) {
  246|  3.93k|            const auto [iter, value] =
  247|  3.93k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  3.93k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  3.93k|            if (pred(cp)) {
  250|  3.93k|                return it;
  251|  3.93k|            }
  252|  3.93k|            it = iter;
  253|  3.93k|        }
  254|       |
  255|  3.93k|        return it;
  256|  3.93k|    }
  257|  3.93k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  177|  3.93k|{
  178|  3.93k|    static_assert(ranges::contiguous_range<Range> &&
  179|  3.93k|                  ranges::sized_range<Range>);
  180|       |
  181|  3.93k|    std::array<char32_t, 16> cp_buf{};
  182|  3.93k|    std::array<uint8_t, 16> idx_buf{};
  183|  3.93k|    auto it = ranges::begin(range);
  184|  33.8k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 32.9k, False: 882]
  ------------------
  185|  32.9k|        auto chunk_begin = it;
  186|  32.9k|        size_t code_point_count = 0;
  187|  32.9k|        uint8_t code_unit_idx = 0;
  188|   621k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 590k, False: 30.8k]
  |  Branch (188:52): [True: 588k, False: 2.07k]
  ------------------
  189|   588k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 508k, False: 79.2k]
  ------------------
  190|   508k|                idx_buf[code_point_count] = code_unit_idx;
  191|   508k|                ++code_point_count;
  192|   508k|            }
  193|   588k|            ++it;
  194|   588k|            ++code_unit_idx;
  195|   588k|        }
  196|       |
  197|  32.9k|        auto input = detail::make_string_view_from_pointers(
  198|  32.9k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  32.9k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  32.9k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  32.9k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.3k, False: 19.5k]
  |  |  ------------------
  ------------------
  202|  13.3k|            auto end = it;
  203|  13.3k|            it = chunk_begin;
  204|   191k|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 178k, False: 12.3k]
  ------------------
  205|   178k|                const auto [iter, value] =
  206|   178k|                    read_code_point_into(ranges::subrange{it, end});
  207|   178k|                const auto cp = decode_code_point_exhaustive(value.view());
  208|   178k|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 978, False: 177k]
  ------------------
  209|    978|                    return it;
  210|    978|                }
  211|   177k|                it = iter;
  212|   177k|            }
  213|  12.3k|            continue;
  214|  13.3k|        }
  215|       |
  216|   303k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 286k, False: 17.5k]
  ------------------
  217|   286k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.07k, False: 284k]
  ------------------
  218|  2.07k|                return chunk_begin + idx_buf[i];
  219|  2.07k|            }
  220|   286k|        }
  221|  19.5k|    }
  222|       |
  223|    882|    return it;
  224|  3.93k|}
_ZN3scn2v24impl21read_while_code_pointIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  263|  2.74k|{
  264|  2.74k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  2.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  2.74k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  11.2k|{
  300|  11.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  11.2k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  11.2k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  11.2k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  11.2k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  11.2k|        return ranges::next(ranges::begin(range),
  306|  11.2k|                            ranges::distance(buf.view().begin(), it));
  307|  11.2k|    }
  308|  11.2k|    else {
  309|  11.2k|        auto it = ranges::begin(range);
  310|       |
  311|  11.2k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  11.2k|            auto seg = get_contiguous_beginning(range);
  313|  11.2k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  11.2k|                seg_it != seg.end()) {
  315|  11.2k|                return ranges_polyfill::batch_next(
  316|  11.2k|                    it, ranges::distance(seg.begin(), seg_it));
  317|  11.2k|            }
  318|  11.2k|            ranges_polyfill::batch_next(it, seg.size());
  319|  11.2k|        }
  320|       |
  321|  11.2k|        return read_while_code_point(
  322|  11.2k|            SCN_FWD(range),
  ------------------
  |  |  248|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  11.2k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  11.2k|    }
  325|  11.2k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  11.2k|{
  264|  11.2k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  11.2k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  11.2k|{
  231|  11.2k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  11.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  11.2k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  11.2k|    }
  235|  11.2k|    else {
  236|  11.2k|        auto it = ranges::begin(range);
  237|  11.2k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  11.2k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  11.2k|            seg_it != seg.end()) {
  241|  11.2k|            return ranges_polyfill::batch_next(
  242|  11.2k|                it, ranges::distance(seg.begin(), seg_it));
  243|  11.2k|        }
  244|       |
  245|  11.2k|        while (it != ranges::end(range)) {
  246|  11.2k|            const auto [iter, value] =
  247|  11.2k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  11.2k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  11.2k|            if (pred(cp)) {
  250|  11.2k|                return it;
  251|  11.2k|            }
  252|  11.2k|            it = iter;
  253|  11.2k|        }
  254|       |
  255|  11.2k|        return it;
  256|  11.2k|    }
  257|  11.2k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  11.2k|{
  178|  11.2k|    static_assert(ranges::contiguous_range<Range> &&
  179|  11.2k|                  ranges::sized_range<Range>);
  180|       |
  181|  11.2k|    std::array<char32_t, 16> cp_buf{};
  182|  11.2k|    std::array<uint8_t, 16> idx_buf{};
  183|  11.2k|    auto it = ranges::begin(range);
  184|  12.2k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 12.2k, False: 0]
  ------------------
  185|  12.2k|        auto chunk_begin = it;
  186|  12.2k|        size_t code_point_count = 0;
  187|  12.2k|        uint8_t code_unit_idx = 0;
  188|   136k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 132k, False: 4.46k]
  |  Branch (188:52): [True: 124k, False: 7.83k]
  ------------------
  189|   124k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 124k, False: 0]
  ------------------
  190|   124k|                idx_buf[code_point_count] = code_unit_idx;
  191|   124k|                ++code_point_count;
  192|   124k|            }
  193|   124k|            ++it;
  194|   124k|            ++code_unit_idx;
  195|   124k|        }
  196|       |
  197|  12.2k|        auto input = detail::make_string_view_from_pointers(
  198|  12.2k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  12.2k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  12.2k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  12.2k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  32.4k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 31.3k, False: 1.09k]
  ------------------
  217|  31.3k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 11.2k, False: 20.1k]
  ------------------
  218|  11.2k|                return chunk_begin + idx_buf[i];
  219|  11.2k|            }
  220|  31.3k|        }
  221|  12.2k|    }
  222|       |
  223|      0|    return it;
  224|  11.2k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  31.3k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  4.65k|{
  459|  4.65k|    auto it = read_code_unit(range);
  460|  4.65k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.65k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  9.30k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 9.30k, False: 4.65k]
  ------------------
  465|  9.30k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 9.30k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  9.30k|    }
  469|       |
  470|  4.65k|    return unexpected(parse_error::error);
  471|  4.65k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.20k|{
  482|  1.20k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.20k, False: 0]
  ------------------
  483|  1.20k|        return ranges::begin(range);
  484|  1.20k|    }
  485|      0|    return *result;
  486|  1.20k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  11.3k|{
  418|  11.3k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  11.3k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  11.3k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  11.3k|        if (ranges::size(range) < str.size()) {
  423|  11.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  11.3k|        }
  425|  11.3k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  11.3k|            return unexpected(parse_error::error);
  427|  11.3k|        }
  428|  11.3k|        return ranges::next(ranges::begin(range), str.size());
  429|  11.3k|    }
  430|  11.3k|    else {
  431|  11.3k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  11.3k|            if (ch < 'A' || ch > 'Z') {
  433|  11.3k|                return ch;
  434|  11.3k|            }
  435|  11.3k|            return static_cast<char_type>(ch +
  436|  11.3k|                                          static_cast<char_type>('a' - 'A'));
  437|  11.3k|        };
  438|       |
  439|  11.3k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24, False: 11.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     24|    }                                                  \
  |  |  |  |   70|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  11.3k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  11.3k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.3k, False: 0]
  |  |  ------------------
  ------------------
  443|  11.3k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  11.3k|                    return ascii_tolower(a) ==
  445|  11.3k|                           static_cast<detail::char_t<Range>>(b);
  446|  11.3k|                }))) {
  447|  11.3k|            return unexpected(parse_error::error);
  448|  11.3k|        }
  449|       |
  450|      0|        return it;
  451|  11.3k|    }
  452|  11.3k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  11.3k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  11.3k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 60, False: 11.2k]
  |  Branch (432:29): [True: 11.2k, False: 0]
  ------------------
  433|  11.3k|                return ch;
  434|  11.3k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  11.3k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  4.63k|{
  332|  4.63k|    auto it = read_code_unit(range);
  333|  4.63k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.63k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|  4.63k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  4.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.63k, False: 0]
  |  |  ------------------
  ------------------
  338|  4.63k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  4.63k|        return unexpected(parse_error::error);
  340|  4.63k|    }
  341|       |
  342|      0|    return *it;
  343|  4.63k|}
_ZN3scn2v24impl28read_matching_string_classicIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  378|  2.28k|{
  379|  2.28k|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 252, False: 2.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    252|    }                                                  \
  |  |  |  |   70|  2.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|  2.03k|                    .transform_error(make_eof_parse_error));
  381|       |
  382|  2.03k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|  2.03k|        auto sv =
  384|  2.03k|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  385|  2.03k|        if (SCN_UNLIKELY(sv.view() != str)) {
  386|  2.03k|            return unexpected(parse_error::error);
  387|  2.03k|        }
  388|  2.03k|        return it;
  389|  2.03k|    }
  390|  2.03k|    else {
  391|  2.03k|        auto range_it = ranges::begin(range);
  392|  2.03k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (392:28): [True: 2.03k, False: 0]
  ------------------
  393|  2.03k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  153|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.03k, False: 0]
  |  |  ------------------
  ------------------
  394|  2.03k|                             static_cast<detail::char_t<Range>>(str[i]))) {
  395|  2.03k|                return unexpected(parse_error::error);
  396|  2.03k|            }
  397|  2.03k|        }
  398|      0|        return it;
  399|  2.03k|    }
  400|  2.03k|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISL_E8functionEEE:
  158|     38|{
  159|     38|    auto it = read_while_code_unit(range, pred);
  160|     38|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 38, False: 0]
  ------------------
  161|     38|        return unexpected(parse_error::error);
  162|     38|    }
  163|      0|    return it;
  164|     38|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  138|    188|{
  139|    188|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    188|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|    188|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
  130|    332|{
  131|    332|    return ranges::find_if(range, pred);
  132|    332|}
_ZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
  269|  3.42k|{
  270|  3.42k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|  3.42k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|  3.42k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|  3.42k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|  3.42k|        auto it = find_classic_space_narrow_fast(buf.view());
  275|  3.42k|        return ranges::next(ranges::begin(range),
  276|  3.42k|                            ranges::distance(buf.view().begin(), it));
  277|  3.42k|    }
  278|  3.42k|    else {
  279|  3.42k|        auto it = ranges::begin(range);
  280|       |
  281|  3.42k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|  3.42k|            auto seg = get_contiguous_beginning(range);
  283|  3.42k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|  3.42k|                seg_it != seg.end()) {
  285|  3.42k|                return ranges_polyfill::batch_next(
  286|  3.42k|                    it, ranges::distance(seg.begin(), seg_it));
  287|  3.42k|            }
  288|  3.42k|            ranges_polyfill::batch_next(it, seg.size());
  289|  3.42k|        }
  290|       |
  291|  3.42k|        return read_until_code_point(
  292|  3.42k|            ranges::subrange{it, ranges::end(range)},
  293|  3.42k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|  3.42k|    }
  295|  3.42k|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  230|   128k|{
  231|   128k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   128k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   128k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|   128k|    }
  235|   128k|    else {
  236|   128k|        auto it = ranges::begin(range);
  237|   128k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   128k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   128k|            seg_it != seg.end()) {
  241|   128k|            return ranges_polyfill::batch_next(
  242|   128k|                it, ranges::distance(seg.begin(), seg_it));
  243|   128k|        }
  244|       |
  245|   128k|        while (it != ranges::end(range)) {
  246|   128k|            const auto [iter, value] =
  247|   128k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   128k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   128k|            if (pred(cp)) {
  250|   128k|                return it;
  251|   128k|            }
  252|   128k|            it = iter;
  253|   128k|        }
  254|       |
  255|   128k|        return it;
  256|   128k|    }
  257|   128k|}
_ZN3scn2v24impl27read_until_code_point_eagerIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  177|   128k|{
  178|   128k|    static_assert(ranges::contiguous_range<Range> &&
  179|   128k|                  ranges::sized_range<Range>);
  180|       |
  181|   128k|    std::array<char32_t, 16> cp_buf{};
  182|   128k|    std::array<uint8_t, 16> idx_buf{};
  183|   128k|    auto it = ranges::begin(range);
  184|   142k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 139k, False: 3.57k]
  ------------------
  185|   139k|        auto chunk_begin = it;
  186|   139k|        size_t code_point_count = 0;
  187|   139k|        uint8_t code_unit_idx = 0;
  188|  2.24M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 2.11M, False: 126k]
  |  Branch (188:52): [True: 2.10M, False: 12.6k]
  ------------------
  189|  2.10M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 2.10M, False: 0]
  ------------------
  190|  2.10M|                idx_buf[code_point_count] = code_unit_idx;
  191|  2.10M|                ++code_point_count;
  192|  2.10M|            }
  193|  2.10M|            ++it;
  194|  2.10M|            ++code_unit_idx;
  195|  2.10M|        }
  196|       |
  197|   139k|        auto input = detail::make_string_view_from_pointers(
  198|   139k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   139k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   139k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   139k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   343k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 328k, False: 14.3k]
  ------------------
  217|   328k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 124k, False: 204k]
  ------------------
  218|   124k|                return chunk_begin + idx_buf[i];
  219|   124k|            }
  220|   328k|        }
  221|   139k|    }
  222|       |
  223|  3.57k|    return it;
  224|   128k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_ENKUlDiE_clEDi:
  293|   186k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_:
  299|   124k|{
  300|   124k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   124k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   124k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   124k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   124k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   124k|        return ranges::next(ranges::begin(range),
  306|   124k|                            ranges::distance(buf.view().begin(), it));
  307|   124k|    }
  308|   124k|    else {
  309|   124k|        auto it = ranges::begin(range);
  310|       |
  311|   124k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   124k|            auto seg = get_contiguous_beginning(range);
  313|   124k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   124k|                seg_it != seg.end()) {
  315|   124k|                return ranges_polyfill::batch_next(
  316|   124k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   124k|            }
  318|   124k|            ranges_polyfill::batch_next(it, seg.size());
  319|   124k|        }
  320|       |
  321|   124k|        return read_while_code_point(
  322|   124k|            SCN_FWD(range),
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   124k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   124k|    }
  325|   124k|}
_ZN3scn2v24impl21read_while_code_pointIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_NS1_12function_refIFbDiESH_EE:
  263|   124k|{
  264|   124k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   124k|}
_ZZN3scn2v24impl24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_ENKUlDiE_clEDi:
  323|   142k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  458|  1.01k|{
  459|  1.01k|    auto it = read_code_unit(range);
  460|  1.01k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  2.03k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 2.03k, False: 1.01k]
  ------------------
  465|  2.03k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 2.03k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  2.03k|    }
  469|       |
  470|  1.01k|    return unexpected(parse_error::error);
  471|  1.01k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEE4typeEOSP_OSR_:
  481|    270|{
  482|    270|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 270, False: 0]
  ------------------
  483|    270|        return ranges::begin(range);
  484|    270|    }
  485|      0|    return *result;
  486|    270|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEE:
  417|  2.47k|{
  418|  2.47k|    using char_type = detail::char_t<Range>;
  419|       |
  420|  2.47k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  2.47k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  2.47k|        if (ranges::size(range) < str.size()) {
  423|  2.47k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  2.47k|        }
  425|  2.47k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  2.47k|            return unexpected(parse_error::error);
  427|  2.47k|        }
  428|  2.47k|        return ranges::next(ranges::begin(range), str.size());
  429|  2.47k|    }
  430|  2.47k|    else {
  431|  2.47k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.47k|            if (ch < 'A' || ch > 'Z') {
  433|  2.47k|                return ch;
  434|  2.47k|            }
  435|  2.47k|            return static_cast<char_type>(ch +
  436|  2.47k|                                          static_cast<char_type>('a' - 'A'));
  437|  2.47k|        };
  438|       |
  439|  2.47k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.47k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.47k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.47k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 158, False: 2.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    158|    }                                                  \
  |  |  |  |   70|  2.47k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  2.31k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  2.31k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  2.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.31k, False: 0]
  |  |  ------------------
  ------------------
  443|  2.31k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  2.31k|                    return ascii_tolower(a) ==
  445|  2.31k|                           static_cast<detail::char_t<Range>>(b);
  446|  2.31k|                }))) {
  447|  2.31k|            return unexpected(parse_error::error);
  448|  2.31k|        }
  449|       |
  450|      0|        return it;
  451|  2.31k|    }
  452|  2.47k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__117basic_string_viewIcNSR_11char_traitsIcEEEEENKUlwE_clEw:
  431|  2.31k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.31k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 8, False: 2.30k]
  |  Branch (432:29): [True: 2.30k, False: 0]
  ------------------
  433|  2.31k|                return ch;
  434|  2.31k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  2.31k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NDTcl4implISM_EEE4typeE:
  331|    500|{
  332|    500|    auto it = read_code_unit(range);
  333|    500|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 500]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|    500|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 500, False: 0]
  |  |  ------------------
  ------------------
  338|    500|                     static_cast<detail::char_t<Range>>(ch))) {
  339|    500|        return unexpected(parse_error::error);
  340|    500|    }
  341|       |
  342|      0|    return *it;
  343|    500|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS1_12function_refIFbNDTcl4implISM_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
  158|    760|{
  159|    760|    auto it = read_while_code_unit(range, pred);
  160|    760|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 760, False: 0]
  ------------------
  161|    760|        return unexpected(parse_error::error);
  162|    760|    }
  163|      0|    return it;
  164|    760|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
  138|  1.00k|{
  139|  1.00k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|  1.00k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
  130|  1.00k|{
  131|  1.00k|    return ranges::find_if(range, pred);
  132|  1.00k|}
_ZN3scn2v24impl23read_matching_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NDTcl4implISG_EEE4typeE:
  331|    524|{
  332|    524|    auto it = read_code_unit(range);
  333|    524|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    524|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 524]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|    524|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|    524|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 524, False: 0]
  |  |  ------------------
  ------------------
  338|    524|                     static_cast<detail::char_t<Range>>(ch))) {
  339|    524|        return unexpected(parse_error::error);
  340|    524|    }
  341|       |
  342|      0|    return *it;
  343|    524|}
_ZN3scn2v24impl20read_matching_stringIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewINDTcl4implISG_EEE4typeENSL_11char_traitsISO_EEEE:
  362|     16|{
  363|     16|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|      6|                    .transform_error(make_eof_parse_error));
  365|       |
  366|      6|    auto sv =
  367|      6|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  368|      6|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  369|      6|        return unexpected(parse_error::error);
  370|      6|    }
  371|      0|    return it;
  372|      6|}
_ZN3scn2v24impl28read_matching_string_classicIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEE:
  378|    464|{
  379|    464|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|    464|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    464|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    464|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    464|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 70, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     70|    }                                                  \
  |  |  |  |   70|    464|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  380|    394|                    .transform_error(make_eof_parse_error));
  381|       |
  382|    394|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (382:19): [Folded - Ignored]
  ------------------
  383|    394|        auto sv =
  384|    394|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  385|    394|        if (SCN_UNLIKELY(sv.view() != str)) {
  386|    394|            return unexpected(parse_error::error);
  387|    394|        }
  388|    394|        return it;
  389|    394|    }
  390|    394|    else {
  391|    394|        auto range_it = ranges::begin(range);
  392|    394|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (392:28): [True: 394, False: 0]
  ------------------
  393|    394|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  153|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 394, False: 0]
  |  |  ------------------
  ------------------
  394|    394|                             static_cast<detail::char_t<Range>>(str[i]))) {
  395|    394|                return unexpected(parse_error::error);
  396|    394|            }
  397|    394|        }
  398|      0|        return it;
  399|    394|    }
  400|    394|}
_ZN3scn2v24impl20read_matching_stringIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewINDTcl4implISE_EEE4typeENSJ_11char_traitsISM_EEEE:
  362|     20|{
  363|     20|    SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|     18|                    .transform_error(make_eof_parse_error));
  365|       |
  366|     18|    auto sv =
  367|     18|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), it});
  368|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
  369|     18|        return unexpected(parse_error::error);
  370|     18|    }
  371|      0|    return it;
  372|     18|}
_ZN3scn2v24impl21read_while1_code_unitIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEE:
  158|    242|{
  159|    242|    auto it = read_while_code_unit(range, pred);
  160|    242|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 242, False: 0]
  ------------------
  161|    242|        return unexpected(parse_error::error);
  162|    242|    }
  163|      0|    return it;
  164|    242|}
_ZN3scn2v24impl24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
  269|    696|{
  270|    696|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (270:19): [Folded - Ignored]
  |  Branch (270:19): [Folded - Ignored]
  ------------------
  271|    696|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (271:19): [Folded - Ignored]
  ------------------
  272|    696|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (272:19): [Folded - Ignored]
  ------------------
  273|    696|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  274|    696|        auto it = find_classic_space_narrow_fast(buf.view());
  275|    696|        return ranges::next(ranges::begin(range),
  276|    696|                            ranges::distance(buf.view().begin(), it));
  277|    696|    }
  278|    696|    else {
  279|    696|        auto it = ranges::begin(range);
  280|       |
  281|    696|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (281:23): [Folded - Ignored]
  ------------------
  282|    696|            auto seg = get_contiguous_beginning(range);
  283|    696|            if (auto seg_it = find_classic_space_narrow_fast(seg);
  284|    696|                seg_it != seg.end()) {
  285|    696|                return ranges_polyfill::batch_next(
  286|    696|                    it, ranges::distance(seg.begin(), seg_it));
  287|    696|            }
  288|    696|            ranges_polyfill::batch_next(it, seg.size());
  289|    696|        }
  290|       |
  291|    696|        return read_until_code_point(
  292|    696|            ranges::subrange{it, ranges::end(range)},
  293|    696|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  294|    696|    }
  295|    696|}
_ZN3scn2v24impl21read_until_code_pointIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_NS1_12function_refIFbDiESP_EE:
  230|    696|{
  231|    696|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|    696|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|    696|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|    696|    }
  235|    696|    else {
  236|    696|        auto it = ranges::begin(range);
  237|    696|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|    696|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|    696|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 696]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  11.9k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 11.3k, False: 606]
  ------------------
  246|  11.3k|            const auto [iter, value] =
  247|  11.3k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  11.3k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  11.3k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 90, False: 11.2k]
  ------------------
  250|     90|                return it;
  251|     90|            }
  252|  11.2k|            it = iter;
  253|  11.2k|        }
  254|       |
  255|    606|        return it;
  256|    696|    }
  257|    696|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|  1.01k|{
  178|  1.01k|    static_assert(ranges::contiguous_range<Range> &&
  179|  1.01k|                  ranges::sized_range<Range>);
  180|       |
  181|  1.01k|    std::array<char32_t, 16> cp_buf{};
  182|  1.01k|    std::array<uint8_t, 16> idx_buf{};
  183|  1.01k|    auto it = ranges::begin(range);
  184|  1.01k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 0, False: 1.01k]
  ------------------
  185|      0|        auto chunk_begin = it;
  186|      0|        size_t code_point_count = 0;
  187|      0|        uint8_t code_unit_idx = 0;
  188|      0|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 0, False: 0]
  |  Branch (188:52): [True: 0, False: 0]
  ------------------
  189|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 0, False: 0]
  ------------------
  190|      0|                idx_buf[code_point_count] = code_unit_idx;
  191|      0|                ++code_point_count;
  192|      0|            }
  193|      0|            ++it;
  194|      0|            ++code_unit_idx;
  195|      0|        }
  196|       |
  197|      0|        auto input = detail::make_string_view_from_pointers(
  198|      0|            detail::to_address(chunk_begin), detail::to_address(it));
  199|      0|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|      0|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|      0|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|      0|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 0, False: 0]
  ------------------
  217|      0|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 0, False: 0]
  ------------------
  218|      0|                return chunk_begin + idx_buf[i];
  219|      0|            }
  220|      0|        }
  221|      0|    }
  222|       |
  223|  1.01k|    return it;
  224|  1.01k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISL_EEE4typeEEEEEOSL_:
   41|  26.9k|{
   42|  26.9k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|  26.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|  26.9k|    auto it = ranges::begin(range);
   45|  26.9k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|  26.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.9k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|  26.9k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 26.9k, False: 0]
  ------------------
   59|  26.9k|        ++it;
   60|  26.9k|        return {it, make_contiguous_buffer(
   61|  26.9k|                        ranges::subrange{ranges::begin(range), it})};
   62|  26.9k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|  26.9k|}
_ZZN3scn2v24impl24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_ENKUlDiE_clEDi:
  293|  11.3k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_until_code_pointIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  230|    318|{
  231|    318|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|    318|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|    318|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|    318|    }
  235|    318|    else {
  236|    318|        auto it = ranges::begin(range);
  237|    318|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|    318|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|    318|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 0, False: 318]
  ------------------
  241|      0|            return ranges_polyfill::batch_next(
  242|      0|                it, ranges::distance(seg.begin(), seg_it));
  243|      0|        }
  244|       |
  245|  15.6k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 15.6k, False: 54]
  ------------------
  246|  15.6k|            const auto [iter, value] =
  247|  15.6k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  15.6k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  15.6k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 264, False: 15.3k]
  ------------------
  250|    264|                return it;
  251|    264|            }
  252|  15.3k|            it = iter;
  253|  15.3k|        }
  254|       |
  255|     54|        return it;
  256|    318|    }
  257|    318|}
_ZN3scn2v24impl21read_while_code_pointIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbDiESK_EE:
  263|    186|{
  264|    186|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|    186|}
_ZN3scn2v24impl20read_until_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
  130|    138|{
  131|    138|    return ranges::find_if(range, pred);
  132|    138|}
_ZN3scn2v24impl20read_while_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
  138|     60|{
  139|     60|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|     60|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|     60|}
_ZN3scn2v24impl21read_until_code_pointIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  230|  2.30k|{
  231|  2.30k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  2.30k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  2.30k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  2.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  2.30k|    }
  235|  2.30k|    else {
  236|  2.30k|        auto it = ranges::begin(range);
  237|  2.30k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  2.30k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  2.30k|            seg_it != seg.end()) {
  241|  2.30k|            return ranges_polyfill::batch_next(
  242|  2.30k|                it, ranges::distance(seg.begin(), seg_it));
  243|  2.30k|        }
  244|       |
  245|  2.30k|        while (it != ranges::end(range)) {
  246|  2.30k|            const auto [iter, value] =
  247|  2.30k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  2.30k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  2.30k|            if (pred(cp)) {
  250|  2.30k|                return it;
  251|  2.30k|            }
  252|  2.30k|            it = iter;
  253|  2.30k|        }
  254|       |
  255|  2.30k|        return it;
  256|  2.30k|    }
  257|  2.30k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  177|  2.30k|{
  178|  2.30k|    static_assert(ranges::contiguous_range<Range> &&
  179|  2.30k|                  ranges::sized_range<Range>);
  180|       |
  181|  2.30k|    std::array<char32_t, 16> cp_buf{};
  182|  2.30k|    std::array<uint8_t, 16> idx_buf{};
  183|  2.30k|    auto it = ranges::begin(range);
  184|  35.5k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 35.4k, False: 144]
  ------------------
  185|  35.4k|        auto chunk_begin = it;
  186|  35.4k|        size_t code_point_count = 0;
  187|  35.4k|        uint8_t code_unit_idx = 0;
  188|   593k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 559k, False: 34.2k]
  |  Branch (188:52): [True: 557k, False: 1.21k]
  ------------------
  189|   557k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 557k, False: 0]
  ------------------
  190|   557k|                idx_buf[code_point_count] = code_unit_idx;
  191|   557k|                ++code_point_count;
  192|   557k|            }
  193|   557k|            ++it;
  194|   557k|            ++code_unit_idx;
  195|   557k|        }
  196|       |
  197|  35.4k|        auto input = detail::make_string_view_from_pointers(
  198|  35.4k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  35.4k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  35.4k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  35.4k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  35.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 35.4k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   574k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 541k, False: 33.2k]
  ------------------
  217|   541k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 2.16k, False: 539k]
  ------------------
  218|  2.16k|                return chunk_begin + idx_buf[i];
  219|  2.16k|            }
  220|   541k|        }
  221|  35.4k|    }
  222|       |
  223|    144|    return it;
  224|  2.30k|}
_ZN3scn2v24impl21read_while_code_pointIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_NS1_12function_refIFbDiESI_EE:
  263|  1.93k|{
  264|  1.93k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  1.93k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  12.2k|{
   36|  12.2k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  12.2k|    return ranges::next(ranges::begin(range));
   41|  12.2k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  2.74k|{
   48|  2.74k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  2.74k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  2.74k|        const auto sz = ranges::ssize(range);
   52|  2.74k|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 166, False: 2.57k]
  ------------------
   53|    166|            return unexpected(eof_error::eof);
   54|    166|        }
   55|       |
   56|  2.57k|        return ranges::next(ranges::begin(range), count);
   57|  2.74k|    }
   58|  2.74k|    else {
   59|  2.74k|        auto it = ranges::begin(range);
   60|  2.74k|        if (guaranteed_minimum_size(range) >= count) {
   61|  2.74k|            return ranges_polyfill::batch_next(it, count);
   62|  2.74k|        }
   63|       |
   64|  2.74k|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  2.74k|             ++i, (void)++it) {
   66|  2.74k|            if (it == ranges::end(range)) {
   67|  2.74k|                return unexpected(eof_error::eof);
   68|  2.74k|            }
   69|  2.74k|        }
   70|       |
   71|  2.74k|        return it;
   72|  2.74k|    }
   73|  2.74k|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.32k|{
   30|  1.32k|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.32k|}
_ZN3scn2v24impl14read_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
   35|  2.12k|{
   36|  2.12k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.12k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  2.12k|    return ranges::next(ranges::begin(range));
   41|  2.12k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEEEOSD_NSt3__19enable_ifIX5rangeISD_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeE:
   47|  13.6k|{
   48|  13.6k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  13.6k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  13.6k|        const auto sz = ranges::ssize(range);
   52|  13.6k|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 218, False: 13.4k]
  ------------------
   53|    218|            return unexpected(eof_error::eof);
   54|    218|        }
   55|       |
   56|  13.4k|        return ranges::next(ranges::begin(range), count);
   57|  13.6k|    }
   58|  13.6k|    else {
   59|  13.6k|        auto it = ranges::begin(range);
   60|  13.6k|        if (guaranteed_minimum_size(range) >= count) {
   61|  13.6k|            return ranges_polyfill::batch_next(it, count);
   62|  13.6k|        }
   63|       |
   64|  13.6k|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  13.6k|             ++i, (void)++it) {
   66|  13.6k|            if (it == ranges::end(range)) {
   67|  13.6k|                return unexpected(eof_error::eof);
   68|  13.6k|            }
   69|  13.6k|        }
   70|       |
   71|  13.6k|        return it;
   72|  13.6k|    }
   73|  13.6k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__19enable_ifIX5rangeISM_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSM_EEEEE15difference_typeEE4typeE:
   47|  2.98k|{
   48|  2.98k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  2.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  2.98k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  2.98k|        const auto sz = ranges::ssize(range);
   52|  2.98k|        if (sz < count) {
   53|  2.98k|            return unexpected(eof_error::eof);
   54|  2.98k|        }
   55|       |
   56|  2.98k|        return ranges::next(ranges::begin(range), count);
   57|  2.98k|    }
   58|  2.98k|    else {
   59|  2.98k|        auto it = ranges::begin(range);
   60|  2.98k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 0, False: 2.98k]
  ------------------
   61|      0|            return ranges_polyfill::batch_next(it, count);
   62|      0|        }
   63|       |
   64|  9.37k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 6.52k, False: 2.84k]
  ------------------
   65|  6.52k|             ++i, (void)++it) {
   66|  6.52k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 134, False: 6.39k]
  ------------------
   67|    134|                return unexpected(eof_error::eof);
   68|    134|            }
   69|  6.52k|        }
   70|       |
   71|  2.84k|        return it;
   72|  2.98k|    }
   73|  2.98k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   35|    600|{
   36|    600|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 600]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|    600|    return ranges::next(ranges::begin(range));
   41|    600|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__19enable_ifIX5rangeISG_EENS5_20incrementable_traitsIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEEE15difference_typeEE4typeE:
   47|    584|{
   48|    584|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|    584|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    584|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|    584|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|    584|        const auto sz = ranges::ssize(range);
   52|    584|        if (sz < count) {
   53|    584|            return unexpected(eof_error::eof);
   54|    584|        }
   55|       |
   56|    584|        return ranges::next(ranges::begin(range), count);
   57|    584|    }
   58|    584|    else {
   59|    584|        auto it = ranges::begin(range);
   60|    584|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 0, False: 584]
  ------------------
   61|      0|            return ranges_polyfill::batch_next(it, count);
   62|      0|        }
   63|       |
   64|  3.08k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 2.55k, False: 526]
  ------------------
   65|  2.55k|             ++i, (void)++it) {
   66|  2.55k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 58, False: 2.49k]
  ------------------
   67|     58|                return unexpected(eof_error::eof);
   68|     58|            }
   69|  2.55k|        }
   70|       |
   71|    526|        return it;
   72|    584|    }
   73|    584|}
_ZN3scn2v24impl8read_allIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
   29|    312|{
   30|    312|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|    312|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  10.3k|{
   36|  10.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 10.3k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  10.3k|    return ranges::next(ranges::begin(range));
   41|  10.3k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  13.6k|{
   48|  13.6k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  13.6k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  13.6k|        const auto sz = ranges::ssize(range);
   52|  13.6k|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 278, False: 13.4k]
  ------------------
   53|    278|            return unexpected(eof_error::eof);
   54|    278|        }
   55|       |
   56|  13.4k|        return ranges::next(ranges::begin(range), count);
   57|  13.6k|    }
   58|  13.6k|    else {
   59|  13.6k|        auto it = ranges::begin(range);
   60|  13.6k|        if (guaranteed_minimum_size(range) >= count) {
   61|  13.6k|            return ranges_polyfill::batch_next(it, count);
   62|  13.6k|        }
   63|       |
   64|  13.6k|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  13.6k|             ++i, (void)++it) {
   66|  13.6k|            if (it == ranges::end(range)) {
   67|  13.6k|                return unexpected(eof_error::eof);
   68|  13.6k|            }
   69|  13.6k|        }
   70|       |
   71|  13.6k|        return it;
   72|  13.6k|    }
   73|  13.6k|}
_ZN3scn2v24impl8read_allIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISD_EEE4typeEOSD_:
   29|  1.10k|{
   30|  1.10k|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|  1.10k|}
_ZN3scn2v24impl14read_code_unitIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
   35|  1.77k|{
   36|  1.77k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.77k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  1.77k|    return ranges::next(ranges::begin(range));
   41|  1.77k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NSt3__19enable_ifIX5rangeISM_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSM_EEEEE15difference_typeEE4typeE:
   47|  2.47k|{
   48|  2.47k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  2.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  2.47k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  2.47k|        const auto sz = ranges::ssize(range);
   52|  2.47k|        if (sz < count) {
   53|  2.47k|            return unexpected(eof_error::eof);
   54|  2.47k|        }
   55|       |
   56|  2.47k|        return ranges::next(ranges::begin(range), count);
   57|  2.47k|    }
   58|  2.47k|    else {
   59|  2.47k|        auto it = ranges::begin(range);
   60|  2.47k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 0, False: 2.47k]
  ------------------
   61|      0|            return ranges_polyfill::batch_next(it, count);
   62|      0|        }
   63|       |
   64|  7.72k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 5.40k, False: 2.31k]
  ------------------
   65|  5.40k|             ++i, (void)++it) {
   66|  5.40k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 158, False: 5.25k]
  ------------------
   67|    158|                return unexpected(eof_error::eof);
   68|    158|            }
   69|  5.40k|        }
   70|       |
   71|  2.31k|        return it;
   72|  2.47k|    }
   73|  2.47k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   35|    500|{
   36|    500|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 500]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|    500|    return ranges::next(ranges::begin(range));
   41|    500|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__19enable_ifIX5rangeISG_EENS5_20incrementable_traitsIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEEE15difference_typeEE4typeE:
   47|    480|{
   48|    480|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|    480|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    480|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|    480|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|    480|        const auto sz = ranges::ssize(range);
   52|    480|        if (sz < count) {
   53|    480|            return unexpected(eof_error::eof);
   54|    480|        }
   55|       |
   56|    480|        return ranges::next(ranges::begin(range), count);
   57|    480|    }
   58|    480|    else {
   59|    480|        auto it = ranges::begin(range);
   60|    480|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 0, False: 480]
  ------------------
   61|      0|            return ranges_polyfill::batch_next(it, count);
   62|      0|        }
   63|       |
   64|  2.46k|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 2.06k, False: 400]
  ------------------
   65|  2.06k|             ++i, (void)++it) {
   66|  2.06k|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 80, False: 1.98k]
  ------------------
   67|     80|                return unexpected(eof_error::eof);
   68|     80|            }
   69|  2.06k|        }
   70|       |
   71|    400|        return it;
   72|    480|    }
   73|    480|}
_ZN3scn2v24impl8read_allIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_:
   29|    252|{
   30|    252|    return ranges::next(ranges::begin(range), ranges::end(range));
   31|    252|}

_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginISA_Li0EEEDav:
  485|  14.2k|    {
  486|  14.2k|        return counted_width_iterator{ranges::begin(m_base),
  487|  14.2k|                                      ranges::end(m_base), m_count};
  488|  14.2k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
   53|  14.2k|    {
   54|  14.2k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE3endISA_Li0EEEDav:
  500|  53.5k|    {
  501|  53.5k|        return sentinel<true>{ranges::end(m_base)};
  502|  53.5k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE8sentinelILb1EEC2ES8_:
  415|  53.5k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
  106|   362k|    {
  107|   362k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|   362k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   362k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|   362k|        _increment_current();
  109|   362k|        return *this;
  110|   362k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
  360|   362k|    {
  361|   362k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (361:13): [True: 107k, False: 255k]
  ------------------
  362|   107k|            auto cplen = _get_cp_length_at_current();
  363|   107k|            m_multibyte_left = cplen - 1;
  364|   107k|            m_count -= _get_width_at_current_cp_start(cplen);
  365|   107k|        }
  366|   255k|        else {
  367|   255k|            --m_multibyte_left;
  368|   255k|        }
  369|       |
  370|   362k|        ++m_current;
  371|   362k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
  327|   107k|    {
  328|   107k|        return static_cast<difference_type>(
  329|   107k|            code_point_length_by_starting_code_unit(*m_current));
  330|   107k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
  333|   107k|    {
  334|   107k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.26k, False: 105k]
  |  |  ------------------
  ------------------
  335|  1.26k|            return 0;
  336|  1.26k|        }
  337|       |
  338|   105k|        if (cplen == 1) {
  ------------------
  |  Branch (338:13): [True: 92.1k, False: 13.6k]
  ------------------
  339|  92.1k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  92.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  92.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  340|  92.1k|            auto cp = static_cast<char32_t>(*m_current);
  341|  92.1k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
  342|  92.1k|        }
  343|       |
  344|  13.6k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
  345|  13.6k|                                           cplen);
  346|  13.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  13.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218, False: 13.4k]
  |  |  ------------------
  ------------------
  347|    218|            return 0;
  348|    218|        }
  349|       |
  350|  13.4k|        auto cp_view = make_contiguous_buffer(ranges::subrange{m_current, *r});
  351|  13.4k|        if (SCN_UNLIKELY(!validate_unicode(cp_view.view()))) {
  ------------------
  |  |  153|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.37k, False: 9.06k]
  |  |  ------------------
  ------------------
  352|  4.37k|            return 0;
  353|  4.37k|        }
  354|       |
  355|  9.06k|        return static_cast<difference_type>(
  356|  9.06k|            calculate_valid_text_width(cp_view.view()));
  357|  13.4k|    }
_ZN3scn2v24impl27counted_width_iterator_implneIPKcS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  202|   265k|    {
  203|   265k|        return !(a == b);
  204|   265k|    }
_ZN3scn2v24impl27counted_width_iterator_impleqIPKcS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  194|   266k|    {
  195|   266k|        return a.m_current == b.m_current;
  196|   266k|    }
_ZN3scn2v24impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  435|   215k|        {
  436|   215k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (436:21): [True: 794, False: 214k]
  |  Branch (436:39): [True: 504, False: 290]
  ------------------
  437|   215k|                   y.base() == x.m_end;
  ------------------
  |  Branch (437:20): [True: 1.27k, False: 213k]
  ------------------
  438|   215k|        }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
   88|   215k|    {
   89|   215k|        return m_count;
   90|   215k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
   92|    794|    {
   93|    794|        return m_multibyte_left;
   94|    794|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
   97|   350k|    {
   98|   350k|        return *m_current;
   99|   350k|    }
_ZN3scn2v24implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  446|   202k|        {
  447|   202k|            return !(y == x);
  448|   202k|        }
_ZNK3scn2v24impl14_take_width_fnclIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEERKiEEDTtlNS1_15take_width_viewEscDtfp_Efp_scDtfp0_Efp0_EEOT_OT0_:
  546|  4.20k|    {
  547|  4.20k|        return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                      return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  548|  4.20k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2ESA_l:
  466|  4.20k|    {
  467|  4.20k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
   84|   217k|    {
   85|   217k|        return m_current;
   86|   217k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginISA_Li0EEEDav:
  485|  11.4k|    {
  486|  11.4k|        return counted_width_iterator{ranges::begin(m_base),
  487|  11.4k|                                      ranges::end(m_base), m_count};
  488|  11.4k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
   53|  11.4k|    {
   54|  11.4k|    }
_ZNK3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE3endISA_Li0EEEDav:
  500|  38.8k|    {
  501|  38.8k|        return sentinel<true>{ranges::end(m_base)};
  502|  38.8k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE8sentinelILb1EEC2ES8_:
  415|  38.8k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
  106|  97.3k|    {
  107|  97.3k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|  97.3k|        _increment_current();
  109|  97.3k|        return *this;
  110|  97.3k|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
  360|  97.3k|    {
  361|  97.3k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (361:13): [True: 97.3k, False: 0]
  ------------------
  362|  97.3k|            auto cplen = _get_cp_length_at_current();
  363|  97.3k|            m_multibyte_left = cplen - 1;
  364|  97.3k|            m_count -= _get_width_at_current_cp_start(cplen);
  365|  97.3k|        }
  366|      0|        else {
  367|      0|            --m_multibyte_left;
  368|      0|        }
  369|       |
  370|  97.3k|        ++m_current;
  371|  97.3k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
  327|  97.3k|    {
  328|  97.3k|        return static_cast<difference_type>(
  329|  97.3k|            code_point_length_by_starting_code_unit(*m_current));
  330|  97.3k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
  333|  97.3k|    {
  334|  97.3k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  153|  97.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 97.3k]
  |  |  ------------------
  ------------------
  335|      0|            return 0;
  336|      0|        }
  337|       |
  338|  97.3k|        if (cplen == 1) {
  ------------------
  |  Branch (338:13): [True: 97.3k, False: 0]
  ------------------
  339|  97.3k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  242|  97.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  97.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  340|  97.3k|            auto cp = static_cast<char32_t>(*m_current);
  341|  97.3k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
  342|  97.3k|        }
  343|       |
  344|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
  345|      0|                                           cplen);
  346|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  347|      0|            return 0;
  348|      0|        }
  349|       |
  350|      0|        auto cp_view = make_contiguous_buffer(ranges::subrange{m_current, *r});
  351|      0|        if (SCN_UNLIKELY(!validate_unicode(cp_view.view()))) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return 0;
  353|      0|        }
  354|       |
  355|      0|        return static_cast<difference_type>(
  356|      0|            calculate_valid_text_width(cp_view.view()));
  357|      0|    }
_ZN3scn2v24impl27counted_width_iterator_implneIPKwS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  202|  81.4k|    {
  203|  81.4k|        return !(a == b);
  204|  81.4k|    }
_ZN3scn2v24impl27counted_width_iterator_impleqIPKwS5_EENSt3__19enable_ifIXsr10ranges_stdE11common_withIT_S5_EEbE4typeERKNS2_22counted_width_iteratorIS5_S5_EERKNSB_IS8_T0_EE:
  194|  82.8k|    {
  195|  82.8k|        return a.m_current == b.m_current;
  196|  82.8k|    }
_ZN3scn2v24impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  435|  76.2k|        {
  436|  76.2k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (436:21): [True: 534, False: 75.6k]
  |  Branch (436:39): [True: 534, False: 0]
  ------------------
  437|  76.2k|                   y.base() == x.m_end;
  ------------------
  |  Branch (437:20): [True: 676, False: 74.9k]
  ------------------
  438|  76.2k|        }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
   88|  76.2k|    {
   89|  76.2k|        return m_count;
   90|  76.2k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
   92|    534|    {
   93|    534|        return m_multibyte_left;
   94|    534|    }
_ZN3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
   97|  87.8k|    {
   98|  87.8k|        return *m_current;
   99|  87.8k|    }
_ZN3scn2v24implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEEE8sentinelILb1EEE:
  446|  65.6k|        {
  447|  65.6k|            return !(y == x);
  448|  65.6k|        }
_ZNK3scn2v24impl14_take_width_fnclIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEERKiEEDTtlNS1_15take_width_viewEscDtfp_Efp_scDtfp0_Efp0_EEOT_OT0_:
  546|  3.15k|    {
  547|  3.15k|        return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  3.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                      return take_width_view{SCN_FWD(r), SCN_FWD(n)};
  ------------------
  |  |  248|  3.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  548|  3.15k|    }
_ZN3scn2v24impl15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2ESA_l:
  466|  3.15k|    {
  467|  3.15k|    }
_ZNK3scn2v24impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
   84|  78.0k|    {
   85|  78.0k|        return m_current;
   86|  78.0k|    }

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|   113k|{
   33|   113k|    static_assert(std::is_same_v<Locale, std::locale>);
   34|   113k|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|    194|{
   39|    194|    static_assert(std::is_same_v<Locale, std::locale>);
   40|    194|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 97, False: 97]
  ------------------
   41|    194|                    : std::locale{};
   42|    194|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|     82|    {
  112|     82|        auto stdloc = loc.get<std::locale>();
  113|     82|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|     82|        grouping = numpunct.grouping();
  115|     82|        thousands_sep =
  116|     82|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 82]
  ------------------
  117|     82|        decimal_point = numpunct.decimal_point();
  118|     82|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|    102|{
   49|    102|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 102, False: 0]
  ------------------
   50|    102|        return std::use_facet<Facet>(stdloc);
   51|    102|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|    102|}
_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2Ev:
  102|  1.65k|    localized_number_formatting_options() = default;
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|     74|    {
  112|     74|        auto stdloc = loc.get<std::locale>();
  113|     74|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|     74|        grouping = numpunct.grouping();
  115|     74|        thousands_sep =
  116|     74|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 74]
  ------------------
  117|     74|        decimal_point = numpunct.decimal_point();
  118|     74|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|     92|{
   49|     92|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 92, False: 0]
  ------------------
   50|     92|        return std::use_facet<Facet>(stdloc);
   51|     92|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|     92|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2Ev:
  102|  1.38k|    localized_number_formatting_options() = default;

_ZNK3scn2v24impl20reader_impl_for_boolIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RbNS0_6detail10locale_refE:
  188|  1.12k|    {
  189|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  190|       |
  191|  1.12k|        return bool_reader<CharT>{}.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|  1.12k|    }
_ZN3scn2v24impl16bool_reader_baseC2Ev:
   30|  2.02k|    constexpr bool_reader_base() = default;
_ZNK3scn2v24impl16bool_reader_base12read_classicIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   37|  1.12k|    {
   38|  1.12k|        scan_error err{scan_error::invalid_scanned_value,
   39|  1.12k|                       "Failed to read boolean"};
   40|       |
   41|  1.12k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 1.12k, False: 0]
  ------------------
   42|  1.12k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 1.12k]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|  1.12k|            else {
   46|  1.12k|                err = r.error();
   47|  1.12k|            }
   48|  1.12k|        }
   49|       |
   50|  1.12k|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 1.12k, False: 0]
  ------------------
   51|  1.12k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 1.12k]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|  1.12k|            else {
   55|  1.12k|                err = r.error();
   56|  1.12k|            }
   57|  1.12k|        }
   58|       |
   59|  1.12k|        return unexpected(err);
   60|  1.12k|    }
_ZNK3scn2v24impl16bool_reader_base12read_numericIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   67|  1.38k|    {
   68|  1.38k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (68:18): [True: 0, False: 1.38k]
  ------------------
   69|      0|            value = false;
   70|      0|            return *r;
   71|      0|        }
   72|  1.38k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (72:18): [True: 0, False: 1.38k]
  ------------------
   73|      0|            value = true;
   74|      0|            return *r;
   75|      0|        }
   76|       |
   77|  1.38k|        return unexpected_scan_error(
   78|  1.38k|            scan_error::invalid_scanned_value,
   79|  1.38k|            "Failed to read numeric boolean value: No match");
   80|  1.38k|    }
_ZNK3scn2v24impl16bool_reader_base20read_textual_classicIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   86|  1.36k|    {
   87|  1.36k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (87:18): [True: 0, False: 1.36k]
  ------------------
   88|      0|            value = true;
   89|      0|            return *r;
   90|      0|        }
   91|  1.36k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (91:18): [True: 0, False: 1.36k]
  ------------------
   92|      0|            value = false;
   93|      0|            return *r;
   94|      0|        }
   95|       |
   96|  1.36k|        return unexpected_scan_error(
   97|  1.36k|            scan_error::invalid_scanned_value,
   98|  1.36k|            "Failed to read textual boolean value: No match");
   99|  1.36k|    }
_ZN3scn2v24impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  181|  7.36k|    {
  182|  7.36k|        detail::check_bool_type_specs(specs, eh);
  183|  7.36k|    }
_ZNK3scn2v24impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERbNSM_10locale_refE:
  200|    318|    {
  201|    318|        const auto rd = bool_reader<CharT>{get_options(specs)};
  202|       |
  203|    318|#if !SCN_DISABLE_LOCALE
  204|    318|        if (specs.localized) {
  ------------------
  |  Branch (204:13): [True: 12, False: 306]
  ------------------
  205|     12|            return rd.read_localized(SCN_FWD(range), loc, value);
  ------------------
  |  |  248|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|     12|        }
  207|    306|#endif
  208|       |
  209|    306|        return rd.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  210|    318|    }
_ZN3scn2v24impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
  213|    640|    {
  214|    640|        SCN_GCC_COMPAT_PUSH
  215|    640|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  216|       |
  217|    640|        switch (specs.type) {
  218|     68|            case detail::presentation_type::string:
  ------------------
  |  Branch (218:13): [True: 68, False: 572]
  ------------------
  219|     68|                return bool_reader_base::allow_text;
  220|       |
  221|     34|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (221:13): [True: 34, False: 606]
  ------------------
  222|     62|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (222:13): [True: 28, False: 612]
  ------------------
  223|     74|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (223:13): [True: 12, False: 628]
  ------------------
  224|     88|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (224:13): [True: 14, False: 626]
  ------------------
  225|     98|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (225:13): [True: 10, False: 630]
  ------------------
  226|    104|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (226:13): [True: 6, False: 634]
  ------------------
  227|    104|                return bool_reader_base::allow_numeric;
  228|       |
  229|    468|            default:
  ------------------
  |  Branch (229:13): [True: 468, False: 172]
  ------------------
  230|    468|                return bool_reader_base::allow_text |
  231|    468|                       bool_reader_base::allow_numeric;
  232|    640|        }
  233|       |
  234|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  235|    640|    }
_ZN3scn2v24impl16bool_reader_baseC2Ej:
   31|  1.25k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZNK3scn2v24impl11bool_readerIcE14read_localizedINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS0_6detail10locale_refERb:
  112|     12|    {
  113|     12|        scan_error err{scan_error::invalid_scanned_value,
  114|     12|                       "Failed to read boolean"};
  115|       |
  116|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (116:13): [True: 10, False: 2]
  ------------------
  117|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (117:22): [True: 0, False: 10]
  ------------------
  118|      0|                return *r;
  119|      0|            }
  120|     10|            else {
  121|     10|                err = r.error();
  122|     10|            }
  123|     10|        }
  124|       |
  125|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (125:13): [True: 8, False: 4]
  ------------------
  126|      8|            auto stdloc = loc.get<std::locale>();
  127|      8|            const auto& numpunct =
  128|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
  129|      8|            const auto truename = numpunct.truename();
  130|      8|            const auto falsename = numpunct.falsename();
  131|       |
  132|      8|            if (auto r =
  ------------------
  |  Branch (132:22): [True: 0, False: 8]
  ------------------
  133|      8|                    read_textual_custom(range, value, truename, falsename)) {
  134|      0|                return *r;
  135|      0|            }
  136|      8|            else {
  137|      8|                err = r.error();
  138|      8|            }
  139|      8|        }
  140|       |
  141|     12|        return unexpected(err);
  142|     12|    }
_ZNK3scn2v24impl16bool_reader_base12read_numericIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   67|    312|    {
   68|    312|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (68:18): [True: 0, False: 312]
  ------------------
   69|      0|            value = false;
   70|      0|            return *r;
   71|      0|        }
   72|    312|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (72:18): [True: 0, False: 312]
  ------------------
   73|      0|            value = true;
   74|      0|            return *r;
   75|      0|        }
   76|       |
   77|    312|        return unexpected_scan_error(
   78|    312|            scan_error::invalid_scanned_value,
   79|    312|            "Failed to read numeric boolean value: No match");
   80|    312|    }
_ZNK3scn2v24impl11bool_readerIcE19read_textual_customIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RbNSt3__117basic_string_viewIcNSO_11char_traitsIcEEEESS_:
  152|      8|    {
  153|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
  154|      8|        const auto shorter = std::pair{
  155|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (155:13): [True: 8, False: 0]
  ------------------
  156|      8|        const auto longer = std::pair{
  157|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (157:13): [True: 0, False: 8]
  ------------------
  158|       |
  159|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (159:18): [True: 0, False: 8]
  ------------------
  160|      0|            value = shorter.second;
  161|      0|            return *r;
  162|      0|        }
  163|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (163:18): [True: 0, False: 8]
  ------------------
  164|      0|            value = longer.second;
  165|      0|            return *r;
  166|      0|        }
  167|       |
  168|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  169|      8|                                     "read_textual: No match");
  170|      8|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_Rb:
   37|    306|    {
   38|    306|        scan_error err{scan_error::invalid_scanned_value,
   39|    306|                       "Failed to read boolean"};
   40|       |
   41|    306|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 302, False: 4]
  ------------------
   42|    302|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 302]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    302|            else {
   46|    302|                err = r.error();
   47|    302|            }
   48|    302|        }
   49|       |
   50|    306|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 284, False: 22]
  ------------------
   51|    284|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 284]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    284|            else {
   55|    284|                err = r.error();
   56|    284|            }
   57|    284|        }
   58|       |
   59|    306|        return unexpected(err);
   60|    306|    }
_ZNK3scn2v24impl16bool_reader_base20read_textual_classicIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   86|    284|    {
   87|    284|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (87:18): [True: 0, False: 284]
  ------------------
   88|      0|            value = true;
   89|      0|            return *r;
   90|      0|        }
   91|    284|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (91:18): [True: 0, False: 284]
  ------------------
   92|      0|            value = false;
   93|      0|            return *r;
   94|      0|        }
   95|       |
   96|    284|        return unexpected_scan_error(
   97|    284|            scan_error::invalid_scanned_value,
   98|    284|            "Failed to read textual boolean value: No match");
   99|    284|    }
_ZNK3scn2v24impl20reader_impl_for_boolIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERbNSL_10locale_refE:
  200|    322|    {
  201|    322|        const auto rd = bool_reader<CharT>{get_options(specs)};
  202|       |
  203|    322|#if !SCN_DISABLE_LOCALE
  204|    322|        if (specs.localized) {
  ------------------
  |  Branch (204:13): [True: 26, False: 296]
  ------------------
  205|     26|            return rd.read_localized(SCN_FWD(range), loc, value);
  ------------------
  |  |  248|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|     26|        }
  207|    296|#endif
  208|       |
  209|    296|        return rd.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  210|    322|    }
_ZNK3scn2v24impl11bool_readerIcE14read_localizedIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS0_6detail10locale_refERb:
  112|     26|    {
  113|     26|        scan_error err{scan_error::invalid_scanned_value,
  114|     26|                       "Failed to read boolean"};
  115|       |
  116|     26|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (116:13): [True: 24, False: 2]
  ------------------
  117|     24|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (117:22): [True: 0, False: 24]
  ------------------
  118|      0|                return *r;
  119|      0|            }
  120|     24|            else {
  121|     24|                err = r.error();
  122|     24|            }
  123|     24|        }
  124|       |
  125|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (125:13): [True: 12, False: 14]
  ------------------
  126|     12|            auto stdloc = loc.get<std::locale>();
  127|     12|            const auto& numpunct =
  128|     12|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
  129|     12|            const auto truename = numpunct.truename();
  130|     12|            const auto falsename = numpunct.falsename();
  131|       |
  132|     12|            if (auto r =
  ------------------
  |  Branch (132:22): [True: 0, False: 12]
  ------------------
  133|     12|                    read_textual_custom(range, value, truename, falsename)) {
  134|      0|                return *r;
  135|      0|            }
  136|     12|            else {
  137|     12|                err = r.error();
  138|     12|            }
  139|     12|        }
  140|       |
  141|     26|        return unexpected(err);
  142|     26|    }
_ZNK3scn2v24impl11bool_readerIcE19read_textual_customIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RbNSt3__117basic_string_viewIcNSM_11char_traitsIcEEEESQ_:
  152|     12|    {
  153|     12|        const auto is_truename_shorter = truename.size() <= falsename.size();
  154|     12|        const auto shorter = std::pair{
  155|     12|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (155:13): [True: 12, False: 0]
  ------------------
  156|     12|        const auto longer = std::pair{
  157|     12|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (157:13): [True: 0, False: 12]
  ------------------
  158|       |
  159|     12|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (159:18): [True: 0, False: 12]
  ------------------
  160|      0|            value = shorter.second;
  161|      0|            return *r;
  162|      0|        }
  163|     12|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (163:18): [True: 0, False: 12]
  ------------------
  164|      0|            value = longer.second;
  165|      0|            return *r;
  166|      0|        }
  167|       |
  168|     12|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  169|     12|                                     "read_textual: No match");
  170|     12|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicIRN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   37|    296|    {
   38|    296|        scan_error err{scan_error::invalid_scanned_value,
   39|    296|                       "Failed to read boolean"};
   40|       |
   41|    296|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 236, False: 60]
  ------------------
   42|    236|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 236]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    236|            else {
   46|    236|                err = r.error();
   47|    236|            }
   48|    236|        }
   49|       |
   50|    296|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 232, False: 64]
  ------------------
   51|    232|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 232]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    232|            else {
   55|    232|                err = r.error();
   56|    232|            }
   57|    232|        }
   58|       |
   59|    296|        return unexpected(err);
   60|    296|    }
_ZNK3scn2v24impl20reader_impl_for_boolIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RbNS0_6detail10locale_refE:
  188|    892|    {
  189|    892|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    892|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  190|       |
  191|    892|        return bool_reader<CharT>{}.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  192|    892|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   37|    892|    {
   38|    892|        scan_error err{scan_error::invalid_scanned_value,
   39|    892|                       "Failed to read boolean"};
   40|       |
   41|    892|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 892, False: 0]
  ------------------
   42|    892|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 892]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    892|            else {
   46|    892|                err = r.error();
   47|    892|            }
   48|    892|        }
   49|       |
   50|    892|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 892, False: 0]
  ------------------
   51|    892|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 892]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    892|            else {
   55|    892|                err = r.error();
   56|    892|            }
   57|    892|        }
   58|       |
   59|    892|        return unexpected(err);
   60|    892|    }
_ZNK3scn2v24impl16bool_reader_base12read_numericIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   67|  1.17k|    {
   68|  1.17k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (68:18): [True: 0, False: 1.17k]
  ------------------
   69|      0|            value = false;
   70|      0|            return *r;
   71|      0|        }
   72|  1.17k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (72:18): [True: 0, False: 1.17k]
  ------------------
   73|      0|            value = true;
   74|      0|            return *r;
   75|      0|        }
   76|       |
   77|  1.17k|        return unexpected_scan_error(
   78|  1.17k|            scan_error::invalid_scanned_value,
   79|  1.17k|            "Failed to read numeric boolean value: No match");
   80|  1.17k|    }
_ZNK3scn2v24impl16bool_reader_base20read_textual_classicIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   86|  1.14k|    {
   87|  1.14k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (87:18): [True: 0, False: 1.14k]
  ------------------
   88|      0|            value = true;
   89|      0|            return *r;
   90|      0|        }
   91|  1.14k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (91:18): [True: 0, False: 1.14k]
  ------------------
   92|      0|            value = false;
   93|      0|            return *r;
   94|      0|        }
   95|       |
   96|  1.14k|        return unexpected_scan_error(
   97|  1.14k|            scan_error::invalid_scanned_value,
   98|  1.14k|            "Failed to read textual boolean value: No match");
   99|  1.14k|    }
_ZN3scn2v24impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  181|  5.60k|    {
  182|  5.60k|        detail::check_bool_type_specs(specs, eh);
  183|  5.60k|    }
_ZNK3scn2v24impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERbNSM_10locale_refE:
  200|    266|    {
  201|    266|        const auto rd = bool_reader<CharT>{get_options(specs)};
  202|       |
  203|    266|#if !SCN_DISABLE_LOCALE
  204|    266|        if (specs.localized) {
  ------------------
  |  Branch (204:13): [True: 12, False: 254]
  ------------------
  205|     12|            return rd.read_localized(SCN_FWD(range), loc, value);
  ------------------
  |  |  248|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|     12|        }
  207|    254|#endif
  208|       |
  209|    254|        return rd.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    254|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  210|    266|    }
_ZN3scn2v24impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
  213|    610|    {
  214|    610|        SCN_GCC_COMPAT_PUSH
  215|    610|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  216|       |
  217|    610|        switch (specs.type) {
  218|     62|            case detail::presentation_type::string:
  ------------------
  |  Branch (218:13): [True: 62, False: 548]
  ------------------
  219|     62|                return bool_reader_base::allow_text;
  220|       |
  221|     34|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (221:13): [True: 34, False: 576]
  ------------------
  222|     66|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (222:13): [True: 32, False: 578]
  ------------------
  223|     80|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (223:13): [True: 14, False: 596]
  ------------------
  224|     96|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (224:13): [True: 16, False: 594]
  ------------------
  225|    104|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (225:13): [True: 8, False: 602]
  ------------------
  226|    110|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (226:13): [True: 6, False: 604]
  ------------------
  227|    110|                return bool_reader_base::allow_numeric;
  228|       |
  229|    438|            default:
  ------------------
  |  Branch (229:13): [True: 438, False: 172]
  ------------------
  230|    438|                return bool_reader_base::allow_text |
  231|    438|                       bool_reader_base::allow_numeric;
  232|    610|        }
  233|       |
  234|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  235|    610|    }
_ZNK3scn2v24impl11bool_readerIwE14read_localizedINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS0_6detail10locale_refERb:
  112|     12|    {
  113|     12|        scan_error err{scan_error::invalid_scanned_value,
  114|     12|                       "Failed to read boolean"};
  115|       |
  116|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (116:13): [True: 10, False: 2]
  ------------------
  117|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (117:22): [True: 0, False: 10]
  ------------------
  118|      0|                return *r;
  119|      0|            }
  120|     10|            else {
  121|     10|                err = r.error();
  122|     10|            }
  123|     10|        }
  124|       |
  125|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (125:13): [True: 8, False: 4]
  ------------------
  126|      8|            auto stdloc = loc.get<std::locale>();
  127|      8|            const auto& numpunct =
  128|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
  129|      8|            const auto truename = numpunct.truename();
  130|      8|            const auto falsename = numpunct.falsename();
  131|       |
  132|      8|            if (auto r =
  ------------------
  |  Branch (132:22): [True: 0, False: 8]
  ------------------
  133|      8|                    read_textual_custom(range, value, truename, falsename)) {
  134|      0|                return *r;
  135|      0|            }
  136|      8|            else {
  137|      8|                err = r.error();
  138|      8|            }
  139|      8|        }
  140|       |
  141|     12|        return unexpected(err);
  142|     12|    }
_ZNK3scn2v24impl16bool_reader_base12read_numericIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   67|    262|    {
   68|    262|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (68:18): [True: 0, False: 262]
  ------------------
   69|      0|            value = false;
   70|      0|            return *r;
   71|      0|        }
   72|    262|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (72:18): [True: 0, False: 262]
  ------------------
   73|      0|            value = true;
   74|      0|            return *r;
   75|      0|        }
   76|       |
   77|    262|        return unexpected_scan_error(
   78|    262|            scan_error::invalid_scanned_value,
   79|    262|            "Failed to read numeric boolean value: No match");
   80|    262|    }
_ZNK3scn2v24impl11bool_readerIwE19read_textual_customIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RbNSt3__117basic_string_viewIwNSO_11char_traitsIwEEEESS_:
  152|      8|    {
  153|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
  154|      8|        const auto shorter = std::pair{
  155|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (155:13): [True: 8, False: 0]
  ------------------
  156|      8|        const auto longer = std::pair{
  157|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (157:13): [True: 0, False: 8]
  ------------------
  158|       |
  159|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (159:18): [True: 0, False: 8]
  ------------------
  160|      0|            value = shorter.second;
  161|      0|            return *r;
  162|      0|        }
  163|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (163:18): [True: 0, False: 8]
  ------------------
  164|      0|            value = longer.second;
  165|      0|            return *r;
  166|      0|        }
  167|       |
  168|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  169|      8|                                     "read_textual: No match");
  170|      8|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_Rb:
   37|    254|    {
   38|    254|        scan_error err{scan_error::invalid_scanned_value,
   39|    254|                       "Failed to read boolean"};
   40|       |
   41|    254|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 252, False: 2]
  ------------------
   42|    252|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 252]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    252|            else {
   46|    252|                err = r.error();
   47|    252|            }
   48|    252|        }
   49|       |
   50|    254|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 232, False: 22]
  ------------------
   51|    232|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 232]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    232|            else {
   55|    232|                err = r.error();
   56|    232|            }
   57|    232|        }
   58|       |
   59|    254|        return unexpected(err);
   60|    254|    }
_ZNK3scn2v24impl16bool_reader_base20read_textual_classicIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   86|    232|    {
   87|    232|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (87:18): [True: 0, False: 232]
  ------------------
   88|      0|            value = true;
   89|      0|            return *r;
   90|      0|        }
   91|    232|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (91:18): [True: 0, False: 232]
  ------------------
   92|      0|            value = false;
   93|      0|            return *r;
   94|      0|        }
   95|       |
   96|    232|        return unexpected_scan_error(
   97|    232|            scan_error::invalid_scanned_value,
   98|    232|            "Failed to read textual boolean value: No match");
   99|    232|    }
_ZNK3scn2v24impl20reader_impl_for_boolIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERbNSL_10locale_refE:
  200|    344|    {
  201|    344|        const auto rd = bool_reader<CharT>{get_options(specs)};
  202|       |
  203|    344|#if !SCN_DISABLE_LOCALE
  204|    344|        if (specs.localized) {
  ------------------
  |  Branch (204:13): [True: 24, False: 320]
  ------------------
  205|     24|            return rd.read_localized(SCN_FWD(range), loc, value);
  ------------------
  |  |  248|     24|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|     24|        }
  207|    320|#endif
  208|       |
  209|    320|        return rd.read_classic(SCN_FWD(range), value);
  ------------------
  |  |  248|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  210|    344|    }
_ZNK3scn2v24impl11bool_readerIwE14read_localizedIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS0_6detail10locale_refERb:
  112|     24|    {
  113|     24|        scan_error err{scan_error::invalid_scanned_value,
  114|     24|                       "Failed to read boolean"};
  115|       |
  116|     24|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (116:13): [True: 22, False: 2]
  ------------------
  117|     22|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (117:22): [True: 0, False: 22]
  ------------------
  118|      0|                return *r;
  119|      0|            }
  120|     22|            else {
  121|     22|                err = r.error();
  122|     22|            }
  123|     22|        }
  124|       |
  125|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (125:13): [True: 10, False: 14]
  ------------------
  126|     10|            auto stdloc = loc.get<std::locale>();
  127|     10|            const auto& numpunct =
  128|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
  129|     10|            const auto truename = numpunct.truename();
  130|     10|            const auto falsename = numpunct.falsename();
  131|       |
  132|     10|            if (auto r =
  ------------------
  |  Branch (132:22): [True: 0, False: 10]
  ------------------
  133|     10|                    read_textual_custom(range, value, truename, falsename)) {
  134|      0|                return *r;
  135|      0|            }
  136|     10|            else {
  137|     10|                err = r.error();
  138|     10|            }
  139|     10|        }
  140|       |
  141|     24|        return unexpected(err);
  142|     24|    }
_ZNK3scn2v24impl11bool_readerIwE19read_textual_customIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RbNSt3__117basic_string_viewIwNSM_11char_traitsIwEEEESQ_:
  152|     10|    {
  153|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
  154|     10|        const auto shorter = std::pair{
  155|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (155:13): [True: 10, False: 0]
  ------------------
  156|     10|        const auto longer = std::pair{
  157|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (157:13): [True: 0, False: 10]
  ------------------
  158|       |
  159|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (159:18): [True: 0, False: 10]
  ------------------
  160|      0|            value = shorter.second;
  161|      0|            return *r;
  162|      0|        }
  163|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (163:18): [True: 0, False: 10]
  ------------------
  164|      0|            value = longer.second;
  165|      0|            return *r;
  166|      0|        }
  167|       |
  168|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  169|     10|                                     "read_textual: No match");
  170|     10|    }
_ZNK3scn2v24impl16bool_reader_base12read_classicIRN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_Rb:
   37|    320|    {
   38|    320|        scan_error err{scan_error::invalid_scanned_value,
   39|    320|                       "Failed to read boolean"};
   40|       |
   41|    320|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (41:13): [True: 264, False: 56]
  ------------------
   42|    264|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (42:22): [True: 0, False: 264]
  ------------------
   43|      0|                return *r;
   44|      0|            }
   45|    264|            else {
   46|    264|                err = r.error();
   47|    264|            }
   48|    264|        }
   49|       |
   50|    320|        if (m_options & allow_text) {
  ------------------
  |  Branch (50:13): [True: 250, False: 70]
  ------------------
   51|    250|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (51:22): [True: 0, False: 250]
  ------------------
   52|      0|                return *r;
   53|      0|            }
   54|    250|            else {
   55|    250|                err = r.error();
   56|    250|            }
   57|    250|        }
   58|       |
   59|    320|        return unexpected(err);
   60|    320|    }

_ZNK3scn2v24impl16char_reader_baseIcE19skip_ws_before_readEv:
   87|  1.66k|    {
   88|  1.66k|        return false;
   89|  1.66k|    }
_ZN3scn2v24impl20reader_impl_for_charIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RcNS0_6detail10locale_refE:
  113|  1.30k|    {
  114|  1.30k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.30k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  115|  1.30k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (115:23): [Folded - Ignored]
  ------------------
  116|  1.30k|            return code_unit_reader<char>{}.read(range, value);
  117|  1.30k|        }
  118|  1.30k|        else {
  119|  1.30k|            SCN_UNUSED(range);
  120|  1.30k|            SCN_EXPECT(false);
  121|  1.30k|            SCN_UNREACHABLE;
  122|  1.30k|        }
  123|  1.30k|    }
_ZN3scn2v24impl16code_unit_readerIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_Rc:
   36|  1.30k|    {
   37|  1.30k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  |   71|  1.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|  1.30k|        ch = *ranges::begin(range);
   39|  1.30k|        return it;
   40|  1.30k|    }
_ZNK3scn2v24impl16char_reader_baseIwE19skip_ws_before_readEv:
   87|  1.40k|    {
   88|  1.40k|        return false;
   89|  1.40k|    }
_ZN3scn2v24impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
   92|  7.32k|    {
   93|  7.32k|        reader_error_handler eh{};
   94|  7.32k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (94:23): [Folded - Ignored]
  ------------------
   95|  7.32k|            detail::check_code_point_type_specs(specs, eh);
   96|  7.32k|        }
   97|  7.32k|        else {
   98|  7.32k|            detail::check_char_type_specs(specs, eh);
   99|  7.32k|        }
  100|  7.32k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  7.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.78k, False: 538]
  |  |  ------------------
  ------------------
  101|  6.78k|            return {scan_error::invalid_format_string, eh.m_msg};
  102|  6.78k|        }
  103|    538|        return {};
  104|  7.32k|    }
_ZN3scn2v24impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RKNS0_6detail12format_specsERcNSL_10locale_refE:
  131|    302|    {
  132|    302|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (132:13): [True: 280, False: 22]
  ------------------
  133|    302|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (133:13): [True: 0, False: 22]
  ------------------
  134|    280|            return read_default(range, value, loc);
  135|    280|        }
  136|       |
  137|     22|        reader_impl_for_int<CharT> reader{};
  138|     22|        signed char tmp_value{};
  139|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
  140|     22|        value = static_cast<signed char>(value);
  141|     22|        return ret;
  142|    302|    }
_ZN3scn2v24impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RcNS0_6detail10locale_refE:
  113|    280|    {
  114|    280|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    280|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  115|    280|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (115:23): [Folded - Ignored]
  ------------------
  116|    280|            return code_unit_reader<char>{}.read(range, value);
  117|    280|        }
  118|    280|        else {
  119|    280|            SCN_UNUSED(range);
  120|    280|            SCN_EXPECT(false);
  121|    280|            SCN_UNREACHABLE;
  122|    280|        }
  123|    280|    }
_ZN3scn2v24impl16code_unit_readerIcE4readIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_Rc:
   36|    280|    {
   37|    280|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  |   71|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|    280|        ch = *ranges::begin(range);
   39|    280|        return it;
   40|    280|    }
_ZN3scn2v24impl20reader_impl_for_charIcE10read_specsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RKNS0_6detail12format_specsERcNSJ_10locale_refE:
  131|    236|    {
  132|    236|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (132:13): [True: 172, False: 64]
  ------------------
  133|    236|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (133:13): [True: 0, False: 64]
  ------------------
  134|    172|            return read_default(range, value, loc);
  135|    172|        }
  136|       |
  137|     64|        reader_impl_for_int<CharT> reader{};
  138|     64|        signed char tmp_value{};
  139|     64|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
  140|     64|        value = static_cast<signed char>(value);
  141|     64|        return ret;
  142|    236|    }
_ZN3scn2v24impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
   92|  5.56k|    {
   93|  5.56k|        reader_error_handler eh{};
   94|  5.56k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (94:23): [Folded - Ignored]
  ------------------
   95|  5.56k|            detail::check_code_point_type_specs(specs, eh);
   96|  5.56k|        }
   97|  5.56k|        else {
   98|  5.56k|            detail::check_char_type_specs(specs, eh);
   99|  5.56k|        }
  100|  5.56k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.05k, False: 516]
  |  |  ------------------
  ------------------
  101|  5.05k|            return {scan_error::invalid_format_string, eh.m_msg};
  102|  5.05k|        }
  103|    516|        return {};
  104|  5.56k|    }
_ZN3scn2v24impl21reader_impl_for_wcharIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RwNS0_6detail10locale_refE:
  151|  1.08k|    {
  152|  1.08k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.08k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  153|  1.08k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (153:23): [Folded - Ignored]
  ------------------
  154|  1.08k|            return code_point_reader<wchar_t>{}.read(range, value);
  155|  1.08k|        }
  156|  1.08k|        else {
  157|  1.08k|            return code_unit_reader<wchar_t>{}.read(range, value);
  158|  1.08k|        }
  159|  1.08k|    }
_ZN3scn2v24impl16code_unit_readerIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_Rw:
   36|  1.08k|    {
   37|  1.08k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  |   71|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|  1.08k|        ch = *ranges::begin(range);
   39|  1.08k|        return it;
   40|  1.08k|    }
_ZN3scn2v24impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RKNS0_6detail12format_specsERwNSL_10locale_refE:
  167|    252|    {
  168|    252|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (168:13): [True: 230, False: 22]
  ------------------
  169|    252|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (169:13): [True: 0, False: 22]
  ------------------
  170|    230|            return read_default(range, value, loc);
  171|    230|        }
  172|       |
  173|     22|        reader_impl_for_int<CharT> reader{};
  174|     22|        using integer_type =
  175|     22|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
  176|     22|        integer_type tmp_value{};
  177|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
  178|     22|        value = static_cast<integer_type>(value);
  179|     22|        return ret;
  180|    252|    }
_ZN3scn2v24impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RwNS0_6detail10locale_refE:
  151|    230|    {
  152|    230|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    230|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  153|    230|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (153:23): [Folded - Ignored]
  ------------------
  154|    230|            return code_point_reader<wchar_t>{}.read(range, value);
  155|    230|        }
  156|    230|        else {
  157|    230|            return code_unit_reader<wchar_t>{}.read(range, value);
  158|    230|        }
  159|    230|    }
_ZN3scn2v24impl16code_unit_readerIwE4readIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_Rw:
   36|    230|    {
   37|    230|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  |   71|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|    230|        ch = *ranges::begin(range);
   39|    230|        return it;
   40|    230|    }
_ZN3scn2v24impl21reader_impl_for_wcharIwE10read_specsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RKNS0_6detail12format_specsERwNSJ_10locale_refE:
  167|    264|    {
  168|    264|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (168:13): [True: 194, False: 70]
  ------------------
  169|    264|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (169:13): [True: 0, False: 70]
  ------------------
  170|    194|            return read_default(range, value, loc);
  171|    194|        }
  172|       |
  173|     70|        reader_impl_for_int<CharT> reader{};
  174|     70|        using integer_type =
  175|     70|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
  176|     70|        integer_type tmp_value{};
  177|     70|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
  178|     70|        value = static_cast<integer_type>(value);
  179|     70|        return ret;
  180|    264|    }

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  13.3k|{
   46|  13.3k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 13.3k, False: 0]
  ------------------
   47|  13.3k|        auto it = read_while_classic_space(range);
   48|  13.3k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  13.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 13.3k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|  13.3k|        return it;
   54|  13.3k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  13.3k|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  3.39k|    {
  126|  3.39k|        return true;
  127|  3.39k|    }
_ZNK3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
  125|  1.76k|    {
  126|  1.76k|        return true;
  127|  1.76k|    }
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
  125|  1.65k|    {
  126|  1.65k|        return true;
  127|  1.65k|    }
_ZN3scn2v24impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|  2.35k|{
  107|  2.35k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|  2.35k|        dest.assign(source.view());
  109|  2.35k|    }
  110|  2.35k|    else {
  111|  2.35k|        return transcode_impl(source.view(), dest);
  112|  2.35k|    }
  113|       |
  114|  2.35k|    return {};
  115|  2.35k|}
_ZN3scn2v24impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|  2.35k|{
  107|  2.35k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|  2.35k|        dest.assign(source.view());
  109|  2.35k|    }
  110|  2.35k|    else {
  111|  2.35k|        return transcode_impl(source.view(), dest);
  112|  2.35k|    }
  113|       |
  114|      0|    return {};
  115|  2.35k|}
_ZN3scn2v24impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
   62|  2.72k|{
   63|  2.72k|    dst.clear();
   64|  2.72k|    transcode_valid_to_string(src, dst);
   65|  2.72k|    return {};
   66|  2.72k|}
_ZN3scn2v24impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|    368|{
   88|    368|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|    368|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (89:13): [True: 368, False: 0]
  ------------------
   90|    368|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  246|    368|    static_cast<    \
  |  |  247|    368|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   91|    368|        }
   92|      0|        else {
   93|      0|            dest.assign(source.view());
   94|      0|        }
   95|    368|    }
   96|    368|    else {
   97|    368|        return transcode_impl(source.view(), dest);
   98|    368|    }
   99|       |
  100|    368|    return {};
  101|    368|}
_ZN3scn2v24impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|    368|{
   88|    368|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|    368|        if (source.stores_allocated_string()) {
   90|    368|            dest.assign(SCN_MOVE(source.get_allocated_string()));
   91|    368|        }
   92|    368|        else {
   93|    368|            dest.assign(source.view());
   94|    368|        }
   95|    368|    }
   96|    368|    else {
   97|    368|        return transcode_impl(source.view(), dest);
   98|    368|    }
   99|       |
  100|      0|    return {};
  101|    368|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  14.7k|    {
  131|  14.7k|        reader_error_handler eh{};
  132|  14.7k|        get_derived().check_specs_impl(specs, eh);
  133|  14.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.6k, False: 1.13k]
  |  |  ------------------
  ------------------
  134|  13.6k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  13.6k|        }
  136|  1.13k|        return {};
  137|  14.7k|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  14.7k|    {
  142|  14.7k|        return static_cast<Derived&>(*this);
  143|  14.7k|    }
_ZN3scn2v24impl20reader_error_handler8on_errorEPKc:
   29|  72.1k|    {
   30|  72.1k|        SCN_UNLIKELY_ATTR
   31|  72.1k|        m_msg = msg;
   32|  72.1k|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|   116k|    {
   35|   116k|        return m_msg == nullptr;
   36|   116k|    }
_ZN3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  7.36k|    {
  131|  7.36k|        reader_error_handler eh{};
  132|  7.36k|        get_derived().check_specs_impl(specs, eh);
  133|  7.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.72k, False: 640]
  |  |  ------------------
  ------------------
  134|  6.72k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  6.72k|        }
  136|    640|        return {};
  137|  7.36k|    }
_ZN3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
  141|  7.36k|    {
  142|  7.36k|        return static_cast<Derived&>(*this);
  143|  7.36k|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  7.36k|    {
  131|  7.36k|        reader_error_handler eh{};
  132|  7.36k|        get_derived().check_specs_impl(specs, eh);
  133|  7.36k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.84k, False: 526]
  |  |  ------------------
  ------------------
  134|  6.84k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  6.84k|        }
  136|    526|        return {};
  137|  7.36k|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
  141|  7.36k|    {
  142|  7.36k|        return static_cast<Derived&>(*this);
  143|  7.36k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  21.9k|    {
  131|  21.9k|        reader_error_handler eh{};
  132|  21.9k|        get_derived().check_specs_impl(specs, eh);
  133|  21.9k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 450, False: 21.5k]
  |  |  ------------------
  ------------------
  134|    450|            return {scan_error::invalid_format_string, eh.m_msg};
  135|    450|        }
  136|  21.5k|        return {};
  137|  21.9k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
  141|  21.9k|    {
  142|  21.9k|        return static_cast<Derived&>(*this);
  143|  21.9k|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  11.2k|{
   46|  11.2k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 11.2k, False: 0]
  ------------------
   47|  11.2k|        auto it = read_while_classic_space(range);
   48|  11.2k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  11.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|  11.2k|        return it;
   54|  11.2k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  11.2k|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  2.87k|    {
  126|  2.87k|        return true;
  127|  2.87k|    }
_ZNK3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
  125|  1.50k|    {
  126|  1.50k|        return true;
  127|  1.50k|    }
_ZNK3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
  125|  1.38k|    {
  126|  1.38k|        return true;
  127|  1.38k|    }
_ZN3scn2v24impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|  2.34k|{
  107|  2.34k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|  2.34k|        dest.assign(source.view());
  109|  2.34k|    }
  110|  2.34k|    else {
  111|  2.34k|        return transcode_impl(source.view(), dest);
  112|  2.34k|    }
  113|       |
  114|      0|    return {};
  115|  2.34k|}
_ZN3scn2v24impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
   62|  2.74k|{
   63|  2.74k|    dst.clear();
   64|  2.74k|    transcode_valid_to_string(src, dst);
   65|  2.74k|    return {};
   66|  2.74k|}
_ZN3scn2v24impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
  106|  2.34k|{
  107|  2.34k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (107:19): [Folded - Ignored]
  ------------------
  108|  2.34k|        dest.assign(source.view());
  109|  2.34k|    }
  110|  2.34k|    else {
  111|  2.34k|        return transcode_impl(source.view(), dest);
  112|  2.34k|    }
  113|       |
  114|  2.34k|    return {};
  115|  2.34k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  11.2k|    {
  131|  11.2k|        reader_error_handler eh{};
  132|  11.2k|        get_derived().check_specs_impl(specs, eh);
  133|  11.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.1k, False: 1.08k]
  |  |  ------------------
  ------------------
  134|  10.1k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  10.1k|        }
  136|  1.08k|        return {};
  137|  11.2k|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  11.2k|    {
  142|  11.2k|        return static_cast<Derived&>(*this);
  143|  11.2k|    }
_ZN3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  5.60k|    {
  131|  5.60k|        reader_error_handler eh{};
  132|  5.60k|        get_derived().check_specs_impl(specs, eh);
  133|  5.60k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.99k, False: 610]
  |  |  ------------------
  ------------------
  134|  4.99k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  4.99k|        }
  136|    610|        return {};
  137|  5.60k|    }
_ZN3scn2v24impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
  141|  5.60k|    {
  142|  5.60k|        return static_cast<Derived&>(*this);
  143|  5.60k|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  5.60k|    {
  131|  5.60k|        reader_error_handler eh{};
  132|  5.60k|        get_derived().check_specs_impl(specs, eh);
  133|  5.60k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.11k, False: 490]
  |  |  ------------------
  ------------------
  134|  5.11k|            return {scan_error::invalid_format_string, eh.m_msg};
  135|  5.11k|        }
  136|    490|        return {};
  137|  5.60k|    }
_ZN3scn2v24impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
  141|  5.60k|    {
  142|  5.60k|        return static_cast<Derived&>(*this);
  143|  5.60k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  16.6k|    {
  131|  16.6k|        reader_error_handler eh{};
  132|  16.6k|        get_derived().check_specs_impl(specs, eh);
  133|  16.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 456, False: 16.2k]
  |  |  ------------------
  ------------------
  134|    456|            return {scan_error::invalid_format_string, eh.m_msg};
  135|    456|        }
  136|  16.2k|        return {};
  137|  16.6k|    }
_ZN3scn2v24impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
  141|  16.6k|    {
  142|  16.6k|        return static_cast<Derived&>(*this);
  143|  16.6k|    }
_ZN3scn2v24impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|    404|{
   88|    404|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|    404|        if (source.stores_allocated_string()) {
   90|    404|            dest.assign(SCN_MOVE(source.get_allocated_string()));
   91|    404|        }
   92|    404|        else {
   93|    404|            dest.assign(source.view());
   94|    404|        }
   95|    404|    }
   96|    404|    else {
   97|    404|        return transcode_impl(source.view(), dest);
   98|    404|    }
   99|       |
  100|      0|    return {};
  101|    404|}
_ZN3scn2v24impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
   87|    404|{
   88|    404|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (88:19): [Folded - Ignored]
  ------------------
   89|    404|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (89:13): [True: 404, False: 0]
  ------------------
   90|    404|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  246|    404|    static_cast<    \
  |  |  247|    404|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   91|    404|        }
   92|      0|        else {
   93|      0|            dest.assign(source.view());
   94|      0|        }
   95|    404|    }
   96|    404|    else {
   97|    404|        return transcode_impl(source.view(), dest);
   98|    404|    }
   99|       |
  100|    404|    return {};
  101|    404|}

_ZN3scn2v24impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|  1.32k|{
  640|  1.32k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|  1.32k|                                  m_nan_payload_buffer, value);
  642|  1.32k|    value = this->setsign(value);
  643|  1.32k|    return n;
  644|  1.32k|}
_ZN3scn2v24impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  639|  1.10k|{
  640|  1.10k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  641|  1.10k|                                  m_nan_payload_buffer, value);
  642|  1.10k|    value = this->setsign(value);
  643|  1.10k|    return n;
  644|  1.10k|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|  1.32k|{
  557|  1.32k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 0, False: 1.32k]
  ------------------
  558|      0|        value = std::numeric_limits<T>::infinity();
  559|      0|        return 3;
  560|      0|    }
  561|  1.32k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 0, False: 1.32k]
  ------------------
  562|      0|        value = std::numeric_limits<T>::infinity();
  563|      0|        return 8;
  564|      0|    }
  565|  1.32k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 0, False: 1.32k]
  ------------------
  566|      0|        value = std::numeric_limits<T>::quiet_NaN();
  567|      0|        return 3;
  568|      0|    }
  569|  1.32k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 0, False: 1.32k]
  ------------------
  570|      0|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|      0|    }
  601|       |
  602|  1.32k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|  1.32k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 10, False: 1.31k]
  ------------------
  604|     10|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
  605|     10|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|     10|                                         "Invalid floating-point digit");
  607|     10|        }
  608|     10|    }
  609|  1.31k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.31k, False: 0]
  |  |  ------------------
  ------------------
  610|  1.31k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  1.31k|                                     "Invalid floating-point digit");
  612|  1.31k|    }
  613|       |
  614|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|      0|            double tmp{};
  619|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|      0|            value = tmp;
  621|      0|            return ret;
  622|      0|        }
  623|      0|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|      0|            return fast_float_fallback(data, value);
  627|      0|        }
  628|      0|    }
  629|      0|    else {
  630|       |        // Default to fast_float
  631|      0|        return fast_float_impl<CharT, T>{data}(value);
  632|      0|    }
  633|      0|}
float_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  556|  1.10k|{
  557|  1.10k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (557:9): [True: 0, False: 1.10k]
  ------------------
  558|      0|        value = std::numeric_limits<T>::infinity();
  559|      0|        return 3;
  560|      0|    }
  561|  1.10k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (561:9): [True: 0, False: 1.10k]
  ------------------
  562|      0|        value = std::numeric_limits<T>::infinity();
  563|      0|        return 8;
  564|      0|    }
  565|  1.10k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (565:9): [True: 0, False: 1.10k]
  ------------------
  566|      0|        value = std::numeric_limits<T>::quiet_NaN();
  567|      0|        return 3;
  568|      0|    }
  569|  1.10k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (569:9): [True: 0, False: 1.10k]
  ------------------
  570|      0|        value = std::numeric_limits<T>::quiet_NaN();
  571|       |
  572|       |        // TODO: use payload
  573|       |#if 0
  574|       |                    {
  575|       |                        auto reader = integer_reader<CharT>{
  576|       |                            integer_reader_base::only_unsigned, 0};
  577|       |                        if (auto r = reader.read_source(
  578|       |                                detail::tag_type<unsigned long long>{},
  579|       |                                nan_payload.view());
  580|       |                            SCN_UNLIKELY(!r)) {
  581|       |                            return unexpected(r.error());
  582|       |                        }
  583|       |
  584|       |                        unsigned long long payload;
  585|       |                        if (auto r = reader.parse_value(payload);
  586|       |                            SCN_UNLIKELY(!r)) {
  587|       |                            return unexpected(r.error());
  588|       |                        }
  589|       |
  590|       |                        constexpr auto mantissa_payload_len =
  591|       |                            std::numeric_limits<T>::digits - 2;
  592|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  593|       |
  594|       |
  595|       |                    }
  596|       |#endif
  597|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  227|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  598|       |
  599|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  600|      0|    }
  601|       |
  602|  1.10k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  242|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  603|  1.10k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (603:9): [True: 8, False: 1.09k]
  ------------------
  604|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
  605|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  606|      8|                                         "Invalid floating-point digit");
  607|      8|        }
  608|      8|    }
  609|  1.09k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  153|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.09k, False: 0]
  |  |  ------------------
  ------------------
  610|  1.09k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  611|  1.09k|                                     "Invalid floating-point digit");
  612|  1.09k|    }
  613|       |
  614|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (614:19): [Folded - Ignored]
  ------------------
  615|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
  616|       |            // If double == long double (true on Windows),
  617|       |            // use fast_float with double
  618|      0|            double tmp{};
  619|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  620|      0|            value = tmp;
  621|      0|            return ret;
  622|      0|        }
  623|      0|        else {
  624|       |            // long doubles aren't supported by fast_float ->
  625|       |            // fall back to from_chars or strtod
  626|      0|            return fast_float_fallback(data, value);
  627|      0|        }
  628|      0|    }
  629|      0|    else {
  630|       |        // Default to fast_float
  631|      0|        return fast_float_impl<CharT, T>{data}(value);
  632|      0|    }
  633|      0|}

_ZN3scn2v24impl12float_readerIcEC2Ev:
   64|  1.12k|    constexpr float_reader() = default;
_ZN3scn2v24impl17float_reader_baseC2Ev:
   50|  2.02k|    constexpr float_reader_base() = default;
_ZN3scn2v24impl12float_readerIcE11read_sourceIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.34k|    {
   73|  1.34k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.34k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.34k|        return read_source_impl(range);
   79|  1.34k|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  1.36k|    {
  112|  1.36k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.36k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  1.36k|        auto it = sign_result.first;
  115|  1.36k|        m_sign = sign_result.second;
  116|       |
  117|  1.36k|        auto digits_begin = it;
  118|  1.36k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  1.36k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  1.36k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  1.36k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.36k]
  |  |  |  Branch (153:45): [True: 0, False: 1.36k]
  |  |  |  Branch (153:45): [True: 0, False: 1.36k]
  |  |  ------------------
  ------------------
  122|  1.36k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  1.36k|            else {
  133|  1.36k|                auto cb = [&](auto&& rr)
  134|  1.36k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.36k|                    auto res = read_all(rr);
  136|  1.36k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  1.36k|                        return unexpected_scan_error(
  138|  1.36k|                            scan_error::invalid_scanned_value,
  139|  1.36k|                            "Invalid float value");
  140|  1.36k|                    }
  141|  1.36k|                    return res;
  142|  1.36k|                };
  143|  1.36k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 40, False: 1.32k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|     40|    }                                                  \
  |  |   70|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  1.32k|            }
  145|  1.36k|        }
  146|  1.32k|        else {
  147|  1.32k|            SCN_TRY_ASSIGN(
  148|  1.32k|                it,
  149|  1.32k|                do_read_source_impl(
  150|  1.32k|                    r,
  151|  1.32k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  1.32k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  1.32k|        }
  154|       |
  155|  1.32k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  1.32k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 1.32k, False: 0]
  |  Branch (157:48): [True: 1.32k, False: 0]
  ------------------
  158|  1.32k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 1.32k, False: 0]
  ------------------
  159|  1.32k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 1.32k, False: 0]
  ------------------
  160|  1.32k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  1.32k|        }
  162|       |
  163|  1.32k|        handle_separators();
  164|       |
  165|  1.32k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 1.32k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  1.32k|        return it;
  178|  1.32k|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  1.36k|    {
  226|  1.36k|        auto it = ranges::begin(range);
  227|  1.36k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 1.36k, False: 0]
  ------------------
  228|  1.36k|            return unexpected(r.error());
  229|  1.36k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  1.36k|    {
  249|  1.36k|        auto it = ranges::begin(range);
  250|  1.36k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 1.36k, False: 0]
  ------------------
  251|  1.36k|            return r.transform_error(map_parse_error_to_scan_error(
  252|  1.36k|                scan_error::invalid_scanned_value,
  253|  1.36k|                "Invalid floating-point NaN value"));
  254|  1.36k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.32k|    {
  220|  1.32k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.32k|    }
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|     40|    {
  365|     40|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|     40|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 8, False: 32]
  |  Branch (366:50): [True: 4, False: 4]
  ------------------
  367|       |
  368|     40|        auto it = ranges::begin(range);
  369|     40|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|     40|        if (auto r =
  372|     40|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|     40|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
  374|     40|            return r.transform_error(
  375|     40|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|     40|                                              "Invalid floating-point value"));
  377|     40|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|     40|    {
  185|     40|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 40]
  |  |  |  Branch (153:45): [True: 0, False: 40]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|     40|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|     40|        return read_while1_code_unit(
  195|     40|            SCN_FWD(range),
  ------------------
  |  |  248|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|     40|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|     40|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlcE0_clEc:
  196|     40|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  1.36k|    {
  423|  1.36k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  1.36k|        const bool allowed_nonhex =
  425|  1.36k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  1.36k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  1.36k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 1.36k, False: 0]
  |  Branch (428:45): [True: 0, False: 1.36k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  1.36k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 1.36k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|  1.36k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 1.36k, False: 0]
  |  Branch (437:45): [True: 0, False: 1.36k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|  1.36k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 1.36k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|  1.36k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.32k, False: 40]
  |  Branch (444:28): [True: 10, False: 1.31k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|     10|            auto it = ranges::begin(range);
  448|       |
  449|     10|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 10]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|     10|            else {
  454|     10|                m_kind = float_kind::hex_without_prefix;
  455|     10|            }
  456|       |
  457|     10|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|     10|        }
  459|  1.35k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 40, False: 1.31k]
  |  Branch (459:34): [True: 40, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|     40|            m_kind = float_kind::generic;
  463|     40|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|     40|        }
  465|  1.31k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.31k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.31k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  1.31k|            m_kind = float_kind::generic;
  476|  1.31k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  1.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.31k|        }
  478|  1.36k|    }
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|     10|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|     10|                    auto res = read_all(rr);
  136|     10|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
  137|      0|                        return unexpected_scan_error(
  138|      0|                            scan_error::invalid_scanned_value,
  139|      0|                            "Invalid float value");
  140|      0|                    }
  141|     10|                    return res;
  142|     10|                };
_ZZN3scn2v24impl12float_readerIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.31k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.31k|                    auto res = read_all(rr);
  136|  1.31k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.31k]
  |  |  ------------------
  ------------------
  137|      0|                        return unexpected_scan_error(
  138|      0|                            scan_error::invalid_scanned_value,
  139|      0|                            "Invalid float value");
  140|      0|                    }
  141|  1.31k|                    return res;
  142|  1.31k|                };
_ZN3scn2v24impl12float_readerIcE17handle_separatorsEv:
  481|  1.32k|    {
  482|  1.32k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 1.32k, False: 0]
  ------------------
  483|  1.32k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 1.32k, False: 0]
  ------------------
  484|  1.32k|            return;
  485|  1.32k|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|  1.12k|    {
  577|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|  1.12k|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|  1.12k|        float_reader<CharT> rd{};
  581|  1.12k|        return read_impl<range_nocvref_t>(
  582|  1.12k|            range, rd,
  583|  1.12k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  1.12k|                return r.read_source(SCN_FWD(args)...);
  585|  1.12k|            },
  586|  1.12k|            value);
  587|  1.12k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.36k|    {
  633|  1.36k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.36k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40, False: 1.32k]
  |  |  ------------------
  ------------------
  635|     40|            return unexpected(r.error());
  636|     40|        }
  637|       |
  638|  1.32k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.32k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.32k|    }                                                  \
  |  |  |  |   70|  1.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  1.32k|    }
_ZN3scn2v24impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|  1.32k|    {
   98|  1.32k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|  1.32k|        const std::ptrdiff_t sign_len =
  101|  1.32k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 0, False: 1.32k]
  ------------------
  102|       |
  103|  1.32k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.32k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.32k|    }                                                  \
  |  |  |  |   70|  1.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.32k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|  1.12k|            [](float_reader<CharT>& r, auto&&... args) {
  584|  1.12k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|  1.12k|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  7.36k|    {
  570|  7.36k|        detail::check_float_type_specs(specs, eh);
  571|  7.36k|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
  643|    526|    {
  644|    526|        unsigned options{};
  645|    526|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 22, False: 504]
  ------------------
  646|     22|            options |= float_reader_base::allow_thsep;
  647|     22|        }
  648|       |
  649|    526|        SCN_GCC_COMPAT_PUSH
  650|    526|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|    526|        switch (specs.type) {
  653|     34|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 34, False: 492]
  ------------------
  654|     34|                return options | float_reader_base::allow_fixed;
  655|       |
  656|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 6, False: 520]
  ------------------
  657|      6|                return options | float_reader_base::allow_scientific;
  658|       |
  659|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 12, False: 514]
  ------------------
  660|     12|                return options | float_reader_base::allow_hex;
  661|       |
  662|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 6, False: 520]
  ------------------
  663|      6|                return options | float_reader_base::allow_scientific |
  664|      6|                       float_reader_base::allow_fixed;
  665|       |
  666|    468|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 468, False: 58]
  ------------------
  667|    468|                return options | float_reader_base::allow_scientific |
  668|    468|                       float_reader_base::allow_fixed |
  669|    468|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 526]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|    526|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|    526|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|    526|    }
_ZN3scn2v24impl12float_readerIcEC2Ej:
   66|    526|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl17float_reader_baseC2Ej:
   51|  1.01k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v24impl12float_readerIcE21read_source_localizedINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_NS0_6detail10locale_refE:
   85|      6|    {
   86|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|      6|        return read_source_impl(range);
   92|      6|    }
_ZN3scn2v24impl12float_readerIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  111|    294|    {
  112|    294|        SCN_TRY(sign_result,
  ------------------
  |  |   71|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    294|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|    294|        auto it = sign_result.first;
  115|    294|        m_sign = sign_result.second;
  116|       |
  117|    294|        auto digits_begin = it;
  118|    294|        auto r = ranges::subrange{it, ranges::end(range)};
  119|    294|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|    294|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|    294|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|    294|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|    294|                SCN_TRY_ASSIGN(
  124|    294|                    it,
  125|    294|                    do_read_source_impl(
  126|    294|                        r,
  127|    294|                        [&](auto&& rr) {
  128|    294|                            return read_regular_float(SCN_FWD(rr));
  129|    294|                        },
  130|    294|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|    294|            }
  132|    294|            else {
  133|    294|                auto cb = [&](auto&& rr)
  134|    294|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|    294|                    auto res = read_all(rr);
  136|    294|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|    294|                        return unexpected_scan_error(
  138|    294|                            scan_error::invalid_scanned_value,
  139|    294|                            "Invalid float value");
  140|    294|                    }
  141|    294|                    return res;
  142|    294|                };
  143|    294|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|    294|            }
  145|    294|        }
  146|    294|        else {
  147|    294|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 294, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|    294|    }                                                  \
  |  |   70|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIcE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEZNS3_16read_source_implIRSH_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_EUlSU_E_ZNSM_ISN_EEST_SU_EUlSU_E0_EEST_SU_OT0_OT1_:
  422|    294|    {
  423|    294|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|    294|        const bool allowed_nonhex =
  425|    294|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|    294|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|    294|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 294, False: 0]
  |  Branch (428:45): [True: 0, False: 294]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|    294|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 294]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|    294|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 294, False: 0]
  |  Branch (437:45): [True: 0, False: 294]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|    294|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 294]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|    294|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 288, False: 6]
  |  Branch (444:28): [True: 2, False: 286]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|      2|            auto it = ranges::begin(range);
  448|       |
  449|      2|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 2]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|      2|            else {
  454|      2|                m_kind = float_kind::hex_without_prefix;
  455|      2|            }
  456|       |
  457|      2|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|      2|        }
  459|    292|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 6, False: 286]
  |  Branch (459:34): [True: 6, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|      6|            m_kind = float_kind::generic;
  463|      6|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|      6|        }
  465|    286|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|    286|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 286]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|    286|            m_kind = float_kind::generic;
  476|    286|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|    286|        }
  478|    294|    }
_ZN3scn2v24impl12float_readerIcE8read_infIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  225|    294|    {
  226|    294|        auto it = ranges::begin(range);
  227|    294|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 294, False: 0]
  ------------------
  228|    294|            return unexpected(r.error());
  229|    294|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIcE8read_nanIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  248|    294|    {
  249|    294|        auto it = ranges::begin(range);
  250|    294|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 294, False: 0]
  ------------------
  251|    294|            return r.transform_error(map_parse_error_to_scan_error(
  252|    294|                scan_error::invalid_scanned_value,
  253|    294|                "Invalid floating-point NaN value"));
  254|    294|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  219|    288|    {
  220|    288|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|    288|    }
_ZN3scn2v24impl12float_readerIcE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_:
  322|      2|    {
  323|      2|        auto it = ranges::begin(range);
  324|       |
  325|      2|        std::ptrdiff_t digits_count = 0;
  326|      2|        if (auto r =
  327|      2|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
  329|      2|            return r.transform_error(map_parse_error_to_scan_error(
  330|      2|                scan_error::invalid_scanned_value,
  331|      2|                "Invalid hexadecimal floating-point value"));
  332|      2|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_b:
  202|      2|    {
  203|      2|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  Branch (153:45): [True: 0, False: 2]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|      2|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|      2|        return read_while1_code_unit(
  213|      2|            SCN_FWD(range),
  ------------------
  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|      2|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|      2|    }
_ZZN3scn2v24impl12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_bENKUlcE0_clEc:
  214|      2|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIcE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  364|    292|    {
  365|    292|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|    292|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 290, False: 2]
  |  Branch (366:50): [True: 2, False: 288]
  ------------------
  367|       |
  368|    292|        auto it = ranges::begin(range);
  369|    292|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|    292|        if (auto r =
  372|    292|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|    292|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 292, False: 0]
  |  |  ------------------
  ------------------
  374|    292|            return r.transform_error(
  375|    292|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|    292|                                              "Invalid floating-point value"));
  377|    292|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_b:
  184|    292|    {
  185|    292|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 292]
  |  |  |  Branch (153:45): [True: 0, False: 292]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|    292|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|    292|        return read_while1_code_unit(
  195|    292|            SCN_FWD(range),
  ------------------
  |  |  248|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|    292|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|    292|    }
_ZZN3scn2v24impl12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_bENKUlcE0_clEc:
  196|    292|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIcE11read_sourceINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_NS0_6detail10locale_refE:
   72|    288|    {
   73|    288|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 288]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|    288|        return read_source_impl(range);
   79|    288|    }
_ZN3scn2v24impl12float_readerIcE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|     16|    {
   86|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|     16|        return read_source_impl(range);
   92|     16|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  595|    294|    {
  596|    294|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|    294|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|    294|#if !SCN_DISABLE_LOCALE
  600|    294|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 6, False: 288]
  ------------------
  601|      6|            return read_impl<range_nocvref_t>(
  602|      6|                range, rd,
  603|      6|                [](float_reader<CharT>& r, auto&&... args) {
  604|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  605|      6|                },
  606|      6|                value, loc);
  607|      6|        }
  608|    288|#endif
  609|       |
  610|    288|        return read_impl<range_nocvref_t>(
  611|    288|            range, rd,
  612|    288|            [](float_reader<CharT>& r, auto&&... args) {
  613|    288|                return r.read_source(SCN_FWD(args)...);
  614|    288|            },
  615|    288|            value);
  616|    294|    }
_ZN3scn2v24impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|    294|    {
  633|    294|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|    294|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 294, False: 0]
  |  |  ------------------
  ------------------
  635|    294|            return unexpected(r.error());
  636|    294|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SS_EEEDaSV_SY_:
  603|      6|                [](float_reader<CharT>& r, auto&&... args) {
  604|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|      6|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_SS_EEEDaSV_SY_:
  612|    288|            [](float_reader<CharT>& r, auto&&... args) {
  613|    288|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|    288|            },
_ZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|    232|    {
  596|    232|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|    232|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|    232|#if !SCN_DISABLE_LOCALE
  600|    232|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 16, False: 216]
  ------------------
  601|     16|            return read_impl<range_nocvref_t>(
  602|     16|                range, rd,
  603|     16|                [](float_reader<CharT>& r, auto&&... args) {
  604|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  605|     16|                },
  606|     16|                value, loc);
  607|     16|        }
  608|    216|#endif
  609|       |
  610|    216|        return read_impl<range_nocvref_t>(
  611|    216|            range, rd,
  612|    216|            [](float_reader<CharT>& r, auto&&... args) {
  613|    216|                return r.read_source(SCN_FWD(args)...);
  614|    216|            },
  615|    216|            value);
  616|    232|    }
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|     16|                [](float_reader<CharT>& r, auto&&... args) {
  604|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|     16|                },
_ZZN3scn2v24impl21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|    216|            [](float_reader<CharT>& r, auto&&... args) {
  613|    216|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|    216|            },
_ZN3scn2v24impl12float_readerIwEC2Ev:
   64|    892|    constexpr float_reader() = default;
_ZN3scn2v24impl12float_readerIwE11read_sourceIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   72|  1.12k|    {
   73|  1.12k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|  1.12k|        return read_source_impl(range);
   79|  1.12k|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  111|  1.14k|    {
  112|  1.14k|        SCN_TRY(sign_result,
  ------------------
  |  |   71|  1.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.14k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|  1.14k|        auto it = sign_result.first;
  115|  1.14k|        m_sign = sign_result.second;
  116|       |
  117|  1.14k|        auto digits_begin = it;
  118|  1.14k|        auto r = ranges::subrange{it, ranges::end(range)};
  119|  1.14k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|  1.14k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|  1.14k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  153|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.14k]
  |  |  |  Branch (153:45): [True: 0, False: 1.14k]
  |  |  |  Branch (153:45): [True: 0, False: 1.14k]
  |  |  ------------------
  ------------------
  122|  1.14k|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|      0|    }                                                  \
  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  124|      0|                    it,
  125|      0|                    do_read_source_impl(
  126|      0|                        r,
  127|      0|                        [&](auto&& rr) {
  128|      0|                            return read_regular_float(SCN_FWD(rr));
  129|      0|                        },
  130|      0|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|      0|            }
  132|  1.14k|            else {
  133|  1.14k|                auto cb = [&](auto&& rr)
  134|  1.14k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.14k|                    auto res = read_all(rr);
  136|  1.14k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|  1.14k|                        return unexpected_scan_error(
  138|  1.14k|                            scan_error::invalid_scanned_value,
  139|  1.14k|                            "Invalid float value");
  140|  1.14k|                    }
  141|  1.14k|                    return res;
  142|  1.14k|                };
  143|  1.14k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  |   66|  1.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|  1.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 38, False: 1.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|     38|    }                                                  \
  |  |   70|  1.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|  1.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  144|  1.10k|            }
  145|  1.14k|        }
  146|  1.10k|        else {
  147|  1.10k|            SCN_TRY_ASSIGN(
  148|  1.10k|                it,
  149|  1.10k|                do_read_source_impl(
  150|  1.10k|                    r,
  151|  1.10k|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|  1.10k|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|  1.10k|        }
  154|       |
  155|  1.10k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|  1.10k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 1.10k, False: 0]
  |  Branch (157:48): [True: 1.10k, False: 0]
  ------------------
  158|  1.10k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 1.10k, False: 0]
  ------------------
  159|  1.10k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 1.10k, False: 0]
  ------------------
  160|  1.10k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|  1.10k|        }
  162|       |
  163|  1.10k|        handle_separators();
  164|       |
  165|  1.10k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 1.10k]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|  1.10k|        return it;
  178|  1.10k|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  225|  1.14k|    {
  226|  1.14k|        auto it = ranges::begin(range);
  227|  1.14k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 1.14k, False: 0]
  ------------------
  228|  1.14k|            return unexpected(r.error());
  229|  1.14k|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  248|  1.14k|    {
  249|  1.14k|        auto it = ranges::begin(range);
  250|  1.14k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 1.14k, False: 0]
  ------------------
  251|  1.14k|            return r.transform_error(map_parse_error_to_scan_error(
  252|  1.14k|                scan_error::invalid_scanned_value,
  253|  1.14k|                "Invalid floating-point NaN value"));
  254|  1.14k|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  219|  1.10k|    {
  220|  1.10k|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  1.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|  1.10k|    }
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_:
  364|     38|    {
  365|     38|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|     38|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 10, False: 28]
  |  Branch (366:50): [True: 6, False: 4]
  ------------------
  367|       |
  368|     38|        auto it = ranges::begin(range);
  369|     38|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|     38|        if (auto r =
  372|     38|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|     38|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
  374|     38|            return r.transform_error(
  375|     38|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|     38|                                              "Invalid floating-point value"));
  377|     38|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
  184|     38|    {
  185|     38|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38]
  |  |  |  Branch (153:45): [True: 0, False: 38]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|     38|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|     38|        return read_while1_code_unit(
  195|     38|            SCN_FWD(range),
  ------------------
  |  |  248|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|     38|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|     38|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_bENKUlwE0_clEw:
  196|     38|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEERZNS3_16read_source_implISD_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_EUlSL_E1_SN_EESK_SL_OT0_OT1_:
  422|  1.14k|    {
  423|  1.14k|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|  1.14k|        const bool allowed_nonhex =
  425|  1.14k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|  1.14k|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|  1.14k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 1.14k, False: 0]
  |  Branch (428:45): [True: 0, False: 1.14k]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|  1.14k|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 1.14k]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|  1.14k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 1.14k, False: 0]
  |  Branch (437:45): [True: 0, False: 1.14k]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|  1.14k|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 1.14k]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|  1.14k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 1.10k, False: 38]
  |  Branch (444:28): [True: 8, False: 1.09k]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|      8|            auto it = ranges::begin(range);
  448|       |
  449|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 8]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|      8|            else {
  454|      8|                m_kind = float_kind::hex_without_prefix;
  455|      8|            }
  456|       |
  457|      8|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|      8|        }
  459|  1.13k|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 38, False: 1.09k]
  |  Branch (459:34): [True: 38, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|     38|            m_kind = float_kind::generic;
  463|     38|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|     38|        }
  465|  1.09k|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|  1.09k|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|  1.09k|            m_kind = float_kind::generic;
  476|  1.09k|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|  1.09k|        }
  478|  1.14k|    }
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISC_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|      8|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|      8|                    auto res = read_all(rr);
  136|      8|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
  137|      0|                        return unexpected_scan_error(
  138|      0|                            scan_error::invalid_scanned_value,
  139|      0|                            "Invalid float value");
  140|      0|                    }
  141|      8|                    return res;
  142|      8|                };
_ZZN3scn2v24impl12float_readerIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_ENKUlSK_E1_clISD_EENSE_INSF_IDtfp_EXsr6rangesE14borrowed_rangeISN_EEE4typeEEESK_:
  134|  1.09k|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|  1.09k|                    auto res = read_all(rr);
  136|  1.09k|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  ------------------
  |  |  153|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
  137|      0|                        return unexpected_scan_error(
  138|      0|                            scan_error::invalid_scanned_value,
  139|      0|                            "Invalid float value");
  140|      0|                    }
  141|  1.09k|                    return res;
  142|  1.09k|                };
_ZN3scn2v24impl12float_readerIwE17handle_separatorsEv:
  481|  1.10k|    {
  482|  1.10k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (482:13): [True: 1.10k, False: 0]
  ------------------
  483|  1.10k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (483:13): [True: 1.10k, False: 0]
  ------------------
  484|  1.10k|            return;
  485|  1.10k|        }
  486|       |
  487|      0|        auto& str = this->m_buffer.make_into_allocated_string();
  488|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (488:13): [True: 0, False: 0]
  ------------------
  489|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (489:27): [True: 0, False: 0]
  ------------------
  490|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (490:21): [True: 0, False: 0]
  ------------------
  491|      0|                    ch = CharT{'.'};
  492|      0|                }
  493|      0|            }
  494|      0|        }
  495|       |
  496|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (496:13): [True: 0, False: 0]
  ------------------
  497|      0|            return;
  498|      0|        }
  499|       |
  500|      0|        auto first = ranges::find(str, m_locale_options.thousands_sep);
  501|      0|        if (first == str.end()) {
  ------------------
  |  Branch (501:13): [True: 0, False: 0]
  ------------------
  502|      0|            return;
  503|      0|        }
  504|       |
  505|      0|        m_thsep_indices.push_back(
  506|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
  507|       |
  508|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (508:31): [True: 0, False: 0]
  ------------------
  509|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (509:17): [True: 0, False: 0]
  ------------------
  510|      0|                *first++ = std::move(*it);
  511|      0|            }
  512|      0|            else {
  513|      0|                m_thsep_indices.push_back(
  514|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
  515|      0|            }
  516|      0|        }
  517|       |
  518|      0|        str.erase(first, str.end());
  519|      0|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  576|    892|    {
  577|    892|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    892|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  578|    892|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  579|       |
  580|    892|        float_reader<CharT> rd{};
  581|    892|        return read_impl<range_nocvref_t>(
  582|    892|            range, rd,
  583|    892|            [](float_reader<CharT>& r, auto&&... args) {
  584|    892|                return r.read_source(SCN_FWD(args)...);
  585|    892|            },
  586|    892|            value);
  587|    892|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSI_SL_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEERT0_SO_:
  632|  1.14k|    {
  633|  1.14k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|  1.14k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 38, False: 1.10k]
  |  |  ------------------
  ------------------
  635|     38|            return unexpected(r.error());
  636|     38|        }
  637|       |
  638|  1.10k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|  1.10k|    }
_ZN3scn2v24impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
   97|  1.10k|    {
   98|  1.10k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   99|       |
  100|  1.10k|        const std::ptrdiff_t sign_len =
  101|  1.10k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (101:13): [True: 0, False: 1.10k]
  ------------------
  102|       |
  103|  1.10k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  |   71|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
  105|  1.10k|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SN_EEEDaSQ_ST_:
  583|    892|            [](float_reader<CharT>& r, auto&&... args) {
  584|    892|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  585|    892|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  569|  5.60k|    {
  570|  5.60k|        detail::check_float_type_specs(specs, eh);
  571|  5.60k|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
  643|    490|    {
  644|    490|        unsigned options{};
  645|    490|        if (specs.localized) {
  ------------------
  |  Branch (645:13): [True: 18, False: 472]
  ------------------
  646|     18|            options |= float_reader_base::allow_thsep;
  647|     18|        }
  648|       |
  649|    490|        SCN_GCC_COMPAT_PUSH
  650|    490|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  651|       |
  652|    490|        switch (specs.type) {
  653|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (653:13): [True: 30, False: 460]
  ------------------
  654|     30|                return options | float_reader_base::allow_fixed;
  655|       |
  656|      8|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (656:13): [True: 8, False: 482]
  ------------------
  657|      8|                return options | float_reader_base::allow_scientific;
  658|       |
  659|     10|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (659:13): [True: 10, False: 480]
  ------------------
  660|     10|                return options | float_reader_base::allow_hex;
  661|       |
  662|      4|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (662:13): [True: 4, False: 486]
  ------------------
  663|      4|                return options | float_reader_base::allow_scientific |
  664|      4|                       float_reader_base::allow_fixed;
  665|       |
  666|    438|            case detail::presentation_type::none:
  ------------------
  |  Branch (666:13): [True: 438, False: 52]
  ------------------
  667|    438|                return options | float_reader_base::allow_scientific |
  668|    438|                       float_reader_base::allow_fixed |
  669|    438|                       float_reader_base::allow_hex;
  670|       |
  671|      0|            default:
  ------------------
  |  Branch (671:13): [True: 0, False: 490]
  ------------------
  672|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  673|    490|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  674|    490|        }
  675|       |
  676|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
  677|    490|    }
_ZN3scn2v24impl12float_readerIwEC2Ej:
   66|    490|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v24impl12float_readerIwE21read_source_localizedINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_NS0_6detail10locale_refE:
   85|      6|    {
   86|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|      6|        return read_source_impl(range);
   92|      6|    }
_ZN3scn2v24impl12float_readerIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_:
  111|    242|    {
  112|    242|        SCN_TRY(sign_result,
  ------------------
  |  |   71|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    242|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
  114|    242|        auto it = sign_result.first;
  115|    242|        m_sign = sign_result.second;
  116|       |
  117|    242|        auto digits_begin = it;
  118|    242|        auto r = ranges::subrange{it, ranges::end(range)};
  119|    242|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (119:23): [Folded - Ignored]
  |  Branch (119:23): [Folded - Ignored]
  ------------------
  120|    242|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|    242|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  122|    242|                             m_locale_options.decimal_point != CharT{'.'})) {
  123|    242|                SCN_TRY_ASSIGN(
  124|    242|                    it,
  125|    242|                    do_read_source_impl(
  126|    242|                        r,
  127|    242|                        [&](auto&& rr) {
  128|    242|                            return read_regular_float(SCN_FWD(rr));
  129|    242|                        },
  130|    242|                        [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  131|    242|            }
  132|    242|            else {
  133|    242|                auto cb = [&](auto&& rr)
  134|    242|                    -> scan_expected<simple_borrowed_iterator_t<decltype(rr)>> {
  135|    242|                    auto res = read_all(rr);
  136|    242|                    if (SCN_UNLIKELY(res == ranges::begin(r))) {
  137|    242|                        return unexpected_scan_error(
  138|    242|                            scan_error::invalid_scanned_value,
  139|    242|                            "Invalid float value");
  140|    242|                    }
  141|    242|                    return res;
  142|    242|                };
  143|    242|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  144|    242|            }
  145|    242|        }
  146|    242|        else {
  147|    242|            SCN_TRY_ASSIGN(
  ------------------
  |  |   66|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |   67|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  153|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (153:25): [True: 242, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  |   63|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   61|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   69|    242|    }                                                  \
  |  |   70|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  248|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
  148|      0|                it,
  149|      0|                do_read_source_impl(
  150|      0|                    r,
  151|      0|                    [&](auto&& rr) { return read_regular_float(SCN_FWD(rr)); },
  152|      0|                    [&](auto&& rr) { return read_hexfloat(SCN_FWD(rr)); }));
  153|      0|        }
  154|       |
  155|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|       |
  157|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (157:13): [True: 0, False: 0]
  |  Branch (157:48): [True: 0, False: 0]
  ------------------
  158|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (158:13): [True: 0, False: 0]
  ------------------
  159|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (159:13): [True: 0, False: 0]
  ------------------
  160|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
  161|      0|        }
  162|       |
  163|      0|        handle_separators();
  164|       |
  165|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  167|      0|            if (auto e = check_thsep_grouping(
  168|      0|                    ranges::subrange{
  169|      0|                        digits_begin,
  170|      0|                        ranges::next(digits_begin, m_integral_part_length)},
  171|      0|                    m_thsep_indices, m_locale_options.grouping);
  172|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  173|      0|                return unexpected(e);
  174|      0|            }
  175|      0|        }
  176|       |
  177|      0|        return it;
  178|      0|    }
_ZN3scn2v24impl12float_readerIwE19do_read_source_implIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEZNS3_16read_source_implIRSH_EENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_EUlSU_E_ZNSM_ISN_EEST_SU_EUlSU_E0_EEST_SU_OT0_OT1_:
  422|    242|    {
  423|    242|        const bool allowed_hex = (m_options & allow_hex) != 0;
  424|    242|        const bool allowed_nonhex =
  425|    242|            (m_options & ~static_cast<unsigned>(allow_thsep) &
  426|    242|             ~static_cast<unsigned>(allow_hex)) != 0;
  427|       |
  428|    242|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (428:39): [True: 242, False: 0]
  |  Branch (428:45): [True: 0, False: 242]
  ------------------
  429|      0|            return r.transform_error(map_parse_error_to_scan_error(
  430|      0|                scan_error::invalid_scanned_value,
  431|      0|                "Invalid infinite floating-point value"));
  432|      0|        }
  433|    242|        else if (r) {
  ------------------
  |  Branch (433:18): [True: 0, False: 242]
  ------------------
  434|      0|            return *r;
  435|      0|        }
  436|       |
  437|    242|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (437:39): [True: 242, False: 0]
  |  Branch (437:45): [True: 0, False: 242]
  ------------------
  438|      0|            return unexpected(r.error());
  439|      0|        }
  440|    242|        else if (r) {
  ------------------
  |  Branch (440:18): [True: 0, False: 242]
  ------------------
  441|      0|            return *r;
  442|      0|        }
  443|       |
  444|    242|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (444:13): [True: 238, False: 4]
  |  Branch (444:28): [True: 2, False: 236]
  ------------------
  445|       |            // only hex allowed:
  446|       |            // prefix "0x" allowed, not required
  447|      2|            auto it = ranges::begin(range);
  448|       |
  449|      2|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (449:22): [True: 0, False: 2]
  ------------------
  450|      0|                m_kind = float_kind::hex_with_prefix;
  451|      0|                it = *r;
  452|      0|            }
  453|      2|            else {
  454|      2|                m_kind = float_kind::hex_without_prefix;
  455|      2|            }
  456|       |
  457|      2|            return read_hex(ranges::subrange{it, ranges::end(range)});
  458|      2|        }
  459|    240|        else if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (459:18): [True: 4, False: 236]
  |  Branch (459:34): [True: 4, False: 0]
  ------------------
  460|       |            // only nonhex allowed:
  461|       |            // no prefix allowed
  462|      4|            m_kind = float_kind::generic;
  463|      4|            return read_regular_float(SCN_FWD(range));
  ------------------
  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  464|      4|        }
  465|    236|        else {
  466|       |            // both hex and nonhex allowed:
  467|       |            // check for "0x" prefix -> hex,
  468|       |            // regular otherwise
  469|       |
  470|    236|            if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  153|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 236]
  |  |  ------------------
  ------------------
  471|      0|                m_kind = float_kind::hex_with_prefix;
  472|      0|                return read_hex(ranges::subrange{*r, ranges::end(range)});
  473|      0|            }
  474|       |
  475|    236|            m_kind = float_kind::generic;
  476|    236|            return read_regular(SCN_FWD(range));
  ------------------
  |  |  248|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  477|    236|        }
  478|    242|    }
_ZN3scn2v24impl12float_readerIwE8read_infIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  225|    242|    {
  226|    242|        auto it = ranges::begin(range);
  227|    242|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (227:73): [True: 242, False: 0]
  ------------------
  228|    242|            return unexpected(r.error());
  229|    242|        }
  230|      0|        else {
  231|      0|            it = *r;
  232|      0|        }
  233|       |
  234|      0|        if (auto r = read_matching_string_classic_nocase(
  235|      0|                ranges::subrange{it, ranges::end(range)}, "inity");
  236|      0|            !r) {
  ------------------
  |  Branch (236:13): [True: 0, False: 0]
  ------------------
  237|      0|            m_kind = float_kind::inf_short;
  238|      0|            return it;
  239|      0|        }
  240|      0|        else {
  241|      0|            m_kind = float_kind::inf_long;
  242|      0|            return *r;
  243|      0|        }
  244|      0|    }
_ZN3scn2v24impl12float_readerIwE8read_nanIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  248|    242|    {
  249|    242|        auto it = ranges::begin(range);
  250|    242|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (250:73): [True: 242, False: 0]
  ------------------
  251|    242|            return r.transform_error(map_parse_error_to_scan_error(
  252|    242|                scan_error::invalid_scanned_value,
  253|    242|                "Invalid floating-point NaN value"));
  254|    242|        }
  255|      0|        else {
  256|      0|            it = *r;
  257|      0|        }
  258|       |
  259|      0|        if (auto r = read_matching_code_unit(
  260|      0|                ranges::subrange{it, ranges::end(range)}, '(');
  261|      0|            !r) {
  ------------------
  |  Branch (261:13): [True: 0, False: 0]
  ------------------
  262|      0|            m_kind = float_kind::nan_simple;
  263|      0|            return it;
  264|      0|        }
  265|      0|        else {
  266|      0|            it = *r;
  267|      0|        }
  268|       |
  269|      0|        auto payload_beg_it = it;
  270|      0|        it = read_while_code_unit(
  271|      0|            ranges::subrange{it, ranges::end(range)},
  272|      0|            [](char_type ch) SCN_NOEXCEPT {
  273|      0|                return is_ascii_char(ch) &&
  274|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  275|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  276|      0|            });
  277|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
  278|       |
  279|      0|        m_kind = float_kind::nan_with_payload;
  280|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (280:18): [True: 0, False: 0]
  ------------------
  281|      0|                ranges::subrange{it, ranges::end(range)}, ')')) {
  282|      0|            return *r;
  283|      0|        }
  284|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  285|      0|                                     "Invalid floating-point NaN payload");
  286|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  219|    238|    {
  220|    238|        return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|    238|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  221|    238|    }
_ZN3scn2v24impl12float_readerIwE13read_hexfloatIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_:
  322|      2|    {
  323|      2|        auto it = ranges::begin(range);
  324|       |
  325|      2|        std::ptrdiff_t digits_count = 0;
  326|      2|        if (auto r =
  327|      2|                read_hex_digits(ranges::subrange{it, ranges::end(range)}, true);
  328|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
  329|      2|            return r.transform_error(map_parse_error_to_scan_error(
  330|      2|                scan_error::invalid_scanned_value,
  331|      2|                "Invalid hexadecimal floating-point value"));
  332|      2|        }
  333|      0|        else {
  334|      0|            digits_count += ranges::distance(it, *r);
  335|      0|            it = *r;
  336|      0|        }
  337|       |
  338|      0|        m_integral_part_length = digits_count;
  339|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (339:18): [True: 0, False: 0]
  ------------------
  340|      0|                ranges::subrange{it, ranges::end(range)},
  341|      0|                m_locale_options.decimal_point)) {
  342|      0|            it = *r;
  343|      0|        }
  344|       |
  345|      0|        if (auto r = read_hex_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (345:18): [True: 0, False: 0]
  ------------------
  346|      0|                                     false)) {
  347|      0|            digits_count += ranges::distance(it, *r);
  348|      0|            it = *r;
  349|      0|        }
  350|       |
  351|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  352|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  353|      0|                                         "No significand digits in hexfloat");
  354|      0|        }
  355|       |
  356|      0|        it = read_exponent(ranges::subrange{it, ranges::end(range)}, "pP");
  357|       |
  358|      0|        return it;
  359|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_b:
  202|      2|    {
  203|      2|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2]
  |  |  |  Branch (153:45): [True: 0, False: 2]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  204|      2|                         thsep_allowed)) {
  205|      0|            return read_while1_code_unit(
  206|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  207|      0|                    return char_to_int(ch) < 16 ||
  208|      0|                           ch == m_locale_options.thousands_sep;
  209|      0|                });
  210|      0|        }
  211|       |
  212|      2|        return read_while1_code_unit(
  213|      2|            SCN_FWD(range),
  ------------------
  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  214|      2|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
  215|      2|    }
_ZZN3scn2v24impl12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_bENKUlwE0_clEw:
  214|      2|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 16; });
_ZN3scn2v24impl12float_readerIwE18read_regular_floatIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_:
  364|    240|    {
  365|    240|        const bool allowed_exp = (m_options & allow_scientific) != 0;
  366|    240|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (366:35): [True: 238, False: 2]
  |  Branch (366:50): [True: 2, False: 236]
  ------------------
  367|       |
  368|    240|        auto it = ranges::begin(range);
  369|    240|        std::ptrdiff_t digits_count = 0;
  370|       |
  371|    240|        if (auto r =
  372|    240|                read_dec_digits(ranges::subrange{it, ranges::end(range)}, true);
  373|    240|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 240, False: 0]
  |  |  ------------------
  ------------------
  374|    240|            return r.transform_error(
  375|    240|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
  376|    240|                                              "Invalid floating-point value"));
  377|    240|        }
  378|      0|        else {
  379|      0|            digits_count += ranges::distance(it, *r);
  380|      0|            it = *r;
  381|      0|        }
  382|       |
  383|      0|        m_integral_part_length = digits_count;
  384|      0|        if (auto r = read_matching_code_unit(
  ------------------
  |  Branch (384:18): [True: 0, False: 0]
  ------------------
  385|      0|                ranges::subrange{it, ranges::end(range)},
  386|      0|                m_locale_options.decimal_point)) {
  387|      0|            it = *r;
  388|      0|        }
  389|       |
  390|      0|        if (auto r = read_dec_digits(ranges::subrange{it, ranges::end(range)},
  ------------------
  |  Branch (390:18): [True: 0, False: 0]
  ------------------
  391|      0|                                     false)) {
  392|      0|            digits_count += ranges::distance(it, *r);
  393|      0|            it = *r;
  394|      0|        }
  395|       |
  396|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  397|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  398|      0|                                         "No significand digits in float");
  399|      0|        }
  400|       |
  401|      0|        auto beg_exp_it = it;
  402|      0|        if (allowed_exp) {
  ------------------
  |  Branch (402:13): [True: 0, False: 0]
  ------------------
  403|      0|            it = read_exponent(ranges::subrange{it, ranges::end(range)}, "eE");
  404|      0|        }
  405|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (405:13): [True: 0, False: 0]
  |  Branch (405:29): [True: 0, False: 0]
  ------------------
  406|      0|            return unexpected_scan_error(
  407|      0|                scan_error::invalid_scanned_value,
  408|      0|                "No exponent given to scientific float");
  409|      0|        }
  410|       |
  411|      0|        m_kind =
  412|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (412:13): [True: 0, False: 0]
  ------------------
  413|       |
  414|      0|        return it;
  415|      0|    }
_ZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_b:
  184|    240|    {
  185|    240|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  153|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 240]
  |  |  |  Branch (153:45): [True: 0, False: 240]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  186|    240|                         thsep_allowed)) {
  187|      0|            return read_while1_code_unit(
  188|      0|                SCN_FWD(range), [&](char_type ch) SCN_NOEXCEPT {
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  189|      0|                    return char_to_int(ch) < 10 ||
  190|      0|                           ch == m_locale_options.thousands_sep;
  191|      0|                });
  192|      0|        }
  193|       |
  194|    240|        return read_while1_code_unit(
  195|    240|            SCN_FWD(range),
  ------------------
  |  |  248|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  196|    240|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
  197|    240|    }
_ZZN3scn2v24impl12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_LNS6_13subrange_kindE1EEEE8sentinelILb1EEELSF_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_bENKUlwE0_clEw:
  196|    240|            [](char_type ch) SCN_NOEXCEPT { return char_to_int(ch) < 10; });
_ZN3scn2v24impl12float_readerIwE11read_sourceINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_NS0_6detail10locale_refE:
   72|    236|    {
   73|    236|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  153|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 236]
  |  |  ------------------
  ------------------
   74|      0|            m_locale_options = localized_number_formatting_options<CharT>{
   75|      0|                classic_with_thsep_tag{}};
   76|      0|        }
   77|       |
   78|    236|        return read_source_impl(range);
   79|    236|    }
_ZN3scn2v24impl12float_readerIwE21read_source_localizedIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_NS0_6detail10locale_refE:
   85|     12|    {
   86|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
   87|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  152|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
   88|      0|            m_locale_options.thousands_sep = CharT{0};
   89|      0|        }
   90|       |
   91|     12|        return read_source_impl(range);
   92|     12|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  595|    242|    {
  596|    242|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|    242|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|    242|#if !SCN_DISABLE_LOCALE
  600|    242|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 6, False: 236]
  ------------------
  601|      6|            return read_impl<range_nocvref_t>(
  602|      6|                range, rd,
  603|      6|                [](float_reader<CharT>& r, auto&&... args) {
  604|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  605|      6|                },
  606|      6|                value, loc);
  607|      6|        }
  608|    236|#endif
  609|       |
  610|    236|        return read_impl<range_nocvref_t>(
  611|    236|            range, rd,
  612|    236|            [](float_reader<CharT>& r, auto&&... args) {
  613|    236|                return r.read_source(SCN_FWD(args)...);
  614|    236|            },
  615|    236|            value);
  616|    242|    }
_ZN3scn2v24impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
  632|    242|    {
  633|    242|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
  634|    242|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 242, False: 0]
  |  |  ------------------
  ------------------
  635|    242|            return unexpected(r.error());
  636|    242|        }
  637|       |
  638|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|        return ranges::next(ranges::begin(range), n);
  640|      0|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SS_EEEDaSV_SY_:
  603|      6|                [](float_reader<CharT>& r, auto&&... args) {
  604|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|      6|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_SS_EEEDaSV_SY_:
  612|    236|            [](float_reader<CharT>& r, auto&&... args) {
  613|    236|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|    236|            },
_ZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  595|    248|    {
  596|    248|        using range_nocvref_t = detail::remove_cvref_t<Range>;
  597|    248|        float_reader<CharT> rd{get_options(specs)};
  598|       |
  599|    248|#if !SCN_DISABLE_LOCALE
  600|    248|        if (specs.localized) {
  ------------------
  |  Branch (600:13): [True: 12, False: 236]
  ------------------
  601|     12|            return read_impl<range_nocvref_t>(
  602|     12|                range, rd,
  603|     12|                [](float_reader<CharT>& r, auto&&... args) {
  604|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  605|     12|                },
  606|     12|                value, loc);
  607|     12|        }
  608|    236|#endif
  609|       |
  610|    236|        return read_impl<range_nocvref_t>(
  611|    236|            range, rd,
  612|    236|            [](float_reader<CharT>& r, auto&&... args) {
  613|    236|                return r.read_source(SCN_FWD(args)...);
  614|    236|            },
  615|    236|            value);
  616|    248|    }
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSC_SR_EEEDaSU_SX_:
  603|     12|                [](float_reader<CharT>& r, auto&&... args) {
  604|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  248|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  605|     12|                },
_ZZN3scn2v24impl21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSC_SR_EEEDaSU_SX_:
  612|    236|            [](float_reader<CharT>& r, auto&&... args) {
  613|    236|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  248|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  614|    236|            },
_ZNK3scn2v24impl12float_readerIcE7setsignIdEET_S5_:
  523|  1.32k|    {
  524|  1.32k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.32k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 0, False: 1.32k]
  ------------------
  526|      0|            return -value;
  527|      0|        }
  528|  1.32k|        return value;
  529|  1.32k|    }
_ZNK3scn2v24impl12float_readerIwE7setsignIdEET_S5_:
  523|  1.10k|    {
  524|  1.10k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  242|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  525|  1.10k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (525:13): [True: 0, False: 1.10k]
  ------------------
  526|      0|            return -value;
  527|      0|        }
  528|  1.10k|        return value;
  529|  1.10k|    }

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|     64|{
  218|     64|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|     64|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|     64|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|     64|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|     64|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|     64|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|     64|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 64, False: 0]
  ------------------
  224|     64|        SCN_UNLIKELY_ATTR
  225|     64|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|     64|                                     "Invalid integer value");
  227|     64|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 0, False: 0]
  ------------------
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.36k|{
  218|  1.36k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.36k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.36k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.36k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.36k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.36k, False: 0]
  ------------------
  224|  1.36k|        SCN_UNLIKELY_ATTR
  225|  1.36k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.36k|                                     "Invalid integer value");
  227|  1.36k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 0, False: 0]
  ------------------
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.22k|{
  218|  1.22k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.22k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.22k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.22k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.22k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.22k, False: 0]
  ------------------
  224|  1.22k|        SCN_UNLIKELY_ATTR
  225|  1.22k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.22k|                                     "Invalid integer value");
  227|  1.22k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.36k|{
  218|  1.36k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.36k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.36k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.36k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.36k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.36k, False: 0]
  ------------------
  224|  1.36k|        SCN_UNLIKELY_ATTR
  225|  1.36k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.36k|                                     "Invalid integer value");
  227|  1.36k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 0, False: 0]
  ------------------
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.15k|{
  218|  1.15k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.15k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.15k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.15k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.15k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.15k, False: 0]
  ------------------
  224|  1.15k|        SCN_UNLIKELY_ATTR
  225|  1.15k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.15k|                                     "Invalid integer value");
  227|  1.15k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.30k|{
  218|  1.30k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.30k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.30k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.30k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.30k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.30k, False: 0]
  ------------------
  224|  1.30k|        SCN_UNLIKELY_ATTR
  225|  1.30k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.30k|                                     "Invalid integer value");
  227|  1.30k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 0, False: 0]
  ------------------
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}
_ZN3scn2v24impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.08k|{
  218|  1.08k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.08k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.08k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.08k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.08k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 1.08k, False: 0]
  ------------------
  224|  1.08k|        SCN_UNLIKELY_ATTR
  225|  1.08k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  1.08k|                                     "Invalid integer value");
  227|  1.08k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|      0|    auto start = source.data();
  231|      0|    const auto end = source.data() + source.size();
  232|      0|    {
  233|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 0, False: 0]
  ------------------
  234|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 0, False: 0]
  ------------------
  235|      0|                break;
  236|      0|            }
  237|      0|        }
  238|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  239|      0|            value = 0;
  240|      0|            return ranges::next(source.begin(),
  241|      0|                                ranges::distance(source.data(), start));
  242|      0|        }
  243|      0|    }
  244|       |
  245|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|      0|        if (base == 10) {
  247|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|      0|                             detail::make_string_view_from_pointers(start, end),
  249|      0|                             value, sign == sign_type::minus_sign));
  250|      0|            return ranges::next(source.begin(),
  251|      0|                                ranges::distance(source.data(), ptr));
  252|      0|        }
  253|      0|    }
  254|       |
  255|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|                     detail::make_string_view_from_pointers(start, end), value,
  257|      0|                     base, sign == sign_type::minus_sign));
  258|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|      0|}

_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  4.13k|{
  121|  4.13k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  4.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  4.13k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  4.13k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  4.13k|        parse_integer_base_prefix(
  126|  4.13k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  4.13k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 4.13k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|  4.13k|    else {
  139|  4.13k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 4.13k]
  ------------------
  140|  4.13k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 4.13k, False: 0]
  ------------------
  141|  4.13k|            digits_begin_it = base_prefix_begin_it;
  142|  4.13k|        }
  143|  4.13k|    }
  144|       |
  145|  4.13k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 4.13k, False: 0]
  ------------------
  146|  4.13k|        sign = sign_type::plus_sign;
  147|  4.13k|    }
  148|  4.13k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  4.13k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  4.13k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  4.13k|{
   88|  4.13k|    switch (base) {
   89|     54|        case 2:
  ------------------
  |  Branch (89:9): [True: 54, False: 4.08k]
  ------------------
   90|       |            // allow 0b/0B
   91|     54|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|     54|                    false};
   93|       |
   94|     22|        case 8: {
  ------------------
  |  Branch (94:9): [True: 22, False: 4.11k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|     22|            bool zero_parsed = false;
   97|     22|            auto it = apply_opt(
   98|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|     22|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  1.33k|        case 16:
  ------------------
  |  Branch (102:9): [True: 1.33k, False: 2.80k]
  ------------------
  103|       |            // allow 0x/0X
  104|  1.33k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  1.33k|                    false};
  106|       |
  107|  2.69k|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.69k, False: 1.44k]
  ------------------
  108|       |            // detect base
  109|  2.69k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|     36|        default:
  ------------------
  |  Branch (111:9): [True: 36, False: 4.10k]
  ------------------
  112|       |            // no base prefix allowed
  113|     36|            return {ranges::begin(range), base, false};
  114|  4.13k|    }
  115|  4.13k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.75k|{
   38|  2.75k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.75k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.71k|{
   53|  2.71k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 2.71k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|  2.71k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 2.71k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|  2.71k|    return unexpected(parse_error::error);
   63|  2.71k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  4.02k|{
   45|  4.02k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  4.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  4.02k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.69k|{
   69|  2.69k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 2.69k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  2.69k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 2.69k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  2.69k|    {
   76|  2.69k|        bool zero_parsed{false};
   77|  2.69k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 2.69k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  2.69k|    }
   81|  2.69k|    return {ranges::begin(range), 10, false};
   82|  2.69k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  4.09k|{
  156|  4.09k|    using char_type = detail::char_t<Range>;
  157|       |
  158|  4.09k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  4.09k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.09k]
  |  |  ------------------
  ------------------
  160|      0|            return unexpected_scan_error(
  161|      0|                scan_error::invalid_scanned_value,
  162|      0|                "Failed to parse integer: No digits found");
  163|      0|        }
  164|  4.09k|        return ranges::end(range);
  165|  4.09k|    }
  166|  4.09k|    else {
  167|  4.09k|        return read_while1_code_unit(
  168|  4.09k|                   range, [&](char_type ch)
  169|  4.09k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  4.09k|            .transform_error(map_parse_error_to_scan_error(
  171|  4.09k|                scan_error::invalid_scanned_value,
  172|  4.09k|                "Failed to parse integer: No digits found"));
  173|  4.09k|    }
  174|  4.09k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  1.12k|    {
  324|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  1.12k|        return read_default_with_base(range, value, 0);
  326|  1.12k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  1.12k|    {
  287|  1.12k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  1.12k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  1.12k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  1.12k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  1.12k|                return unexpected_scan_error(
  293|  1.12k|                    scan_error::invalid_scanned_value,
  294|  1.12k|                    "Unexpected '-' sign when parsing an "
  295|  1.12k|                    "unsigned value");
  296|  1.12k|            }
  297|  1.12k|        }
  298|       |
  299|  1.12k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 1.12k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  2.25k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  2.25k|                                     ranges::subrange{prefix_result.iterator,
  306|  2.25k|                                                      ranges::end(range)},
  307|  2.25k|                                     prefix_result.parsed_base));
  308|       |
  309|  2.25k|        auto buf = make_contiguous_buffer(
  310|  2.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  2.25k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.12k|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  2.25k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  1.12k|    {
  324|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  1.12k|        return read_default_with_base(range, value, 0);
  326|  1.12k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  1.12k|    {
  287|  1.12k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  1.12k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  1.12k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  1.12k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 1.12k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  1.12k|        }
  298|       |
  299|  1.12k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 1.12k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  2.25k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  2.25k|                                     ranges::subrange{prefix_result.iterator,
  306|  2.25k|                                                      ranges::end(range)},
  307|  2.25k|                                     prefix_result.parsed_base));
  308|       |
  309|  2.25k|        auto buf = make_contiguous_buffer(
  310|  2.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  2.25k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.12k|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  2.25k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEmEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.30k|    {
  335|  1.30k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.30k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.30k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 1.30k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  1.30k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 1.30k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  1.30k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  1.30k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.30k, False: 0]
  |  |  ------------------
  ------------------
  361|  1.30k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  1.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  1.30k|                    parse_integer_digits_without_thsep(
  363|  1.30k|                        ranges::subrange{prefix_result.iterator,
  364|  1.30k|                                         ranges::end(range)},
  365|  1.30k|                        prefix_result.parsed_base));
  366|       |
  367|  1.30k|            auto buf = make_contiguous_buffer(
  368|  1.30k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  1.30k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  1.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.30k|    }                                                  \
  |  |  |  |   70|  1.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|  1.30k|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|     44|{
  185|     44|    std::basic_string<CharT> output;
  186|     44|    std::string thsep_indices;
  187|     44|    auto it = ranges::begin(range);
  188|     44|    bool digit_matched = false;
  189|     44|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 44, False: 0]
  ------------------
  190|     44|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 44]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|     44|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 44, False: 0]
  ------------------
  195|     44|            break;
  196|     44|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|     44|    }
  202|     44|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
  203|     44|        return unexpected_scan_error(
  204|     44|            scan_error::invalid_scanned_value,
  205|     44|            "Failed to parse integer: No digits found");
  206|     44|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|     44|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  14.7k|    {
  280|  14.7k|        detail::check_int_type_specs(specs, eh);
  281|  14.7k|    }
_ZN3scn2v24impl20parse_integer_prefixINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESG_i:
  120|    928|{
  121|    928|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|    928|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    928|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    928|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 928]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    928|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    928|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|    928|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|    928|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|    928|        parse_integer_base_prefix(
  126|    928|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|    928|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 928]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|    928|    else {
  139|    928|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 928]
  |  Branch (139:13): [True: 928, False: 0]
  ------------------
  140|    928|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 928, False: 0]
  ------------------
  141|    928|            digits_begin_it = base_prefix_begin_it;
  142|    928|        }
  143|    928|    }
  144|       |
  145|    928|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 928, False: 0]
  ------------------
  146|    928|        sign = sign_type::plus_sign;
  147|    928|    }
  148|    928|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|    928|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|    928|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEibEEEOSM_i:
   87|    928|{
   88|    928|    switch (base) {
   89|     18|        case 2:
  ------------------
  |  Branch (89:9): [True: 18, False: 910]
  ------------------
   90|       |            // allow 0b/0B
   91|     18|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|     18|                    false};
   93|       |
   94|      6|        case 8: {
  ------------------
  |  Branch (94:9): [True: 6, False: 922]
  ------------------
   95|       |            // allow 0o/0O/0
   96|      6|            bool zero_parsed = false;
   97|      6|            auto it = apply_opt(
   98|      6|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|      6|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|    298|        case 16:
  ------------------
  |  Branch (102:9): [True: 298, False: 630]
  ------------------
  103|       |            // allow 0x/0X
  104|    298|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|    298|                    false};
  106|       |
  107|    594|        case 0:
  ------------------
  |  Branch (107:9): [True: 594, False: 334]
  ------------------
  108|       |            // detect base
  109|    594|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|    594|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|     12|        default:
  ------------------
  |  Branch (111:9): [True: 12, False: 916]
  ------------------
  112|       |            // no base prefix allowed
  113|     12|            return {ranges::begin(range), base, false};
  114|    928|    }
  115|    928|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   37|    612|{
   38|    612|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|    612|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_Rb:
   52|    600|{
   53|    600|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 600]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|    600|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 600]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|    600|    return unexpected(parse_error::error);
   63|    600|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   44|    892|{
   45|    892|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|    892|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEibEEEOSM_:
   68|    594|{
   69|    594|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 594]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|    594|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 594]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|    594|    {
   76|    594|        bool zero_parsed{false};
   77|    594|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 594]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|    594|    }
   81|    594|    return {ranges::begin(range), 10, false};
   82|    594|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESL_i:
  155|    912|{
  156|    912|    using char_type = detail::char_t<Range>;
  157|       |
  158|    912|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|    912|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|    912|            return unexpected_scan_error(
  161|    912|                scan_error::invalid_scanned_value,
  162|    912|                "Failed to parse integer: No digits found");
  163|    912|        }
  164|    912|        return ranges::end(range);
  165|    912|    }
  166|    912|    else {
  167|    912|        return read_while1_code_unit(
  168|    912|                   range, [&](char_type ch)
  169|    912|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|    912|            .transform_error(map_parse_error_to_scan_error(
  171|    912|                scan_error::invalid_scanned_value,
  172|    912|                "Failed to parse integer: No digits found"));
  173|    912|    }
  174|    912|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESL_iENKUlcE_clEc:
  169|    912|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSK_12basic_stringIT0_NSK_11char_traitsISR_EENSK_9allocatorISR_EEEENSQ_IcNSS_IcEENSU_IcEEEEEEEEESN_iRKNS1_35localized_number_formatting_optionsISR_EE:
  184|     16|{
  185|     16|    std::basic_string<CharT> output;
  186|     16|    std::string thsep_indices;
  187|     16|    auto it = ranges::begin(range);
  188|     16|    bool digit_matched = false;
  189|     16|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 16, False: 0]
  ------------------
  190|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 16]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 16, False: 0]
  ------------------
  195|     16|            break;
  196|     16|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|     16|    }
  202|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
  203|     16|        return unexpected_scan_error(
  204|     16|            scan_error::invalid_scanned_value,
  205|     16|            "Failed to parse integer: No digits found");
  206|     16|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|     16|}
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|     64|    {
  335|     64|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 64]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     64|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|     64|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|     64|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 64]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|     64|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 64]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|     64|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|     64|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 64, False: 0]
  |  |  ------------------
  ------------------
  361|     64|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 64]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     64|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|     64|                    parse_integer_digits_without_thsep(
  363|     64|                        ranges::subrange{prefix_result.iterator,
  364|     64|                                         ranges::end(range)},
  365|     64|                        prefix_result.parsed_base));
  366|       |
  367|     64|            auto buf = make_contiguous_buffer(
  368|     64|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|     64|            SCN_TRY(result_it,
  ------------------
  |  |   71|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 64, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     64|    }                                                  \
  |  |  |  |   70|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|     64|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  334|    310|    {
  335|    310|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    310|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    310|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    310|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    310|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    310|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    310|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 310]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    310|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 310]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    310|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    310|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 302, False: 8]
  |  |  ------------------
  ------------------
  361|    302|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 302, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    302|    }                                                  \
  |  |  |  |   70|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      8|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      8|            localized_number_formatting_options<CharT>{loc};
  383|      8|#endif
  384|       |
  385|      8|        SCN_TRY(
  ------------------
  |  |   71|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|    258|    {
  335|    258|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    258|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    258|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 258]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    258|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 258]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    258|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    258|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 236, False: 22]
  |  |  ------------------
  ------------------
  361|    236|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|    236|                    parse_integer_digits_without_thsep(
  363|    236|                        ranges::subrange{prefix_result.iterator,
  364|    236|                                         ranges::end(range)},
  365|    236|                        prefix_result.parsed_base));
  366|       |
  367|    236|            auto buf = make_contiguous_buffer(
  368|    236|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|    236|            SCN_TRY(result_it,
  ------------------
  |  |   71|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 236, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    236|    }                                                  \
  |  |  |  |   70|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|    236|        }
  377|       |
  378|     22|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|     22|            localized_number_formatting_options<CharT>{loc};
  383|     22|#endif
  384|       |
  385|     22|        SCN_TRY(
  ------------------
  |  |   71|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     22|    }                                                  \
  |  |  |  |   70|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  334|    310|    {
  335|    310|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    310|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    310|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    310|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    310|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    310|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    310|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 310]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    310|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 310]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    310|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    310|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 302, False: 8]
  |  |  ------------------
  ------------------
  361|    302|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 302, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    302|    }                                                  \
  |  |  |  |   70|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      8|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      8|            localized_number_formatting_options<CharT>{loc};
  383|      8|#endif
  384|       |
  385|      8|        SCN_TRY(
  ------------------
  |  |   71|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|    258|    {
  335|    258|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    258|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    258|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 258]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    258|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 258]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    258|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    258|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 236, False: 22]
  |  |  ------------------
  ------------------
  361|    236|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|    236|                    parse_integer_digits_without_thsep(
  363|    236|                        ranges::subrange{prefix_result.iterator,
  364|    236|                                         ranges::end(range)},
  365|    236|                        prefix_result.parsed_base));
  366|       |
  367|    236|            auto buf = make_contiguous_buffer(
  368|    236|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|    236|            SCN_TRY(result_it,
  ------------------
  |  |   71|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 236, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    236|    }                                                  \
  |  |  |  |   70|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|    236|        }
  377|       |
  378|     22|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|     22|            localized_number_formatting_options<CharT>{loc};
  383|     22|#endif
  384|       |
  385|     22|        SCN_TRY(
  ------------------
  |  |   71|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     22|    }                                                  \
  |  |  |  |   70|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEmEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
  334|    286|    {
  335|    286|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    286|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    286|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 286]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    286|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 286]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    286|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    286|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 286, False: 0]
  |  |  ------------------
  ------------------
  361|    286|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    286|    }                                                  \
  |  |  |  |   70|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
  334|     22|    {
  335|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|     22|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 22]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 22]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
  361|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     22|    }                                                  \
  |  |  |  |   70|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.51k|{
  121|  3.51k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.51k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.51k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.51k|        parse_integer_base_prefix(
  126|  3.51k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.51k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 3.51k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|  3.51k|    else {
  139|  3.51k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 3.51k]
  ------------------
  140|  3.51k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 3.51k, False: 0]
  ------------------
  141|  3.51k|            digits_begin_it = base_prefix_begin_it;
  142|  3.51k|        }
  143|  3.51k|    }
  144|       |
  145|  3.51k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 3.51k, False: 0]
  ------------------
  146|  3.51k|        sign = sign_type::plus_sign;
  147|  3.51k|    }
  148|  3.51k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.51k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.51k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.51k|{
   88|  3.51k|    switch (base) {
   89|     66|        case 2:
  ------------------
  |  Branch (89:9): [True: 66, False: 3.44k]
  ------------------
   90|       |            // allow 0b/0B
   91|     66|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|     66|                    false};
   93|       |
   94|     16|        case 8: {
  ------------------
  |  Branch (94:9): [True: 16, False: 3.49k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|     16|            bool zero_parsed = false;
   97|     16|            auto it = apply_opt(
   98|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|     16|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  1.12k|        case 16:
  ------------------
  |  Branch (102:9): [True: 1.12k, False: 2.38k]
  ------------------
  103|       |            // allow 0x/0X
  104|  1.12k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  1.12k|                    false};
  106|       |
  107|  2.26k|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.26k, False: 1.24k]
  ------------------
  108|       |            // detect base
  109|  2.26k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|     42|        default:
  ------------------
  |  Branch (111:9): [True: 42, False: 3.46k]
  ------------------
  112|       |            // no base prefix allowed
  113|     42|            return {ranges::begin(range), base, false};
  114|  3.51k|    }
  115|  3.51k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.33k|{
   38|  2.33k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.33k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.28k|{
   53|  2.28k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 2.28k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|  2.28k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 2.28k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|  2.28k|    return unexpected(parse_error::error);
   63|  2.28k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  3.38k|{
   45|  3.38k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.38k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.26k|{
   69|  2.26k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 2.26k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  2.26k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 2.26k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  2.26k|    {
   76|  2.26k|        bool zero_parsed{false};
   77|  2.26k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 2.26k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  2.26k|    }
   81|  2.26k|    return {ranges::begin(range), 10, false};
   82|  2.26k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.47k|{
  156|  3.47k|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.47k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.47k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.47k]
  |  |  ------------------
  ------------------
  160|      0|            return unexpected_scan_error(
  161|      0|                scan_error::invalid_scanned_value,
  162|      0|                "Failed to parse integer: No digits found");
  163|      0|        }
  164|  3.47k|        return ranges::end(range);
  165|  3.47k|    }
  166|  3.47k|    else {
  167|  3.47k|        return read_while1_code_unit(
  168|  3.47k|                   range, [&](char_type ch)
  169|  3.47k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.47k|            .transform_error(map_parse_error_to_scan_error(
  171|  3.47k|                scan_error::invalid_scanned_value,
  172|  3.47k|                "Failed to parse integer: No digits found"));
  173|  3.47k|    }
  174|  3.47k|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|    892|    {
  324|    892|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    892|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|    892|        return read_default_with_base(range, value, 0);
  326|    892|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|    892|    {
  287|    892|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|    892|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|    892|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|    892|            if (prefix_result.sign == sign_type::minus_sign) {
  292|    892|                return unexpected_scan_error(
  293|    892|                    scan_error::invalid_scanned_value,
  294|    892|                    "Unexpected '-' sign when parsing an "
  295|    892|                    "unsigned value");
  296|    892|            }
  297|    892|        }
  298|       |
  299|    892|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 892]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  1.78k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  1.78k|                                     ranges::subrange{prefix_result.iterator,
  306|  1.78k|                                                      ranges::end(range)},
  307|  1.78k|                                     prefix_result.parsed_base));
  308|       |
  309|  1.78k|        auto buf = make_contiguous_buffer(
  310|  1.78k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  1.78k|        SCN_TRY(result_it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 892, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    892|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  1.78k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|    892|    {
  324|    892|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    892|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|    892|        return read_default_with_base(range, value, 0);
  326|    892|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|    892|    {
  287|    892|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|    892|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|    892|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|    892|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 892]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|    892|        }
  298|       |
  299|    892|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 892]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  1.78k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  1.78k|                                     ranges::subrange{prefix_result.iterator,
  306|  1.78k|                                                      ranges::end(range)},
  307|  1.78k|                                     prefix_result.parsed_base));
  308|       |
  309|  1.78k|        auto buf = make_contiguous_buffer(
  310|  1.78k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  1.78k|        SCN_TRY(result_it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 892, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    892|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  1.78k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEmEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.08k|    {
  335|  1.08k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.08k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.08k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 1.08k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  1.08k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 1.08k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  1.08k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  1.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.08k, False: 0]
  |  |  ------------------
  ------------------
  361|  1.08k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  1.08k|                    parse_integer_digits_without_thsep(
  363|  1.08k|                        ranges::subrange{prefix_result.iterator,
  364|  1.08k|                                         ranges::end(range)},
  365|  1.08k|                        prefix_result.parsed_base));
  366|       |
  367|  1.08k|            auto buf = make_contiguous_buffer(
  368|  1.08k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  1.08k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.08k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.08k|    }                                                  \
  |  |  |  |   70|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|  1.08k|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|     40|{
  185|     40|    std::basic_string<CharT> output;
  186|     40|    std::string thsep_indices;
  187|     40|    auto it = ranges::begin(range);
  188|     40|    bool digit_matched = false;
  189|     40|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 40, False: 0]
  ------------------
  190|     40|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 40]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|     40|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 40, False: 0]
  ------------------
  195|     40|            break;
  196|     40|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|     40|    }
  202|     40|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
  203|     40|        return unexpected_scan_error(
  204|     40|            scan_error::invalid_scanned_value,
  205|     40|            "Failed to parse integer: No digits found");
  206|     40|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|     40|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  11.2k|    {
  280|  11.2k|        detail::check_int_type_specs(specs, eh);
  281|  11.2k|    }
_ZN3scn2v24impl20parse_integer_prefixINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESG_i:
  120|    776|{
  121|    776|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|    776|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    776|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    776|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 776]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    776|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    776|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|    776|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|    776|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|    776|        parse_integer_base_prefix(
  126|    776|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|    776|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 776]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|    776|    else {
  139|    776|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 776]
  |  Branch (139:13): [True: 776, False: 0]
  ------------------
  140|    776|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 776, False: 0]
  ------------------
  141|    776|            digits_begin_it = base_prefix_begin_it;
  142|    776|        }
  143|    776|    }
  144|       |
  145|    776|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 776, False: 0]
  ------------------
  146|    776|        sign = sign_type::plus_sign;
  147|    776|    }
  148|    776|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|    776|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|    776|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEibEEEOSM_i:
   87|    776|{
   88|    776|    switch (base) {
   89|     18|        case 2:
  ------------------
  |  Branch (89:9): [True: 18, False: 758]
  ------------------
   90|       |            // allow 0b/0B
   91|     18|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|     18|                    false};
   93|       |
   94|      6|        case 8: {
  ------------------
  |  Branch (94:9): [True: 6, False: 770]
  ------------------
   95|       |            // allow 0o/0O/0
   96|      6|            bool zero_parsed = false;
   97|      6|            auto it = apply_opt(
   98|      6|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|      6|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|    246|        case 16:
  ------------------
  |  Branch (102:9): [True: 246, False: 530]
  ------------------
  103|       |            // allow 0x/0X
  104|    246|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|    246|                    false};
  106|       |
  107|    494|        case 0:
  ------------------
  |  Branch (107:9): [True: 494, False: 282]
  ------------------
  108|       |            // detect base
  109|    494|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|    494|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|     12|        default:
  ------------------
  |  Branch (111:9): [True: 12, False: 764]
  ------------------
  112|       |            // no base prefix allowed
  113|     12|            return {ranges::begin(range), base, false};
  114|    776|    }
  115|    776|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   37|    512|{
   38|    512|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|    512|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_Rb:
   52|    500|{
   53|    500|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 500]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|    500|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 500]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|    500|    return unexpected(parse_error::error);
   63|    500|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_:
   44|    740|{
   45|    740|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|    740|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEibEEEOSM_:
   68|    494|{
   69|    494|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 494]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|    494|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 494]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|    494|    {
   76|    494|        bool zero_parsed{false};
   77|    494|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 494]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|    494|    }
   81|    494|    return {ranges::begin(range), 10, false};
   82|    494|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESL_i:
  155|    760|{
  156|    760|    using char_type = detail::char_t<Range>;
  157|       |
  158|    760|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|    760|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|    760|            return unexpected_scan_error(
  161|    760|                scan_error::invalid_scanned_value,
  162|    760|                "Failed to parse integer: No digits found");
  163|    760|        }
  164|    760|        return ranges::end(range);
  165|    760|    }
  166|    760|    else {
  167|    760|        return read_while1_code_unit(
  168|    760|                   range, [&](char_type ch)
  169|    760|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|    760|            .transform_error(map_parse_error_to_scan_error(
  171|    760|                scan_error::invalid_scanned_value,
  172|    760|                "Failed to parse integer: No digits found"));
  173|    760|    }
  174|    760|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESL_iENKUlwE_clEw:
  169|    760|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_LNS4_13subrange_kindE1EEEE8sentinelILb1EEELSD_0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSK_12basic_stringIT0_NSK_11char_traitsISR_EENSK_9allocatorISR_EEEENSQ_IcNSS_IcEENSU_IcEEEEEEEEESN_iRKNS1_35localized_number_formatting_optionsISR_EE:
  184|     16|{
  185|     16|    std::basic_string<CharT> output;
  186|     16|    std::string thsep_indices;
  187|     16|    auto it = ranges::begin(range);
  188|     16|    bool digit_matched = false;
  189|     16|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 16, False: 0]
  ------------------
  190|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 16]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 16, False: 0]
  ------------------
  195|     16|            break;
  196|     16|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|     16|    }
  202|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
  203|     16|        return unexpected_scan_error(
  204|     16|            scan_error::invalid_scanned_value,
  205|     16|            "Failed to parse integer: No digits found");
  206|     16|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|     16|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  334|    260|    {
  335|    260|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    260|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    260|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 260]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    260|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 260]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    260|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    260|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 252, False: 8]
  |  |  ------------------
  ------------------
  361|    252|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    252|    }                                                  \
  |  |  |  |   70|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      8|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      8|            localized_number_formatting_options<CharT>{loc};
  383|      8|#endif
  384|       |
  385|      8|        SCN_TRY(
  ------------------
  |  |   71|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|    354|    {
  335|    354|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    354|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    354|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 354]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    354|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 354]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    354|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    354|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 334, False: 20]
  |  |  ------------------
  ------------------
  361|    334|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|    334|                    parse_integer_digits_without_thsep(
  363|    334|                        ranges::subrange{prefix_result.iterator,
  364|    334|                                         ranges::end(range)},
  365|    334|                        prefix_result.parsed_base));
  366|       |
  367|    334|            auto buf = make_contiguous_buffer(
  368|    334|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|    334|            SCN_TRY(result_it,
  ------------------
  |  |   71|    334|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    334|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    334|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    334|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 334, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    334|    }                                                  \
  |  |  |  |   70|    334|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|    334|        }
  377|       |
  378|     20|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|     20|            localized_number_formatting_options<CharT>{loc};
  383|     20|#endif
  384|       |
  385|     20|        SCN_TRY(
  ------------------
  |  |   71|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERT0_NSM_10locale_refE:
  334|    260|    {
  335|    260|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    260|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    260|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 260]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    260|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 260]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    260|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    260|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 252, False: 8]
  |  |  ------------------
  ------------------
  361|    252|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    252|    }                                                  \
  |  |  |  |   70|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      8|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      8|            localized_number_formatting_options<CharT>{loc};
  383|      8|#endif
  384|       |
  385|      8|        SCN_TRY(
  ------------------
  |  |   71|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|    284|    {
  335|    284|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    284|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    284|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 284]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    284|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 284]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    284|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    284|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 264, False: 20]
  |  |  ------------------
  ------------------
  361|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 264]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|    264|                    parse_integer_digits_without_thsep(
  363|    264|                        ranges::subrange{prefix_result.iterator,
  364|    264|                                         ranges::end(range)},
  365|    264|                        prefix_result.parsed_base));
  366|       |
  367|    264|            auto buf = make_contiguous_buffer(
  368|    264|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|    264|            SCN_TRY(result_it,
  ------------------
  |  |   71|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    264|    }                                                  \
  |  |  |  |   70|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|    264|        }
  377|       |
  378|     20|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|     20|            localized_number_formatting_options<CharT>{loc};
  383|     20|#endif
  384|       |
  385|     20|        SCN_TRY(
  ------------------
  |  |   71|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEmEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
  334|    234|    {
  335|    234|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 234]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    234|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|    234|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|    234|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 234]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|    234|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 234]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|    234|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|    234|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 234, False: 0]
  |  |  ------------------
  ------------------
  361|    234|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    234|    }                                                  \
  |  |  |  |   70|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
  334|     22|    {
  335|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|     22|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 22]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 22]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
  361|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     22|    }                                                  \
  |  |  |  |   70|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|      0|                    parse_integer_digits_without_thsep(
  363|      0|                        ranges::subrange{prefix_result.iterator,
  364|      0|                                         ranges::end(range)},
  365|      0|                        prefix_result.parsed_base));
  366|       |
  367|      0|            auto buf = make_contiguous_buffer(
  368|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|      0|            SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      0|                                        prefix_result.parsed_base));
  372|       |
  373|      0|            return ranges_polyfill::batch_next(
  374|      0|                prefix_result.iterator,
  375|      0|                ranges::distance(buf.view().begin(), result_it));
  376|      0|        }
  377|       |
  378|      0|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|      0|            localized_number_formatting_options<CharT>{loc};
  383|      0|#endif
  384|       |
  385|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  5.49k|{
   69|  5.49k|    auto r = read_one_of_code_unit(range, "+-");
   70|  5.49k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 5.49k, False: 0]
  ------------------
   71|  5.49k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 5.49k, False: 0]
  ------------------
   72|  5.49k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  5.49k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  5.49k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl11char_to_intEc:
   50|  21.7k|{
   51|  21.7k|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  21.7k|}
_ZN3scn2v24impl18parse_numeric_signIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeENS1_9sign_typeEEEEEOSI_:
   68|  1.22k|{
   69|  1.22k|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.22k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.22k, False: 0]
  ------------------
   71|  1.22k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.22k, False: 0]
  ------------------
   72|  1.22k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.22k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.22k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  4.65k|{
   69|  4.65k|    auto r = read_one_of_code_unit(range, "+-");
   70|  4.65k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 4.65k, False: 0]
  ------------------
   71|  4.65k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 4.65k, False: 0]
  ------------------
   72|  4.65k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  4.65k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  4.65k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl11char_to_intEw:
   54|  9.95k|{
   55|  9.95k|#if WCHAR_MIN < 0
   56|  9.95k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 9.95k, False: 0]
  |  Branch (56:20): [True: 9.93k, False: 16]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  9.93k|        return char_to_int(static_cast<char>(ch));
   61|  9.93k|    }
   62|     16|    return 255;
   63|  9.95k|}
_ZN3scn2v24impl18parse_numeric_signIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeENS1_9sign_typeEEEEEOSI_:
   68|  1.01k|{
   69|  1.01k|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.01k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.01k, False: 0]
  ------------------
   71|  1.01k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.01k, False: 0]
  ------------------
   72|  1.01k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.01k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.01k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZNK3scn2v24impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
   33|  1.58k|    {
   34|  1.58k|        return true;
   35|  1.58k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RPvNS0_6detail10locale_refE:
   50|  1.30k|    {
   51|  1.30k|        detail::format_specs specs{};
   52|  1.30k|        specs.type = detail::presentation_type::int_hex;
   53|       |
   54|  1.30k|        std::uintptr_t intvalue{};
   55|  1.30k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  |   71|  1.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.30k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.30k|    }                                                  \
  |  |  |  |   70|  1.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      0|                                                                intvalue, loc));
   57|      0|        value = reinterpret_cast<void*>(intvalue);
   58|      0|        return result;
   59|  1.30k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
   38|  7.32k|    {
   39|  7.32k|        reader_error_handler eh{};
   40|  7.32k|        detail::check_pointer_type_specs(specs, eh);
   41|  7.32k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  7.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.86k, False: 460]
  |  |  ------------------
  ------------------
   42|  6.86k|            return {scan_error::invalid_format_string, eh.m_msg};
   43|  6.86k|        }
   44|    460|        return {};
   45|  7.32k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
   67|    286|    {
   68|    286|        SCN_UNUSED(specs);
  ------------------
  |  |  227|    286|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   69|    286|        return read_default(range, value, loc);
   70|    286|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RPvNS0_6detail10locale_refE:
   50|    286|    {
   51|    286|        detail::format_specs specs{};
   52|    286|        specs.type = detail::presentation_type::int_hex;
   53|       |
   54|    286|        std::uintptr_t intvalue{};
   55|    286|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  |   71|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    286|    }                                                  \
  |  |  |  |   70|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      0|                                                                intvalue, loc));
   57|      0|        value = reinterpret_cast<void*>(intvalue);
   58|      0|        return result;
   59|    286|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIcE10read_specsIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RKNS0_6detail12format_specsERPvNSJ_10locale_refE:
   67|    174|    {
   68|    174|        SCN_UNUSED(specs);
  ------------------
  |  |  227|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   69|    174|        return read_default(range, value, loc);
   70|    174|    }
_ZNK3scn2v24impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
   33|  1.32k|    {
   34|  1.32k|        return true;
   35|  1.32k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RPvNS0_6detail10locale_refE:
   50|  1.08k|    {
   51|  1.08k|        detail::format_specs specs{};
   52|  1.08k|        specs.type = detail::presentation_type::int_hex;
   53|       |
   54|  1.08k|        std::uintptr_t intvalue{};
   55|  1.08k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  |   71|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.08k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.08k|    }                                                  \
  |  |  |  |   70|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      0|                                                                intvalue, loc));
   57|      0|        value = reinterpret_cast<void*>(intvalue);
   58|      0|        return result;
   59|  1.08k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
   38|  5.56k|    {
   39|  5.56k|        reader_error_handler eh{};
   40|  5.56k|        detail::check_pointer_type_specs(specs, eh);
   41|  5.56k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.13k, False: 430]
  |  |  ------------------
  ------------------
   42|  5.13k|            return {scan_error::invalid_format_string, eh.m_msg};
   43|  5.13k|        }
   44|    430|        return {};
   45|  5.56k|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
   67|    234|    {
   68|    234|        SCN_UNUSED(specs);
  ------------------
  |  |  227|    234|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   69|    234|        return read_default(range, value, loc);
   70|    234|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESH_RPvNS0_6detail10locale_refE:
   50|    234|    {
   51|    234|        detail::format_specs specs{};
   52|    234|        specs.type = detail::presentation_type::int_hex;
   53|       |
   54|    234|        std::uintptr_t intvalue{};
   55|    234|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  |   71|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    234|    }                                                  \
  |  |  |  |   70|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      0|                                                                intvalue, loc));
   57|      0|        value = reinterpret_cast<void*>(intvalue);
   58|      0|        return result;
   59|    234|    }
_ZN3scn2v24impl23reader_impl_for_voidptrIwE10read_specsIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS6_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_RKNS0_6detail12format_specsERPvNSJ_10locale_refE:
   67|    196|    {
   68|    196|        SCN_UNUSED(specs);
  ------------------
  |  |  227|    196|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   69|    196|        return read_default(range, value, loc);
   70|    196|    }

_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  34.9k|{
   43|  34.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  34.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 34.9k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|  34.9k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 21.6k, False: 13.3k]
  ------------------
   48|  21.6k|        return ranges::begin(range);
   49|  21.6k|    }
   50|       |
   51|  13.3k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  34.9k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEPvEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSK_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEbEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEcEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
   56|  8.45k|{
   57|  8.45k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  8.45k|        return reader_impl_for_bool<CharT>{};
   59|  8.45k|    }
   60|  8.45k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  8.45k|        return reader_impl_for_char<CharT>{};
   62|  8.45k|    }
   63|  8.45k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  8.45k|        return reader_impl_for_wchar<CharT>{};
   65|  8.45k|    }
   66|  8.45k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  8.45k|        return reader_impl_for_code_point<CharT>{};
   68|  8.45k|    }
   69|  8.45k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  8.45k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  8.45k|        return reader_impl_for_string<CharT>{};
   72|  8.45k|    }
   73|  8.45k|    else if constexpr (std::is_same_v<T, std::string> ||
   74|  8.45k|                       std::is_same_v<T, std::wstring>) {
   75|  8.45k|        return reader_impl_for_string<CharT>{};
   76|  8.45k|    }
   77|  8.45k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  8.45k|                       std::is_same_v<T, wregex_matches>) {
   79|  8.45k|        return reader_impl_for_regex_matches<CharT>{};
   80|  8.45k|    }
   81|  8.45k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  8.45k|        return reader_impl_for_voidptr<CharT>{};
   83|  8.45k|    }
   84|  8.45k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  8.45k|        return reader_impl_for_float<CharT>{};
   86|  8.45k|    }
   87|  8.45k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  8.45k|                       !std::is_same_v<T, wchar_t> &&
   89|  8.45k|                       !std::is_same_v<T, char32_t> &&
   90|  8.45k|                       !std::is_same_v<T, bool>) {
   91|  8.45k|        return reader_impl_for_int<CharT>{};
   92|  8.45k|    }
   93|  8.45k|    else {
   94|  8.45k|        return reader_impl_for_monostate<CharT>{};
   95|  8.45k|    }
   96|  8.45k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
   56|  8.45k|{
   57|  8.45k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  8.45k|        return reader_impl_for_bool<CharT>{};
   59|  8.45k|    }
   60|  8.45k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  8.45k|        return reader_impl_for_char<CharT>{};
   62|  8.45k|    }
   63|  8.45k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  8.45k|        return reader_impl_for_wchar<CharT>{};
   65|  8.45k|    }
   66|  8.45k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  8.45k|        return reader_impl_for_code_point<CharT>{};
   68|  8.45k|    }
   69|  8.45k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  8.45k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  8.45k|        return reader_impl_for_string<CharT>{};
   72|  8.45k|    }
   73|  8.45k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|  8.45k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|  8.45k|        return reader_impl_for_string<CharT>{};
   76|  8.45k|    }
   77|  8.45k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  8.45k|                       std::is_same_v<T, wregex_matches>) {
   79|  8.45k|        return reader_impl_for_regex_matches<CharT>{};
   80|  8.45k|    }
   81|  8.45k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  8.45k|        return reader_impl_for_voidptr<CharT>{};
   83|  8.45k|    }
   84|  8.45k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  8.45k|        return reader_impl_for_float<CharT>{};
   86|  8.45k|    }
   87|  8.45k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  8.45k|                       !std::is_same_v<T, wchar_t> &&
   89|  8.45k|                       !std::is_same_v<T, char32_t> &&
   90|  8.45k|                       !std::is_same_v<T, bool>) {
   91|  8.45k|        return reader_impl_for_int<CharT>{};
   92|  8.45k|    }
   93|  8.45k|    else {
   94|  8.45k|        return reader_impl_for_monostate<CharT>{};
   95|  8.45k|    }
   96|  8.45k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
  121|  1.12k|    {
  122|  1.12k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  1.12k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  1.12k|                          basic_contiguous_scan_context<char_type>>) {
  126|  1.12k|            auto rd = make_reader<T, char_type>();
  127|  1.12k|            return impl(rd, range, value);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  1.12k|            auto rd = make_reader<T, char_type>();
  131|  1.12k|            if (!is_segment_contiguous(range)) {
  132|  1.12k|                return impl(rd, range, value);
  133|  1.12k|            }
  134|  1.12k|            auto crange = get_as_contiguous(range);
  135|  1.12k|            SCN_TRY(it, impl(rd, crange, value));
  136|  1.12k|            return ranges_polyfill::batch_next(
  137|  1.12k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  1.12k|        }
  139|  1.12k|        else {
  140|  1.12k|            SCN_EXPECT(false);
  141|  1.12k|            SCN_UNREACHABLE;
  142|  1.12k|        }
  143|  1.12k|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
   56|  8.45k|{
   57|  8.45k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  8.45k|        return reader_impl_for_bool<CharT>{};
   59|  8.45k|    }
   60|  8.45k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  8.45k|        return reader_impl_for_char<CharT>{};
   62|  8.45k|    }
   63|  8.45k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  8.45k|        return reader_impl_for_wchar<CharT>{};
   65|  8.45k|    }
   66|  8.45k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  8.45k|        return reader_impl_for_code_point<CharT>{};
   68|  8.45k|    }
   69|  8.45k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  8.45k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  8.45k|        return reader_impl_for_string<CharT>{};
   72|  8.45k|    }
   73|  8.45k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|  8.45k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|  8.45k|        return reader_impl_for_string<CharT>{};
   76|  8.45k|    }
   77|  8.45k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  8.45k|                       std::is_same_v<T, wregex_matches>) {
   79|  8.45k|        return reader_impl_for_regex_matches<CharT>{};
   80|  8.45k|    }
   81|  8.45k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  8.45k|        return reader_impl_for_voidptr<CharT>{};
   83|  8.45k|    }
   84|  8.45k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  8.45k|        return reader_impl_for_float<CharT>{};
   86|  8.45k|    }
   87|  8.45k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  8.45k|                       !std::is_same_v<T, wchar_t> &&
   89|  8.45k|                       !std::is_same_v<T, char32_t> &&
   90|  8.45k|                       !std::is_same_v<T, bool>) {
   91|  8.45k|        return reader_impl_for_int<CharT>{};
   92|  8.45k|    }
   93|  8.45k|    else {
   94|  8.45k|        return reader_impl_for_monostate<CharT>{};
   95|  8.45k|    }
   96|  8.45k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|  1.12k|    {
  112|  1.12k|        SCN_TRY(it,
  ------------------
  |  |   71|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  1.12k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  1.12k|                    .transform_error(make_eof_scan_error));
  115|  1.12k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  1.12k|                               loc);
  117|  1.12k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|  7.36k|    {
  223|  7.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.36k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.36k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.36k|            auto rd = make_reader<T, char_type>();
  228|  7.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.80k, False: 568]
  |  |  ------------------
  ------------------
  229|  6.80k|                return unexpected(e);
  230|  6.80k|            }
  231|       |
  232|    568|            return impl(rd, range, value);
  233|  7.36k|        }
  234|  7.36k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.36k|            auto rd = make_reader<T, char_type>();
  236|  7.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.36k|                return unexpected(e);
  238|  7.36k|            }
  239|       |
  240|  7.36k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.36k|                return impl(rd, range, value);
  242|  7.36k|            }
  243|       |
  244|  7.36k|            auto crange = get_as_contiguous(range);
  245|  7.36k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.36k|            return ranges_polyfill::batch_next(
  247|  7.36k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.36k|        }
  249|  7.36k|        else {
  250|  7.36k|            SCN_EXPECT(false);
  251|  7.36k|            SCN_UNREACHABLE;
  252|  7.36k|        }
  253|  7.36k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    568|    {
  205|    568|        SCN_TRY(it,
  ------------------
  |  |   71|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 568]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    568|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    568|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    568|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    568|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    568|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 310, False: 258]
  ------------------
  212|    310|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    310|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    310|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    310|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 310, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    310|    }                                                  \
  |  |  |  |   70|    310|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    310|        }
  216|       |
  217|    258|        return rd.read_specs(subr, specs, value, loc);
  218|    568|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|  7.36k|    {
  223|  7.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.36k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.36k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.36k|            auto rd = make_reader<T, char_type>();
  228|  7.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.80k, False: 568]
  |  |  ------------------
  ------------------
  229|  6.80k|                return unexpected(e);
  230|  6.80k|            }
  231|       |
  232|    568|            return impl(rd, range, value);
  233|  7.36k|        }
  234|  7.36k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.36k|            auto rd = make_reader<T, char_type>();
  236|  7.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.36k|                return unexpected(e);
  238|  7.36k|            }
  239|       |
  240|  7.36k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.36k|                return impl(rd, range, value);
  242|  7.36k|            }
  243|       |
  244|  7.36k|            auto crange = get_as_contiguous(range);
  245|  7.36k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.36k|            return ranges_polyfill::batch_next(
  247|  7.36k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.36k|        }
  249|  7.36k|        else {
  250|  7.36k|            SCN_EXPECT(false);
  251|  7.36k|            SCN_UNREACHABLE;
  252|  7.36k|        }
  253|  7.36k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    568|    {
  205|    568|        SCN_TRY(it,
  ------------------
  |  |   71|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 568]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    568|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    568|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    568|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    568|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    568|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 310, False: 258]
  ------------------
  212|    310|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    310|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    310|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    310|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 310, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    310|    }                                                  \
  |  |  |  |   70|    310|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    310|        }
  216|       |
  217|    258|        return rd.read_specs(subr, specs, value, loc);
  218|    568|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
  222|  7.32k|    {
  223|  7.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.32k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.32k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.32k|            auto rd = make_reader<T, char_type>();
  228|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.86k, False: 460]
  |  |  ------------------
  ------------------
  229|  6.86k|                return unexpected(e);
  230|  6.86k|            }
  231|       |
  232|    460|            return impl(rd, range, value);
  233|  7.32k|        }
  234|  7.32k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.32k|            auto rd = make_reader<T, char_type>();
  236|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.32k|                return unexpected(e);
  238|  7.32k|            }
  239|       |
  240|  7.32k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.32k|                return impl(rd, range, value);
  242|  7.32k|            }
  243|       |
  244|  7.32k|            auto crange = get_as_contiguous(range);
  245|  7.32k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.32k|            return ranges_polyfill::batch_next(
  247|  7.32k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.32k|        }
  249|  7.32k|        else {
  250|  7.32k|            SCN_EXPECT(false);
  251|  7.32k|            SCN_UNREACHABLE;
  252|  7.32k|        }
  253|  7.32k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEPvEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSK_RT1_:
  204|    460|    {
  205|    460|        SCN_TRY(it,
  ------------------
  |  |   71|    460|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    460|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    460|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    460|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 460]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    460|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    460|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    460|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    460|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    460|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    460|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 286, False: 174]
  ------------------
  212|    286|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    286|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    286|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    286|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    286|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 286, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    286|    }                                                  \
  |  |  |  |   70|    286|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    286|        }
  216|       |
  217|    174|        return rd.read_specs(subr, specs, value, loc);
  218|    460|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
  222|  7.36k|    {
  223|  7.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.36k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.36k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.36k|            auto rd = make_reader<T, char_type>();
  228|  7.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.72k, False: 640]
  |  |  ------------------
  ------------------
  229|  6.72k|                return unexpected(e);
  230|  6.72k|            }
  231|       |
  232|    640|            return impl(rd, range, value);
  233|  7.36k|        }
  234|  7.36k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.36k|            auto rd = make_reader<T, char_type>();
  236|  7.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.36k|                return unexpected(e);
  238|  7.36k|            }
  239|       |
  240|  7.36k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.36k|                return impl(rd, range, value);
  242|  7.36k|            }
  243|       |
  244|  7.36k|            auto crange = get_as_contiguous(range);
  245|  7.36k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.36k|            return ranges_polyfill::batch_next(
  247|  7.36k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.36k|        }
  249|  7.36k|        else {
  250|  7.36k|            SCN_EXPECT(false);
  251|  7.36k|            SCN_UNREACHABLE;
  252|  7.36k|        }
  253|  7.36k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEbEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    640|    {
  205|    640|        SCN_TRY(it,
  ------------------
  |  |   71|    640|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    640|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    640|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    640|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    640|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 318, False: 322]
  ------------------
  212|    318|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 318, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    318|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    318|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    318|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    318|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    318|    }                                                  \
  |  |  |  |   70|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    318|        }
  216|       |
  217|    322|        return rd.read_specs(subr, specs, value, loc);
  218|    640|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
  222|  7.32k|    {
  223|  7.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.32k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.32k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.32k|            auto rd = make_reader<T, char_type>();
  228|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.78k, False: 538]
  |  |  ------------------
  ------------------
  229|  6.78k|                return unexpected(e);
  230|  6.78k|            }
  231|       |
  232|    538|            return impl(rd, range, value);
  233|  7.32k|        }
  234|  7.32k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.32k|            auto rd = make_reader<T, char_type>();
  236|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.32k|                return unexpected(e);
  238|  7.32k|            }
  239|       |
  240|  7.32k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.32k|                return impl(rd, range, value);
  242|  7.32k|            }
  243|       |
  244|  7.32k|            auto crange = get_as_contiguous(range);
  245|  7.32k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.32k|            return ranges_polyfill::batch_next(
  247|  7.32k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.32k|        }
  249|  7.32k|        else {
  250|  7.32k|            SCN_EXPECT(false);
  251|  7.32k|            SCN_UNREACHABLE;
  252|  7.32k|        }
  253|  7.32k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEcEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    538|    {
  205|    538|        SCN_TRY(it,
  ------------------
  |  |   71|    538|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    538|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    538|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    538|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 538]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    538|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    538|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    538|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    538|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    538|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    538|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 302, False: 236]
  ------------------
  212|    302|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22, False: 280]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     22|    }                                                  \
  |  |  |  |   70|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    280|                                        value, loc));
  214|    280|            return w_it.base();
  215|    302|        }
  216|       |
  217|    236|        return rd.read_specs(subr, specs, value, loc);
  218|    538|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
  222|  7.36k|    {
  223|  7.36k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.36k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.36k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.36k|            auto rd = make_reader<T, char_type>();
  228|  7.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.84k, False: 526]
  |  |  ------------------
  ------------------
  229|  6.84k|                return unexpected(e);
  230|  6.84k|            }
  231|       |
  232|    526|            return impl(rd, range, value);
  233|  7.36k|        }
  234|  7.36k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.36k|            auto rd = make_reader<T, char_type>();
  236|  7.36k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.36k|                return unexpected(e);
  238|  7.36k|            }
  239|       |
  240|  7.36k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.36k|                return impl(rd, range, value);
  242|  7.36k|            }
  243|       |
  244|  7.36k|            auto crange = get_as_contiguous(range);
  245|  7.36k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.36k|            return ranges_polyfill::batch_next(
  247|  7.36k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.36k|        }
  249|  7.36k|        else {
  250|  7.36k|            SCN_EXPECT(false);
  251|  7.36k|            SCN_UNREACHABLE;
  252|  7.36k|        }
  253|  7.36k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    526|    {
  205|    526|        SCN_TRY(it,
  ------------------
  |  |   71|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    526|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    526|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    526|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    526|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 294, False: 232]
  ------------------
  212|    294|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    294|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    294|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    294|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 294, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    294|    }                                                  \
  |  |  |  |   70|    294|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    294|        }
  216|       |
  217|    232|        return rd.read_specs(subr, specs, value, loc);
  218|    526|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
  222|  7.32k|    {
  223|  7.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.32k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.32k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.32k|            auto rd = make_reader<T, char_type>();
  228|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 150, False: 7.17k]
  |  |  ------------------
  ------------------
  229|    150|                return unexpected(e);
  230|    150|            }
  231|       |
  232|  7.17k|            return impl(rd, range, value);
  233|  7.32k|        }
  234|  7.32k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.32k|            auto rd = make_reader<T, char_type>();
  236|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.32k|                return unexpected(e);
  238|  7.32k|            }
  239|       |
  240|  7.32k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.32k|                return impl(rd, range, value);
  242|  7.32k|            }
  243|       |
  244|  7.32k|            auto crange = get_as_contiguous(range);
  245|  7.32k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.32k|            return ranges_polyfill::batch_next(
  247|  7.32k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.32k|        }
  249|  7.32k|        else {
  250|  7.32k|            SCN_EXPECT(false);
  251|  7.32k|            SCN_UNREACHABLE;
  252|  7.32k|        }
  253|  7.32k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  204|  7.17k|    {
  205|  7.17k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  7.17k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  7.17k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  7.17k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  7.17k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 796, False: 6.37k]
  ------------------
  212|    796|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    796|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    796|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    796|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 428, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    428|    }                                                  \
  |  |  |  |   70|    796|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    368|                                        value, loc));
  214|    368|            return w_it.base();
  215|    796|        }
  216|       |
  217|  6.37k|        return rd.read_specs(subr, specs, value, loc);
  218|  7.17k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
  222|  7.32k|    {
  223|  7.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.32k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.32k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.32k|            auto rd = make_reader<T, char_type>();
  228|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 150, False: 7.17k]
  |  |  ------------------
  ------------------
  229|    150|                return unexpected(e);
  230|    150|            }
  231|       |
  232|  7.17k|            return impl(rd, range, value);
  233|  7.32k|        }
  234|  7.32k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.32k|            auto rd = make_reader<T, char_type>();
  236|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.32k|                return unexpected(e);
  238|  7.32k|            }
  239|       |
  240|  7.32k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.32k|                return impl(rd, range, value);
  242|  7.32k|            }
  243|       |
  244|  7.32k|            auto crange = get_as_contiguous(range);
  245|  7.32k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.32k|            return ranges_polyfill::batch_next(
  247|  7.32k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.32k|        }
  249|  7.32k|        else {
  250|  7.32k|            SCN_EXPECT(false);
  251|  7.32k|            SCN_UNREACHABLE;
  252|  7.32k|        }
  253|  7.32k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  7.17k|    {
  205|  7.17k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  7.17k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  7.17k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  7.17k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  7.17k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 796, False: 6.37k]
  ------------------
  212|    796|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    796|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    796|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    796|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 428, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    428|    }                                                  \
  |  |  |  |   70|    796|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    368|                                        value, loc));
  214|    368|            return w_it.base();
  215|    796|        }
  216|       |
  217|  6.37k|        return rd.read_specs(subr, specs, value, loc);
  218|  7.17k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
  222|  7.32k|    {
  223|  7.32k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  7.32k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  7.32k|                          basic_contiguous_scan_context<char_type>>) {
  227|  7.32k|            auto rd = make_reader<T, char_type>();
  228|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 150, False: 7.17k]
  |  |  ------------------
  ------------------
  229|    150|                return unexpected(e);
  230|    150|            }
  231|       |
  232|  7.17k|            return impl(rd, range, value);
  233|  7.32k|        }
  234|  7.32k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  7.32k|            auto rd = make_reader<T, char_type>();
  236|  7.32k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  7.32k|                return unexpected(e);
  238|  7.32k|            }
  239|       |
  240|  7.32k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  7.32k|                return impl(rd, range, value);
  242|  7.32k|            }
  243|       |
  244|  7.32k|            auto crange = get_as_contiguous(range);
  245|  7.32k|            SCN_TRY(it, impl(rd, crange, value));
  246|  7.32k|            return ranges_polyfill::batch_next(
  247|  7.32k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  7.32k|        }
  249|  7.32k|        else {
  250|  7.32k|            SCN_EXPECT(false);
  251|  7.32k|            SCN_UNREACHABLE;
  252|  7.32k|        }
  253|  7.32k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  7.17k|    {
  205|  7.17k|        SCN_TRY(it,
  ------------------
  |  |   71|  7.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  7.17k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  7.17k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  7.17k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  7.17k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 796, False: 6.37k]
  ------------------
  212|    796|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    796|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    796|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    796|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    796|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 428, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    428|    }                                                  \
  |  |  |  |   70|    796|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    368|                                        value, loc));
  214|    368|            return w_it.base();
  215|    796|        }
  216|       |
  217|  6.37k|        return rd.read_specs(subr, specs, value, loc);
  218|  7.17k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  27.4k|{
   43|  27.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
   44|      0|        return unexpected(e);
   45|      0|    }
   46|       |
   47|  27.4k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 16.2k, False: 11.2k]
  ------------------
   48|  16.2k|        return ranges::begin(range);
   49|  16.2k|    }
   50|       |
   51|  11.2k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  27.4k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEPvEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSK_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEbEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEwEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
   56|  6.45k|{
   57|  6.45k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  6.45k|        return reader_impl_for_bool<CharT>{};
   59|  6.45k|    }
   60|  6.45k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  6.45k|        return reader_impl_for_char<CharT>{};
   62|  6.45k|    }
   63|  6.45k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  6.45k|        return reader_impl_for_wchar<CharT>{};
   65|  6.45k|    }
   66|  6.45k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  6.45k|        return reader_impl_for_code_point<CharT>{};
   68|  6.45k|    }
   69|  6.45k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  6.45k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  6.45k|        return reader_impl_for_string<CharT>{};
   72|  6.45k|    }
   73|  6.45k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|  6.45k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|  6.45k|        return reader_impl_for_string<CharT>{};
   76|  6.45k|    }
   77|  6.45k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  6.45k|                       std::is_same_v<T, wregex_matches>) {
   79|  6.45k|        return reader_impl_for_regex_matches<CharT>{};
   80|  6.45k|    }
   81|  6.45k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  6.45k|        return reader_impl_for_voidptr<CharT>{};
   83|  6.45k|    }
   84|  6.45k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  6.45k|        return reader_impl_for_float<CharT>{};
   86|  6.45k|    }
   87|  6.45k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  6.45k|                       !std::is_same_v<T, wchar_t> &&
   89|  6.45k|                       !std::is_same_v<T, char32_t> &&
   90|  6.45k|                       !std::is_same_v<T, bool>) {
   91|  6.45k|        return reader_impl_for_int<CharT>{};
   92|  6.45k|    }
   93|  6.45k|    else {
   94|  6.45k|        return reader_impl_for_monostate<CharT>{};
   95|  6.45k|    }
   96|  6.45k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
   56|  6.45k|{
   57|  6.45k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  6.45k|        return reader_impl_for_bool<CharT>{};
   59|  6.45k|    }
   60|  6.45k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  6.45k|        return reader_impl_for_char<CharT>{};
   62|  6.45k|    }
   63|  6.45k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  6.45k|        return reader_impl_for_wchar<CharT>{};
   65|  6.45k|    }
   66|  6.45k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  6.45k|        return reader_impl_for_code_point<CharT>{};
   68|  6.45k|    }
   69|  6.45k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  6.45k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  6.45k|        return reader_impl_for_string<CharT>{};
   72|  6.45k|    }
   73|  6.45k|    else if constexpr (std::is_same_v<T, std::string> ||
   74|  6.45k|                       std::is_same_v<T, std::wstring>) {
   75|  6.45k|        return reader_impl_for_string<CharT>{};
   76|  6.45k|    }
   77|  6.45k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  6.45k|                       std::is_same_v<T, wregex_matches>) {
   79|  6.45k|        return reader_impl_for_regex_matches<CharT>{};
   80|  6.45k|    }
   81|  6.45k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  6.45k|        return reader_impl_for_voidptr<CharT>{};
   83|  6.45k|    }
   84|  6.45k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  6.45k|        return reader_impl_for_float<CharT>{};
   86|  6.45k|    }
   87|  6.45k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  6.45k|                       !std::is_same_v<T, wchar_t> &&
   89|  6.45k|                       !std::is_same_v<T, char32_t> &&
   90|  6.45k|                       !std::is_same_v<T, bool>) {
   91|  6.45k|        return reader_impl_for_int<CharT>{};
   92|  6.45k|    }
   93|  6.45k|    else {
   94|  6.45k|        return reader_impl_for_monostate<CharT>{};
   95|  6.45k|    }
   96|  6.45k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
  121|    892|    {
  122|    892|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|    892|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|    892|                          basic_contiguous_scan_context<char_type>>) {
  126|    892|            auto rd = make_reader<T, char_type>();
  127|    892|            return impl(rd, range, value);
  128|    892|        }
  129|    892|        else if constexpr (!detail::is_type_disabled<T>) {
  130|    892|            auto rd = make_reader<T, char_type>();
  131|    892|            if (!is_segment_contiguous(range)) {
  132|    892|                return impl(rd, range, value);
  133|    892|            }
  134|    892|            auto crange = get_as_contiguous(range);
  135|    892|            SCN_TRY(it, impl(rd, crange, value));
  136|    892|            return ranges_polyfill::batch_next(
  137|    892|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|    892|        }
  139|    892|        else {
  140|    892|            SCN_EXPECT(false);
  141|    892|            SCN_UNREACHABLE;
  142|    892|        }
  143|    892|    }
_ZN3scn2v24impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
   56|  6.45k|{
   57|  6.45k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (57:19): [Folded - Ignored]
  ------------------
   58|  6.45k|        return reader_impl_for_bool<CharT>{};
   59|  6.45k|    }
   60|  6.45k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (60:24): [Folded - Ignored]
  ------------------
   61|  6.45k|        return reader_impl_for_char<CharT>{};
   62|  6.45k|    }
   63|  6.45k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (63:24): [Folded - Ignored]
  ------------------
   64|  6.45k|        return reader_impl_for_wchar<CharT>{};
   65|  6.45k|    }
   66|  6.45k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (66:24): [Folded - Ignored]
  ------------------
   67|  6.45k|        return reader_impl_for_code_point<CharT>{};
   68|  6.45k|    }
   69|  6.45k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (69:24): [Folded - Ignored]
  |  Branch (69:24): [Folded - Ignored]
  ------------------
   70|  6.45k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (70:24): [Folded - Ignored]
  ------------------
   71|  6.45k|        return reader_impl_for_string<CharT>{};
   72|  6.45k|    }
   73|  6.45k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (73:24): [Folded - Ignored]
  |  Branch (73:24): [Folded - Ignored]
  ------------------
   74|  6.45k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (74:24): [Folded - Ignored]
  ------------------
   75|  6.45k|        return reader_impl_for_string<CharT>{};
   76|  6.45k|    }
   77|  6.45k|    else if constexpr (std::is_same_v<T, regex_matches> ||
   78|  6.45k|                       std::is_same_v<T, wregex_matches>) {
   79|  6.45k|        return reader_impl_for_regex_matches<CharT>{};
   80|  6.45k|    }
   81|  6.45k|    else if constexpr (std::is_same_v<T, void*>) {
   82|  6.45k|        return reader_impl_for_voidptr<CharT>{};
   83|  6.45k|    }
   84|  6.45k|    else if constexpr (std::is_floating_point_v<T>) {
   85|  6.45k|        return reader_impl_for_float<CharT>{};
   86|  6.45k|    }
   87|  6.45k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
   88|  6.45k|                       !std::is_same_v<T, wchar_t> &&
   89|  6.45k|                       !std::is_same_v<T, char32_t> &&
   90|  6.45k|                       !std::is_same_v<T, bool>) {
   91|  6.45k|        return reader_impl_for_int<CharT>{};
   92|  6.45k|    }
   93|  6.45k|    else {
   94|  6.45k|        return reader_impl_for_monostate<CharT>{};
   95|  6.45k|    }
   96|  6.45k|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  111|    892|    {
  112|    892|        SCN_TRY(it,
  ------------------
  |  |   71|    892|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    892|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    892|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    892|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 892]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    892|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|    892|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|    892|                    .transform_error(make_eof_scan_error));
  115|    892|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|    892|                               loc);
  117|    892|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|  5.60k|    {
  223|  5.60k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.60k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.60k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.60k|            auto rd = make_reader<T, char_type>();
  228|  5.60k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.06k, False: 544]
  |  |  ------------------
  ------------------
  229|  5.06k|                return unexpected(e);
  230|  5.06k|            }
  231|       |
  232|    544|            return impl(rd, range, value);
  233|  5.60k|        }
  234|  5.60k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.60k|            auto rd = make_reader<T, char_type>();
  236|  5.60k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.60k|                return unexpected(e);
  238|  5.60k|            }
  239|       |
  240|  5.60k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.60k|                return impl(rd, range, value);
  242|  5.60k|            }
  243|       |
  244|  5.60k|            auto crange = get_as_contiguous(range);
  245|  5.60k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.60k|            return ranges_polyfill::batch_next(
  247|  5.60k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.60k|        }
  249|  5.60k|        else {
  250|  5.60k|            SCN_EXPECT(false);
  251|  5.60k|            SCN_UNREACHABLE;
  252|  5.60k|        }
  253|  5.60k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    544|    {
  205|    544|        SCN_TRY(it,
  ------------------
  |  |   71|    544|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 544]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    544|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    544|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    544|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    544|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    544|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 260, False: 284]
  ------------------
  212|    260|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 260, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    260|    }                                                  \
  |  |  |  |   70|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    260|        }
  216|       |
  217|    284|        return rd.read_specs(subr, specs, value, loc);
  218|    544|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|  5.60k|    {
  223|  5.60k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.60k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.60k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.60k|            auto rd = make_reader<T, char_type>();
  228|  5.60k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.06k, False: 544]
  |  |  ------------------
  ------------------
  229|  5.06k|                return unexpected(e);
  230|  5.06k|            }
  231|       |
  232|    544|            return impl(rd, range, value);
  233|  5.60k|        }
  234|  5.60k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.60k|            auto rd = make_reader<T, char_type>();
  236|  5.60k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.60k|                return unexpected(e);
  238|  5.60k|            }
  239|       |
  240|  5.60k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.60k|                return impl(rd, range, value);
  242|  5.60k|            }
  243|       |
  244|  5.60k|            auto crange = get_as_contiguous(range);
  245|  5.60k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.60k|            return ranges_polyfill::batch_next(
  247|  5.60k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.60k|        }
  249|  5.60k|        else {
  250|  5.60k|            SCN_EXPECT(false);
  251|  5.60k|            SCN_UNREACHABLE;
  252|  5.60k|        }
  253|  5.60k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    544|    {
  205|    544|        SCN_TRY(it,
  ------------------
  |  |   71|    544|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 544]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    544|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    544|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    544|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    544|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    544|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 260, False: 284]
  ------------------
  212|    260|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    260|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    260|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    260|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 260, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    260|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    260|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    260|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    260|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    260|    }                                                  \
  |  |  |  |   70|    260|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    260|        }
  216|       |
  217|    284|        return rd.read_specs(subr, specs, value, loc);
  218|    544|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
  222|  5.56k|    {
  223|  5.56k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.56k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.56k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.56k|            auto rd = make_reader<T, char_type>();
  228|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.13k, False: 430]
  |  |  ------------------
  ------------------
  229|  5.13k|                return unexpected(e);
  230|  5.13k|            }
  231|       |
  232|    430|            return impl(rd, range, value);
  233|  5.56k|        }
  234|  5.56k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.56k|            auto rd = make_reader<T, char_type>();
  236|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.56k|                return unexpected(e);
  238|  5.56k|            }
  239|       |
  240|  5.56k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.56k|                return impl(rd, range, value);
  242|  5.56k|            }
  243|       |
  244|  5.56k|            auto crange = get_as_contiguous(range);
  245|  5.56k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.56k|            return ranges_polyfill::batch_next(
  247|  5.56k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.56k|        }
  249|  5.56k|        else {
  250|  5.56k|            SCN_EXPECT(false);
  251|  5.56k|            SCN_UNREACHABLE;
  252|  5.56k|        }
  253|  5.56k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEPvEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSK_RT1_:
  204|    430|    {
  205|    430|        SCN_TRY(it,
  ------------------
  |  |   71|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 430]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    430|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    430|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    430|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    430|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    430|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 234, False: 196]
  ------------------
  212|    234|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    234|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    234|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    234|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    234|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 234, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    234|    }                                                  \
  |  |  |  |   70|    234|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    234|        }
  216|       |
  217|    196|        return rd.read_specs(subr, specs, value, loc);
  218|    430|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
  222|  5.60k|    {
  223|  5.60k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.60k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.60k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.60k|            auto rd = make_reader<T, char_type>();
  228|  5.60k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.99k, False: 610]
  |  |  ------------------
  ------------------
  229|  4.99k|                return unexpected(e);
  230|  4.99k|            }
  231|       |
  232|    610|            return impl(rd, range, value);
  233|  5.60k|        }
  234|  5.60k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.60k|            auto rd = make_reader<T, char_type>();
  236|  5.60k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.60k|                return unexpected(e);
  238|  5.60k|            }
  239|       |
  240|  5.60k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.60k|                return impl(rd, range, value);
  242|  5.60k|            }
  243|       |
  244|  5.60k|            auto crange = get_as_contiguous(range);
  245|  5.60k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.60k|            return ranges_polyfill::batch_next(
  247|  5.60k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.60k|        }
  249|  5.60k|        else {
  250|  5.60k|            SCN_EXPECT(false);
  251|  5.60k|            SCN_UNREACHABLE;
  252|  5.60k|        }
  253|  5.60k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEbEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    610|    {
  205|    610|        SCN_TRY(it,
  ------------------
  |  |   71|    610|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    610|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    610|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    610|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 610]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    610|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    610|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    610|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    610|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    610|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    610|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 266, False: 344]
  ------------------
  212|    266|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 266, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    266|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    266|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    266|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    266|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    266|    }                                                  \
  |  |  |  |   70|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    266|        }
  216|       |
  217|    344|        return rd.read_specs(subr, specs, value, loc);
  218|    610|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
  222|  5.56k|    {
  223|  5.56k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.56k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.56k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.56k|            auto rd = make_reader<T, char_type>();
  228|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.05k, False: 516]
  |  |  ------------------
  ------------------
  229|  5.05k|                return unexpected(e);
  230|  5.05k|            }
  231|       |
  232|    516|            return impl(rd, range, value);
  233|  5.56k|        }
  234|  5.56k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.56k|            auto rd = make_reader<T, char_type>();
  236|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.56k|                return unexpected(e);
  238|  5.56k|            }
  239|       |
  240|  5.56k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.56k|                return impl(rd, range, value);
  242|  5.56k|            }
  243|       |
  244|  5.56k|            auto crange = get_as_contiguous(range);
  245|  5.56k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.56k|            return ranges_polyfill::batch_next(
  247|  5.56k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.56k|        }
  249|  5.56k|        else {
  250|  5.56k|            SCN_EXPECT(false);
  251|  5.56k|            SCN_UNREACHABLE;
  252|  5.56k|        }
  253|  5.56k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEwEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    516|    {
  205|    516|        SCN_TRY(it,
  ------------------
  |  |   71|    516|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    516|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    516|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    516|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 516]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    516|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    516|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    516|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    516|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    516|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 252, False: 264]
  ------------------
  212|    252|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     22|    }                                                  \
  |  |  |  |   70|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    230|                                        value, loc));
  214|    230|            return w_it.base();
  215|    252|        }
  216|       |
  217|    264|        return rd.read_specs(subr, specs, value, loc);
  218|    516|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
  222|  5.60k|    {
  223|  5.60k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.60k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.60k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.60k|            auto rd = make_reader<T, char_type>();
  228|  5.60k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.11k, False: 490]
  |  |  ------------------
  ------------------
  229|  5.11k|                return unexpected(e);
  230|  5.11k|            }
  231|       |
  232|    490|            return impl(rd, range, value);
  233|  5.60k|        }
  234|  5.60k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.60k|            auto rd = make_reader<T, char_type>();
  236|  5.60k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.60k|                return unexpected(e);
  238|  5.60k|            }
  239|       |
  240|  5.60k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.60k|                return impl(rd, range, value);
  242|  5.60k|            }
  243|       |
  244|  5.60k|            auto crange = get_as_contiguous(range);
  245|  5.60k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.60k|            return ranges_polyfill::batch_next(
  247|  5.60k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.60k|        }
  249|  5.60k|        else {
  250|  5.60k|            SCN_EXPECT(false);
  251|  5.60k|            SCN_UNREACHABLE;
  252|  5.60k|        }
  253|  5.60k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|    490|    {
  205|    490|        SCN_TRY(it,
  ------------------
  |  |   71|    490|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    490|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    490|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 490]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|    490|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    490|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|    490|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|    490|                    .transform_error(make_eof_scan_error));
  208|       |
  209|    490|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|    490|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 242, False: 248]
  ------------------
  212|    242|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 242, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    242|    }                                                  \
  |  |  |  |   70|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|    242|        }
  216|       |
  217|    248|        return rd.read_specs(subr, specs, value, loc);
  218|    490|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
  222|  5.56k|    {
  223|  5.56k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.56k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.56k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.56k|            auto rd = make_reader<T, char_type>();
  228|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 152, False: 5.41k]
  |  |  ------------------
  ------------------
  229|    152|                return unexpected(e);
  230|    152|            }
  231|       |
  232|  5.41k|            return impl(rd, range, value);
  233|  5.56k|        }
  234|  5.56k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.56k|            auto rd = make_reader<T, char_type>();
  236|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.56k|                return unexpected(e);
  238|  5.56k|            }
  239|       |
  240|  5.56k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.56k|                return impl(rd, range, value);
  242|  5.56k|            }
  243|       |
  244|  5.56k|            auto crange = get_as_contiguous(range);
  245|  5.56k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.56k|            return ranges_polyfill::batch_next(
  247|  5.56k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.56k|        }
  249|  5.56k|        else {
  250|  5.56k|            SCN_EXPECT(false);
  251|  5.56k|            SCN_UNREACHABLE;
  252|  5.56k|        }
  253|  5.56k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIcNSH_11char_traitsIcEENSH_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  5.41k|    {
  205|  5.41k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  5.41k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  5.41k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  5.41k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  5.41k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 546, False: 4.86k]
  ------------------
  212|    546|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    546|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    546|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    546|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    546|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 142, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    142|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    142|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    142|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    142|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    142|    }                                                  \
  |  |  |  |   70|    546|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    404|                                        value, loc));
  214|    404|            return w_it.base();
  215|    546|        }
  216|       |
  217|  4.86k|        return rd.read_specs(subr, specs, value, loc);
  218|  5.41k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
  222|  5.56k|    {
  223|  5.56k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.56k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.56k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.56k|            auto rd = make_reader<T, char_type>();
  228|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 152, False: 5.41k]
  |  |  ------------------
  ------------------
  229|    152|                return unexpected(e);
  230|    152|            }
  231|       |
  232|  5.41k|            return impl(rd, range, value);
  233|  5.56k|        }
  234|  5.56k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.56k|            auto rd = make_reader<T, char_type>();
  236|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.56k|                return unexpected(e);
  238|  5.56k|            }
  239|       |
  240|  5.56k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.56k|                return impl(rd, range, value);
  242|  5.56k|            }
  243|       |
  244|  5.56k|            auto crange = get_as_contiguous(range);
  245|  5.56k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.56k|            return ranges_polyfill::batch_next(
  247|  5.56k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.56k|        }
  249|  5.56k|        else {
  250|  5.56k|            SCN_EXPECT(false);
  251|  5.56k|            SCN_UNREACHABLE;
  252|  5.56k|        }
  253|  5.56k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSO_RT1_:
  204|  5.41k|    {
  205|  5.41k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  5.41k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  5.41k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  5.41k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  5.41k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 546, False: 4.86k]
  ------------------
  212|    546|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    546|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    546|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    546|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    546|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 142, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    142|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    142|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    142|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    142|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    142|    }                                                  \
  |  |  |  |   70|    546|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    404|                                        value, loc));
  214|    404|            return w_it.base();
  215|    546|        }
  216|       |
  217|  4.86k|        return rd.read_specs(subr, specs, value, loc);
  218|  5.41k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
  222|  5.56k|    {
  223|  5.56k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  5.56k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  5.56k|                          basic_contiguous_scan_context<char_type>>) {
  227|  5.56k|            auto rd = make_reader<T, char_type>();
  228|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 152, False: 5.41k]
  |  |  ------------------
  ------------------
  229|    152|                return unexpected(e);
  230|    152|            }
  231|       |
  232|  5.41k|            return impl(rd, range, value);
  233|  5.56k|        }
  234|  5.56k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  5.56k|            auto rd = make_reader<T, char_type>();
  236|  5.56k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  5.56k|                return unexpected(e);
  238|  5.56k|            }
  239|       |
  240|  5.56k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  5.56k|                return impl(rd, range, value);
  242|  5.56k|            }
  243|       |
  244|  5.56k|            auto crange = get_as_contiguous(range);
  245|  5.56k|            SCN_TRY(it, impl(rd, crange, value));
  246|  5.56k|            return ranges_polyfill::batch_next(
  247|  5.56k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  5.56k|        }
  249|  5.56k|        else {
  250|  5.56k|            SCN_EXPECT(false);
  251|  5.56k|            SCN_UNREACHABLE;
  252|  5.56k|        }
  253|  5.56k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEENSt3__112basic_stringIwNSH_11char_traitsIwEENSH_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSQ_RT1_:
  204|  5.41k|    {
  205|  5.41k|        SCN_TRY(it,
  ------------------
  |  |   71|  5.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  5.41k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  5.41k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  5.41k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  5.41k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 546, False: 4.86k]
  ------------------
  212|    546|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|    546|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    546|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    546|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    546|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 142, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    142|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    142|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    142|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    142|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    142|    }                                                  \
  |  |  |  |   70|    546|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|    404|                                        value, loc));
  214|    404|            return w_it.base();
  215|    546|        }
  216|       |
  217|  4.86k|        return rd.read_specs(subr, specs, value, loc);
  218|  5.41k|    }

_ZN3scn2v24impl16make_regex_flagsENS0_6detail11regex_flagsE:
   56|  25.4k|{
   57|  25.4k|    std::regex_constants::syntax_option_type result{};
   58|  25.4k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (58:9): [True: 948, False: 24.4k]
  ------------------
   59|    948|#if SCN_HAS_STD_REGEX_MULTILINE
   60|    948|        result |= std::regex_constants::multiline;
   61|       |#else
   62|       |        return unexpected_scan_error(
   63|       |            scan_error::invalid_format_string,
   64|       |            "/m flag for regex isn't supported by regex backend");
   65|       |#endif
   66|    948|    }
   67|  25.4k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (67:9): [True: 0, False: 25.4k]
  ------------------
   68|  25.4k|        detail::regex_flags::none) {
   69|      0|        return unexpected_scan_error(
   70|      0|            scan_error::invalid_format_string,
   71|      0|            "/s flag for regex isn't supported by regex backend");
   72|      0|    }
   73|  25.4k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (73:9): [True: 3.09k, False: 22.3k]
  ------------------
   74|  3.09k|        result |= std::regex_constants::icase;
   75|  3.09k|    }
   76|  25.4k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (76:9): [True: 24, False: 25.3k]
  ------------------
   77|     24|        result |= std::regex_constants::nosubs;
   78|     24|    }
   79|  25.4k|    return result;
   80|  25.4k|}
_ZN3scn2v24impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  424|  1.09k|{
  425|  1.09k|    std::string result{pattern};
  426|  6.10k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (426:24): [True: 5.01k, False: 1.09k]
  ------------------
  427|  5.01k|        result.replace(n, 2, "/");
  428|  5.01k|        ++n;
  429|  5.01k|    }
  430|  1.09k|    return result;
  431|  1.09k|}
_ZN3scn2v24impl22read_regex_string_implIcN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEENS0_6detail11regex_flagsESD_:
  131|  14.1k|{
  132|  14.1k|    static_assert(ranges::contiguous_range<Input> &&
  133|  14.1k|                  ranges::borrowed_range<Input> &&
  134|  14.1k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
  135|       |
  136|  14.1k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
  137|  14.1k|    std::basic_regex<CharT> re{};
  138|  14.1k|    try {
  139|  14.1k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  140|  14.1k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
  141|  14.1k|                                     re_flags | std::regex_constants::nosubs};
  142|  14.1k|    }
  143|  14.1k|    catch (const std::regex_error& err) {
  144|  7.96k|        return unexpected_scan_error(scan_error::invalid_format_string,
  145|  7.96k|                                     "Invalid regex");
  146|  7.96k|    }
  147|       |
  148|  6.18k|    std::match_results<const CharT*> matches{};
  149|  6.18k|    try {
  150|  6.18k|        bool found = std::regex_search(input.data(),
  151|  6.18k|                                       input.data() + input.size(), matches, re,
  152|  6.18k|                                       std::regex_constants::match_continuous);
  153|  6.18k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (153:13): [True: 4.03k, False: 2.14k]
  |  Branch (153:23): [True: 0, False: 2.14k]
  ------------------
  154|  3.69k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  155|  3.69k|                                         "Regular expression didn't match");
  156|  3.69k|        }
  157|  6.18k|    }
  158|  6.18k|    catch (const std::regex_error& err) {
  159|    336|        return unexpected_scan_error(scan_error::invalid_format_string,
  160|    336|                                     "Regex matching failed with an error");
  161|    336|    }
  162|       |
  163|  2.14k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
  164|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
  165|       |    auto re =
  166|       |#if SCN_REGEX_BOOST_USE_ICU
  167|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
  168|       |                             make_regex_flags(flags) |
  169|       |                                 boost::regex_constants::no_except |
  170|       |                                 boost::regex_constants::nosubs);
  171|       |#else
  172|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
  173|       |                                  make_regex_flags(flags) |
  174|       |                                      boost::regex_constants::no_except |
  175|       |                                      boost::regex_constants::nosubs};
  176|       |#endif
  177|       |    if (re.status() != 0) {
  178|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  179|       |                                     "Invalid regex");
  180|       |    }
  181|       |
  182|       |    boost::match_results<const CharT*> matches{};
  183|       |    try {
  184|       |        bool found =
  185|       |#if SCN_REGEX_BOOST_USE_ICU
  186|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
  187|       |                                   matches, re,
  188|       |                                   boost::regex_constants::match_continuous);
  189|       |#else
  190|       |            boost::regex_search(input.data(), input.data() + input.size(),
  191|       |                                matches, re,
  192|       |                                boost::regex_constants::match_continuous);
  193|       |#endif
  194|       |        if (!found || matches.prefix().matched) {
  195|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
  196|       |                                         "Regular expression didn't match");
  197|       |        }
  198|       |    }
  199|       |    catch (const std::runtime_error& err) {
  200|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  201|       |                                     "Regex matching failed with an error");
  202|       |    }
  203|       |
  204|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
  205|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
  206|       |    static_assert(std::is_same_v<CharT, char>);
  207|       |    std::string flagged_pattern{};
  208|       |    auto re = [&]() {
  209|       |        auto [opts, flagstr] = make_regex_flags(flags);
  210|       |        opts.set_never_capture(true);
  211|       |        if (flagstr.empty()) {
  212|       |            return re2::RE2{pattern, opts};
  213|       |        }
  214|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
  215|       |        flagged_pattern.append(flagstr);
  216|       |        flagged_pattern.append(pattern);
  217|       |        return re2::RE2{flagged_pattern, opts};
  218|       |    }();
  219|       |    if (!re.ok()) {
  220|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  221|       |                                     "Failed to parse regular expression");
  222|       |    }
  223|       |
  224|       |    auto new_input = detail::make_string_view_from_pointers(
  225|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
  226|       |    bool found = re2::RE2::Consume(&new_input, re);
  227|       |    if (!found) {
  228|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
  229|       |                                     "Regular expression didn't match");
  230|       |    }
  231|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
  232|       |#endif  // SCN_REGEX_BACKEND == ...
  233|  6.18k|}
_ZN3scn2v24impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
  433|    594|{
  434|    594|    std::wstring result{pattern};
  435|  4.39k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (435:24): [True: 3.79k, False: 594]
  ------------------
  436|  3.79k|        result.replace(n, 2, L"/");
  437|  3.79k|        ++n;
  438|  3.79k|    }
  439|    594|    return result;
  440|    594|}
_ZN3scn2v24impl22read_regex_string_implIwN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEENS0_6detail11regex_flagsESD_:
  131|  11.2k|{
  132|  11.2k|    static_assert(ranges::contiguous_range<Input> &&
  133|  11.2k|                  ranges::borrowed_range<Input> &&
  134|  11.2k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
  135|       |
  136|  11.2k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
  137|  11.2k|    std::basic_regex<CharT> re{};
  138|  11.2k|    try {
  139|  11.2k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  |   71|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 11.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  11.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  140|  11.2k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
  141|  11.2k|                                     re_flags | std::regex_constants::nosubs};
  142|  11.2k|    }
  143|  11.2k|    catch (const std::regex_error& err) {
  144|  5.97k|        return unexpected_scan_error(scan_error::invalid_format_string,
  145|  5.97k|                                     "Invalid regex");
  146|  5.97k|    }
  147|       |
  148|  5.28k|    std::match_results<const CharT*> matches{};
  149|  5.28k|    try {
  150|  5.28k|        bool found = std::regex_search(input.data(),
  151|  5.28k|                                       input.data() + input.size(), matches, re,
  152|  5.28k|                                       std::regex_constants::match_continuous);
  153|  5.28k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (153:13): [True: 3.45k, False: 1.82k]
  |  Branch (153:23): [True: 0, False: 1.82k]
  ------------------
  154|  3.16k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
  155|  3.16k|                                         "Regular expression didn't match");
  156|  3.16k|        }
  157|  5.28k|    }
  158|  5.28k|    catch (const std::regex_error& err) {
  159|    294|        return unexpected_scan_error(scan_error::invalid_format_string,
  160|    294|                                     "Regex matching failed with an error");
  161|    294|    }
  162|       |
  163|  1.82k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
  164|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
  165|       |    auto re =
  166|       |#if SCN_REGEX_BOOST_USE_ICU
  167|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
  168|       |                             make_regex_flags(flags) |
  169|       |                                 boost::regex_constants::no_except |
  170|       |                                 boost::regex_constants::nosubs);
  171|       |#else
  172|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
  173|       |                                  make_regex_flags(flags) |
  174|       |                                      boost::regex_constants::no_except |
  175|       |                                      boost::regex_constants::nosubs};
  176|       |#endif
  177|       |    if (re.status() != 0) {
  178|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  179|       |                                     "Invalid regex");
  180|       |    }
  181|       |
  182|       |    boost::match_results<const CharT*> matches{};
  183|       |    try {
  184|       |        bool found =
  185|       |#if SCN_REGEX_BOOST_USE_ICU
  186|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
  187|       |                                   matches, re,
  188|       |                                   boost::regex_constants::match_continuous);
  189|       |#else
  190|       |            boost::regex_search(input.data(), input.data() + input.size(),
  191|       |                                matches, re,
  192|       |                                boost::regex_constants::match_continuous);
  193|       |#endif
  194|       |        if (!found || matches.prefix().matched) {
  195|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
  196|       |                                         "Regular expression didn't match");
  197|       |        }
  198|       |    }
  199|       |    catch (const std::runtime_error& err) {
  200|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  201|       |                                     "Regex matching failed with an error");
  202|       |    }
  203|       |
  204|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
  205|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
  206|       |    static_assert(std::is_same_v<CharT, char>);
  207|       |    std::string flagged_pattern{};
  208|       |    auto re = [&]() {
  209|       |        auto [opts, flagstr] = make_regex_flags(flags);
  210|       |        opts.set_never_capture(true);
  211|       |        if (flagstr.empty()) {
  212|       |            return re2::RE2{pattern, opts};
  213|       |        }
  214|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
  215|       |        flagged_pattern.append(flagstr);
  216|       |        flagged_pattern.append(pattern);
  217|       |        return re2::RE2{flagged_pattern, opts};
  218|       |    }();
  219|       |    if (!re.ok()) {
  220|       |        return unexpected_scan_error(scan_error::invalid_format_string,
  221|       |                                     "Failed to parse regular expression");
  222|       |    }
  223|       |
  224|       |    auto new_input = detail::make_string_view_from_pointers(
  225|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
  226|       |    bool found = re2::RE2::Consume(&new_input, re);
  227|       |    if (!found) {
  228|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
  229|       |                                     "Regular expression didn't match");
  230|       |    }
  231|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
  232|       |#endif  // SCN_REGEX_BACKEND == ...
  233|  5.28k|}

_ZN3scn2v24impl13string_readerIcEC2Ev:
  450|  25.3k|    constexpr string_reader() = default;
_ZNK3scn2v24impl13string_readerIcE19skip_ws_before_readEv:
  493|  24.9k|    {
  494|  24.9k|        return m_type == reader_type::word;
  495|  24.9k|    }
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RT0_NS0_6detail10locale_refE:
  500|  1.12k|    {
  501|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  1.12k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  1.12k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__117basic_string_viewIT0_NSK_11char_traitsISM_EEEE:
  120|  1.12k|    {
  121|  1.12k|        return read_string_view_impl(range, read_until_classic_space(range),
  122|  1.12k|                                     value);
  123|  1.12k|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEE:
   62|  1.36k|{
   63|  1.36k|    static_assert(
   64|  1.36k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  1.36k|    auto src = [&]() {
   67|  1.36k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  1.36k|            return make_contiguous_buffer(
   69|  1.36k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.36k|        }
   71|  1.36k|        else {
   72|  1.36k|            return make_contiguous_buffer(
   73|  1.36k|                ranges::subrange{ranges::begin(range), result});
   74|  1.36k|        }
   75|  1.36k|    }();
   76|  1.36k|    using src_type = decltype(src);
   77|       |
   78|  1.36k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  1.36k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  1.36k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  1.36k|                                     "Cannot read a string_view from "
   87|  1.36k|                                     "this source range (would require "
   88|  1.36k|                                     "transcoding)");
   89|  1.36k|    }
   90|  1.36k|    else {
   91|  1.36k|        const auto view = src.view();
   92|  1.36k|        value = std::basic_string_view<ValueCharT>(
   93|  1.36k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  1.36k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 320, False: 1.04k]
  ------------------
   96|    320|            return unexpected_scan_error(
   97|    320|                scan_error::invalid_scanned_value,
   98|    320|                "Invalid encoding in scanned string_view");
   99|    320|        }
  100|       |
  101|  1.04k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  1.04k|    static_cast<    \
  |  |  247|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  1.36k|    }
  103|  1.36k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEEENKUlvE_clEv:
   66|  1.36k|    auto src = [&]() {
   67|  1.36k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  1.36k|            return make_contiguous_buffer(
   69|  1.36k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.36k|        }
   71|  1.36k|        else {
   72|  1.36k|            return make_contiguous_buffer(
   73|  1.36k|                ranges::subrange{ranges::begin(range), result});
   74|  1.36k|        }
   75|  1.36k|    }();
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|  1.12k|    {
  501|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  1.12k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  1.12k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|  1.12k|    {
  113|  1.12k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  1.12k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|  1.36k|{
   40|  1.36k|    static_assert(
   41|  1.36k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.36k|    auto src =
   44|  1.36k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.36k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 320, False: 1.04k]
  ------------------
   46|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    320|                                     "Invalid encoding in scanned string");
   48|    320|    }
   49|  1.04k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.04k|    static_cast<    \
  |  |  247|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.04k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.04k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.04k|    static_cast<    \
  |  |  247|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.04k|}
_ZN3scn2v24impl13string_readerIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSD_11char_traitsIwEENSD_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|  1.12k|    {
  501|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|  1.12k|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  1.12k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|  1.12k|    {
  113|  1.12k|        return read_string_impl(range, read_until_classic_space(range), value);
  114|  1.12k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|  1.36k|{
   40|  1.36k|    static_assert(
   41|  1.36k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.36k|    auto src =
   44|  1.36k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.36k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 320, False: 1.04k]
  ------------------
   46|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    320|                                     "Invalid encoding in scanned string");
   48|    320|    }
   49|  1.04k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.04k|    static_cast<    \
  |  |  247|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.04k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.04k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.04k|    static_cast<    \
  |  |  247|  1.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.04k|}
_ZN3scn2v24impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  454|  21.9k|    {
  455|  21.9k|        detail::check_string_type_specs(specs, eh);
  456|       |
  457|  21.9k|        SCN_GCC_PUSH
  458|  21.9k|        SCN_GCC_IGNORE("-Wswitch")
  459|  21.9k|        SCN_GCC_IGNORE("-Wswitch-default")
  460|       |
  461|  21.9k|        SCN_CLANG_PUSH
  462|  21.9k|        SCN_CLANG_IGNORE("-Wswitch")
  463|  21.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  464|       |
  465|  21.9k|        switch (specs.type) {
  ------------------
  |  Branch (465:17): [True: 438, False: 21.5k]
  ------------------
  466|  1.35k|            case detail::presentation_type::none:
  ------------------
  |  Branch (466:13): [True: 1.35k, False: 20.6k]
  ------------------
  467|  1.54k|            case detail::presentation_type::string:
  ------------------
  |  Branch (467:13): [True: 192, False: 21.7k]
  ------------------
  468|  1.54k|                m_type = reader_type::word;
  469|  1.54k|                break;
  470|       |
  471|    324|            case detail::presentation_type::character:
  ------------------
  |  Branch (471:13): [True: 324, False: 21.6k]
  ------------------
  472|    324|                m_type = reader_type::character;
  473|    324|                break;
  474|       |
  475|  4.95k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (475:13): [True: 4.95k, False: 17.0k]
  ------------------
  476|  4.95k|                m_type = reader_type::character_set;
  477|  4.95k|                break;
  478|       |
  479|  13.6k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (479:13): [True: 13.6k, False: 8.35k]
  ------------------
  480|  13.6k|                m_type = reader_type::regex;
  481|  13.6k|                break;
  482|       |
  483|  1.09k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (483:13): [True: 1.09k, False: 20.8k]
  ------------------
  484|  1.09k|                m_type = reader_type::regex_escaped;
  485|  1.09k|                break;
  486|  21.9k|        }
  487|       |
  488|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
  489|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
  490|  21.9k|    }
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
  511|    796|    {
  512|    796|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    796|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    796|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    796|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_:
  528|    796|    {
  529|    796|        SCN_CLANG_PUSH
  530|    796|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    796|        switch (m_type) {
  533|    284|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 284, False: 512]
  ------------------
  534|    284|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    284|                                                            value);
  536|       |
  537|    104|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 104, False: 692]
  ------------------
  538|    104|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|    104|                                                                 value);
  540|       |
  541|    222|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 222, False: 574]
  ------------------
  542|    222|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    222|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 790]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|    180|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 180, False: 616]
  ------------------
  552|    180|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    180|                    SCN_FWD(range),
  ------------------
  |  |  248|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    180|                    get_unescaped_regex_pattern(
  555|    180|                        specs.charset_string<SourceCharT>()),
  556|    180|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 796]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|    796|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    796|        }
  563|       |
  564|    796|        SCN_CLANG_POP
  565|    796|    }
_ZN3scn2v24impl16word_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  120|    284|    {
  121|    284|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    284|                                     value);
  123|    284|    }
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEE:
   62|    388|{
   63|    388|    static_assert(
   64|    388|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    388|    auto src = [&]() {
   67|    388|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    388|            return make_contiguous_buffer(
   69|    388|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    388|        }
   71|    388|        else {
   72|    388|            return make_contiguous_buffer(
   73|    388|                ranges::subrange{ranges::begin(range), result});
   74|    388|        }
   75|    388|    }();
   76|    388|    using src_type = decltype(src);
   77|       |
   78|    388|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    388|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    388|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    388|                                     "Cannot read a string_view from "
   87|    388|                                     "this source range (would require "
   88|    388|                                     "transcoding)");
   89|    388|    }
   90|    388|    else {
   91|    388|        const auto view = src.view();
   92|    388|        value = std::basic_string_view<ValueCharT>(
   93|    388|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    388|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 168, False: 220]
  ------------------
   96|    168|            return unexpected_scan_error(
   97|    168|                scan_error::invalid_scanned_value,
   98|    168|                "Invalid encoding in scanned string_view");
   99|    168|        }
  100|       |
  101|    220|        return SCN_MOVE(result);
  ------------------
  |  |  246|    220|    static_cast<    \
  |  |  247|    220|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    388|    }
  103|    388|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEEENKUlvE_clEv:
   66|    388|    auto src = [&]() {
   67|    388|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    388|            return make_contiguous_buffer(
   69|    388|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    388|        }
   71|    388|        else {
   72|    388|            return make_contiguous_buffer(
   73|    388|                ranges::subrange{ranges::begin(range), result});
   74|    388|        }
   75|    388|    }();
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  204|    104|    {
  205|    104|        return read_impl(
  206|    104|            range,
  207|    104|            [&](auto&& rng) {
  208|    104|                return read_string_view_impl(rng, read_all(rng), value);
  209|    104|            },
  210|    104|            detail::priority_tag<1>{});
  211|    104|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__117basic_string_viewIT0_NSN_11char_traitsISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISW_EEE4typeEEESW_OSP_NS0_6detail12priority_tagILm1EEE:
  219|    104|    {
  220|    104|        return read_cb(range);
  221|    104|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  207|    104|            [&](auto&& rng) {
  208|    104|                return read_string_view_impl(rng, read_all(rng), value);
  209|    104|            },
_ZN3scn2v24impl25character_set_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSQ_11char_traitsISS_EEEE:
  307|    222|    {
  308|    222|        auto it = read_source_impl(range, {specs});
  309|    222|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 210]
  |  |  ------------------
  ------------------
  310|     12|            return unexpected(it.error());
  311|     12|        }
  312|       |
  313|    210|        return read_string_view_impl(range, *it, value);
  314|    222|    }
_ZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperE:
  397|    666|    {
  398|    666|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|    666|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|    666|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    666|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 666]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|    666|        read_source_callback cb_wrapper{helper};
  406|       |
  407|    666|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 426, False: 240]
  ------------------
  408|    426|            const auto cb = [&](char32_t cp) {
  409|    426|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|    426|            };
  411|       |
  412|    426|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 222, False: 204]
  ------------------
  413|    222|                auto it = read_until_code_point(range, cb);
  414|    222|                return check_nonempty(it, range);
  415|    222|            }
  416|    204|            auto it = read_while_code_point(range, cb);
  417|    204|            return check_nonempty(it, range);
  418|    426|        }
  419|       |
  420|    240|        const auto cb = [&](SourceCharT ch) {
  421|    240|            return cb_wrapper.on_ascii_only(ch);
  422|    240|        };
  423|       |
  424|    240|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 174, False: 66]
  ------------------
  425|    174|            auto it = read_until_code_unit(range, cb);
  426|    174|            return check_nonempty(it, range);
  427|    174|        }
  428|     66|        auto it = read_while_code_unit(range, cb);
  429|     66|        return check_nonempty(it, range);
  430|    240|    }
_ZN3scn2v24impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
  347|  4.95k|        {
  348|  4.95k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (348:17): [True: 600, False: 4.35k]
  ------------------
  349|    600|                return {};
  350|    600|            }
  351|       |
  352|  4.35k|            auto charset_string = specs.charset_string<SourceCharT>();
  353|  4.35k|            auto it = detail::to_address(charset_string.begin());
  354|  4.35k|            auto set = detail::parse_presentation_set(
  355|  4.35k|                it, detail::to_address(charset_string.end()), nonascii);
  356|  4.35k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  153|  4.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.35k]
  |  |  ------------------
  ------------------
  357|      0|                return nonascii.err;
  358|      0|            }
  359|  4.35k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  243|  4.35k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  360|  4.35k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  243|  4.35k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  361|       |
  362|  4.35k|            ranges::sort(nonascii.extra_ranges);
  363|  4.35k|            return {};
  364|  4.35k|        }
_ZNK3scn2v24impl22nonascii_specs_handler19on_charset_invertedEv:
  262|  1.90k|    {
  263|       |        // no-op
  264|  1.90k|    }
_ZN3scn2v24impl22nonascii_specs_handler17on_charset_singleEDi:
  235|  1.16M|    {
  236|  1.16M|        on_charset_range(cp, cp + 1);
  237|  1.16M|    }
_ZN3scn2v24impl22nonascii_specs_handler16on_charset_rangeEDiDi:
  240|  1.17M|    {
  241|  1.17M|        if (end <= 127) {
  ------------------
  |  Branch (241:13): [True: 897k, False: 273k]
  ------------------
  242|   897k|            return;
  243|   897k|        }
  244|       |
  245|  28.0M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (245:25): [True: 28.0M, False: 272k]
  ------------------
  246|       |            // TODO: check for overlap
  247|  28.0M|            if (elem.first == end) {
  ------------------
  |  Branch (247:17): [True: 162, False: 28.0M]
  ------------------
  248|    162|                elem.first = begin;
  249|    162|                return;
  250|    162|            }
  251|       |
  252|  28.0M|            if (elem.second == begin) {
  ------------------
  |  Branch (252:17): [True: 606, False: 28.0M]
  ------------------
  253|    606|                elem.second = end;
  254|    606|                return;
  255|    606|            }
  256|  28.0M|        }
  257|       |
  258|   272k|        extra_ranges.push_back(std::make_pair(begin, end));
  259|   272k|    }
_ZNK3scn2v24impl22nonascii_specs_handlercvbEv:
  277|  1.18M|    {
  278|  1.18M|        return static_cast<bool>(err);
  279|  1.18M|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperEENKUlDiE_clEDi:
  408|  22.1k|            const auto cb = [&](char32_t cp) {
  409|  22.1k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|  22.1k|            };
_ZNK3scn2v24impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
  381|   487k|        {
  382|   487k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (382:17): [True: 62.0k, False: 425k]
  ------------------
  383|  62.0k|                return helper.is_char_set_in_extra_literals(cp);
  384|  62.0k|            }
  385|       |
  386|   425k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
  387|   487k|        }
_ZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
  331|  62.0k|        {
  332|       |            // TODO: binary search?
  333|  62.0k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (333:17): [True: 0, False: 62.0k]
  ------------------
  334|      0|                return false;
  335|      0|            }
  336|       |
  337|  62.0k|            const auto cp_val = static_cast<uint32_t>(cp);
  338|  62.0k|            return ranges::find_if(
  339|  62.0k|                       nonascii.extra_ranges,
  340|  62.0k|                       [cp_val](const auto& pair) SCN_NOEXCEPT {
  341|  62.0k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  342|  62.0k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  343|  62.0k|                       }) != nonascii.extra_ranges.end();
  344|  62.0k|        }
_ZZNK3scn2v24impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
  340|   882k|                       [cp_val](const auto& pair) SCN_NOEXCEPT {
  341|   882k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (341:35): [True: 871k, False: 11.3k]
  ------------------
  342|   882k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (342:35): [True: 16.5k, False: 854k]
  ------------------
  343|   882k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v24impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
  321|   433k|        {
  322|   433k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  242|   433k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   433k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  323|   433k|            const auto val =
  324|   433k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
  325|   433k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
  326|   433k|                    (val % 8)) &
  327|   433k|                   1u;
  328|   433k|        }
_ZN3scn2v24impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS8_S8_LNSC_13subrange_kindE1EEEEEEENS0_13scan_expectedIT_EERKSJ_RKT0_:
  435|    666|    {
  436|    666|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 36, False: 630]
  ------------------
  437|     36|            return unexpected_scan_error(
  438|     36|                scan_error::invalid_scanned_value,
  439|     36|                "No characters matched in [character set]");
  440|     36|        }
  441|       |
  442|    630|        return it;
  443|    666|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperEENKUlcE_clEc:
  420|  6.31k|        const auto cb = [&](SourceCharT ch) {
  421|  6.31k|            return cb_wrapper.on_ascii_only(ch);
  422|  6.31k|        };
_ZNK3scn2v24impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
  372|  12.8k|        {
  373|  12.8k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (373:17): [True: 4.85k, False: 8.02k]
  ------------------
  374|  4.85k|                return false;
  375|  4.85k|            }
  376|       |
  377|  8.02k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
  378|  12.8k|        }
_ZN3scn2v24impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
  318|  4.95k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__117basic_string_viewIT1_NSP_11char_traitsISR_EEEE:
   62|    210|{
   63|    210|    static_assert(
   64|    210|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    210|    auto src = [&]() {
   67|    210|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    210|            return make_contiguous_buffer(
   69|    210|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    210|        }
   71|    210|        else {
   72|    210|            return make_contiguous_buffer(
   73|    210|                ranges::subrange{ranges::begin(range), result});
   74|    210|        }
   75|    210|    }();
   76|    210|    using src_type = decltype(src);
   77|       |
   78|    210|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    210|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    210|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    210|                                     "Cannot read a string_view from "
   87|    210|                                     "this source range (would require "
   88|    210|                                     "transcoding)");
   89|    210|    }
   90|    210|    else {
   91|    210|        const auto view = src.view();
   92|    210|        value = std::basic_string_view<ValueCharT>(
   93|    210|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    210|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 62, False: 148]
  ------------------
   96|     62|            return unexpected_scan_error(
   97|     62|                scan_error::invalid_scanned_value,
   98|     62|                "Invalid encoding in scanned string_view");
   99|     62|        }
  100|       |
  101|    148|        return SCN_MOVE(result);
  ------------------
  |  |  246|    148|    static_cast<    \
  |  |  247|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    210|    }
  103|    210|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__117basic_string_viewIT1_NSP_11char_traitsISR_EEEEENKUlvE_clEv:
   66|    210|    auto src = [&]() {
   67|    210|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    210|            return make_contiguous_buffer(
   69|    210|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    210|        }
   71|    210|        else {
   72|    210|            return make_contiguous_buffer(
   73|    210|                ranges::subrange{ranges::begin(range), result});
   74|    210|        }
   75|    210|    }();
_ZN3scn2v24impl24regex_string_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
  147|    186|    {
  148|    186|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 186, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    186|    }                                                  \
  |  |  |  |   70|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|      0|        return read_string_view_impl(range, it, value);
  150|    186|    }
_ZN3scn2v24impl24regex_string_reader_implIcE4implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NSt3__117basic_string_viewIcNSN_11char_traitsIcEEEENS0_6detail11regex_flagsE:
  158|    558|    {
  159|    558|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  1.11k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (159:23): [Folded - Ignored]
  |  Branch (159:23): [Folded - Ignored]
  ------------------
  160|    558|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (160:23): [Folded - Ignored]
  ------------------
  161|    558|            return unexpected_scan_error(
  162|    558|                scan_error::invalid_scanned_value,
  163|    558|                "Regex backend doesn't support wide strings as input");
  164|    558|        }
  165|    558|        else {
  166|    558|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (166:17): [True: 558, False: 0]
  ------------------
  167|    558|                return unexpected_scan_error(
  168|    558|                    scan_error::invalid_scanned_value,
  169|    558|                    "Cannot use regex with a non-contiguous source "
  170|    558|                    "range");
  171|    558|            }
  172|       |
  173|      0|            auto input = get_as_contiguous(range);
  174|      0|            SCN_TRY(it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
  176|      0|            return ranges_polyfill::batch_next(
  177|      0|                ranges::begin(range), ranges::distance(input.begin(), it));
  178|      0|        }
  179|    558|    }
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refE:
  511|  6.37k|    {
  512|  6.37k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.37k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  6.37k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  6.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  6.37k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_:
  528|  6.37k|    {
  529|  6.37k|        SCN_CLANG_PUSH
  530|  6.37k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  6.37k|        switch (m_type) {
  533|    232|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 232, False: 6.14k]
  ------------------
  534|    232|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    232|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 6.37k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  1.43k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 1.43k, False: 4.94k]
  ------------------
  542|  1.43k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  1.43k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  4.53k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 4.53k, False: 1.84k]
  ------------------
  547|  4.53k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  4.53k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  4.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  4.53k|                    specs.regexp_flags, value);
  550|       |
  551|    184|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 184, False: 6.19k]
  ------------------
  552|    184|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    184|                    SCN_FWD(range),
  ------------------
  |  |  248|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    184|                    get_unescaped_regex_pattern(
  555|    184|                        specs.charset_string<SourceCharT>()),
  556|    184|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 6.37k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|  6.37k|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  6.37k|        }
  563|       |
  564|  6.37k|        SCN_CLANG_POP
  565|  6.37k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__117basic_string_viewIT0_NSL_11char_traitsISN_EEEE:
  120|    232|    {
  121|    232|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    232|                                     value);
  123|    232|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSP_11char_traitsISR_EEEE:
  307|  1.43k|    {
  308|  1.43k|        auto it = read_source_impl(range, {specs});
  309|  1.43k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 338, False: 1.09k]
  |  |  ------------------
  ------------------
  310|    338|            return unexpected(it.error());
  311|    338|        }
  312|       |
  313|  1.09k|        return read_string_view_impl(range, *it, value);
  314|  1.43k|    }
_ZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperE:
  397|  4.29k|    {
  398|  4.29k|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|  4.29k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|  4.29k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.29k]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|  4.29k|        read_source_callback cb_wrapper{helper};
  406|       |
  407|  4.29k|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 3.93k, False: 360]
  ------------------
  408|  3.93k|            const auto cb = [&](char32_t cp) {
  409|  3.93k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|  3.93k|            };
  411|       |
  412|  3.93k|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 1.18k, False: 2.74k]
  ------------------
  413|  1.18k|                auto it = read_until_code_point(range, cb);
  414|  1.18k|                return check_nonempty(it, range);
  415|  1.18k|            }
  416|  2.74k|            auto it = read_while_code_point(range, cb);
  417|  2.74k|            return check_nonempty(it, range);
  418|  3.93k|        }
  419|       |
  420|    360|        const auto cb = [&](SourceCharT ch) {
  421|    360|            return cb_wrapper.on_ascii_only(ch);
  422|    360|        };
  423|       |
  424|    360|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 198, False: 162]
  ------------------
  425|    198|            auto it = read_until_code_unit(range, cb);
  426|    198|            return check_nonempty(it, range);
  427|    198|        }
  428|    162|        auto it = read_while_code_unit(range, cb);
  429|    162|        return check_nonempty(it, range);
  430|    360|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlDiE_clEDi:
  408|   465k|            const auto cb = [&](char32_t cp) {
  409|   465k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|   465k|            };
_ZN3scn2v24impl25character_set_reader_implIcE14check_nonemptyIPKcN4nano6ranges9subrange_8subrangeIS6_S6_LNS8_13subrange_kindE1EEEEENS0_13scan_expectedIT_EERKSE_RKT0_:
  435|  4.29k|    {
  436|  4.29k|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 1.01k, False: 3.27k]
  ------------------
  437|  1.01k|            return unexpected_scan_error(
  438|  1.01k|                scan_error::invalid_scanned_value,
  439|  1.01k|                "No characters matched in [character set]");
  440|  1.01k|        }
  441|       |
  442|  3.27k|        return it;
  443|  4.29k|    }
_ZZNK3scn2v24impl25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlcE_clEc:
  420|  6.55k|        const auto cb = [&](SourceCharT ch) {
  421|  6.55k|            return cb_wrapper.on_ascii_only(ch);
  422|  6.55k|        };
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEE:
   62|  1.80k|{
   63|  1.80k|    static_assert(
   64|  1.80k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  1.80k|    auto src = [&]() {
   67|  1.80k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  1.80k|            return make_contiguous_buffer(
   69|  1.80k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.80k|        }
   71|  1.80k|        else {
   72|  1.80k|            return make_contiguous_buffer(
   73|  1.80k|                ranges::subrange{ranges::begin(range), result});
   74|  1.80k|        }
   75|  1.80k|    }();
   76|  1.80k|    using src_type = decltype(src);
   77|       |
   78|  1.80k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  1.80k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  1.80k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  1.80k|                                     "Cannot read a string_view from "
   87|  1.80k|                                     "this source range (would require "
   88|  1.80k|                                     "transcoding)");
   89|  1.80k|    }
   90|  1.80k|    else {
   91|  1.80k|        const auto view = src.view();
   92|  1.80k|        value = std::basic_string_view<ValueCharT>(
   93|  1.80k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  1.80k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 494, False: 1.31k]
  ------------------
   96|    494|            return unexpected_scan_error(
   97|    494|                scan_error::invalid_scanned_value,
   98|    494|                "Invalid encoding in scanned string_view");
   99|    494|        }
  100|       |
  101|  1.31k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  1.31k|    static_cast<    \
  |  |  247|  1.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  1.80k|    }
  103|  1.80k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEEENKUlvE_clEv:
   66|  1.80k|    auto src = [&]() {
   67|  1.80k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  1.80k|            return make_contiguous_buffer(
   69|  1.80k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.80k|        }
   71|  1.80k|        else {
   72|  1.80k|            return make_contiguous_buffer(
   73|  1.80k|                ranges::subrange{ranges::begin(range), result});
   74|  1.80k|        }
   75|  1.80k|    }();
_ZN3scn2v24impl24regex_string_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEENS0_6detail11regex_flagsERNSM_IT0_NSN_ISS_EEEE:
  147|  4.71k|    {
  148|  4.71k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  4.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.00k, False: 716]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.00k|    }                                                  \
  |  |  |  |   70|  4.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    716|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|    716|        return read_string_view_impl(range, it, value);
  150|  4.71k|    }
_ZN3scn2v24impl24regex_string_reader_implIcE4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEENS0_6detail11regex_flagsE:
  158|  14.1k|    {
  159|  14.1k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  28.2k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (159:23): [Folded - Ignored]
  |  Branch (159:23): [Folded - Ignored]
  ------------------
  160|  14.1k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (160:23): [Folded - Ignored]
  ------------------
  161|  14.1k|            return unexpected_scan_error(
  162|  14.1k|                scan_error::invalid_scanned_value,
  163|  14.1k|                "Regex backend doesn't support wide strings as input");
  164|  14.1k|        }
  165|  14.1k|        else {
  166|  14.1k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (166:17): [True: 0, False: 14.1k]
  ------------------
  167|      0|                return unexpected_scan_error(
  168|      0|                    scan_error::invalid_scanned_value,
  169|      0|                    "Cannot use regex with a non-contiguous source "
  170|      0|                    "range");
  171|      0|            }
  172|       |
  173|  14.1k|            auto input = get_as_contiguous(range);
  174|  14.1k|            SCN_TRY(it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.0k, False: 2.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.0k|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|  2.14k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
  176|  2.14k|            return ranges_polyfill::batch_next(
  177|  2.14k|                ranges::begin(range), ranges::distance(input.begin(), it));
  178|  14.1k|        }
  179|  14.1k|    }
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|    796|    {
  512|    796|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    796|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    796|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    796|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|    796|    {
  529|    796|        SCN_CLANG_PUSH
  530|    796|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    796|        switch (m_type) {
  533|    284|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 284, False: 512]
  ------------------
  534|    284|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    284|                                                            value);
  536|       |
  537|    104|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 104, False: 692]
  ------------------
  538|    104|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|    104|                                                                 value);
  540|       |
  541|    222|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 222, False: 574]
  ------------------
  542|    222|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    222|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 790]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|    180|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 180, False: 616]
  ------------------
  552|    180|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    180|                    SCN_FWD(range),
  ------------------
  |  |  248|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    180|                    get_unescaped_regex_pattern(
  555|    180|                        specs.charset_string<SourceCharT>()),
  556|    180|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 796]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|    796|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    796|        }
  563|       |
  564|    796|        SCN_CLANG_POP
  565|    796|    }
_ZN3scn2v24impl16word_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  112|    284|    {
  113|    284|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    284|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|    388|{
   40|    388|    static_assert(
   41|    388|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    388|    auto src =
   44|    388|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    388|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 168, False: 220]
  ------------------
   46|    168|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    168|                                     "Invalid encoding in scanned string");
   48|    168|    }
   49|    220|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    220|    static_cast<    \
  |  |  247|    220|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    220|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    220|    return SCN_MOVE(result);
  ------------------
  |  |  246|    220|    static_cast<    \
  |  |  247|    220|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    220|}
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|    104|    {
  193|    104|        return read_impl(
  194|    104|            range,
  195|    104|            [&](auto&& rng) {
  196|    104|                return read_string_impl(rng, read_all(rng), value);
  197|    104|            },
  198|    104|            detail::priority_tag<1>{});
  199|    104|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|    104|    {
  220|    104|        return read_cb(range);
  221|    104|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|    104|            [&](auto&& rng) {
  196|    104|                return read_string_impl(rng, read_all(rng), value);
  197|    104|            },
_ZN3scn2v24impl25character_set_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEE:
  293|    222|    {
  294|    222|        auto it = read_source_impl(range, {specs});
  295|    222|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 210]
  |  |  ------------------
  ------------------
  296|     12|            return unexpected(it.error());
  297|     12|        }
  298|       |
  299|    210|        return read_string_impl(range, *it, value);
  300|    222|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__112basic_stringIT1_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
   39|    210|{
   40|    210|    static_assert(
   41|    210|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    210|    auto src =
   44|    210|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    210|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 62, False: 148]
  ------------------
   46|     62|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     62|                                     "Invalid encoding in scanned string");
   48|     62|    }
   49|    148|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    148|    static_cast<    \
  |  |  247|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    148|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 148]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    148|    return SCN_MOVE(result);
  ------------------
  |  |  246|    148|    static_cast<    \
  |  |  247|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    148|}
_ZN3scn2v24impl24regex_string_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEENS0_6detail11regex_flagsERNSM_12basic_stringIT0_NSO_ISU_EENSM_9allocatorISU_EEEE:
  136|    186|    {
  137|    186|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 186, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    186|    }                                                  \
  |  |  |  |   70|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|        return read_string_impl(range, it, value);
  139|    186|    }
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  6.37k|    {
  512|  6.37k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.37k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  6.37k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  6.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  6.37k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  6.37k|    {
  529|  6.37k|        SCN_CLANG_PUSH
  530|  6.37k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  6.37k|        switch (m_type) {
  533|    232|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 232, False: 6.14k]
  ------------------
  534|    232|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    232|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 6.37k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  1.43k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 1.43k, False: 4.94k]
  ------------------
  542|  1.43k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  1.43k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  4.53k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 4.53k, False: 1.84k]
  ------------------
  547|  4.53k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  4.53k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  4.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  4.53k|                    specs.regexp_flags, value);
  550|       |
  551|    184|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 184, False: 6.19k]
  ------------------
  552|    184|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    184|                    SCN_FWD(range),
  ------------------
  |  |  248|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    184|                    get_unescaped_regex_pattern(
  555|    184|                        specs.charset_string<SourceCharT>()),
  556|    184|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 6.37k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|  6.37k|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  6.37k|        }
  563|       |
  564|  6.37k|        SCN_CLANG_POP
  565|  6.37k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|    232|    {
  113|    232|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    232|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|  1.43k|    {
  294|  1.43k|        auto it = read_source_impl(range, {specs});
  295|  1.43k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 338, False: 1.09k]
  |  |  ------------------
  ------------------
  296|    338|            return unexpected(it.error());
  297|    338|        }
  298|       |
  299|  1.09k|        return read_string_impl(range, *it, value);
  300|  1.43k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|  1.80k|{
   40|  1.80k|    static_assert(
   41|  1.80k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.80k|    auto src =
   44|  1.80k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.80k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 494, False: 1.31k]
  ------------------
   46|    494|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    494|                                     "Invalid encoding in scanned string");
   48|    494|    }
   49|  1.31k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.31k|    static_cast<    \
  |  |  247|  1.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.31k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.31k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.31k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.31k|    static_cast<    \
  |  |  247|  1.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.31k|}
_ZN3scn2v24impl24regex_string_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_12basic_stringIT0_NSN_IST_EENSL_9allocatorIST_EEEE:
  136|  4.71k|    {
  137|  4.71k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  4.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.00k, False: 716]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.00k|    }                                                  \
  |  |  |  |   70|  4.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    716|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    716|        return read_string_impl(range, it, value);
  139|  4.71k|    }
_ZN3scn2v24impl13string_readerIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|    796|    {
  512|    796|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    796|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    796|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    796|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    796|    }
_ZN3scn2v24impl13string_readerIcE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|    796|    {
  529|    796|        SCN_CLANG_PUSH
  530|    796|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    796|        switch (m_type) {
  533|    284|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 284, False: 512]
  ------------------
  534|    284|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    284|                                                            value);
  536|       |
  537|    104|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 104, False: 692]
  ------------------
  538|    104|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    104|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|    104|                                                                 value);
  540|       |
  541|    222|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 222, False: 574]
  ------------------
  542|    222|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    222|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    222|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 790]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|    180|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 180, False: 616]
  ------------------
  552|    180|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    180|                    SCN_FWD(range),
  ------------------
  |  |  248|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    180|                    get_unescaped_regex_pattern(
  555|    180|                        specs.charset_string<SourceCharT>()),
  556|    180|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 796]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|    796|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    796|        }
  563|       |
  564|    796|        SCN_CLANG_POP
  565|    796|    }
_ZN3scn2v24impl16word_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  112|    284|    {
  113|    284|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    284|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|    388|{
   40|    388|    static_assert(
   41|    388|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    388|    auto src =
   44|    388|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    388|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 168, False: 220]
  ------------------
   46|    168|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    168|                                     "Invalid encoding in scanned string");
   48|    168|    }
   49|    220|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    220|    static_cast<    \
  |  |  247|    220|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    220|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    220|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 220]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    220|    return SCN_MOVE(result);
  ------------------
  |  |  246|    220|    static_cast<    \
  |  |  247|    220|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    220|}
_ZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|    104|    {
  193|    104|        return read_impl(
  194|    104|            range,
  195|    104|            [&](auto&& rng) {
  196|    104|                return read_string_impl(rng, read_all(rng), value);
  197|    104|            },
  198|    104|            detail::priority_tag<1>{});
  199|    104|    }
_ZN3scn2v24impl21character_reader_implIcE9read_implIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|    104|    {
  220|    104|        return read_cb(range);
  221|    104|    }
_ZZN3scn2v24impl21character_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|    104|            [&](auto&& rng) {
  196|    104|                return read_string_impl(rng, read_all(rng), value);
  197|    104|            },
_ZN3scn2v24impl25character_set_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEE:
  293|    222|    {
  294|    222|        auto it = read_source_impl(range, {specs});
  295|    222|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    222|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 210]
  |  |  ------------------
  ------------------
  296|     12|            return unexpected(it.error());
  297|     12|        }
  298|       |
  299|    210|        return read_string_impl(range, *it, value);
  300|    222|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__112basic_stringIT1_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
   39|    210|{
   40|    210|    static_assert(
   41|    210|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    210|    auto src =
   44|    210|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    210|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 62, False: 148]
  ------------------
   46|     62|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     62|                                     "Invalid encoding in scanned string");
   48|     62|    }
   49|    148|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    148|    static_cast<    \
  |  |  247|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    148|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    148|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 148]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    148|    return SCN_MOVE(result);
  ------------------
  |  |  246|    148|    static_cast<    \
  |  |  247|    148|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    148|}
_ZN3scn2v24impl24regex_string_reader_implIcE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEENS0_6detail11regex_flagsERNSM_12basic_stringIT0_NSO_ISU_EENSM_9allocatorISU_EEEE:
  136|    186|    {
  137|    186|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 186, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    186|    }                                                  \
  |  |  |  |   70|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|        return read_string_impl(range, it, value);
  139|    186|    }
_ZN3scn2v24impl13string_readerIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  6.37k|    {
  512|  6.37k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.37k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  6.37k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  6.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  6.37k|    }
_ZN3scn2v24impl13string_readerIcE9read_implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  6.37k|    {
  529|  6.37k|        SCN_CLANG_PUSH
  530|  6.37k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  6.37k|        switch (m_type) {
  533|    232|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 232, False: 6.14k]
  ------------------
  534|    232|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    232|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 6.37k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|  1.43k|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 1.43k, False: 4.94k]
  ------------------
  542|  1.43k|                return character_set_reader_impl<SourceCharT>{}.read(
  543|  1.43k|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  1.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  4.53k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 4.53k, False: 1.84k]
  ------------------
  547|  4.53k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  4.53k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  4.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  4.53k|                    specs.regexp_flags, value);
  550|       |
  551|    184|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 184, False: 6.19k]
  ------------------
  552|    184|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    184|                    SCN_FWD(range),
  ------------------
  |  |  248|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    184|                    get_unescaped_regex_pattern(
  555|    184|                        specs.charset_string<SourceCharT>()),
  556|    184|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 6.37k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|  6.37k|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  6.37k|        }
  563|       |
  564|  6.37k|        SCN_CLANG_POP
  565|  6.37k|    }
_ZN3scn2v24impl16word_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|    232|    {
  113|    232|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    232|    }
_ZN3scn2v24impl25character_set_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|  1.43k|    {
  294|  1.43k|        auto it = read_source_impl(range, {specs});
  295|  1.43k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 338, False: 1.09k]
  |  |  ------------------
  ------------------
  296|    338|            return unexpected(it.error());
  297|    338|        }
  298|       |
  299|  1.09k|        return read_string_impl(range, *it, value);
  300|  1.43k|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|  1.80k|{
   40|  1.80k|    static_assert(
   41|  1.80k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.80k|    auto src =
   44|  1.80k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.80k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 494, False: 1.31k]
  ------------------
   46|    494|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|    494|                                     "Invalid encoding in scanned string");
   48|    494|    }
   49|  1.31k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.31k|    static_cast<    \
  |  |  247|  1.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.31k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.31k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.31k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.31k|    static_cast<    \
  |  |  247|  1.31k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.31k|}
_ZN3scn2v24impl24regex_string_reader_implIcE4readIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIcNSL_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_12basic_stringIT0_NSN_IST_EENSL_9allocatorIST_EEEE:
  136|  4.71k|    {
  137|  4.71k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  4.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.00k, False: 716]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.00k|    }                                                  \
  |  |  |  |   70|  4.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    716|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    716|        return read_string_impl(range, it, value);
  139|  4.71k|    }
_ZN3scn2v24impl13string_readerIwEC2Ev:
  450|  19.3k|    constexpr string_reader() = default;
_ZNK3scn2v24impl13string_readerIwE19skip_ws_before_readEv:
  493|  18.9k|    {
  494|  18.9k|        return m_type == reader_type::word;
  495|  18.9k|    }
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|    892|    {
  501|    892|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    892|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|    892|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|    892|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|    892|    {
  113|    892|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    892|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|  1.14k|{
   40|  1.14k|    static_assert(
   41|  1.14k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.14k|    auto src =
   44|  1.14k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.14k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 82, False: 1.06k]
  ------------------
   46|     82|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     82|                                     "Invalid encoding in scanned string");
   48|     82|    }
   49|  1.06k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.06k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.06k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.06k|}
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSD_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RT0_NS0_6detail10locale_refE:
  500|    892|    {
  501|    892|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    892|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|    892|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|    892|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__117basic_string_viewIT0_NSK_11char_traitsISM_EEEE:
  120|    892|    {
  121|    892|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    892|                                     value);
  123|    892|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEE:
   62|  1.14k|{
   63|  1.14k|    static_assert(
   64|  1.14k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  1.14k|    auto src = [&]() {
   67|  1.14k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  1.14k|            return make_contiguous_buffer(
   69|  1.14k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.14k|        }
   71|  1.14k|        else {
   72|  1.14k|            return make_contiguous_buffer(
   73|  1.14k|                ranges::subrange{ranges::begin(range), result});
   74|  1.14k|        }
   75|  1.14k|    }();
   76|  1.14k|    using src_type = decltype(src);
   77|       |
   78|  1.14k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  1.14k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  1.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  1.14k|                                     "Cannot read a string_view from "
   87|  1.14k|                                     "this source range (would require "
   88|  1.14k|                                     "transcoding)");
   89|  1.14k|    }
   90|  1.14k|    else {
   91|  1.14k|        const auto view = src.view();
   92|  1.14k|        value = std::basic_string_view<ValueCharT>(
   93|  1.14k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  1.14k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 82, False: 1.06k]
  ------------------
   96|     82|            return unexpected_scan_error(
   97|     82|                scan_error::invalid_scanned_value,
   98|     82|                "Invalid encoding in scanned string_view");
   99|     82|        }
  100|       |
  101|  1.06k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  1.14k|    }
  103|  1.14k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__117basic_string_viewIT1_NSJ_11char_traitsISL_EEEEENKUlvE_clEv:
   66|  1.14k|    auto src = [&]() {
   67|  1.14k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  1.14k|            return make_contiguous_buffer(
   69|  1.14k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.14k|        }
   71|  1.14k|        else {
   72|  1.14k|            return make_contiguous_buffer(
   73|  1.14k|                ranges::subrange{ranges::begin(range), result});
   74|  1.14k|        }
   75|  1.14k|    }();
_ZN3scn2v24impl13string_readerIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSD_11char_traitsIwEENSD_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RT0_NS0_6detail10locale_refE:
  500|    892|    {
  501|    892|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    892|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  502|    892|        return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range), value);
  ------------------
  |  |  248|    892|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|    892|    }
_ZN3scn2v24impl16word_reader_implIwE4readIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RNSt3__112basic_stringIT0_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
  112|    892|    {
  113|    892|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    892|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEES8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESE_OT0_RNSt3__112basic_stringIT1_NSJ_11char_traitsISL_EENSJ_9allocatorISL_EEEE:
   39|  1.14k|{
   40|  1.14k|    static_assert(
   41|  1.14k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.14k|    auto src =
   44|  1.14k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.14k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 82, False: 1.06k]
  ------------------
   46|     82|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     82|                                     "Invalid encoding in scanned string");
   48|     82|    }
   49|  1.06k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.06k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.06k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.06k|    static_cast<    \
  |  |  247|  1.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.06k|}
_ZN3scn2v24impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  454|  16.6k|    {
  455|  16.6k|        detail::check_string_type_specs(specs, eh);
  456|       |
  457|  16.6k|        SCN_GCC_PUSH
  458|  16.6k|        SCN_GCC_IGNORE("-Wswitch")
  459|  16.6k|        SCN_GCC_IGNORE("-Wswitch-default")
  460|       |
  461|  16.6k|        SCN_CLANG_PUSH
  462|  16.6k|        SCN_CLANG_IGNORE("-Wswitch")
  463|  16.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  464|       |
  465|  16.6k|        switch (specs.type) {
  ------------------
  |  Branch (465:17): [True: 438, False: 16.2k]
  ------------------
  466|  1.27k|            case detail::presentation_type::none:
  ------------------
  |  Branch (466:13): [True: 1.27k, False: 15.4k]
  ------------------
  467|  1.44k|            case detail::presentation_type::string:
  ------------------
  |  Branch (467:13): [True: 174, False: 16.5k]
  ------------------
  468|  1.44k|                m_type = reader_type::word;
  469|  1.44k|                break;
  470|       |
  471|    270|            case detail::presentation_type::character:
  ------------------
  |  Branch (471:13): [True: 270, False: 16.4k]
  ------------------
  472|    270|                m_type = reader_type::character;
  473|    270|                break;
  474|       |
  475|  3.05k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (475:13): [True: 3.05k, False: 13.6k]
  ------------------
  476|  3.05k|                m_type = reader_type::character_set;
  477|  3.05k|                break;
  478|       |
  479|  10.8k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (479:13): [True: 10.8k, False: 5.80k]
  ------------------
  480|  10.8k|                m_type = reader_type::regex;
  481|  10.8k|                break;
  482|       |
  483|    594|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (483:13): [True: 594, False: 16.1k]
  ------------------
  484|    594|                m_type = reader_type::regex_escaped;
  485|    594|                break;
  486|  16.6k|        }
  487|       |
  488|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
  489|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
  490|  16.6k|    }
_ZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperE:
  397|    456|    {
  398|    456|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|    456|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|    456|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 456]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|    456|        read_source_callback cb_wrapper{helper};
  406|       |
  407|    456|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 318, False: 138]
  ------------------
  408|    318|            const auto cb = [&](char32_t cp) {
  409|    318|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|    318|            };
  411|       |
  412|    318|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 132, False: 186]
  ------------------
  413|    132|                auto it = read_until_code_point(range, cb);
  414|    132|                return check_nonempty(it, range);
  415|    132|            }
  416|    186|            auto it = read_while_code_point(range, cb);
  417|    186|            return check_nonempty(it, range);
  418|    318|        }
  419|       |
  420|    138|        const auto cb = [&](SourceCharT ch) {
  421|    138|            return cb_wrapper.on_ascii_only(ch);
  422|    138|        };
  423|       |
  424|    138|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 78, False: 60]
  ------------------
  425|     78|            auto it = read_until_code_unit(range, cb);
  426|     78|            return check_nonempty(it, range);
  427|     78|        }
  428|     60|        auto it = read_while_code_unit(range, cb);
  429|     60|        return check_nonempty(it, range);
  430|    138|    }
_ZN3scn2v24impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
  347|  3.05k|        {
  348|  3.05k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (348:17): [True: 432, False: 2.62k]
  ------------------
  349|    432|                return {};
  350|    432|            }
  351|       |
  352|  2.62k|            auto charset_string = specs.charset_string<SourceCharT>();
  353|  2.62k|            auto it = detail::to_address(charset_string.begin());
  354|  2.62k|            auto set = detail::parse_presentation_set(
  355|  2.62k|                it, detail::to_address(charset_string.end()), nonascii);
  356|  2.62k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  153|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
  357|      0|                return nonascii.err;
  358|      0|            }
  359|  2.62k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  243|  2.62k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  360|  2.62k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  243|  2.62k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  361|       |
  362|  2.62k|            ranges::sort(nonascii.extra_ranges);
  363|  2.62k|            return {};
  364|  2.62k|        }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperEENKUlDiE_clEDi:
  408|  15.6k|            const auto cb = [&](char32_t cp) {
  409|  15.6k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|  15.6k|            };
_ZNK3scn2v24impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
  381|   556k|        {
  382|   556k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (382:17): [True: 56.7k, False: 500k]
  ------------------
  383|  56.7k|                return helper.is_char_set_in_extra_literals(cp);
  384|  56.7k|            }
  385|       |
  386|   500k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
  387|   556k|        }
_ZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
  331|  56.7k|        {
  332|       |            // TODO: binary search?
  333|  56.7k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (333:17): [True: 0, False: 56.7k]
  ------------------
  334|      0|                return false;
  335|      0|            }
  336|       |
  337|  56.7k|            const auto cp_val = static_cast<uint32_t>(cp);
  338|  56.7k|            return ranges::find_if(
  339|  56.7k|                       nonascii.extra_ranges,
  340|  56.7k|                       [cp_val](const auto& pair) SCN_NOEXCEPT {
  341|  56.7k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  342|  56.7k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  343|  56.7k|                       }) != nonascii.extra_ranges.end();
  344|  56.7k|        }
_ZZNK3scn2v24impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
  340|  4.79M|                       [cp_val](const auto& pair) SCN_NOEXCEPT {
  341|  4.79M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (341:35): [True: 4.78M, False: 5.75k]
  ------------------
  342|  4.79M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (342:35): [True: 53.7k, False: 4.73M]
  ------------------
  343|  4.79M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v24impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
  321|   505k|        {
  322|   505k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  242|   505k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   505k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  323|   505k|            const auto val =
  324|   505k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
  325|   505k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
  326|   505k|                    (val % 8)) &
  327|   505k|                   1u;
  328|   505k|        }
_ZN3scn2v24impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS8_S8_LNSC_13subrange_kindE1EEEEEEENS0_13scan_expectedIT_EERKSJ_RKT0_:
  435|    456|    {
  436|    456|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 30, False: 426]
  ------------------
  437|     30|            return unexpected_scan_error(
  438|     30|                scan_error::invalid_scanned_value,
  439|     30|                "No characters matched in [character set]");
  440|     30|        }
  441|       |
  442|    426|        return it;
  443|    456|    }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NS3_12specs_helperEENKUlwE_clEw:
  420|  1.82k|        const auto cb = [&](SourceCharT ch) {
  421|  1.82k|            return cb_wrapper.on_ascii_only(ch);
  422|  1.82k|        };
_ZNK3scn2v24impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
  372|  6.08k|        {
  373|  6.08k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (373:17): [True: 546, False: 5.53k]
  ------------------
  374|    546|                return false;
  375|    546|            }
  376|       |
  377|  5.53k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
  378|  6.08k|        }
_ZN3scn2v24impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
  318|  3.05k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v24impl24regex_string_reader_implIwE4implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_NSt3__117basic_string_viewIwNSN_11char_traitsIwEEEENS0_6detail11regex_flagsE:
  158|    234|    {
  159|    234|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|    468|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (159:23): [Folded - Ignored]
  |  Branch (159:23): [Folded - Ignored]
  ------------------
  160|    234|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (160:23): [Folded - Ignored]
  ------------------
  161|    234|            return unexpected_scan_error(
  162|    234|                scan_error::invalid_scanned_value,
  163|    234|                "Regex backend doesn't support wide strings as input");
  164|    234|        }
  165|    234|        else {
  166|    234|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (166:17): [True: 234, False: 0]
  ------------------
  167|    234|                return unexpected_scan_error(
  168|    234|                    scan_error::invalid_scanned_value,
  169|    234|                    "Cannot use regex with a non-contiguous source "
  170|    234|                    "range");
  171|    234|            }
  172|       |
  173|      0|            auto input = get_as_contiguous(range);
  174|      0|            SCN_TRY(it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
  176|      0|            return ranges_polyfill::batch_next(
  177|      0|                ranges::begin(range), ranges::distance(input.begin(), it));
  178|      0|        }
  179|    234|    }
_ZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperE:
  397|  2.59k|    {
  398|  2.59k|        const bool is_inverted = helper.specs.charset_is_inverted;
  399|  2.59k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
  400|       |
  401|  2.59k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.59k]
  |  |  ------------------
  ------------------
  402|      0|            return unexpected(e);
  403|      0|        }
  404|       |
  405|  2.59k|        read_source_callback cb_wrapper{helper};
  406|       |
  407|  2.59k|        if (accepts_nonascii) {
  ------------------
  |  Branch (407:13): [True: 2.30k, False: 294]
  ------------------
  408|  2.30k|            const auto cb = [&](char32_t cp) {
  409|  2.30k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|  2.30k|            };
  411|       |
  412|  2.30k|            if (is_inverted) {
  ------------------
  |  Branch (412:17): [True: 366, False: 1.93k]
  ------------------
  413|    366|                auto it = read_until_code_point(range, cb);
  414|    366|                return check_nonempty(it, range);
  415|    366|            }
  416|  1.93k|            auto it = read_while_code_point(range, cb);
  417|  1.93k|            return check_nonempty(it, range);
  418|  2.30k|        }
  419|       |
  420|    294|        const auto cb = [&](SourceCharT ch) {
  421|    294|            return cb_wrapper.on_ascii_only(ch);
  422|    294|        };
  423|       |
  424|    294|        if (is_inverted) {
  ------------------
  |  Branch (424:13): [True: 144, False: 150]
  ------------------
  425|    144|            auto it = read_until_code_unit(range, cb);
  426|    144|            return check_nonempty(it, range);
  427|    144|        }
  428|    150|        auto it = read_while_code_unit(range, cb);
  429|    150|        return check_nonempty(it, range);
  430|    294|    }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlDiE_clEDi:
  408|   541k|            const auto cb = [&](char32_t cp) {
  409|   541k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
  410|   541k|            };
_ZN3scn2v24impl25character_set_reader_implIwE14check_nonemptyIPKwN4nano6ranges9subrange_8subrangeIS6_S6_LNS8_13subrange_kindE1EEEEENS0_13scan_expectedIT_EERKSE_RKT0_:
  435|  2.59k|    {
  436|  2.59k|        if (it == ranges::begin(range)) {
  ------------------
  |  Branch (436:13): [True: 570, False: 2.02k]
  ------------------
  437|    570|            return unexpected_scan_error(
  438|    570|                scan_error::invalid_scanned_value,
  439|    570|                "No characters matched in [character set]");
  440|    570|        }
  441|       |
  442|  2.02k|        return it;
  443|  2.59k|    }
_ZZNK3scn2v24impl25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NS3_12specs_helperEENKUlwE_clEw:
  420|  4.26k|        const auto cb = [&](SourceCharT ch) {
  421|  4.26k|            return cb_wrapper.on_ascii_only(ch);
  422|  4.26k|        };
_ZN3scn2v24impl24regex_string_reader_implIwE4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIwNSL_11char_traitsIwEEEENS0_6detail11regex_flagsE:
  158|  11.2k|    {
  159|  11.2k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |  101|  22.5k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (159:23): [Folded - Ignored]
  |  Branch (159:23): [Folded - Ignored]
  ------------------
  160|  11.2k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (160:23): [Folded - Ignored]
  ------------------
  161|  11.2k|            return unexpected_scan_error(
  162|  11.2k|                scan_error::invalid_scanned_value,
  163|  11.2k|                "Regex backend doesn't support wide strings as input");
  164|  11.2k|        }
  165|  11.2k|        else {
  166|  11.2k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (166:17): [True: 0, False: 11.2k]
  ------------------
  167|      0|                return unexpected_scan_error(
  168|      0|                    scan_error::invalid_scanned_value,
  169|      0|                    "Cannot use regex with a non-contiguous source "
  170|      0|                    "range");
  171|      0|            }
  172|       |
  173|  11.2k|            auto input = get_as_contiguous(range);
  174|  11.2k|            SCN_TRY(it,
  ------------------
  |  |   71|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.43k, False: 1.82k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.43k|    }                                                  \
  |  |  |  |   70|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|  1.82k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
  176|  1.82k|            return ranges_polyfill::batch_next(
  177|  1.82k|                ranges::begin(range), ranges::distance(input.begin(), it));
  178|  11.2k|        }
  179|  11.2k|    }
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|    546|    {
  512|    546|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    546|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    546|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    546|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|    546|    {
  529|    546|        SCN_CLANG_PUSH
  530|    546|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    546|        switch (m_type) {
  533|    232|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 232, False: 314]
  ------------------
  534|    232|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    232|                                                            value);
  536|       |
  537|     84|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 84, False: 462]
  ------------------
  538|     84|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|     84|                                                                 value);
  540|       |
  541|    152|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 152, False: 394]
  ------------------
  542|    152|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    152|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 540]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     72|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 72, False: 474]
  ------------------
  552|     72|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     72|                    SCN_FWD(range),
  ------------------
  |  |  248|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     72|                    get_unescaped_regex_pattern(
  555|     72|                        specs.charset_string<SourceCharT>()),
  556|     72|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 546]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|    546|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    546|        }
  563|       |
  564|    546|        SCN_CLANG_POP
  565|    546|    }
_ZN3scn2v24impl16word_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  112|    232|    {
  113|    232|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    232|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|    316|{
   40|    316|    static_assert(
   41|    316|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    316|    auto src =
   44|    316|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    316|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 54, False: 262]
  ------------------
   46|     54|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     54|                                     "Invalid encoding in scanned string");
   48|     54|    }
   49|    262|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    262|    static_cast<    \
  |  |  247|    262|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    262|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    262|    return SCN_MOVE(result);
  ------------------
  |  |  246|    262|    static_cast<    \
  |  |  247|    262|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    262|}
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|     84|    {
  193|     84|        return read_impl(
  194|     84|            range,
  195|     84|            [&](auto&& rng) {
  196|     84|                return read_string_impl(rng, read_all(rng), value);
  197|     84|            },
  198|     84|            detail::priority_tag<1>{});
  199|     84|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|     84|    {
  220|     84|        return read_cb(range);
  221|     84|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|     84|            [&](auto&& rng) {
  196|     84|                return read_string_impl(rng, read_all(rng), value);
  197|     84|            },
_ZN3scn2v24impl25character_set_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEE:
  293|    152|    {
  294|    152|        auto it = read_source_impl(range, {specs});
  295|    152|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10, False: 142]
  |  |  ------------------
  ------------------
  296|     10|            return unexpected(it.error());
  297|     10|        }
  298|       |
  299|    142|        return read_string_impl(range, *it, value);
  300|    152|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__112basic_stringIT1_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
   39|    142|{
   40|    142|    static_assert(
   41|    142|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    142|    auto src =
   44|    142|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    142|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 142]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|    142|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    142|    static_cast<    \
  |  |  247|    142|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    142|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 142]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    142|    return SCN_MOVE(result);
  ------------------
  |  |  246|    142|    static_cast<    \
  |  |  247|    142|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    142|}
_ZN3scn2v24impl24regex_string_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIwNSM_11char_traitsIwEEEENS0_6detail11regex_flagsERNSM_12basic_stringIT0_NSO_ISU_EENSM_9allocatorISU_EEEE:
  136|     78|    {
  137|     78|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     78|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     78|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     78|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 78, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     78|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     78|    }                                                  \
  |  |  |  |   70|     78|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|        return read_string_impl(range, it, value);
  139|     78|    }
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  4.86k|    {
  512|  4.86k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  4.86k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  4.86k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  4.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  4.86k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  4.86k|    {
  529|  4.86k|        SCN_CLANG_PUSH
  530|  4.86k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  4.86k|        switch (m_type) {
  533|    250|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 250, False: 4.61k]
  ------------------
  534|    250|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    250|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 4.86k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|    866|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 866, False: 4.00k]
  ------------------
  542|    866|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    866|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    866|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  3.62k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 3.62k, False: 1.24k]
  ------------------
  547|  3.62k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  3.62k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  3.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  3.62k|                    specs.regexp_flags, value);
  550|       |
  551|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 126, False: 4.74k]
  ------------------
  552|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    126|                    SCN_FWD(range),
  ------------------
  |  |  248|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    126|                    get_unescaped_regex_pattern(
  555|    126|                        specs.charset_string<SourceCharT>()),
  556|    126|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 4.86k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|  4.86k|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  4.86k|        }
  563|       |
  564|  4.86k|        SCN_CLANG_POP
  565|  4.86k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|    250|    {
  113|    250|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    250|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|    866|    {
  294|    866|        auto it = read_source_impl(range, {specs});
  295|    866|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    866|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 190, False: 676]
  |  |  ------------------
  ------------------
  296|    190|            return unexpected(it.error());
  297|    190|        }
  298|       |
  299|    676|        return read_string_impl(range, *it, value);
  300|    866|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_cEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|  1.28k|{
   40|  1.28k|    static_assert(
   41|  1.28k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.28k|    auto src =
   44|  1.28k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.28k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 1.28k]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|  1.28k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.28k|    static_cast<    \
  |  |  247|  1.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.28k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.28k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.28k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.28k|    static_cast<    \
  |  |  247|  1.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.28k|}
_ZN3scn2v24impl24regex_string_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIwNSL_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_12basic_stringIT0_NSN_IST_EENSL_9allocatorIST_EEEE:
  136|  3.75k|    {
  137|  3.75k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  3.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.14k, False: 608]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.14k|    }                                                  \
  |  |  |  |   70|  3.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    608|        return read_string_impl(range, it, value);
  139|  3.75k|    }
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
  511|    546|    {
  512|    546|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    546|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    546|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    546|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_RKNS0_6detail12format_specsERT0_:
  528|    546|    {
  529|    546|        SCN_CLANG_PUSH
  530|    546|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    546|        switch (m_type) {
  533|    232|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 232, False: 314]
  ------------------
  534|    232|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    232|                                                            value);
  536|       |
  537|     84|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 84, False: 462]
  ------------------
  538|     84|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|     84|                                                                 value);
  540|       |
  541|    152|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 152, False: 394]
  ------------------
  542|    152|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    152|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 540]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     72|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 72, False: 474]
  ------------------
  552|     72|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     72|                    SCN_FWD(range),
  ------------------
  |  |  248|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     72|                    get_unescaped_regex_pattern(
  555|     72|                        specs.charset_string<SourceCharT>()),
  556|     72|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 546]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|    546|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    546|        }
  563|       |
  564|    546|        SCN_CLANG_POP
  565|    546|    }
_ZN3scn2v24impl16word_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  120|    232|    {
  121|    232|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    232|                                     value);
  123|    232|    }
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEE:
   62|    316|{
   63|    316|    static_assert(
   64|    316|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    316|    auto src = [&]() {
   67|    316|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    316|            return make_contiguous_buffer(
   69|    316|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    316|        }
   71|    316|        else {
   72|    316|            return make_contiguous_buffer(
   73|    316|                ranges::subrange{ranges::begin(range), result});
   74|    316|        }
   75|    316|    }();
   76|    316|    using src_type = decltype(src);
   77|       |
   78|    316|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    316|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    316|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    316|                                     "Cannot read a string_view from "
   87|    316|                                     "this source range (would require "
   88|    316|                                     "transcoding)");
   89|    316|    }
   90|    316|    else {
   91|    316|        const auto view = src.view();
   92|    316|        value = std::basic_string_view<ValueCharT>(
   93|    316|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    316|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 54, False: 262]
  ------------------
   96|     54|            return unexpected_scan_error(
   97|     54|                scan_error::invalid_scanned_value,
   98|     54|                "Invalid encoding in scanned string_view");
   99|     54|        }
  100|       |
  101|    262|        return SCN_MOVE(result);
  ------------------
  |  |  246|    262|    static_cast<    \
  |  |  247|    262|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    316|    }
  103|    316|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__117basic_string_viewIT1_NSO_11char_traitsISQ_EEEEENKUlvE_clEv:
   66|    316|    auto src = [&]() {
   67|    316|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    316|            return make_contiguous_buffer(
   69|    316|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    316|        }
   71|    316|        else {
   72|    316|            return make_contiguous_buffer(
   73|    316|                ranges::subrange{ranges::begin(range), result});
   74|    316|        }
   75|    316|    }();
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEE:
  204|     84|    {
  205|     84|        return read_impl(
  206|     84|            range,
  207|     84|            [&](auto&& rng) {
  208|     84|                return read_string_view_impl(rng, read_all(rng), value);
  209|     84|            },
  210|     84|            detail::priority_tag<1>{});
  211|     84|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__117basic_string_viewIT0_NSN_11char_traitsISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISW_EEE4typeEEESW_OSP_NS0_6detail12priority_tagILm1EEE:
  219|     84|    {
  220|     84|        return read_cb(range);
  221|     84|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__117basic_string_viewIT0_NSM_11char_traitsISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  207|     84|            [&](auto&& rng) {
  208|     84|                return read_string_view_impl(rng, read_all(rng), value);
  209|     84|            },
_ZN3scn2v24impl25character_set_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSQ_11char_traitsISS_EEEE:
  307|    152|    {
  308|    152|        auto it = read_source_impl(range, {specs});
  309|    152|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10, False: 142]
  |  |  ------------------
  ------------------
  310|     10|            return unexpected(it.error());
  311|     10|        }
  312|       |
  313|    142|        return read_string_view_impl(range, *it, value);
  314|    152|    }
_ZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__117basic_string_viewIT1_NSP_11char_traitsISR_EEEE:
   62|    142|{
   63|    142|    static_assert(
   64|    142|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|    142|    auto src = [&]() {
   67|    142|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|    142|            return make_contiguous_buffer(
   69|    142|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    142|        }
   71|    142|        else {
   72|    142|            return make_contiguous_buffer(
   73|    142|                ranges::subrange{ranges::begin(range), result});
   74|    142|        }
   75|    142|    }();
   76|    142|    using src_type = decltype(src);
   77|       |
   78|    142|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|    142|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|    142|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|    142|                                     "Cannot read a string_view from "
   87|    142|                                     "this source range (would require "
   88|    142|                                     "transcoding)");
   89|    142|    }
   90|    142|    else {
   91|    142|        const auto view = src.view();
   92|    142|        value = std::basic_string_view<ValueCharT>(
   93|    142|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|    142|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 0, False: 142]
  ------------------
   96|      0|            return unexpected_scan_error(
   97|      0|                scan_error::invalid_scanned_value,
   98|      0|                "Invalid encoding in scanned string_view");
   99|      0|        }
  100|       |
  101|    142|        return SCN_MOVE(result);
  ------------------
  |  |  246|    142|    static_cast<    \
  |  |  247|    142|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|    142|    }
  103|    142|}
_ZZN3scn2v24impl21read_string_view_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__117basic_string_viewIT1_NSP_11char_traitsISR_EEEEENKUlvE_clEv:
   66|    142|    auto src = [&]() {
   67|    142|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|    142|            return make_contiguous_buffer(
   69|    142|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|    142|        }
   71|    142|        else {
   72|    142|            return make_contiguous_buffer(
   73|    142|                ranges::subrange{ranges::begin(range), result});
   74|    142|        }
   75|    142|    }();
_ZN3scn2v24impl24regex_string_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIwNSM_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
  147|     78|    {
  148|     78|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     78|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     78|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     78|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 78, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     78|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     78|    }                                                  \
  |  |  |  |   70|     78|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|      0|        return read_string_view_impl(range, it, value);
  150|     78|    }
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refE:
  511|  4.86k|    {
  512|  4.86k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  4.86k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  4.86k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  4.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  4.86k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_:
  528|  4.86k|    {
  529|  4.86k|        SCN_CLANG_PUSH
  530|  4.86k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  4.86k|        switch (m_type) {
  533|    250|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 250, False: 4.61k]
  ------------------
  534|    250|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    250|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 4.86k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|    866|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 866, False: 4.00k]
  ------------------
  542|    866|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    866|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    866|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  3.62k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 3.62k, False: 1.24k]
  ------------------
  547|  3.62k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  3.62k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  3.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  3.62k|                    specs.regexp_flags, value);
  550|       |
  551|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 126, False: 4.74k]
  ------------------
  552|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    126|                    SCN_FWD(range),
  ------------------
  |  |  248|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    126|                    get_unescaped_regex_pattern(
  555|    126|                        specs.charset_string<SourceCharT>()),
  556|    126|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 4.86k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|  4.86k|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  4.86k|        }
  563|       |
  564|  4.86k|        SCN_CLANG_POP
  565|  4.86k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__117basic_string_viewIT0_NSL_11char_traitsISN_EEEE:
  120|    250|    {
  121|    250|        return read_string_view_impl(range, read_until_classic_space(range),
  122|    250|                                     value);
  123|    250|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__117basic_string_viewIT0_NSP_11char_traitsISR_EEEE:
  307|    866|    {
  308|    866|        auto it = read_source_impl(range, {specs});
  309|    866|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    866|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 190, False: 676]
  |  |  ------------------
  ------------------
  310|    190|            return unexpected(it.error());
  311|    190|        }
  312|       |
  313|    676|        return read_string_view_impl(range, *it, value);
  314|    866|    }
_ZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEE:
   62|  1.28k|{
   63|  1.28k|    static_assert(
   64|  1.28k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   65|       |
   66|  1.28k|    auto src = [&]() {
   67|  1.28k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
   68|  1.28k|            return make_contiguous_buffer(
   69|  1.28k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.28k|        }
   71|  1.28k|        else {
   72|  1.28k|            return make_contiguous_buffer(
   73|  1.28k|                ranges::subrange{ranges::begin(range), result});
   74|  1.28k|        }
   75|  1.28k|    }();
   76|  1.28k|    using src_type = decltype(src);
   77|       |
   78|  1.28k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (78:9): [Folded - Ignored]
  ------------------
   79|      0|        return unexpected_scan_error(
   80|      0|            scan_error::invalid_scanned_value,
   81|      0|            "Cannot read a string_view from this source range (not "
   82|      0|            "contiguous)");
   83|      0|    }
   84|  1.28k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (84:19): [Folded - Ignored]
  ------------------
   85|  1.28k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   86|  1.28k|                                     "Cannot read a string_view from "
   87|  1.28k|                                     "this source range (would require "
   88|  1.28k|                                     "transcoding)");
   89|  1.28k|    }
   90|  1.28k|    else {
   91|  1.28k|        const auto view = src.view();
   92|  1.28k|        value = std::basic_string_view<ValueCharT>(
   93|  1.28k|            ranges::data(view), ranges_polyfill::usize(view));
   94|       |
   95|  1.28k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (95:13): [True: 0, False: 1.28k]
  ------------------
   96|      0|            return unexpected_scan_error(
   97|      0|                scan_error::invalid_scanned_value,
   98|      0|                "Invalid encoding in scanned string_view");
   99|      0|        }
  100|       |
  101|  1.28k|        return SCN_MOVE(result);
  ------------------
  |  |  246|  1.28k|    static_cast<    \
  |  |  247|  1.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  102|  1.28k|    }
  103|  1.28k|}
_ZZN3scn2v24impl21read_string_view_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__117basic_string_viewIT1_NSK_11char_traitsISM_EEEEENKUlvE_clEv:
   66|  1.28k|    auto src = [&]() {
   67|  1.28k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (67:23): [Folded - Ignored]
  ------------------
   68|  1.28k|            return make_contiguous_buffer(
   69|  1.28k|                ranges::subrange{ranges::begin(range).base(), result.base()});
   70|  1.28k|        }
   71|  1.28k|        else {
   72|  1.28k|            return make_contiguous_buffer(
   73|  1.28k|                ranges::subrange{ranges::begin(range), result});
   74|  1.28k|        }
   75|  1.28k|    }();
_ZN3scn2v24impl24regex_string_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIwNSL_11char_traitsIwEEEENS0_6detail11regex_flagsERNSM_IT0_NSN_ISS_EEEE:
  147|  3.75k|    {
  148|  3.75k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  3.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.14k, False: 608]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.14k|    }                                                  \
  |  |  |  |   70|  3.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|    608|        return read_string_view_impl(range, it, value);
  150|  3.75k|    }
_ZN3scn2v24impl13string_readerIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
  511|    546|    {
  512|    546|        SCN_UNUSED(loc);
  ------------------
  |  |  227|    546|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|    546|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|    546|    }
_ZN3scn2v24impl13string_readerIwE9read_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISO_EEE4typeEEEOSO_RKNS0_6detail12format_specsERT0_:
  528|    546|    {
  529|    546|        SCN_CLANG_PUSH
  530|    546|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|    546|        switch (m_type) {
  533|    232|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 232, False: 314]
  ------------------
  534|    232|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    232|                                                            value);
  536|       |
  537|     84|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 84, False: 462]
  ------------------
  538|     84|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|     84|                                                                 value);
  540|       |
  541|    152|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 152, False: 394]
  ------------------
  542|    152|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    152|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    152|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|      6|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 6, False: 540]
  ------------------
  547|      6|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|      6|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|      6|                    specs.regexp_flags, value);
  550|       |
  551|     72|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 72, False: 474]
  ------------------
  552|     72|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|     72|                    SCN_FWD(range),
  ------------------
  |  |  248|     72|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|     72|                    get_unescaped_regex_pattern(
  555|     72|                        specs.charset_string<SourceCharT>()),
  556|     72|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 546]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|    546|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|    546|        }
  563|       |
  564|    546|        SCN_CLANG_POP
  565|    546|    }
_ZN3scn2v24impl16word_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  112|    232|    {
  113|    232|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    232|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_OT0_RNSt3__112basic_stringIT1_NSO_11char_traitsISQ_EENSO_9allocatorISQ_EEEE:
   39|    316|{
   40|    316|    static_assert(
   41|    316|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    316|    auto src =
   44|    316|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    316|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 54, False: 262]
  ------------------
   46|     54|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|     54|                                     "Invalid encoding in scanned string");
   48|     54|    }
   49|    262|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    262|    static_cast<    \
  |  |  247|    262|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    262|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    262|    return SCN_MOVE(result);
  ------------------
  |  |  246|    262|    static_cast<    \
  |  |  247|    262|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    262|}
_ZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEE:
  192|     84|    {
  193|     84|        return read_impl(
  194|     84|            range,
  195|     84|            [&](auto&& rng) {
  196|     84|                return read_string_impl(rng, read_all(rng), value);
  197|     84|            },
  198|     84|            detail::priority_tag<1>{});
  199|     84|    }
_ZN3scn2v24impl21character_reader_implIwE9read_implIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEZNS3_4readINS1_15take_width_viewISC_EEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RNSt3__112basic_stringIT0_NSN_11char_traitsISP_EENSN_9allocatorISP_EEEEEUlSM_E_EENSG_INSH_IRNSE_ISI_EEXsr6rangesE14borrowed_rangeISY_EEE4typeEEESY_OSP_NS0_6detail12priority_tagILm1EEE:
  219|     84|    {
  220|     84|        return read_cb(range);
  221|     84|    }
_ZZN3scn2v24impl21character_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RNSt3__112basic_stringIT0_NSM_11char_traitsISO_EENSM_9allocatorISO_EEEEENKUlSL_E_clIRSE_EEDaSL_:
  195|     84|            [&](auto&& rng) {
  196|     84|                return read_string_impl(rng, read_all(rng), value);
  197|     84|            },
_ZN3scn2v24impl25character_set_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSQ_11char_traitsISS_EENSQ_9allocatorISS_EEEE:
  293|    152|    {
  294|    152|        auto it = read_source_impl(range, {specs});
  295|    152|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    152|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10, False: 142]
  |  |  ------------------
  ------------------
  296|     10|            return unexpected(it.error());
  297|     10|        }
  298|       |
  299|    142|        return read_string_impl(range, *it, value);
  300|    152|    }
_ZN3scn2v24impl16read_string_implINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS5_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_OT0_RNSt3__112basic_stringIT1_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
   39|    142|{
   40|    142|    static_assert(
   41|    142|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|    142|    auto src =
   44|    142|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|    142|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 142]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|    142|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|    142|    static_cast<    \
  |  |  247|    142|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|    142|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 142]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|    142|    return SCN_MOVE(result);
  ------------------
  |  |  246|    142|    static_cast<    \
  |  |  247|    142|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|    142|}
_ZN3scn2v24impl24regex_string_reader_implIwE4readINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIwNSM_11char_traitsIwEEEENS0_6detail11regex_flagsERNSM_12basic_stringIT0_NSO_ISU_EENSM_9allocatorISU_EEEE:
  136|     78|    {
  137|     78|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|     78|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     78|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     78|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     78|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 78, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     78|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     78|    }                                                  \
  |  |  |  |   70|     78|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|        return read_string_impl(range, it, value);
  139|     78|    }
_ZN3scn2v24impl13string_readerIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_NSS_10locale_refE:
  511|  4.86k|    {
  512|  4.86k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  4.86k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  513|  4.86k|        return read_impl(SCN_FWD(range), specs, value);
  ------------------
  |  |  248|  4.86k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  514|  4.86k|    }
_ZN3scn2v24impl13string_readerIwE9read_implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISN_EEE4typeEEEOSN_RKNS0_6detail12format_specsERT0_:
  528|  4.86k|    {
  529|  4.86k|        SCN_CLANG_PUSH
  530|  4.86k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
  531|       |
  532|  4.86k|        switch (m_type) {
  533|    250|            case reader_type::word:
  ------------------
  |  Branch (533:13): [True: 250, False: 4.61k]
  ------------------
  534|    250|                return word_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  535|    250|                                                            value);
  536|       |
  537|      0|            case reader_type::character:
  ------------------
  |  Branch (537:13): [True: 0, False: 4.86k]
  ------------------
  538|      0|                return character_reader_impl<SourceCharT>{}.read(SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  539|      0|                                                                 value);
  540|       |
  541|    866|            case reader_type::character_set:
  ------------------
  |  Branch (541:13): [True: 866, False: 4.00k]
  ------------------
  542|    866|                return character_set_reader_impl<SourceCharT>{}.read(
  543|    866|                    SCN_FWD(range), specs, value);
  ------------------
  |  |  248|    866|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  544|       |
  545|      0|#if !SCN_DISABLE_REGEX
  546|  3.62k|            case reader_type::regex:
  ------------------
  |  Branch (546:13): [True: 3.62k, False: 1.24k]
  ------------------
  547|  3.62k|                return regex_string_reader_impl<SourceCharT>{}.read(
  548|  3.62k|                    SCN_FWD(range), specs.charset_string<SourceCharT>(),
  ------------------
  |  |  248|  3.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  549|  3.62k|                    specs.regexp_flags, value);
  550|       |
  551|    126|            case reader_type::regex_escaped:
  ------------------
  |  Branch (551:13): [True: 126, False: 4.74k]
  ------------------
  552|    126|                return regex_string_reader_impl<SourceCharT>{}.read(
  553|    126|                    SCN_FWD(range),
  ------------------
  |  |  248|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  554|    126|                    get_unescaped_regex_pattern(
  555|    126|                        specs.charset_string<SourceCharT>()),
  556|    126|                    specs.regexp_flags, value);
  557|      0|#endif
  558|       |
  559|      0|            default:
  ------------------
  |  Branch (559:13): [True: 0, False: 4.86k]
  ------------------
  560|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  561|  4.86k|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  562|  4.86k|        }
  563|       |
  564|  4.86k|        SCN_CLANG_POP
  565|  4.86k|    }
_ZN3scn2v24impl16word_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RNSt3__112basic_stringIT0_NSL_11char_traitsISN_EENSL_9allocatorISN_EEEE:
  112|    250|    {
  113|    250|        return read_string_impl(range, read_until_classic_space(range), value);
  114|    250|    }
_ZN3scn2v24impl25character_set_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERNSt3__112basic_stringIT0_NSP_11char_traitsISR_EENSP_9allocatorISR_EEEE:
  293|    866|    {
  294|    866|        auto it = read_source_impl(range, {specs});
  295|    866|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|    866|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 190, False: 676]
  |  |  ------------------
  ------------------
  296|    190|            return unexpected(it.error());
  297|    190|        }
  298|       |
  299|    676|        return read_string_impl(range, *it, value);
  300|    866|    }
_ZN3scn2v24impl16read_string_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEERS8_wEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESF_OT0_RNSt3__112basic_stringIT1_NSK_11char_traitsISM_EENSK_9allocatorISM_EEEE:
   39|  1.28k|{
   40|  1.28k|    static_assert(
   41|  1.28k|        ranges_std::forward_iterator<detail::remove_cvref_t<Iterator>>);
   42|       |
   43|  1.28k|    auto src =
   44|  1.28k|        make_contiguous_buffer(ranges::subrange{ranges::begin(range), result});
   45|  1.28k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (45:9): [True: 0, False: 1.28k]
  ------------------
   46|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
   47|      0|                                     "Invalid encoding in scanned string");
   48|      0|    }
   49|  1.28k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  246|  1.28k|    static_cast<    \
  |  |  247|  1.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   50|  1.28k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.28k]
  |  |  ------------------
  ------------------
   51|      0|        return unexpected(e);
   52|      0|    }
   53|       |
   54|  1.28k|    return SCN_MOVE(result);
  ------------------
  |  |  246|  1.28k|    static_cast<    \
  |  |  247|  1.28k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   55|  1.28k|}
_ZN3scn2v24impl24regex_string_reader_implIwE4readIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_NSt3__117basic_string_viewIwNSL_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_12basic_stringIT0_NSN_IST_EENSL_9allocatorIST_EEEE:
  136|  3.75k|    {
  137|  3.75k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  |   71|  3.75k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.75k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.75k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.14k, False: 608]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.14k|    }                                                  \
  |  |  |  |   70|  3.75k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    608|        return read_string_impl(range, it, value);
  139|  3.75k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|  1.54M|{
  110|  1.54M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  1.54M|}
_ZN3scn2v24impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|   254k|{
   89|   254k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 872, False: 254k]
  ------------------
   90|    872|        return true;
   91|    872|    }
   92|       |
   93|   254k|    constexpr auto enc = get_encoding<CharT>();
   94|   254k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|   254k|        return simdutf::validate_utf8(input.data(), input.size());
   96|   254k|    }
   97|   254k|    else if constexpr (enc == encoding::utf16) {
   98|   254k|        return simdutf::validate_utf16(
   99|   254k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|   254k|    }
  101|   254k|    else if constexpr (enc == encoding::utf32) {
  102|   254k|        return simdutf::validate_utf32(
  103|   254k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|   254k|    }
  105|   254k|}
_ZN3scn2v24impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
  571|  2.72k|{
  572|  2.72k|    SCN_EXPECT(validate_unicode(source));
  ------------------
  |  |  242|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  573|       |
  574|  2.72k|    auto transcoded_length =
  575|  2.72k|        count_valid_transcoded_code_units<DestCharT>(source);
  576|  2.72k|    dest.resize(transcoded_length);
  577|       |
  578|  2.72k|    const auto n = transcode_valid(source, span{dest});
  579|  2.72k|    SCN_ENSURE(n == dest.size());
  ------------------
  |  |  243|  2.72k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  580|  2.72k|}
_ZN3scn2v24impl33count_valid_transcoded_code_unitsIwcEEmNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEE:
  367|  5.22k|{
  368|  5.22k|    if (input.empty()) {
  ------------------
  |  Branch (368:9): [True: 218, False: 5.00k]
  ------------------
  369|    218|        return 0;
  370|    218|    }
  371|       |
  372|  5.00k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  5.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  373|       |
  374|  5.00k|    constexpr auto src_enc = get_encoding<SourceCharT>();
  375|  5.00k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  376|       |
  377|  5.00k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|  5.00k|        return input.size();
  379|  5.00k|    }
  380|       |
  381|  5.00k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (381:19): [Folded - Ignored]
  ------------------
  382|  5.00k|        if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (382:23): [Folded - Ignored]
  ------------------
  383|  5.00k|            return simdutf::utf16_length_from_utf8(input.data(), input.size());
  384|  5.00k|        }
  385|  5.00k|        else {
  386|  5.00k|            return simdutf::utf32_length_from_utf8(input.data(), input.size());
  387|  5.00k|        }
  388|  5.00k|    }
  389|  5.00k|    else if constexpr (src_enc == encoding::utf16) {
  390|  5.00k|        if constexpr (dest_enc == encoding::utf8) {
  391|  5.00k|            return simdutf::utf8_length_from_utf16(
  392|  5.00k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  393|  5.00k|        }
  394|  5.00k|        else {
  395|  5.00k|            return simdutf::utf32_length_from_utf16(
  396|  5.00k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  397|  5.00k|        }
  398|  5.00k|    }
  399|  5.00k|    else if constexpr (src_enc == encoding::utf32) {
  400|  5.00k|        if constexpr (dest_enc == encoding::utf8) {
  401|  5.00k|            return simdutf::utf8_length_from_utf32(
  402|  5.00k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  403|  5.00k|        }
  404|  5.00k|        else {
  405|  5.00k|            return simdutf::utf16_length_from_utf32(
  406|  5.00k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  407|  5.00k|        }
  408|  5.00k|    }
  409|  5.00k|}
_ZN3scn2v24impl15transcode_validIcwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS0_4spanIT0_EE:
  512|  2.72k|{
  513|  2.72k|    if (input.empty()) {
  ------------------
  |  Branch (513:9): [True: 218, False: 2.50k]
  ------------------
  514|    218|        return 0;
  515|    218|    }
  516|       |
  517|  2.50k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  518|  2.50k|    SCN_EXPECT(count_valid_transcoded_code_units<DestCharT>(input) <=
  ------------------
  |  |  242|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  519|  2.50k|               output.size());
  520|       |
  521|  2.50k|    constexpr auto src_enc = get_encoding<SourceCharT>();
  522|  2.50k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  523|       |
  524|  2.50k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (524:19): [Folded - Ignored]
  ------------------
  525|  2.50k|        std::memcpy(output.data(), input.data(),
  526|  2.50k|                    input.size() * sizeof(SourceCharT));
  527|  2.50k|        return input.size();
  528|  2.50k|    }
  529|       |
  530|  2.50k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (530:19): [Folded - Ignored]
  ------------------
  531|  2.50k|        if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (531:23): [Folded - Ignored]
  ------------------
  532|  2.50k|            return simdutf::convert_valid_utf8_to_utf16(
  533|  2.50k|                input.data(), input.size(),
  534|  2.50k|                reinterpret_cast<char16_t*>(output.data()));
  535|  2.50k|        }
  536|  2.50k|        else {
  537|  2.50k|            return simdutf::convert_valid_utf8_to_utf32(
  538|  2.50k|                input.data(), input.size(),
  539|  2.50k|                reinterpret_cast<char32_t*>(output.data()));
  540|  2.50k|        }
  541|  2.50k|    }
  542|  2.50k|    else if constexpr (src_enc == encoding::utf16) {
  543|  2.50k|        if constexpr (dest_enc == encoding::utf8) {
  544|  2.50k|            return simdutf::convert_valid_utf16_to_utf8(
  545|  2.50k|                reinterpret_cast<const char16_t*>(input.data()), input.size(),
  546|  2.50k|                output.data());
  547|  2.50k|        }
  548|  2.50k|        else {
  549|  2.50k|            return simdutf::convert_valid_utf16_to_utf32(
  550|  2.50k|                reinterpret_cast<const char16_t*>(input.data()), input.size(),
  551|  2.50k|                reinterpret_cast<char32_t*>(output.data()));
  552|  2.50k|        }
  553|  2.50k|    }
  554|  2.50k|    else if constexpr (src_enc == encoding::utf32) {
  555|  2.50k|        if constexpr (dest_enc == encoding::utf8) {
  556|  2.50k|            return simdutf::convert_valid_utf32_to_utf8(
  557|  2.50k|                reinterpret_cast<const char32_t*>(input.data()), input.size(),
  558|  2.50k|                output.data());
  559|  2.50k|        }
  560|  2.50k|        else {
  561|  2.50k|            return simdutf::convert_valid_utf32_to_utf16(
  562|  2.50k|                reinterpret_cast<const char32_t*>(input.data()), input.size(),
  563|  2.50k|                reinterpret_cast<char16_t*>(output.data()));
  564|  2.50k|        }
  565|  2.50k|    }
  566|  2.50k|}
_ZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  32.9k|{
  449|  32.9k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 32.9k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  32.9k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  32.9k|        SCN_EXPECT(output.size() >= input.size());
  455|  32.9k|        std::memcpy(output.data(), input.data(),
  456|  32.9k|                    input.size() * sizeof(SourceCharT));
  457|  32.9k|        return input.size();
  458|  32.9k|    }
  459|       |
  460|  32.9k|    const auto result = [&]() {
  461|  32.9k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  32.9k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  32.9k|        if constexpr (src_enc == encoding::utf8) {
  465|  32.9k|            if constexpr (dest_enc == encoding::utf16) {
  466|  32.9k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  32.9k|                    input.data(), input.size(),
  468|  32.9k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  32.9k|            }
  470|  32.9k|            else {
  471|  32.9k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  32.9k|                    input.data(), input.size(),
  473|  32.9k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  32.9k|            }
  475|  32.9k|        }
  476|  32.9k|        else if constexpr (src_enc == encoding::utf16) {
  477|  32.9k|            if constexpr (dest_enc == encoding::utf8) {
  478|  32.9k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  32.9k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  32.9k|                    input.size(), output.data());
  481|  32.9k|            }
  482|  32.9k|            else {
  483|  32.9k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  32.9k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  32.9k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  32.9k|            }
  487|  32.9k|        }
  488|  32.9k|        else if constexpr (src_enc == encoding::utf32) {
  489|  32.9k|            if constexpr (dest_enc == encoding::utf8) {
  490|  32.9k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  32.9k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  32.9k|                    input.size(), output.data());
  493|  32.9k|            }
  494|  32.9k|            else {
  495|  32.9k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  32.9k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  32.9k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  32.9k|            }
  499|  32.9k|        }
  500|  32.9k|    }();
  501|       |
  502|  32.9k|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|  32.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.3k, False: 19.5k]
  |  |  ------------------
  ------------------
  503|  13.3k|        return std::nullopt;
  504|  13.3k|    }
  505|  19.5k|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|  19.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|  19.5k|    return result.count;
  507|  19.5k|}
_ZZN3scn2v24impl26transcode_possibly_invalidIcDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EEENKUlvE_clEv:
  460|  32.9k|    const auto result = [&]() {
  461|  32.9k|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|  32.9k|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|  32.9k|        if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (464:23): [Folded - Ignored]
  ------------------
  465|  32.9k|            if constexpr (dest_enc == encoding::utf16) {
  ------------------
  |  Branch (465:27): [Folded - Ignored]
  ------------------
  466|  32.9k|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|  32.9k|                    input.data(), input.size(),
  468|  32.9k|                    reinterpret_cast<char16_t*>(output.data()));
  469|  32.9k|            }
  470|  32.9k|            else {
  471|  32.9k|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|  32.9k|                    input.data(), input.size(),
  473|  32.9k|                    reinterpret_cast<char32_t*>(output.data()));
  474|  32.9k|            }
  475|  32.9k|        }
  476|  32.9k|        else if constexpr (src_enc == encoding::utf16) {
  477|  32.9k|            if constexpr (dest_enc == encoding::utf8) {
  478|  32.9k|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|  32.9k|                    reinterpret_cast<const char16_t*>(input.data()),
  480|  32.9k|                    input.size(), output.data());
  481|  32.9k|            }
  482|  32.9k|            else {
  483|  32.9k|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|  32.9k|                    reinterpret_cast<const char16_t*>(input.data()),
  485|  32.9k|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|  32.9k|            }
  487|  32.9k|        }
  488|  32.9k|        else if constexpr (src_enc == encoding::utf32) {
  489|  32.9k|            if constexpr (dest_enc == encoding::utf8) {
  490|  32.9k|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|  32.9k|                    reinterpret_cast<const char32_t*>(input.data()),
  492|  32.9k|                    input.size(), output.data());
  493|  32.9k|            }
  494|  32.9k|            else {
  495|  32.9k|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|  32.9k|                    reinterpret_cast<const char32_t*>(input.data()),
  497|  32.9k|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|  32.9k|            }
  499|  32.9k|        }
  500|  32.9k|    }();
_ZN3scn2v24impl28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   225k|{
  116|   225k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|   225k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   225k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.4k, False: 210k]
  |  |  ------------------
  ------------------
  120|  14.4k|        return detail::invalid_code_point;
  121|  14.4k|    }
  122|       |
  123|   210k|    constexpr auto enc = get_encoding<CharT>();
  124|   210k|    char32_t output{};
  125|   210k|    size_t ret{};
  126|   210k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   210k|#ifndef NDEBUG
  128|   210k|        if (validate_unicode(input)) {
  ------------------
  |  Branch (128:13): [True: 183k, False: 27.2k]
  ------------------
  129|   183k|            auto len =
  130|   183k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   183k|            SCN_EXPECT(len == 1);
  ------------------
  |  |  242|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  132|   183k|        }
  133|   210k|#endif
  134|   210k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   210k|    }
  136|   210k|    else if constexpr (enc == encoding::utf16) {
  137|   210k|#ifndef NDEBUG
  138|   210k|        if (validate_unicode(input)) {
  139|   210k|            auto len = simdutf::utf32_length_from_utf16(
  140|   210k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|   210k|            SCN_EXPECT(len == 1);
  142|   210k|        }
  143|   210k|#endif
  144|   210k|        ret = simdutf::convert_utf16_to_utf32(
  145|   210k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|   210k|    }
  147|   210k|    else if constexpr (enc == encoding::utf32) {
  148|   210k|        output = static_cast<char32_t>(input[0]);
  149|   210k|        ret = output < detail::invalid_code_point;
  150|   210k|    }
  151|       |
  152|   210k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 25.9k, False: 184k]
  |  |  ------------------
  ------------------
  153|  25.9k|        return detail::invalid_code_point;
  154|  25.9k|    }
  155|   184k|    return static_cast<char32_t>(output);
  156|   210k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   242k|{
  263|   242k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   242k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   242k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|   242k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   242k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.38k, False: 237k]
  |  |  ------------------
  ------------------
  267|  5.38k|        return {get_start_of_next_code_point(input),
  268|  5.38k|                detail::invalid_code_point};
  269|  5.38k|    }
  270|   237k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 956, False: 236k]
  |  |  ------------------
  ------------------
  271|    956|        return {input.end(), detail::invalid_code_point};
  272|    956|    }
  273|       |
  274|   236k|    constexpr auto enc = get_encoding<CharT>();
  275|   236k|    std::size_t result{1};
  276|   236k|    char32_t output{};
  277|   236k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   236k|        result = simdutf::convert_utf8_to_utf32(
  279|   236k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   236k|    }
  281|   236k|    else if constexpr (enc == encoding::utf16) {
  282|   236k|        result = simdutf::convert_utf16_to_utf32(
  283|   236k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   236k|    }
  285|   236k|    else if constexpr (enc == encoding::utf32) {
  286|   236k|        SCN_EXPECT(len == 1);
  287|   236k|        output = static_cast<char32_t>(input[0]);
  288|   236k|    }
  289|       |
  290|   236k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 8.81k, False: 227k]
  |  |  ------------------
  ------------------
  291|  8.81k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  8.81k|                detail::invalid_code_point};
  293|  8.81k|    }
  294|       |
  295|   227k|    return {input.begin() + len, output};
  296|   236k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  14.2k|{
  248|  14.2k|    auto it = input.begin();
  249|  31.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 28.4k, False: 3.08k]
  ------------------
  250|  28.4k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 11.1k, False: 17.3k]
  ------------------
  251|  11.1k|            break;
  252|  11.1k|        }
  253|  28.4k|    }
  254|       |
  255|  14.2k|    return it;
  256|  14.2k|}
_ZN3scn2v24impl25for_each_code_point_validIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
  681|  9.06k|{
  682|  9.06k|    auto it = input.begin();
  683|  18.1k|    while (it != input.end()) {
  ------------------
  |  Branch (683:12): [True: 9.06k, False: 9.06k]
  ------------------
  684|  9.06k|        auto res = get_next_code_point_valid(
  685|  9.06k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
  686|  9.06k|        cb(res.value);
  687|  9.06k|        it = detail::make_string_view_iterator(input, res.iterator);
  688|  9.06k|    }
  689|  9.06k|}
_ZN3scn2v24impl25get_next_code_point_validIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  216|  9.06k|{
  217|  9.06k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  9.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|  9.06k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  9.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|       |
  220|  9.06k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  221|  9.06k|    SCN_EXPECT(len != 0);
  ------------------
  |  |  242|  9.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  9.06k|    constexpr auto enc = get_encoding<CharT>();
  224|  9.06k|    char32_t output{};
  225|  9.06k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (225:19): [Folded - Ignored]
  ------------------
  226|  9.06k|        const auto ret = simdutf::convert_valid_utf8_to_utf32(
  227|  9.06k|            reinterpret_cast<const char*>(input.data()), len, &output);
  228|  9.06k|        SCN_EXPECT(ret == 1);
  ------------------
  |  |  242|  9.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  229|  9.06k|    }
  230|  9.06k|    else if constexpr (enc == encoding::utf16) {
  231|  9.06k|        const auto ret = simdutf::convert_valid_utf16_to_utf32(
  232|  9.06k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  233|  9.06k|        SCN_EXPECT(ret == 1);
  234|  9.06k|    }
  235|  9.06k|    else if constexpr (enc == encoding::utf32) {
  236|  9.06k|        output = static_cast<char32_t>(input[0]);
  237|  9.06k|    }
  238|       |
  239|  9.06k|    return iterator_value_result<
  240|  9.06k|        ranges::iterator_t<std::basic_string_view<CharT>>, char32_t>{
  241|  9.06k|        input.begin() + len, static_cast<char32_t>(output)};
  242|  9.06k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  7.09M|{
  110|  7.09M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  7.09M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|   186k|{
  449|   186k|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 186k]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|   186k|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|   186k|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|   186k|        std::memcpy(output.data(), input.data(),
  456|   186k|                    input.size() * sizeof(SourceCharT));
  457|   186k|        return input.size();
  458|   186k|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|  26.9k|{
  116|  26.9k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  26.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|  26.9k|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|  26.9k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.9k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|  26.9k|    constexpr auto enc = get_encoding<CharT>();
  124|  26.9k|    char32_t output{};
  125|  26.9k|    size_t ret{};
  126|  26.9k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  26.9k|#ifndef NDEBUG
  128|  26.9k|        if (validate_unicode(input)) {
  129|  26.9k|            auto len =
  130|  26.9k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|  26.9k|            SCN_EXPECT(len == 1);
  132|  26.9k|        }
  133|  26.9k|#endif
  134|  26.9k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|  26.9k|    }
  136|  26.9k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|  26.9k|#ifndef NDEBUG
  138|  26.9k|        if (validate_unicode(input)) {
  139|  26.9k|            auto len = simdutf::utf32_length_from_utf16(
  140|  26.9k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|  26.9k|            SCN_EXPECT(len == 1);
  142|  26.9k|        }
  143|  26.9k|#endif
  144|  26.9k|        ret = simdutf::convert_utf16_to_utf32(
  145|  26.9k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|  26.9k|    }
  147|  26.9k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|  26.9k|        output = static_cast<char32_t>(input[0]);
  149|  26.9k|        ret = output < detail::invalid_code_point;
  150|  26.9k|    }
  151|       |
  152|  26.9k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|  26.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.52k, False: 24.4k]
  |  |  ------------------
  ------------------
  153|  2.52k|        return detail::invalid_code_point;
  154|  2.52k|    }
  155|  24.4k|    return static_cast<char32_t>(output);
  156|  26.9k|}
_ZN3scn2v24impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   88|  19.0k|{
   89|  19.0k|    if (input.empty()) {
  ------------------
  |  Branch (89:9): [True: 728, False: 18.3k]
  ------------------
   90|    728|        return true;
   91|    728|    }
   92|       |
   93|  18.3k|    constexpr auto enc = get_encoding<CharT>();
   94|  18.3k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (94:19): [Folded - Ignored]
  ------------------
   95|  18.3k|        return simdutf::validate_utf8(input.data(), input.size());
   96|  18.3k|    }
   97|  18.3k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (97:24): [Folded - Ignored]
  ------------------
   98|  18.3k|        return simdutf::validate_utf16(
   99|  18.3k|            reinterpret_cast<const char16_t*>(input.data()), input.size());
  100|  18.3k|    }
  101|  18.3k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (101:24): [Folded - Ignored]
  ------------------
  102|  18.3k|        return simdutf::validate_utf32(
  103|  18.3k|            reinterpret_cast<const char32_t*>(input.data()), input.size());
  104|  18.3k|    }
  105|  18.3k|}
_ZN3scn2v24impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
  571|  2.74k|{
  572|  2.74k|    SCN_EXPECT(validate_unicode(source));
  ------------------
  |  |  242|  2.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  573|       |
  574|  2.74k|    auto transcoded_length =
  575|  2.74k|        count_valid_transcoded_code_units<DestCharT>(source);
  576|  2.74k|    dest.resize(transcoded_length);
  577|       |
  578|  2.74k|    const auto n = transcode_valid(source, span{dest});
  579|  2.74k|    SCN_ENSURE(n == dest.size());
  ------------------
  |  |  243|  2.74k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  580|  2.74k|}
_ZN3scn2v24impl33count_valid_transcoded_code_unitsIcwEEmNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEE:
  367|  5.31k|{
  368|  5.31k|    if (input.empty()) {
  ------------------
  |  Branch (368:9): [True: 182, False: 5.13k]
  ------------------
  369|    182|        return 0;
  370|    182|    }
  371|       |
  372|  5.13k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  5.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  373|       |
  374|  5.13k|    constexpr auto src_enc = get_encoding<SourceCharT>();
  375|  5.13k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  376|       |
  377|  5.13k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (377:19): [Folded - Ignored]
  ------------------
  378|  5.13k|        return input.size();
  379|  5.13k|    }
  380|       |
  381|  5.13k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (381:19): [Folded - Ignored]
  ------------------
  382|  5.13k|        if constexpr (dest_enc == encoding::utf16) {
  383|  5.13k|            return simdutf::utf16_length_from_utf8(input.data(), input.size());
  384|  5.13k|        }
  385|  5.13k|        else {
  386|  5.13k|            return simdutf::utf32_length_from_utf8(input.data(), input.size());
  387|  5.13k|        }
  388|  5.13k|    }
  389|  5.13k|    else if constexpr (src_enc == encoding::utf16) {
  ------------------
  |  Branch (389:24): [Folded - Ignored]
  ------------------
  390|  5.13k|        if constexpr (dest_enc == encoding::utf8) {
  391|  5.13k|            return simdutf::utf8_length_from_utf16(
  392|  5.13k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  393|  5.13k|        }
  394|  5.13k|        else {
  395|  5.13k|            return simdutf::utf32_length_from_utf16(
  396|  5.13k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  397|  5.13k|        }
  398|  5.13k|    }
  399|  5.13k|    else if constexpr (src_enc == encoding::utf32) {
  ------------------
  |  Branch (399:24): [Folded - Ignored]
  ------------------
  400|  5.13k|        if constexpr (dest_enc == encoding::utf8) {
  ------------------
  |  Branch (400:23): [Folded - Ignored]
  ------------------
  401|  5.13k|            return simdutf::utf8_length_from_utf32(
  402|  5.13k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  403|  5.13k|        }
  404|  5.13k|        else {
  405|  5.13k|            return simdutf::utf16_length_from_utf32(
  406|  5.13k|                reinterpret_cast<const char32_t*>(input.data()), input.size());
  407|  5.13k|        }
  408|  5.13k|    }
  409|  5.13k|}
_ZN3scn2v24impl15transcode_validIwcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS0_4spanIT0_EE:
  512|  2.74k|{
  513|  2.74k|    if (input.empty()) {
  ------------------
  |  Branch (513:9): [True: 182, False: 2.56k]
  ------------------
  514|    182|        return 0;
  515|    182|    }
  516|       |
  517|  2.56k|    SCN_EXPECT(validate_unicode(input));
  ------------------
  |  |  242|  2.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  518|  2.56k|    SCN_EXPECT(count_valid_transcoded_code_units<DestCharT>(input) <=
  ------------------
  |  |  242|  2.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  519|  2.56k|               output.size());
  520|       |
  521|  2.56k|    constexpr auto src_enc = get_encoding<SourceCharT>();
  522|  2.56k|    constexpr auto dest_enc = get_encoding<DestCharT>();
  523|       |
  524|  2.56k|    if constexpr (src_enc == dest_enc) {
  ------------------
  |  Branch (524:19): [Folded - Ignored]
  ------------------
  525|  2.56k|        std::memcpy(output.data(), input.data(),
  526|  2.56k|                    input.size() * sizeof(SourceCharT));
  527|  2.56k|        return input.size();
  528|  2.56k|    }
  529|       |
  530|  2.56k|    if constexpr (src_enc == encoding::utf8) {
  ------------------
  |  Branch (530:19): [Folded - Ignored]
  ------------------
  531|  2.56k|        if constexpr (dest_enc == encoding::utf16) {
  532|  2.56k|            return simdutf::convert_valid_utf8_to_utf16(
  533|  2.56k|                input.data(), input.size(),
  534|  2.56k|                reinterpret_cast<char16_t*>(output.data()));
  535|  2.56k|        }
  536|  2.56k|        else {
  537|  2.56k|            return simdutf::convert_valid_utf8_to_utf32(
  538|  2.56k|                input.data(), input.size(),
  539|  2.56k|                reinterpret_cast<char32_t*>(output.data()));
  540|  2.56k|        }
  541|  2.56k|    }
  542|  2.56k|    else if constexpr (src_enc == encoding::utf16) {
  ------------------
  |  Branch (542:24): [Folded - Ignored]
  ------------------
  543|  2.56k|        if constexpr (dest_enc == encoding::utf8) {
  544|  2.56k|            return simdutf::convert_valid_utf16_to_utf8(
  545|  2.56k|                reinterpret_cast<const char16_t*>(input.data()), input.size(),
  546|  2.56k|                output.data());
  547|  2.56k|        }
  548|  2.56k|        else {
  549|  2.56k|            return simdutf::convert_valid_utf16_to_utf32(
  550|  2.56k|                reinterpret_cast<const char16_t*>(input.data()), input.size(),
  551|  2.56k|                reinterpret_cast<char32_t*>(output.data()));
  552|  2.56k|        }
  553|  2.56k|    }
  554|  2.56k|    else if constexpr (src_enc == encoding::utf32) {
  ------------------
  |  Branch (554:24): [Folded - Ignored]
  ------------------
  555|  2.56k|        if constexpr (dest_enc == encoding::utf8) {
  ------------------
  |  Branch (555:23): [Folded - Ignored]
  ------------------
  556|  2.56k|            return simdutf::convert_valid_utf32_to_utf8(
  557|  2.56k|                reinterpret_cast<const char32_t*>(input.data()), input.size(),
  558|  2.56k|                output.data());
  559|  2.56k|        }
  560|  2.56k|        else {
  561|  2.56k|            return simdutf::convert_valid_utf32_to_utf16(
  562|  2.56k|                reinterpret_cast<const char32_t*>(input.data()), input.size(),
  563|  2.56k|                reinterpret_cast<char16_t*>(output.data()));
  564|  2.56k|        }
  565|  2.56k|    }
  566|  2.56k|}
_ZN3scn2v24impl19get_next_code_pointIwEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|  4.16M|{
  263|  4.16M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|  4.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|  4.16M|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|  4.16M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|  4.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.16M]
  |  |  ------------------
  ------------------
  267|      0|        return {get_start_of_next_code_point(input),
  268|      0|                detail::invalid_code_point};
  269|      0|    }
  270|  4.16M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  4.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.16M]
  |  |  ------------------
  ------------------
  271|      0|        return {input.end(), detail::invalid_code_point};
  272|      0|    }
  273|       |
  274|  4.16M|    constexpr auto enc = get_encoding<CharT>();
  275|  4.16M|    std::size_t result{1};
  276|  4.16M|    char32_t output{};
  277|  4.16M|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  4.16M|        result = simdutf::convert_utf8_to_utf32(
  279|  4.16M|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  4.16M|    }
  281|  4.16M|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (281:24): [Folded - Ignored]
  ------------------
  282|  4.16M|        result = simdutf::convert_utf16_to_utf32(
  283|  4.16M|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  4.16M|    }
  285|  4.16M|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (285:24): [Folded - Ignored]
  ------------------
  286|  4.16M|        SCN_EXPECT(len == 1);
  ------------------
  |  |  242|  4.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  287|  4.16M|        output = static_cast<char32_t>(input[0]);
  288|  4.16M|    }
  289|       |
  290|  4.16M|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  4.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.16M]
  |  |  ------------------
  ------------------
  291|      0|        return {get_start_of_next_code_point(input.substr(1)),
  292|      0|                detail::invalid_code_point};
  293|      0|    }
  294|       |
  295|  4.16M|    return {input.begin() + len, output};
  296|  4.16M|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  4.80M|{
   29|       |    // Pattern_White_Space property
   30|  4.80M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 4.52M, False: 278k]
  |  Branch (30:27): [True: 243k, False: 4.27M]
  ------------------
   31|  4.80M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 19.4k, False: 4.53M]
  ------------------
   32|  4.80M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 29.3k, False: 4.50M]
  ------------------
   33|  4.80M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.70k, False: 4.50M]
  ------------------
   34|  4.80M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 4.16k, False: 4.50M]
  ------------------
   35|  4.80M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 2.15k, False: 4.50M]
  ------------------
   36|  4.80M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 208, False: 4.50M]
  ------------------
   37|  4.80M|}
_ZN3scn2v24impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
   49|   152k|{
   50|       |    // TODO: optimize
   51|   152k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  242|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   52|   152k|    auto res = get_next_code_point(str);
   53|   152k|    return {res.iterator, res.value, is_cp_space(res.value)};
   54|   152k|}
_ZN3scn2v24impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
   49|  4.16M|{
   50|       |    // TODO: optimize
   51|  4.16M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  242|  4.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   52|  4.16M|    auto res = get_next_code_point(str);
   53|  4.16M|    return {res.iterator, res.value, is_cp_space(res.value)};
   54|  4.16M|}

_ZN3scn2v24impl13is_ascii_charEc:
   68|   952k|{
   69|   952k|    return static_cast<unsigned char>(ch) <= 127;
   70|   952k|}
_ZN3scn2v24impl13is_ascii_charEDi:
   82|  1.04M|{
   83|  1.04M|    return cp <= 127;
   84|  1.04M|}
_ZN3scn2v24impl13is_ascii_charEw:
   73|  6.08k|{
   74|  6.08k|#if WCHAR_MIN < 0
   75|  6.08k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (75:12): [True: 6.08k, False: 0]
  |  Branch (75:23): [True: 5.53k, False: 546]
  ------------------
   76|       |#else
   77|       |    return ch <= 127;
   78|       |#endif
   79|  6.08k|}
_ZN3scn2v24impl14is_ascii_spaceEc:
   57|   285k|{
   58|   285k|    return is_ascii_space_lookup[static_cast<size_t>(
   59|   285k|        static_cast<unsigned char>(ch))];
   60|   285k|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|   178k|{
   92|   178k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|   178k|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  83.1k|    {
   57|  83.1k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|   442k|    {
   61|   442k|        return m_current;
   62|   442k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|   513k|    {
   66|   513k|        return m_range.end();
   67|   513k|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|   157k|    {
   81|   157k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|   157k|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|   157k|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 157k]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|   157k|        }
   87|   157k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   157k|    static_cast<    \
  |  |  247|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|   157k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|   200k|    {
   71|   200k|        return ranges::subrange{begin(), end()};
   72|   200k|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|   143k|    {
   57|   143k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  4.49M|    {
   61|  4.49M|        return m_current;
   62|  4.49M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  8.51M|    {
   66|  8.51M|        return m_range.end();
   67|  8.51M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  4.16M|    {
   81|  4.16M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  4.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  4.16M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  4.16M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 4.16M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  4.16M|        }
   87|  4.16M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  4.16M|    static_cast<    \
  |  |  247|  4.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  4.16M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|   183k|    {
   71|   183k|        return ranges::subrange{begin(), end()};
   72|   183k|    }

_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  1.36k|    {
  205|  1.36k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.36k|    }
_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|  17.3k|    {
  205|  17.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  17.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  17.3k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.47k|    {
  196|  1.47k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|  3.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  3.21k|              cvref<T> obj = *get<T>(fn);
  187|  3.21k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  3.21k|                  obj(static_cast<decltype(args)>(args)...);
  189|  3.21k|              }
  190|  3.21k|              else {
  191|  3.21k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  3.21k|              }
  193|  3.21k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|  3.21k|    {
  126|  3.21k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  3.21k|            return static_cast<T*>(s.m_cp);
  128|  3.21k|        }
  129|  3.21k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  3.21k|            return static_cast<T*>(s.m_p);
  131|  3.21k|        }
  132|  3.21k|        else {
  133|  3.21k|            return reinterpret_cast<T*>(s.m_fp);
  134|  3.21k|        }
  135|  3.21k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|  1.47k|        {
  104|  1.47k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_:
  195|     40|    {
  196|     40|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEcE_clESS_c:
  185|     40|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|     40|              cvref<T> obj = *get<T>(fn);
  187|     40|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|     40|                  obj(static_cast<decltype(args)>(args)...);
  189|     40|              }
  190|     40|              else {
  191|     40|                  return obj(static_cast<decltype(args)>(args)...);
  192|     40|              }
  193|     40|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlcE0_EEDaNS3_7storageE:
  125|     40|    {
  126|     40|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|     40|            return static_cast<T*>(s.m_cp);
  128|     40|        }
  129|     40|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|     40|            return static_cast<T*>(s.m_p);
  131|     40|        }
  132|     40|        else {
  133|     40|            return reinterpret_cast<T*>(s.m_fp);
  134|     40|        }
  135|     40|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlcE0_LPv0EEEPSJ_:
  103|     40|        {
  104|     40|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|  1.12k|    {
  196|  1.12k|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|  1.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.12k|              cvref<T> obj = *get<T>(fn);
  187|  1.12k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.12k|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.12k|              }
  190|  1.12k|              else {
  191|  1.12k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.12k|              }
  193|  1.12k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|  1.12k|    {
  126|  1.12k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.12k|            return static_cast<T*>(s.m_cp);
  128|  1.12k|        }
  129|  1.12k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.12k|            return static_cast<T*>(s.m_p);
  131|  1.12k|        }
  132|  1.12k|        else {
  133|  1.12k|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.12k|        }
  135|  1.12k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  103|  1.12k|        {
  104|  1.12k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  2.37M|    {
  205|  2.37M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.37M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   141k|    {
  196|   141k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|   934k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   934k|              cvref<T> obj = *get<T>(fn);
  187|   934k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   934k|                  obj(static_cast<decltype(args)>(args)...);
  189|   934k|              }
  190|   934k|              else {
  191|   934k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   934k|              }
  193|   934k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|   934k|    {
  126|   934k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   934k|            return static_cast<T*>(s.m_cp);
  128|   934k|        }
  129|   934k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   934k|            return static_cast<T*>(s.m_p);
  131|   934k|        }
  132|   934k|        else {
  133|   934k|            return reinterpret_cast<T*>(s.m_fp);
  134|   934k|        }
  135|   934k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|   141k|        {
  104|   141k|        }
_ZNK3scn2v24impl12function_refIFvDiES3_EclEDi:
  204|  9.06k|    {
  205|  9.06k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  9.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  9.06k|    }
_ZN3scn2v24impl12function_refIFvDiES3_EC2IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_SE_LPv0EEEOS9_:
  195|  9.06k|    {
  196|  9.06k|    }
_ZZN3scn2v24impl12function_refIFvDiES3_EC1IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_SE_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESJ_Di:
  185|  9.06k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  9.06k|              cvref<T> obj = *get<T>(fn);
  187|  9.06k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  9.06k|                  obj(static_cast<decltype(args)>(args)...);
  189|  9.06k|              }
  190|  9.06k|              else {
  191|  9.06k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  9.06k|              }
  193|  9.06k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEENS1_20text_width_algorithmEEUlDiE_EEDaNS3_7storageE:
  125|  9.06k|    {
  126|  9.06k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  9.06k|            return static_cast<T*>(s.m_cp);
  128|  9.06k|        }
  129|  9.06k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  9.06k|            return static_cast<T*>(s.m_p);
  131|  9.06k|        }
  132|  9.06k|        else {
  133|  9.06k|            return reinterpret_cast<T*>(s.m_fp);
  134|  9.06k|        }
  135|  9.06k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEENS1_20text_width_algorithmEEUlDiE_LPv0EEEPS9_:
  103|  9.06k|        {
  104|  9.06k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlcE_ST_LPv0EEEOSP_:
  195|    912|    {
  196|    912|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlcE_ST_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clESY_c:
  185|    912|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    912|              cvref<T> obj = *get<T>(fn);
  187|    912|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    912|                  obj(static_cast<decltype(args)>(args)...);
  189|    912|              }
  190|    912|              else {
  191|    912|                  return obj(static_cast<decltype(args)>(args)...);
  192|    912|              }
  193|    912|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_LNS7_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESO_iEUlcE_EEDaNS3_7storageE:
  125|    912|    {
  126|    912|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    912|            return static_cast<T*>(s.m_cp);
  128|    912|        }
  129|    912|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    912|            return static_cast<T*>(s.m_p);
  131|    912|        }
  132|    912|        else {
  133|    912|            return reinterpret_cast<T*>(s.m_fp);
  134|    912|        }
  135|    912|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlcE_LPv0EEEPSP_:
  103|    912|        {
  104|    912|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EclESC_SK_SM_:
  204|    294|    {
  205|    294|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|    294|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_SW_LPv0EEESV_:
  195|      2|    {
  196|      2|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_SW_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  185|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|      2|              cvref<T> obj = *get<T>(fn);
  187|      2|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|      2|                  obj(static_cast<decltype(args)>(args)...);
  189|      2|              }
  190|      2|              else {
  191|      2|                  return obj(static_cast<decltype(args)>(args)...);
  192|      2|              }
  193|      2|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_LNS9_13subrange_kindE1EEEE8sentinelILb1EEELSI_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_bEUlcE0_EEDaNS3_7storageE:
  125|      2|    {
  126|      2|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|      2|            return static_cast<T*>(s.m_cp);
  128|      2|        }
  129|      2|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|      2|            return static_cast<T*>(s.m_p);
  131|      2|        }
  132|      2|        else {
  133|      2|            return reinterpret_cast<T*>(s.m_fp);
  134|      2|        }
  135|      2|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_LPv0EEEPSR_:
  103|      2|        {
  104|      2|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_SW_LPv0EEESV_:
  195|    292|    {
  196|    292|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_SW_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  185|    292|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    292|              cvref<T> obj = *get<T>(fn);
  187|    292|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    292|                  obj(static_cast<decltype(args)>(args)...);
  189|    292|              }
  190|    292|              else {
  191|    292|                  return obj(static_cast<decltype(args)>(args)...);
  192|    292|              }
  193|    292|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_LNS9_13subrange_kindE1EEEE8sentinelILb1EEELSI_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_bEUlcE0_EEDaNS3_7storageE:
  125|    292|    {
  126|    292|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    292|            return static_cast<T*>(s.m_cp);
  128|    292|        }
  129|    292|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    292|            return static_cast<T*>(s.m_p);
  131|    292|        }
  132|    292|        else {
  133|    292|            return reinterpret_cast<T*>(s.m_fp);
  134|    292|        }
  135|    292|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlcE0_LPv0EEEPSR_:
  103|    292|        {
  104|    292|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E_S17_LPv0EEESY_:
  195|      6|    {
  196|      6|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E_S17_LPv0EEESY_ENKUlNS1_12fnref_detail4base7storageESC_SK_SM_E_clES1B_SC_SK_SM_:
  185|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|      6|              cvref<T> obj = *get<T>(fn);
  187|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|      6|                  obj(static_cast<decltype(args)>(args)...);
  189|      6|              }
  190|      6|              else {
  191|      6|                  return obj(static_cast<decltype(args)>(args)...);
  192|      6|              }
  193|      6|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|      6|    {
  126|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|      6|            return static_cast<T*>(s.m_cp);
  128|      6|        }
  129|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|      6|            return static_cast<T*>(s.m_p);
  131|      6|        }
  132|      6|        else {
  133|      6|            return reinterpret_cast<T*>(s.m_fp);
  134|      6|        }
  135|      6|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  103|      6|        {
  104|      6|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E0_S17_LPv0EEESY_:
  195|    288|    {
  196|    288|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E0_S17_LPv0EEESY_ENKUlNS1_12fnref_detail4base7storageESC_SK_SM_E_clES1B_SC_SK_SM_:
  185|    288|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    288|              cvref<T> obj = *get<T>(fn);
  187|    288|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    288|                  obj(static_cast<decltype(args)>(args)...);
  189|    288|              }
  190|    288|              else {
  191|    288|                  return obj(static_cast<decltype(args)>(args)...);
  192|    288|              }
  193|    288|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|    288|    {
  126|    288|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    288|            return static_cast<T*>(s.m_cp);
  128|    288|        }
  129|    288|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    288|            return static_cast<T*>(s.m_p);
  131|    288|        }
  132|    288|        else {
  133|    288|            return reinterpret_cast<T*>(s.m_fp);
  134|    288|        }
  135|    288|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  103|    288|        {
  104|    288|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|     16|    {
  196|     16|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|     16|              cvref<T> obj = *get<T>(fn);
  187|     16|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|     16|                  obj(static_cast<decltype(args)>(args)...);
  189|     16|              }
  190|     16|              else {
  191|     16|                  return obj(static_cast<decltype(args)>(args)...);
  192|     16|              }
  193|     16|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  125|     16|    {
  126|     16|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|     16|            return static_cast<T*>(s.m_cp);
  128|     16|        }
  129|     16|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|     16|            return static_cast<T*>(s.m_p);
  131|     16|        }
  132|     16|        else {
  133|     16|            return reinterpret_cast<T*>(s.m_fp);
  134|     16|        }
  135|     16|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSK_:
  103|     16|        {
  104|     16|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|    216|    {
  196|    216|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIcE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|    216|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    216|              cvref<T> obj = *get<T>(fn);
  187|    216|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    216|                  obj(static_cast<decltype(args)>(args)...);
  189|    216|              }
  190|    216|              else {
  191|    216|                  return obj(static_cast<decltype(args)>(args)...);
  192|    216|              }
  193|    216|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  125|    216|    {
  126|    216|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    216|            return static_cast<T*>(s.m_cp);
  128|    216|        }
  129|    216|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    216|            return static_cast<T*>(s.m_p);
  131|    216|        }
  132|    216|        else {
  133|    216|            return reinterpret_cast<T*>(s.m_fp);
  134|    216|        }
  135|    216|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSK_:
  103|    216|        {
  104|    216|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_SN_LPv0EEESM_:
  195|    852|    {
  196|    852|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_SN_LPv0EEESM_ENKUlNS1_12fnref_detail4base7storageEDiE_clESR_Di:
  185|  24.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  24.4k|              cvref<T> obj = *get<T>(fn);
  187|  24.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  24.4k|                  obj(static_cast<decltype(args)>(args)...);
  189|  24.4k|              }
  190|  24.4k|              else {
  191|  24.4k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  24.4k|              }
  193|  24.4k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSC_LNS8_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_EEDaNS3_7storageE:
  125|  24.4k|    {
  126|  24.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  24.4k|            return static_cast<T*>(s.m_cp);
  128|  24.4k|        }
  129|  24.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.4k|            return static_cast<T*>(s.m_p);
  131|  24.4k|        }
  132|  24.4k|        else {
  133|  24.4k|            return reinterpret_cast<T*>(s.m_fp);
  134|  24.4k|        }
  135|  24.4k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_LPv0EEEPSJ_:
  103|    852|        {
  104|    852|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_ST_LPv0EEESQ_:
  195|    426|    {
  196|    426|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_ST_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  185|  22.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  22.1k|              cvref<T> obj = *get<T>(fn);
  187|  22.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  22.1k|                  obj(static_cast<decltype(args)>(args)...);
  189|  22.1k|              }
  190|  22.1k|              else {
  191|  22.1k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  22.1k|              }
  193|  22.1k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  125|  22.1k|    {
  126|  22.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  22.1k|            return static_cast<T*>(s.m_cp);
  128|  22.1k|        }
  129|  22.1k|        else if constexpr (std::is_object_v<T>) {
  130|  22.1k|            return static_cast<T*>(s.m_p);
  131|  22.1k|        }
  132|  22.1k|        else {
  133|  22.1k|            return reinterpret_cast<T*>(s.m_fp);
  134|  22.1k|        }
  135|  22.1k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_LPv0EEEPKSM_:
  108|    426|        {
  109|    426|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlcE_ST_LPv0EEESQ_:
  195|    240|    {
  196|    240|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlcE_ST_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEcE_clESY_c:
  185|  6.31k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.31k|              cvref<T> obj = *get<T>(fn);
  187|  6.31k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.31k|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.31k|              }
  190|  6.31k|              else {
  191|  6.31k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.31k|              }
  193|  6.31k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  125|  6.31k|    {
  126|  6.31k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.31k|            return static_cast<T*>(s.m_cp);
  128|  6.31k|        }
  129|  6.31k|        else if constexpr (std::is_object_v<T>) {
  130|  6.31k|            return static_cast<T*>(s.m_p);
  131|  6.31k|        }
  132|  6.31k|        else {
  133|  6.31k|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.31k|        }
  135|  6.31k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKcSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  108|    240|        {
  109|    240|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_SR_LPv0EEESO_:
  195|  3.93k|    {
  196|  3.93k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  185|   465k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   465k|              cvref<T> obj = *get<T>(fn);
  187|   465k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   465k|                  obj(static_cast<decltype(args)>(args)...);
  189|   465k|              }
  190|   465k|              else {
  191|   465k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   465k|              }
  193|   465k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  125|   465k|    {
  126|   465k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   465k|            return static_cast<T*>(s.m_cp);
  128|   465k|        }
  129|   465k|        else if constexpr (std::is_object_v<T>) {
  130|   465k|            return static_cast<T*>(s.m_p);
  131|   465k|        }
  132|   465k|        else {
  133|   465k|            return reinterpret_cast<T*>(s.m_fp);
  134|   465k|        }
  135|   465k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_LPv0EEEPKSK_:
  108|  3.93k|        {
  109|  3.93k|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_SR_LPv0EEESO_:
  195|    360|    {
  196|    360|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  185|  6.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  6.55k|              cvref<T> obj = *get<T>(fn);
  187|  6.55k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  6.55k|                  obj(static_cast<decltype(args)>(args)...);
  189|  6.55k|              }
  190|  6.55k|              else {
  191|  6.55k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  6.55k|              }
  193|  6.55k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  125|  6.55k|    {
  126|  6.55k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  6.55k|            return static_cast<T*>(s.m_cp);
  128|  6.55k|        }
  129|  6.55k|        else if constexpr (std::is_object_v<T>) {
  130|  6.55k|            return static_cast<T*>(s.m_p);
  131|  6.55k|        }
  132|  6.55k|        else {
  133|  6.55k|            return reinterpret_cast<T*>(s.m_fp);
  134|  6.55k|        }
  135|  6.55k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlcE_LPv0EEEPKSK_:
  108|    360|        {
  109|    360|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  11.2k|    {
  196|  11.2k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  31.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  31.3k|              cvref<T> obj = *get<T>(fn);
  187|  31.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  31.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  31.3k|              }
  190|  31.3k|              else {
  191|  31.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  31.3k|              }
  193|  31.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  31.3k|    {
  126|  31.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  31.3k|            return static_cast<T*>(s.m_cp);
  128|  31.3k|        }
  129|  31.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  31.3k|            return static_cast<T*>(s.m_p);
  131|  31.3k|        }
  132|  31.3k|        else {
  133|  31.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  31.3k|        }
  135|  31.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  11.2k|        {
  104|  11.2k|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EclES9_SF_SH_:
  204|  1.14k|    {
  205|  1.14k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.14k|    }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  10.0k|    {
  205|  10.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  10.0k|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.25k|    {
  196|  1.25k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  2.87k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  2.87k|              cvref<T> obj = *get<T>(fn);
  187|  2.87k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  2.87k|                  obj(static_cast<decltype(args)>(args)...);
  189|  2.87k|              }
  190|  2.87k|              else {
  191|  2.87k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  2.87k|              }
  193|  2.87k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  2.87k|    {
  126|  2.87k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  2.87k|            return static_cast<T*>(s.m_cp);
  128|  2.87k|        }
  129|  2.87k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  2.87k|            return static_cast<T*>(s.m_p);
  131|  2.87k|        }
  132|  2.87k|        else {
  133|  2.87k|            return reinterpret_cast<T*>(s.m_fp);
  134|  2.87k|        }
  135|  2.87k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|  1.25k|        {
  104|  1.25k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_:
  195|     38|    {
  196|     38|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_SO_LPv0EEESN_ENKUlNS1_12fnref_detail4base7storageEwE_clESS_w:
  185|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|     38|              cvref<T> obj = *get<T>(fn);
  187|     38|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|     38|                  obj(static_cast<decltype(args)>(args)...);
  189|     38|              }
  190|     38|              else {
  191|     38|                  return obj(static_cast<decltype(args)>(args)...);
  192|     38|              }
  193|     38|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_bEUlwE0_EEDaNS3_7storageE:
  125|     38|    {
  126|     38|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|     38|            return static_cast<T*>(s.m_cp);
  128|     38|        }
  129|     38|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|     38|            return static_cast<T*>(s.m_p);
  131|     38|        }
  132|     38|        else {
  133|     38|            return reinterpret_cast<T*>(s.m_fp);
  134|     38|        }
  135|     38|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_bEUlwE0_LPv0EEEPSJ_:
  103|     38|        {
  104|     38|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_:
  195|    892|    {
  196|    892|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISP_EEE4typeEEEOSP_RT0_SH_EUlS9_DpOT_E_SZ_LPv0EEEST_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES13_S9_SF_SH_:
  185|    892|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    892|              cvref<T> obj = *get<T>(fn);
  187|    892|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    892|                  obj(static_cast<decltype(args)>(args)...);
  189|    892|              }
  190|    892|              else {
  191|    892|                  return obj(static_cast<decltype(args)>(args)...);
  192|    892|              }
  193|    892|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|    892|    {
  126|    892|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    892|            return static_cast<T*>(s.m_cp);
  128|    892|        }
  129|    892|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    892|            return static_cast<T*>(s.m_p);
  131|    892|        }
  132|    892|        else {
  133|    892|            return reinterpret_cast<T*>(s.m_fp);
  134|    892|        }
  135|    892|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  103|    892|        {
  104|    892|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_SL_LPv0EEESK_:
  195|  3.42k|    {
  196|  3.42k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_SL_LPv0EEESK_ENKUlNS1_12fnref_detail4base7storageEDiE_clESP_Di:
  185|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   186k|              cvref<T> obj = *get<T>(fn);
  187|   186k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   186k|                  obj(static_cast<decltype(args)>(args)...);
  189|   186k|              }
  190|   186k|              else {
  191|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   186k|              }
  193|   186k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_EEDaNS3_7storageE:
  125|   186k|    {
  126|   186k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   186k|            return static_cast<T*>(s.m_cp);
  128|   186k|        }
  129|   186k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   186k|            return static_cast<T*>(s.m_p);
  131|   186k|        }
  132|   186k|        else {
  133|   186k|            return reinterpret_cast<T*>(s.m_fp);
  134|   186k|        }
  135|   186k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_LPv0EEEPSH_:
  103|  3.42k|        {
  104|  3.42k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_SK_LPv0EEESJ_:
  195|   124k|    {
  196|   124k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_SK_LPv0EEESJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  185|   142k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   142k|              cvref<T> obj = *get<T>(fn);
  187|   142k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   142k|                  obj(static_cast<decltype(args)>(args)...);
  189|   142k|              }
  190|   142k|              else {
  191|   142k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   142k|              }
  193|   142k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEOSF_EUlDiE_EEDaNS3_7storageE:
  125|   142k|    {
  126|   142k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   142k|            return static_cast<T*>(s.m_cp);
  128|   142k|        }
  129|   142k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   142k|            return static_cast<T*>(s.m_p);
  131|   142k|        }
  132|   142k|        else {
  133|   142k|            return reinterpret_cast<T*>(s.m_fp);
  134|   142k|        }
  135|   142k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_EUlDiE_LPv0EEEPSG_:
  103|   124k|        {
  104|   124k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlwE_ST_LPv0EEEOSP_:
  195|    760|    {
  196|    760|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlwE_ST_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clESY_w:
  185|    760|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    760|              cvref<T> obj = *get<T>(fn);
  187|    760|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    760|                  obj(static_cast<decltype(args)>(args)...);
  189|    760|              }
  190|    760|              else {
  191|    760|                  return obj(static_cast<decltype(args)>(args)...);
  192|    760|              }
  193|    760|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_LNS7_13subrange_kindE1EEEE8sentinelILb1EEELSG_0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESO_iEUlwE_EEDaNS3_7storageE:
  125|    760|    {
  126|    760|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    760|            return static_cast<T*>(s.m_cp);
  128|    760|        }
  129|    760|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    760|            return static_cast<T*>(s.m_p);
  131|    760|        }
  132|    760|        else {
  133|    760|            return reinterpret_cast<T*>(s.m_fp);
  134|    760|        }
  135|    760|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_LNS8_13subrange_kindE1EEEE8sentinelILb1EEELSH_0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESP_iEUlwE_LPv0EEEPSP_:
  103|    760|        {
  104|    760|        }
_ZNK3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EclESC_SK_SM_:
  204|    242|    {
  205|    242|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|    242|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_SW_LPv0EEESV_:
  195|      2|    {
  196|      2|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_SW_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  185|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|      2|              cvref<T> obj = *get<T>(fn);
  187|      2|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|      2|                  obj(static_cast<decltype(args)>(args)...);
  189|      2|              }
  190|      2|              else {
  191|      2|                  return obj(static_cast<decltype(args)>(args)...);
  192|      2|              }
  193|      2|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_LNS9_13subrange_kindE1EEEE8sentinelILb1EEELSI_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_bEUlwE0_EEDaNS3_7storageE:
  125|      2|    {
  126|      2|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|      2|            return static_cast<T*>(s.m_cp);
  128|      2|        }
  129|      2|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|      2|            return static_cast<T*>(s.m_p);
  131|      2|        }
  132|      2|        else {
  133|      2|            return reinterpret_cast<T*>(s.m_fp);
  134|      2|        }
  135|      2|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_LPv0EEEPSR_:
  103|      2|        {
  104|      2|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_SW_LPv0EEESV_:
  195|    240|    {
  196|    240|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_SW_LPv0EEESV_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  185|    240|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    240|              cvref<T> obj = *get<T>(fn);
  187|    240|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    240|                  obj(static_cast<decltype(args)>(args)...);
  189|    240|              }
  190|    240|              else {
  191|    240|                  return obj(static_cast<decltype(args)>(args)...);
  192|    240|              }
  193|    240|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_LNS9_13subrange_kindE1EEEE8sentinelILb1EEELSI_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_bEUlwE0_EEDaNS3_7storageE:
  125|    240|    {
  126|    240|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    240|            return static_cast<T*>(s.m_cp);
  128|    240|        }
  129|    240|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    240|            return static_cast<T*>(s.m_p);
  131|    240|        }
  132|    240|        else {
  133|    240|            return reinterpret_cast<T*>(s.m_fp);
  134|    240|        }
  135|    240|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsIN4nano6ranges9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_LNSA_13subrange_kindE1EEEE8sentinelILb1EEELSJ_0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISR_EEE4typeEEEOSR_bEUlwE0_LPv0EEEPSR_:
  103|    240|        {
  104|    240|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E_S17_LPv0EEESY_:
  195|      6|    {
  196|      6|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E_S17_LPv0EEESY_ENKUlNS1_12fnref_detail4base7storageESC_SK_SM_E_clES1B_SC_SK_SM_:
  185|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|      6|              cvref<T> obj = *get<T>(fn);
  187|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|      6|                  obj(static_cast<decltype(args)>(args)...);
  189|      6|              }
  190|      6|              else {
  191|      6|                  return obj(static_cast<decltype(args)>(args)...);
  192|      6|              }
  193|      6|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|      6|    {
  126|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|      6|            return static_cast<T*>(s.m_cp);
  128|      6|        }
  129|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|      6|            return static_cast<T*>(s.m_p);
  131|      6|        }
  132|      6|        else {
  133|      6|            return reinterpret_cast<T*>(s.m_fp);
  134|      6|        }
  135|      6|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  103|      6|        {
  104|      6|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E0_S17_LPv0EEESY_:
  195|    236|    {
  196|    236|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIS7_S7_LNSF_13subrange_kindE1EEEEENS0_6detail10locale_refEESN_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISK_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISU_EEE4typeEEEOSU_RKNSL_12format_specsERT0_SM_EUlSC_DpOT_E0_S17_LPv0EEESY_ENKUlNS1_12fnref_detail4base7storageESC_SK_SM_E_clES1B_SC_SK_SM_:
  185|    236|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    236|              cvref<T> obj = *get<T>(fn);
  187|    236|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    236|                  obj(static_cast<decltype(args)>(args)...);
  189|    236|              }
  190|    236|              else {
  191|    236|                  return obj(static_cast<decltype(args)>(args)...);
  192|    236|              }
  193|    236|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|    236|    {
  126|    236|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    236|            return static_cast<T*>(s.m_cp);
  128|    236|        }
  129|    236|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    236|            return static_cast<T*>(s.m_p);
  131|    236|        }
  132|    236|        else {
  133|    236|            return reinterpret_cast<T*>(s.m_fp);
  134|    236|        }
  135|    236|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  103|    236|        {
  104|    236|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_:
  195|     12|    {
  196|     12|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|     12|              cvref<T> obj = *get<T>(fn);
  187|     12|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|     12|                  obj(static_cast<decltype(args)>(args)...);
  189|     12|              }
  190|     12|              else {
  191|     12|                  return obj(static_cast<decltype(args)>(args)...);
  192|     12|              }
  193|     12|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  125|     12|    {
  126|     12|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|     12|            return static_cast<T*>(s.m_cp);
  128|     12|        }
  129|     12|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|     12|            return static_cast<T*>(s.m_p);
  131|     12|        }
  132|     12|        else {
  133|     12|            return reinterpret_cast<T*>(s.m_fp);
  134|     12|        }
  135|     12|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSK_:
  103|     12|        {
  104|     12|        }
_ZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC2IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_:
  195|    236|    {
  196|    236|    }
_ZZN3scn2v24impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEEN4nano6ranges9subrange_8subrangeIS5_S5_LNSB_13subrange_kindE1EEENS0_6detail10locale_refEESI_EC1IZNS1_21reader_impl_for_floatIwE10read_specsIRSF_dEENS3_INS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEEEOSQ_RKNSG_12format_specsERT0_SH_EUlS9_DpOT_E0_S13_LPv0EEESU_ENKUlNS1_12fnref_detail4base7storageES9_SF_SH_E_clES17_S9_SF_SH_:
  185|    236|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|    236|              cvref<T> obj = *get<T>(fn);
  187|    236|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|    236|                  obj(static_cast<decltype(args)>(args)...);
  189|    236|              }
  190|    236|              else {
  191|    236|                  return obj(static_cast<decltype(args)>(args)...);
  192|    236|              }
  193|    236|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  125|    236|    {
  126|    236|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|    236|            return static_cast<T*>(s.m_cp);
  128|    236|        }
  129|    236|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|    236|            return static_cast<T*>(s.m_p);
  131|    236|        }
  132|    236|        else {
  133|    236|            return reinterpret_cast<T*>(s.m_fp);
  134|    236|        }
  135|    236|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEdEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSK_:
  103|    236|        {
  104|    236|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_SN_LPv0EEESM_:
  195|    696|    {
  196|    696|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_SN_LPv0EEESM_ENKUlNS1_12fnref_detail4base7storageEDiE_clESR_Di:
  185|  11.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  11.3k|              cvref<T> obj = *get<T>(fn);
  187|  11.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  11.3k|                  obj(static_cast<decltype(args)>(args)...);
  189|  11.3k|              }
  190|  11.3k|              else {
  191|  11.3k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  11.3k|              }
  193|  11.3k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_EEDaNS3_7storageE:
  125|  11.3k|    {
  126|  11.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  11.3k|            return static_cast<T*>(s.m_cp);
  128|  11.3k|        }
  129|  11.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  11.3k|            return static_cast<T*>(s.m_p);
  131|  11.3k|        }
  132|  11.3k|        else {
  133|  11.3k|            return reinterpret_cast<T*>(s.m_fp);
  134|  11.3k|        }
  135|  11.3k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEOSJ_EUlDiE_LPv0EEEPSJ_:
  103|    696|        {
  104|    696|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_ST_LPv0EEESQ_:
  195|    318|    {
  196|    318|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_ST_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  185|  15.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  15.6k|              cvref<T> obj = *get<T>(fn);
  187|  15.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  15.6k|                  obj(static_cast<decltype(args)>(args)...);
  189|  15.6k|              }
  190|  15.6k|              else {
  191|  15.6k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  15.6k|              }
  193|  15.6k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  125|  15.6k|    {
  126|  15.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  15.6k|            return static_cast<T*>(s.m_cp);
  128|  15.6k|        }
  129|  15.6k|        else if constexpr (std::is_object_v<T>) {
  130|  15.6k|            return static_cast<T*>(s.m_p);
  131|  15.6k|        }
  132|  15.6k|        else {
  133|  15.6k|            return reinterpret_cast<T*>(s.m_fp);
  134|  15.6k|        }
  135|  15.6k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlDiE_LPv0EEEPKSM_:
  108|    318|        {
  109|    318|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlwE_ST_LPv0EEESQ_:
  195|    138|    {
  196|    138|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlwE_ST_LPv0EEESQ_ENKUlNS1_12fnref_detail4base7storageEwE_clESY_w:
  185|  1.82k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.82k|              cvref<T> obj = *get<T>(fn);
  187|  1.82k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.82k|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.82k|              }
  190|  1.82k|              else {
  191|  1.82k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.82k|              }
  193|  1.82k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEEEOSL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  125|  1.82k|    {
  126|  1.82k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.82k|            return static_cast<T*>(s.m_cp);
  128|  1.82k|        }
  129|  1.82k|        else if constexpr (std::is_object_v<T>) {
  130|  1.82k|            return static_cast<T*>(s.m_p);
  131|  1.82k|        }
  132|  1.82k|        else {
  133|  1.82k|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.82k|        }
  135|  1.82k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRNS1_15take_width_viewIN4nano6ranges9subrange_8subrangeIPKwSF_LNSB_13subrange_kindE1EEEEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEEEOSM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  108|    138|        {
  109|    138|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_SR_LPv0EEESO_:
  195|  2.30k|    {
  196|  2.30k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  185|   541k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   541k|              cvref<T> obj = *get<T>(fn);
  187|   541k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   541k|                  obj(static_cast<decltype(args)>(args)...);
  189|   541k|              }
  190|   541k|              else {
  191|   541k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   541k|              }
  193|   541k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  125|   541k|    {
  126|   541k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   541k|            return static_cast<T*>(s.m_cp);
  128|   541k|        }
  129|   541k|        else if constexpr (std::is_object_v<T>) {
  130|   541k|            return static_cast<T*>(s.m_p);
  131|   541k|        }
  132|   541k|        else {
  133|   541k|            return reinterpret_cast<T*>(s.m_fp);
  134|   541k|        }
  135|   541k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlDiE_LPv0EEEPKSK_:
  108|  2.30k|        {
  109|  2.30k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_SR_LPv0EEESO_:
  195|    294|    {
  196|    294|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_SR_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  185|  4.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  4.26k|              cvref<T> obj = *get<T>(fn);
  187|  4.26k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  4.26k|                  obj(static_cast<decltype(args)>(args)...);
  189|  4.26k|              }
  190|  4.26k|              else {
  191|  4.26k|                  return obj(static_cast<decltype(args)>(args)...);
  192|  4.26k|              }
  193|  4.26k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSD_LNS9_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  125|  4.26k|    {
  126|  4.26k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  4.26k|            return static_cast<T*>(s.m_cp);
  128|  4.26k|        }
  129|  4.26k|        else if constexpr (std::is_object_v<T>) {
  130|  4.26k|            return static_cast<T*>(s.m_p);
  131|  4.26k|        }
  132|  4.26k|        else {
  133|  4.26k|            return reinterpret_cast<T*>(s.m_fp);
  134|  4.26k|        }
  135|  4.26k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implIRN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEEEOSK_NS7_12specs_helperEEUlwE_LPv0EEEPKSK_:
  108|    294|        {
  109|    294|        }

_ZN3scn2v24implntENS1_9eof_errorE:
   29|   122k|{
   30|   122k|    return e != eof_error::good;
   31|   122k|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|    882|{
   91|    882|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|    882|    return parse_error::eof;
   93|    882|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  23.0k|    {
   69|  23.0k|        return a.m_code == b.m_code;
   70|  23.0k|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  92.6k|    {
   55|  92.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  92.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  92.6k|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|  5.32k|    return [code, msg](parse_error err) {
  115|  5.32k|        return make_scan_error_from_parse_error(err, code, msg);
  116|  5.32k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|  5.32k|{
  100|  5.32k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 5.32k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|  5.32k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 48, False: 5.27k]
  ------------------
  105|     48|        return scan_error{scan_error::end_of_range, "EOF"};
  106|     48|    }
  107|       |
  108|  5.27k|    return scan_error{code, msg};
  109|  5.32k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|  5.32k|{
  114|  5.32k|    return [code, msg](parse_error err) {
  115|  5.32k|        return make_scan_error_from_parse_error(err, code, msg);
  116|  5.32k|    };
  117|  5.32k|}

_ZN3scn2v24impl26calculate_valid_text_widthIvEEmDiNS1_20text_width_algorithmE:
  106|   189k|{
  107|   189k|    SCN_GCC_PUSH
  108|   189k|    SCN_GCC_IGNORE("-Wswitch-enum")
  109|       |
  110|   189k|    SCN_CLANG_PUSH
  111|   189k|    SCN_CLANG_IGNORE("-Wcovered-switch-default")
  112|       |
  113|   189k|    switch (algo) {
  114|      0|        case text_width_algorithm::wcswidth: {
  ------------------
  |  Branch (114:9): [True: 0, False: 189k]
  ------------------
  115|      0|#if SCN_POSIX
  116|      0|            set_clocale_classic_guard clocale_guard{LC_CTYPE};
  117|       |
  118|      0|            std::wstring winput;
  119|      0|            transcode_valid_to_string(std::u32string_view{&cp, 1}, winput);
  120|      0|            const auto n = ::wcswidth(winput.data(), winput.size());
  121|      0|            SCN_ENSURE(n != -1);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  122|      0|            return static_cast<size_t>(n);
  123|       |#else
  124|       |            SCN_ASSERT(false, "No wcswidth");
  125|       |            SCN_UNREACHABLE;
  126|       |#endif
  127|      0|        }
  128|       |
  129|      0|        case text_width_algorithm::code_units: {
  ------------------
  |  Branch (129:9): [True: 0, False: 189k]
  ------------------
  130|      0|            std::wstring winput;
  131|      0|            transcode_valid_to_string(std::u32string_view{&cp, 1}, winput);
  132|      0|            return winput.size();
  133|      0|        }
  134|       |
  135|      0|        case text_width_algorithm::code_points: {
  ------------------
  |  Branch (135:9): [True: 0, False: 189k]
  ------------------
  136|      0|            return 1;
  137|      0|        }
  138|       |
  139|   189k|        case text_width_algorithm::fmt_v10: {
  ------------------
  |  Branch (139:9): [True: 189k, False: 0]
  ------------------
  140|   189k|            return calculate_text_width_for_fmt_v10(cp);
  141|      0|        }
  142|       |
  143|      0|        default:
  ------------------
  |  Branch (143:9): [True: 0, False: 189k]
  ------------------
  144|      0|            SCN_ASSERT(false, "Not implemented");
  ------------------
  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  ------------------
  145|   189k|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  146|   189k|    }
  147|       |    SCN_CLANG_POP    // -Wcovered-switch-default
  148|       |        SCN_GCC_POP  // -Wswitch-enum
  149|   189k|}
_ZN3scn2v24impl32calculate_text_width_for_fmt_v10EDi:
   78|   198k|{
   79|   198k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (79:9): [True: 12.1k, False: 186k]
  ------------------
   80|   198k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (80:10): [True: 466, False: 11.7k]
  ------------------
   81|  12.1k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (81:10): [True: 92, False: 11.6k]
  ------------------
   82|  12.1k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (82:10): [True: 60, False: 11.5k]
  ------------------
   83|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
   84|  12.1k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (84:11): [True: 11.0k, False: 482]
  |  Branch (84:27): [True: 760, False: 10.3k]
  |  Branch (84:43): [True: 760, False: 0]
  ------------------
   85|  12.1k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (85:11): [True: 10.3k, False: 482]
  |  Branch (85:27): [True: 212, False: 10.1k]
  ------------------
   86|  12.1k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (86:11): [True: 9.97k, False: 616]
  |  Branch (86:27): [True: 78, False: 9.89k]
  ------------------
   87|  12.1k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (87:11): [True: 9.84k, False: 664]
  |  Branch (87:27): [True: 68, False: 9.77k]
  ------------------
   88|  12.1k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (88:11): [True: 9.77k, False: 664]
  |  Branch (88:27): [True: 962, False: 8.81k]
  ------------------
   89|  12.1k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (89:11): [True: 8.81k, False: 664]
  |  Branch (89:27): [True: 68, False: 8.74k]
  ------------------
   90|  12.1k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (90:11): [True: 8.74k, False: 664]
  |  Branch (90:27): [True: 62, False: 8.68k]
  ------------------
   91|  12.1k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (91:11): [True: 8.56k, False: 786]
  |  Branch (91:28): [True: 62, False: 8.50k]
  ------------------
   92|  12.1k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (92:11): [True: 8.50k, False: 786]
  |  Branch (92:28): [True: 1.06k, False: 7.44k]
  ------------------
   93|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
   94|  12.1k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (94:11): [True: 7.56k, False: 664]
  |  Branch (94:28): [True: 62, False: 7.50k]
  ------------------
   95|       |         // Supplemental Symbols and Pictographs:
   96|  12.1k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (96:11): [True: 7.50k, False: 664]
  |  Branch (96:28): [True: 60, False: 7.44k]
  ------------------
   97|  4.07k|        return 2;
   98|  4.07k|    }
   99|   194k|    return 1;
  100|   198k|}
_ZN3scn2v24impl26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_20text_width_algorithmE:
  155|  9.06k|{
  156|  9.06k|    SCN_GCC_PUSH
  157|  9.06k|    SCN_GCC_IGNORE("-Wswitch-enum")
  158|       |
  159|  9.06k|    SCN_CLANG_PUSH
  160|  9.06k|    SCN_CLANG_IGNORE("-Wcovered-switch-default")
  161|       |
  162|  9.06k|    switch (algo) {
  163|      0|        case text_width_algorithm::wcswidth: {
  ------------------
  |  Branch (163:9): [True: 0, False: 9.06k]
  ------------------
  164|      0|#if SCN_POSIX
  165|      0|            set_clocale_classic_guard clocale_guard{LC_CTYPE};
  166|       |
  167|      0|            std::wstring winput;
  168|      0|            transcode_valid_to_string(input, winput);
  169|      0|            const auto n = ::wcswidth(winput.data(), winput.size());
  170|      0|            SCN_ENSURE(n != -1);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  171|      0|            return static_cast<size_t>(n);
  172|       |#else
  173|       |            SCN_ASSERT(false, "No wcswidth");
  174|       |            SCN_UNREACHABLE;
  175|       |#endif
  176|      0|        }
  177|       |
  178|      0|        case text_width_algorithm::code_units: {
  ------------------
  |  Branch (178:9): [True: 0, False: 9.06k]
  ------------------
  179|      0|            return input.size();
  180|      0|        }
  181|       |
  182|      0|        case text_width_algorithm::code_points: {
  ------------------
  |  Branch (182:9): [True: 0, False: 9.06k]
  ------------------
  183|      0|            return count_valid_code_points(input);
  184|      0|        }
  185|       |
  186|  9.06k|        case text_width_algorithm::fmt_v10: {
  ------------------
  |  Branch (186:9): [True: 9.06k, False: 0]
  ------------------
  187|  9.06k|            size_t count{0};
  188|  9.06k|            for_each_code_point_valid(input, [&count](char32_t cp) {
  189|  9.06k|                count += calculate_text_width_for_fmt_v10(cp);
  190|  9.06k|            });
  191|  9.06k|            return count;
  192|      0|        }
  193|       |
  194|      0|        default:
  ------------------
  |  Branch (194:9): [True: 0, False: 9.06k]
  ------------------
  195|      0|            SCN_ASSERT(false, "Not implemented");
  ------------------
  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  ------------------
  196|  9.06k|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  197|  9.06k|    }
  198|       |    SCN_CLANG_POP    // -Wcovered-switch-default
  199|       |        SCN_GCC_POP  // -Wswitch-enum
  200|  9.06k|}
_ZZN3scn2v24impl26calculate_valid_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_20text_width_algorithmEENKUlDiE_clEDi:
  188|  9.06k|            for_each_code_point_valid(input, [&count](char32_t cp) {
  189|  9.06k|                count += calculate_text_width_for_fmt_v10(cp);
  190|  9.06k|            });

_ZN3scn2v26detail12handle_errorENS0_10scan_errorE:
   25|    278|{
   26|    278|    return e;
   27|    278|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  41.5k|{
  587|  41.5k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  41.5k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  71.6k|{
  611|  71.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  71.6k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  41.5k|{
  544|  41.5k|    return vscan_internal(source, format, args);
  545|  41.5k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  71.6k|{
  564|  71.6k|    return vscan_internal(source, format, args);
  565|  71.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  83.1k|{
   36|  83.1k|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 82.7k, False: 432]
  ------------------
   37|  82.7k|        return false;
   38|  82.7k|    }
   39|    432|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 126, False: 306]
  |  Branch (39:39): [True: 18, False: 108]
  ------------------
   40|  83.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  83.1k|    {
  314|  83.1k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|   226k|    {
  133|   226k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|   226k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  83.1k|    {
  264|  83.1k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  83.1k|{
  441|  83.1k|    const auto beg = handler.get_ctx().begin();
  442|  83.1k|    detail::parse_format_string<false>(format, handler);
  443|  83.1k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 79.8k, False: 3.28k]
  |  |  ------------------
  ------------------
  444|  79.8k|        return unexpected(handler.error);
  445|  79.8k|    }
  446|  3.28k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  83.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|   993k|    {
  425|   993k|        return ctx.get();
  426|   993k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|   993k|    {
  268|   993k|        return contiguous_ctx;
  269|   993k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|   111k|    {
  318|   259k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 155k, False: 104k]
  ------------------
  319|   155k|            auto it = get_ctx().begin();
  320|   155k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 2.55k, False: 152k]
  ------------------
  321|  2.55k|                SCN_UNLIKELY_ATTR
  322|  2.55k|                return on_error("Unexpected end of source");
  323|  2.55k|            }
  324|       |
  325|   152k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|   152k|                    detail::make_string_view_from_pointers(begin, end));
  327|   152k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 2.34k, False: 150k]
  ------------------
  328|  2.34k|                return on_error("Invalid encoding in format string");
  329|  2.34k|            }
  330|   150k|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 123k, False: 26.3k]
  ------------------
  331|   123k|                get_ctx().advance_to(
  332|   123k|                    impl::read_while_classic_space(get_ctx().range()));
  333|   123k|                begin = detail::to_address(std::prev(after_space_it));
  334|   123k|                continue;
  335|   123k|            }
  336|       |
  337|  26.3k|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 2.00k, False: 24.3k]
  ------------------
  338|  2.00k|                SCN_UNLIKELY_ATTR
  339|  2.00k|                return on_error("Unexpected literal character in source");
  340|  2.00k|            }
  341|  24.3k|            get_ctx().advance_to(ranges::next(it));
  342|  24.3k|        }
  343|   111k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
  374|  10.4k|    {
  375|  10.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  376|  10.4k|        set_arg_as_visited(arg_id);
  377|       |
  378|  10.4k|        on_visit_scan_arg(
  379|  10.4k|            impl::default_arg_reader<context_type>{
  380|  10.4k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
  381|  10.4k|            arg);
  382|  10.4k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  80.6k|{
   92|  80.6k|    auto arg = ctx.arg(id);
   93|  80.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.81k, False: 78.8k]
  |  |  ------------------
  ------------------
   94|  1.81k|        handler.on_error("Failed to find argument with ID");
   95|  1.81k|    }
   96|  80.6k|    return arg;
   97|  80.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|   143k|    {
  208|   143k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.35k, False: 139k]
  |  |  ------------------
  ------------------
  209|  3.35k|            on_error("Invalid out-of-range argument ID");
  210|  3.35k|            return;
  211|  3.35k|        }
  212|       |
  213|   139k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 144, False: 139k]
  |  |  ------------------
  ------------------
  214|    144|            return on_error("Argument with this ID has already been scanned");
  215|    144|        }
  216|       |
  217|   139k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|   139k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 139k, False: 0]
  |  |  ------------------
  ------------------
  218|   139k|            visited_args_lower64 |= (1ull << id);
  219|   139k|            return;
  220|   139k|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|   139k|    {
  193|   139k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|   139k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|   139k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 139k, False: 0]
  |  |  ------------------
  ------------------
  199|   139k|            return (visited_args_lower64 >> id) & 1ull;
  200|   139k|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|   139k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  10.4k|    {
  359|  10.4k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 322, False: 10.1k]
  |  Branch (359:23): [True: 0, False: 10.1k]
  ------------------
  360|    322|            SCN_UNLIKELY_ATTR
  361|    322|            return;
  362|    322|        }
  363|       |
  364|  10.1k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  10.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  10.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.48k, False: 3.64k]
  |  |  ------------------
  ------------------
  366|  6.48k|            on_error(r.error());
  367|  6.48k|        }
  368|  3.64k|        else {
  369|  3.64k|            get_ctx().advance_to(*r);
  370|  3.64k|        }
  371|  10.1k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   115k|    {
  177|   115k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 115k, False: 0]
  |  |  ------------------
  ------------------
  178|   115k|            error = err;
  179|   115k|        }
  180|   115k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  75.6k|    {
  347|  75.6k|        return parse_ctx.next_arg_id();
  348|  75.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
  350|  5.10k|    {
  351|  5.10k|        parse_ctx.check_arg_id(id);
  352|  5.10k|        return id;
  353|  5.10k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  70.2k|    {
  388|  70.2k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  70.2k|        set_arg_as_visited(arg_id);
  390|       |
  391|  70.2k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 70.2k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  70.2k|        auto specs = detail::format_specs{};
  401|  70.2k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  70.2k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  70.2k|            arg.type()};
  404|       |
  405|  70.2k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  70.2k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 2.49k, False: 67.7k]
  |  Branch (406:29): [True: 988, False: 66.7k]
  ------------------
  407|  3.48k|            SCN_UNLIKELY_ATTR
  408|  3.48k|            on_error("Missing '}' in format string");
  409|  3.48k|            return parse_ctx.begin();
  410|  3.48k|        }
  411|  66.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 286, False: 66.4k]
  |  |  ------------------
  ------------------
  412|    286|            return parse_ctx.begin();
  413|    286|        }
  414|  66.4k|        parse_ctx.advance_to(begin);
  415|       |
  416|  66.4k|        on_visit_scan_arg(
  417|  66.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  66.4k|                                           get_ctx().locale()},
  419|  66.4k|            arg);
  420|  66.4k|        return parse_ctx.begin();
  421|  66.7k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  70.2k|    {
  112|  70.2k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  66.4k|    {
  359|  66.4k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 362, False: 66.0k]
  |  Branch (359:23): [True: 0, False: 66.0k]
  ------------------
  360|    362|            SCN_UNLIKELY_ATTR
  361|    362|            return;
  362|    362|        }
  363|       |
  364|  66.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  66.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  66.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 60.0k, False: 6.09k]
  |  |  ------------------
  ------------------
  366|  60.0k|            on_error(r.error());
  367|  60.0k|        }
  368|  6.09k|        else {
  369|  6.09k|            get_ctx().advance_to(*r);
  370|  6.09k|        }
  371|  66.0k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   129k|    {
  172|   129k|        SCN_UNLIKELY_ATTR
  173|   129k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   129k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|   226k|    {
  140|   226k|        {
  141|   226k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 226k]
  ------------------
  142|   226k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 226k]
  ------------------
  143|   226k|                                      ? std::numeric_limits<uint64_t>::max()
  144|   226k|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|   226k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 86.9k, False: 139k]
  ------------------
  147|  86.9k|                return on_error("Argument list not exhausted");
  148|  86.9k|            }
  149|   226k|        }
  150|       |
  151|   139k|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 139k, False: 0]
  ------------------
  152|   139k|            return;
  153|   139k|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|   226k|    {
  188|   226k|        return error;
  189|   226k|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|   527k|    {
  184|   527k|        return static_cast<bool>(error);
  185|   527k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  83.1k|{
  456|  83.1k|    const auto argcount = args.size();
  457|  83.1k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 18, False: 83.1k]
  |  Branch (457:60): [True: 18, False: 0]
  ------------------
  458|     18|        auto arg = args.get(0);
  459|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|     18|    static_cast<    \
  |  |  247|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|     18|    }
  461|       |
  462|  83.1k|    auto handler = format_handler<true, CharT>{
  463|  83.1k|        ranges::subrange<const CharT*>{source.data(),
  464|  83.1k|                                       source.data() + source.size()},
  465|  83.1k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  83.1k|    static_cast<    \
  |  |  247|  83.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  83.1k|    static_cast<    \
  |  |  247|  83.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  83.1k|    return vscan_parse_format_string(format, handler);
  467|  83.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|     18|{
   49|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|     18|    auto reader =
   55|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|     18|            ranges::subrange<const CharT*>{source.data(),
   57|     18|                                           source.data() + source.size()},
   58|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|     18|    static_cast<    \
  |  |  247|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|      8|    return ranges::distance(source.data(), it);
   61|     18|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|   143k|{
  456|   143k|    const auto argcount = args.size();
  457|   143k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 18, False: 143k]
  |  Branch (457:60): [True: 18, False: 0]
  ------------------
  458|     18|        auto arg = args.get(0);
  459|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|     18|    static_cast<    \
  |  |  247|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|     18|    }
  461|       |
  462|   143k|    auto handler = format_handler<true, CharT>{
  463|   143k|        ranges::subrange<const CharT*>{source.data(),
  464|   143k|                                       source.data() + source.size()},
  465|   143k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   143k|    static_cast<    \
  |  |  247|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   143k|    static_cast<    \
  |  |  247|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|   143k|    return vscan_parse_format_string(format, handler);
  467|   143k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|   143k|{
   36|   143k|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 129k, False: 13.4k]
  ------------------
   37|   129k|        return false;
   38|   129k|    }
   39|  13.4k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 144, False: 13.3k]
  |  Branch (39:39): [True: 18, False: 126]
  ------------------
   40|   143k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|     18|{
   49|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|     18|    auto reader =
   55|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|     18|            ranges::subrange<const CharT*>{source.data(),
   57|     18|                                           source.data() + source.size()},
   58|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|     18|    static_cast<    \
  |  |  247|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     10|    }                                                  \
  |  |  |  |   70|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|      8|    return ranges::distance(source.data(), it);
   61|     18|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|   143k|    {
  314|   143k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|   143k|    {
  264|   143k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   143k|{
  441|   143k|    const auto beg = handler.get_ctx().begin();
  442|   143k|    detail::parse_format_string<false>(format, handler);
  443|   143k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 139k, False: 3.42k]
  |  |  ------------------
  ------------------
  444|   139k|        return unexpected(handler.error);
  445|   139k|    }
  446|  3.42k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   143k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  13.0M|    {
  425|  13.0M|        return ctx.get();
  426|  13.0M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  13.0M|    {
  268|  13.0M|        return contiguous_ctx;
  269|  13.0M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|   170k|    {
  318|  4.33M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 4.16M, False: 165k]
  ------------------
  319|  4.16M|            auto it = get_ctx().begin();
  320|  4.16M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 2.81k, False: 4.16M]
  ------------------
  321|  2.81k|                SCN_UNLIKELY_ATTR
  322|  2.81k|                return on_error("Unexpected end of source");
  323|  2.81k|            }
  324|       |
  325|  4.16M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|  4.16M|                    detail::make_string_view_from_pointers(begin, end));
  327|  4.16M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 34, False: 4.16M]
  ------------------
  328|     34|                return on_error("Invalid encoding in format string");
  329|     34|            }
  330|  4.16M|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 124k, False: 4.03M]
  ------------------
  331|   124k|                get_ctx().advance_to(
  332|   124k|                    impl::read_while_classic_space(get_ctx().range()));
  333|   124k|                begin = detail::to_address(std::prev(after_space_it));
  334|   124k|                continue;
  335|   124k|            }
  336|       |
  337|  4.03M|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 2.22k, False: 4.03M]
  ------------------
  338|  2.22k|                SCN_UNLIKELY_ATTR
  339|  2.22k|                return on_error("Unexpected literal character in source");
  340|  2.22k|            }
  341|  4.03M|            get_ctx().advance_to(ranges::next(it));
  342|  4.03M|        }
  343|   170k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
  374|  8.35k|    {
  375|  8.35k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  376|  8.35k|        set_arg_as_visited(arg_id);
  377|       |
  378|  8.35k|        on_visit_scan_arg(
  379|  8.35k|            impl::default_arg_reader<context_type>{
  380|  8.35k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
  381|  8.35k|            arg);
  382|  8.35k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  62.3k|{
   92|  62.3k|    auto arg = ctx.arg(id);
   93|  62.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  62.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.54k, False: 60.7k]
  |  |  ------------------
  ------------------
   94|  1.54k|        handler.on_error("Failed to find argument with ID");
   95|  1.54k|    }
   96|  62.3k|    return arg;
   97|  62.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  8.35k|    {
  359|  8.35k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 346, False: 8.01k]
  |  Branch (359:23): [True: 0, False: 8.01k]
  ------------------
  360|    346|            SCN_UNLIKELY_ATTR
  361|    346|            return;
  362|    346|        }
  363|       |
  364|  8.01k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  8.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  8.01k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  8.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.57k, False: 3.44k]
  |  |  ------------------
  ------------------
  366|  4.57k|            on_error(r.error());
  367|  4.57k|        }
  368|  3.44k|        else {
  369|  3.44k|            get_ctx().advance_to(*r);
  370|  3.44k|        }
  371|  8.01k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  58.6k|    {
  347|  58.6k|        return parse_ctx.next_arg_id();
  348|  58.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
  350|  3.80k|    {
  351|  3.80k|        parse_ctx.check_arg_id(id);
  352|  3.80k|        return id;
  353|  3.80k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  53.9k|    {
  388|  53.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  53.9k|        set_arg_as_visited(arg_id);
  390|       |
  391|  53.9k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 53.9k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  53.9k|        auto specs = detail::format_specs{};
  401|  53.9k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  53.9k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  53.9k|            arg.type()};
  404|       |
  405|  53.9k|        begin = detail::parse_format_specs(begin, end, handler);
  406|  53.9k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 2.58k, False: 51.4k]
  |  Branch (406:29): [True: 710, False: 50.6k]
  ------------------
  407|  3.29k|            SCN_UNLIKELY_ATTR
  408|  3.29k|            on_error("Missing '}' in format string");
  409|  3.29k|            return parse_ctx.begin();
  410|  3.29k|        }
  411|  50.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  50.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 298, False: 50.3k]
  |  |  ------------------
  ------------------
  412|    298|            return parse_ctx.begin();
  413|    298|        }
  414|  50.3k|        parse_ctx.advance_to(begin);
  415|       |
  416|  50.3k|        on_visit_scan_arg(
  417|  50.3k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  50.3k|                                           get_ctx().locale()},
  419|  50.3k|            arg);
  420|  50.3k|        return parse_ctx.begin();
  421|  50.6k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  53.9k|    {
  112|  53.9k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  50.3k|    {
  359|  50.3k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 138, False: 50.2k]
  |  Branch (359:23): [True: 0, False: 50.2k]
  ------------------
  360|    138|            SCN_UNLIKELY_ATTR
  361|    138|            return;
  362|    138|        }
  363|       |
  364|  50.2k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  50.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  50.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  50.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44.1k, False: 6.11k]
  |  |  ------------------
  ------------------
  366|  44.1k|            on_error(r.error());
  367|  44.1k|        }
  368|  6.11k|        else {
  369|  6.11k|            get_ctx().advance_to(*r);
  370|  6.11k|        }
  371|  50.2k|    }

LLVMFuzzerTestOneInput:
   68|  4.62k|{
   69|  4.62k|    scn::fuzz::run({data, size});
   70|  4.62k|    return 0;
   71|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   51|  4.62k|{
   52|  4.62k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.62k]
  |  Branch (52:42): [True: 0, False: 4.62k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.62k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   57|       |
   58|  4.62k|    run_for_source(sv);
   59|  4.62k|    run_for_source(wsv_reinterpret);
   60|  4.62k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 3.34k, False: 1.28k]
  ------------------
   61|  3.34k|        run_for_source(wsv_transcode);
   62|  3.34k|    }
   63|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.62k|{
   37|  4.62k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.62k|    run_for_type<char_type>(source);
   40|  4.62k|    run_for_type<int>(source);
   41|  4.62k|    run_for_type<unsigned>(source);
   42|  4.62k|    run_for_type<double>(source);
   43|  4.62k|    run_for_type<bool>(source);
   44|  4.62k|    run_for_type<void*>(source);
   45|  4.62k|    run_for_type<std::string>(source);
   46|  4.62k|    run_for_type<std::wstring>(source);
   47|  4.62k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.62k|{
   25|  4.62k|    {
   26|  4.62k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.62k|    }
   28|  4.62k|    {
   29|  4.62k|        auto _ =
   30|  4.62k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.62k|    }
   32|  4.62k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  7.96k|{
   37|  7.96k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  7.96k|    run_for_type<char_type>(source);
   40|  7.96k|    run_for_type<int>(source);
   41|  7.96k|    run_for_type<unsigned>(source);
   42|  7.96k|    run_for_type<double>(source);
   43|  7.96k|    run_for_type<bool>(source);
   44|  7.96k|    run_for_type<void*>(source);
   45|  7.96k|    run_for_type<std::string>(source);
   46|  7.96k|    run_for_type<std::wstring>(source);
   47|  7.96k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  7.96k|{
   25|  7.96k|    {
   26|  7.96k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.96k|    }
   28|  7.96k|    {
   29|  7.96k|        auto _ =
   30|  7.96k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.96k|    }
   32|  7.96k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  4.62k|{
   52|  4.62k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  4.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.62k|    string_buffer.resize(data.size());
   56|  4.62k|    std::copy(data.begin(), data.end(),
   57|  4.62k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  4.62k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  4.62k|    const auto wsv_reinterpret_size =
   62|  4.62k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 96, False: 4.52k]
  ------------------
   63|  4.62k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  4.62k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  4.62k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  4.62k|    std::wstring_view wsv_transcoded;
   69|  4.62k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 3.34k, False: 1.28k]
  ------------------
   70|  3.34k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  3.34k|        else {
   79|  3.34k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  3.34k|            wstring_buffer_transcoded_wide.resize(size);
   81|  3.34k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  3.34k|                sv.data(), sv.size(),
   83|  3.34k|                reinterpret_cast<char32_t*>(
   84|  3.34k|                    wstring_buffer_transcoded_wide.data()));
   85|  3.34k|        }
   86|  3.34k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  3.34k|    }
   88|       |
   89|  4.62k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  4.62k|}

