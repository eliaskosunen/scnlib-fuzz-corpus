_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
 1039|  1.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
 1039|    938|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1039|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|  5.96M|{
 4086|  5.96M|    if constexpr (sizeof(U) == 1) {
 4087|  5.96M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|  5.96M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|  5.96M|{
 4050|  5.96M|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|  5.96M|    SCN_GCC_COMPAT_PUSH
 4053|  5.96M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|  5.96M|    constexpr char lengths[] =
 4055|  5.96M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|  5.96M|        "\1\1\1\1\1\1\1\1"
 4057|  5.96M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|  5.96M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|  5.96M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|  5.96M|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|  5.96M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|  5.96M|    SCN_GCC_COMPAT_POP
 4064|  5.96M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  5.56M|{
 4292|  5.56M|    if constexpr (sizeof(CharT) == 1) {
 4293|  5.56M|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|  5.56M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|  5.56M|{
 4105|  5.56M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|  5.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|  5.56M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  5.56M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  5.56M|    };
 4110|       |
 4111|  5.56M|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 4.57M, False: 985k]
  ------------------
 4112|  4.57M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 132, False: 4.57M]
  ------------------
 4113|    132|            SCN_UNLIKELY_ATTR
 4114|    132|            return invalid_code_point;
 4115|    132|        }
 4116|  4.57M|        return static_cast<char32_t>(input[0]);
 4117|  4.57M|    }
 4118|       |
 4119|   985k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 932k, False: 53.0k]
  ------------------
 4120|   932k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 18, False: 932k]
  ------------------
 4121|     18|            SCN_UNLIKELY_ATTR
 4122|     18|            return invalid_code_point;
 4123|     18|        }
 4124|   932k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 4.64k, False: 927k]
  ------------------
 4125|  4.64k|            SCN_UNLIKELY_ATTR
 4126|  4.64k|            return invalid_code_point;
 4127|  4.64k|        }
 4128|       |
 4129|   927k|        char32_t cp{};
 4130|   927k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|   927k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|   927k|        return cp;
 4133|   932k|    }
 4134|       |
 4135|  53.0k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 47.4k, False: 5.62k]
  ------------------
 4136|  47.4k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 18, False: 47.4k]
  ------------------
 4137|     18|            SCN_UNLIKELY_ATTR
 4138|     18|            return invalid_code_point;
 4139|     18|        }
 4140|  47.4k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 1.35k, False: 46.0k]
  ------------------
 4141|  47.4k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 356, False: 45.7k]
  ------------------
 4142|  1.70k|            SCN_UNLIKELY_ATTR
 4143|  1.70k|            return invalid_code_point;
 4144|  1.70k|        }
 4145|       |
 4146|  45.7k|        char32_t cp{};
 4147|  45.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|  45.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|  45.7k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|  45.7k|        return cp;
 4151|  47.4k|    }
 4152|       |
 4153|  5.62k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 5.62k, False: 0]
  ------------------
 4154|  5.62k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 5.62k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  5.62k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 414, False: 5.20k]
  ------------------
 4159|    414|            SCN_UNLIKELY_ATTR
 4160|    414|            return invalid_code_point;
 4161|    414|        }
 4162|  5.20k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 857, False: 4.34k]
  ------------------
 4163|  5.20k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 291, False: 4.05k]
  ------------------
 4164|  5.20k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 589, False: 3.46k]
  ------------------
 4165|  1.73k|            SCN_UNLIKELY_ATTR
 4166|  1.73k|            return invalid_code_point;
 4167|  1.73k|        }
 4168|       |
 4169|  3.46k|        char32_t cp{};
 4170|  3.46k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|  3.46k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|  3.46k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|  3.46k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|  3.46k|        return cp;
 4175|  5.20k|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|  1.03M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  1.03M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  1.03M|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  1.58M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  1.58M|    else {
 3984|  1.58M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  1.58M|                                       to_address(first), to_address(last)))};
 3986|  1.58M|    }
 3987|  1.58M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  4.81M|{
  331|  4.81M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  4.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  4.81M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  4.98M|{
  309|  4.98M|    return p;
  310|  4.98M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|   628k|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|   628k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|   628k|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|   628k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|   628k|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|   628k|}
_ZN3scn2v44scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2Ev:
  441|  7.04k|        : m_value(T{}), m_has_value(true)
  442|  7.04k|    {
  443|  7.04k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|  63.3k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|  63.3k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJcEEC2Ev:
 6466|  7.04k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.76k, False: 278]
  |  |  ------------------
  ------------------
 9835|  6.76k|        out = unexpected(in.error());
 9836|  6.76k|    }
 9837|    278|    else {
 9838|    278|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    278|    static_cast<    \
  |  | 1109|    278|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    278|    }
 9840|  7.04k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|  63.3k|    {
 1754|  63.3k|        return has_value();
 1755|  63.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   126k|    {
  505|   126k|        return m_has_value;
  506|   126k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  60.6k|    {
 1760|  60.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  60.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  60.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  60.6k|        return this->get_unexpected().error();
 1762|  60.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  60.6k|    {
  488|  60.6k|        return m_unexpected;
  489|  60.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  1.68M|    {
  380|  1.68M|        return m_unexpected;
  381|  1.68M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|   845k|        : m_unexpected(std::forward<Err>(e))
  365|   845k|    {
  366|   845k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   845k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   845k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  6.76k|        : base(unexpect, std::move(e.error())),
 1630|  6.76k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.76k|    {
 1632|  6.76k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  6.76k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.76k|          m_has_value(false)
  466|  6.76k|    {
  467|  6.76k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  1.02M|        : m_unexpected(std::forward<Args>(args)...)
  374|  1.02M|    {
  375|  1.02M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  1.02M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  1.02M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.76k|    {
 1330|  6.76k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEaSEOSC_:
 1570|  6.76k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvEaSEOSD_:
  916|  6.76k|    {
  917|  6.76k|        assign_common(std::move(other));
  918|  6.76k|        return *this;
  919|  6.76k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  6.76k|    {
  964|  6.76k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.76k, False: 0]
  ------------------
  965|  6.76k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.76k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.76k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.76k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  20.8k|    {
  505|  20.8k|        return m_has_value;
  506|  20.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.31k|    {
  471|  7.31k|        return m_value;
  472|  7.31k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  6.76k|    {
 1060|  6.76k|        this->destroy_value();
 1061|  6.76k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.76k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.76k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  6.76k|    {
  519|  6.76k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.76k|                                  std::forward<Args>(args)...);
  521|  6.76k|        m_has_value = false;
  522|  6.76k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   185k|{
  411|   185k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   185k|        T(std::forward<Args>(args)...);
  413|   185k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.76k|    {
  488|  6.76k|        return m_unexpected;
  489|  6.76k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.76k|    {
  496|  6.76k|        return std::move(m_unexpected);
  497|  6.76k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|  2.73k|    {
 6567|  2.73k|        m_range = std::forward<Other>(r);
 6568|  2.73k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  2.73k|    {
 1809|  2.73k|        return value();
 1810|  2.73k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  2.73k|    {
 1783|  2.73k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.73k|        return this->get_value();
 1785|  2.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.73k|    {
  471|  2.73k|        return m_value;
  472|  2.73k|    }
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEcEEEE:
 9654|  31.6k|{
 9655|  31.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  31.6k|}
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9591|  31.6k|{
 9592|  31.6k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  31.6k|    auto result = vscan_impl(buffer, format, args);
 9595|  31.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 30.3k, False: 1.36k]
  |  |  ------------------
  ------------------
 9596|  30.3k|        return unexpected(result.error());
 9597|  30.3k|    }
 9598|  1.36k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  31.6k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 5398|  63.3k|{
 5399|  63.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  63.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  63.3k|                  "\n"
 5403|  63.3k|                  "Unsupported range type given as input to a scanning "
 5404|  63.3k|                  "function.\n"
 5405|  63.3k|                  "A range needs to have a character type (value type) "
 5406|  63.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  63.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  63.3k|                  "to be included.\n"
 5409|  63.3k|                  "See the scnlib documentation for more details.");
 5410|  63.3k|    static_assert(
 5411|  63.3k|        !std::is_same_v<T, custom_char_traits>,
 5412|  63.3k|        "\n"
 5413|  63.3k|        "Unsupported range type given as input to a scanning "
 5414|  63.3k|        "function.\n"
 5415|  63.3k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  63.3k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  63.3k|        "not supported.");
 5418|  63.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  63.3k|                  "\n"
 5420|  63.3k|                  "Unsupported range type given as input to a scanning "
 5421|  63.3k|                  "function.\n"
 5422|  63.3k|                  "file_marker_found cannot be used as an "
 5423|  63.3k|                  "source range type to scn::scan.\n"
 5424|  63.3k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  63.3k|                  "and do not provide an explicit source range, "
 5426|  63.3k|                  "or use scn::scan with a FILE* directly.");
 5427|  63.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  63.3k|                  "\n"
 5429|  63.3k|                  "Unsupported range type given as input to a scanning "
 5430|  63.3k|                  "function.\n"
 5431|  63.3k|                  "In order to be scannable, a range needs to satisfy "
 5432|  63.3k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  63.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  63.3k|                  "\n"
 5435|  63.3k|                  "Unsupported range type given as input to a scanning "
 5436|  63.3k|                  "function.\n"
 5437|  63.3k|                  "A range needs to model forward_range and have a valid "
 5438|  63.3k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  63.3k|                  "Examples of scannable ranges are std::string, "
 5440|  63.3k|                  "std::string_view, "
 5441|  63.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  63.3k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  63.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  63.3k|}
_ZN3scn2v46detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5290|  63.3k|{
 5291|  63.3k|    if constexpr (is_valid_char_type<CharT>) {
 5292|  63.3k|        return r;
 5293|       |        // return make_string_scan_buffer(r);
 5294|       |    }
 5295|       |    else {
 5296|       |        return invalid_char_type{};
 5297|       |    }
 5298|  63.3k|}
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|   196k|    {
 1754|   196k|        return has_value();
 1755|   196k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|   393k|    {
  505|   393k|        return m_has_value;
  506|   393k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   192k|    {
 1760|   192k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   192k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   192k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   192k|        return this->get_unexpected().error();
 1762|   192k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   192k|    {
  488|   192k|        return m_unexpected;
  489|   192k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  60.6k|        : base(unexpect, std::move(e.error())),
 1630|  60.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  60.6k|    {
 1632|  60.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  60.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  60.6k|          m_has_value(false)
  466|  60.6k|    {
  467|  60.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  63.3k|    {
 1330|  63.3k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6796|  2.73k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  2.73k|                      ranges::iterator_t<SourceRange>>) {
 6799|  2.73k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  2.73k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.73k|    {
 2883|  2.73k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.73k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.73k|    {
 2864|  2.73k|        return decay_copy(t.begin());
 2865|  2.73k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|   169k|{
 2108|   169k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   169k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 6783|  2.73k|{
 6784|  2.73k|    return ranges::end(source);
 6785|  2.73k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.73k|    {
 2940|  2.73k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.73k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.73k|    {
 2922|  2.73k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.73k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|   927k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   927k|    static_cast<    \
  |  | 1109|   927k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   927k|    static_cast<    \
  |  | 1109|   927k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   927k|    {
 3480|   927k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  4.90k|    {
 1809|  4.90k|        return value();
 1810|  4.90k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  5.12k|    {
 1783|  5.12k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  5.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  5.12k|        return this->get_value();
 1785|  5.12k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  5.12k|    {
  471|  5.12k|        return m_value;
  472|  5.12k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  2.73k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.73k|    {
 1586|  2.73k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  2.73k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.73k|    {
  457|  2.73k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJcEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJcEEEbv:
 5910|  7.04k|{
 5911|  7.04k|    constexpr bool default_constructible_constraint =
 5912|  7.04k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  7.04k|    static_assert(default_constructible_constraint,
 5914|  7.04k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  7.04k|    constexpr bool destructible_constraint =
 5917|  7.04k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  7.04k|    static_assert(destructible_constraint,
 5919|  7.04k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  7.04k|    constexpr bool non_reference_constraint =
 5922|  7.04k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  7.04k|    static_assert(non_reference_constraint,
 5924|  7.04k|                  "Scan argument types must not be references");
 5925|       |
 5926|  7.04k|    constexpr bool movable_constraint =
 5927|  7.04k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  7.04k|    static_assert(movable_constraint,
 5929|  7.04k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  7.04k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  7.04k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  7.04k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEEC2ERNSt3__15tupleIJcEEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE14EcvEEPvRT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEcEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERc:
 5753|  7.04k|    {
 5754|       |        if constexpr (std::is_same_v<char_type, char> &&
 5755|  7.04k|                      !is_type_disabled<char_type>) {
 5756|  7.04k|            return val;
 5757|       |        }
 5758|       |        else if constexpr (is_type_disabled<char_type>) {
 5759|       |            return unscannable_disabled{val};
 5760|       |        }
 5761|       |        else {
 5762|       |            SCN_UNUSED(val);
 5763|       |            return unscannable_char{};
 5764|       |        }
 5765|  7.04k|    }
_ZN3scn2v46detail15make_value_implIcRcEEDaOT0_:
 5864|  7.04k|{
 5865|  7.04k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  7.04k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  7.04k|    constexpr bool scannable_char =
 5869|  7.04k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  7.04k|    static_assert(scannable_char,
 5871|  7.04k|                  "Cannot scan an argument of an unsupported character "
 5872|  7.04k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  7.04k|    constexpr bool scannable_const =
 5875|  7.04k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  7.04k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  7.04k|    constexpr bool scannable_disabled =
 5879|  7.04k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  7.04k|    static_assert(scannable_disabled,
 5881|  7.04k|                  "Cannot scan an argument that has been disabled by "
 5882|  7.04k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  7.04k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  7.04k|    static_assert(
 5886|  7.04k|        scannable,
 5887|  7.04k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  7.04k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  7.04k|    return arg_value{arg};
 5891|  7.04k|}
_ZN3scn2v46detail9arg_valueC2IcEERT_:
 5645|  7.04k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  7.04k|    {
 5647|  7.04k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEptEv:
 1828|  7.31k|    {
 1829|  7.31k|        return &value();
 1830|  7.31k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  7.31k|    {
 1783|  7.31k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.31k|        return this->get_value();
 1785|  7.31k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJcEE6valuesEv:
 6475|  7.04k|    {
 6476|  7.04k|        return m_values;
 6477|  7.04k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJcEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|  63.3k|        : m_desc(desc), m_builtin_values(data)
 6274|  63.3k|    {
 6275|  63.3k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|  63.3k|{
 8532|  63.3k|    return s;
 8533|  63.3k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|  63.3k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v44scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSG_16buffer_range_tagEcEEEE:
 9672|  31.6k|{
 9673|  31.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  31.6k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9607|  31.6k|{
 9608|  31.6k|#if !SCN_DISABLE_LOCALE
 9609|  31.6k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  31.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  31.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  31.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  31.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 30.3k, False: 1.36k]
  |  |  ------------------
  ------------------
 9616|  30.3k|        return unexpected(result.error());
 9617|  30.3k|    }
 9618|  1.36k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  31.6k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  441|  7.04k|        : m_value(T{}), m_has_value(true)
  442|  7.04k|    {
  443|  7.04k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJiEEC2Ev:
 6466|  21.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.04k, False: 0]
  |  |  ------------------
  ------------------
 9835|  7.04k|        out = unexpected(in.error());
 9836|  7.04k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  7.04k|        : base(unexpect, std::move(e.error())),
 1630|  7.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  7.04k|    {
 1632|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  7.04k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  7.04k|          m_has_value(false)
  466|  7.04k|    {
  467|  7.04k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  7.04k|    {
 1330|  7.04k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1570|  7.04k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  916|  7.04k|    {
  917|  7.04k|        assign_common(std::move(other));
  918|  7.04k|        return *this;
  919|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  7.04k|    {
  964|  7.04k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 7.04k, False: 0]
  ------------------
  965|  7.04k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 7.04k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  7.04k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  7.04k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  21.1k|    {
  505|  21.1k|        return m_has_value;
  506|  21.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.04k|    {
  471|  7.04k|        return m_value;
  472|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  7.04k|    {
 1060|  7.04k|        this->destroy_value();
 1061|  7.04k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  7.04k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  7.04k|    {
  519|  7.04k|        scn::detail::construct_at(&get_unexpected(),
  520|  7.04k|                                  std::forward<Args>(args)...);
  521|  7.04k|        m_has_value = false;
  522|  7.04k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.04k|    {
  488|  7.04k|        return m_unexpected;
  489|  7.04k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  7.04k|    {
  496|  7.04k|        return std::move(m_unexpected);
  497|  7.04k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJiEEEbv:
 5910|  21.1k|{
 5911|  21.1k|    constexpr bool default_constructible_constraint =
 5912|  21.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  21.1k|    static_assert(default_constructible_constraint,
 5914|  21.1k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  21.1k|    constexpr bool destructible_constraint =
 5917|  21.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  21.1k|    static_assert(destructible_constraint,
 5919|  21.1k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  21.1k|    constexpr bool non_reference_constraint =
 5922|  21.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  21.1k|    static_assert(non_reference_constraint,
 5924|  21.1k|                  "Scan argument types must not be references");
 5925|       |
 5926|  21.1k|    constexpr bool movable_constraint =
 5927|  21.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  21.1k|    static_assert(movable_constraint,
 5929|  21.1k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  21.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  21.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  21.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEEC2ERNSt3__15tupleIJiEEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE3EivEEPvRT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEiEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERi:
 5702|  7.04k|    {                                                                        \
 5703|  7.04k|        return val;                                                          \
 5704|  7.04k|    }
_ZN3scn2v46detail15make_value_implIiRiEEDaOT0_:
 5864|  21.1k|{
 5865|  21.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  21.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  21.1k|    constexpr bool scannable_char =
 5869|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  21.1k|    static_assert(scannable_char,
 5871|  21.1k|                  "Cannot scan an argument of an unsupported character "
 5872|  21.1k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  21.1k|    constexpr bool scannable_const =
 5875|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  21.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  21.1k|    constexpr bool scannable_disabled =
 5879|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  21.1k|    static_assert(scannable_disabled,
 5881|  21.1k|                  "Cannot scan an argument that has been disabled by "
 5882|  21.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  21.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  21.1k|    static_assert(
 5886|  21.1k|        scannable,
 5887|  21.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  21.1k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  21.1k|    return arg_value{arg};
 5891|  21.1k|}
_ZN3scn2v46detail9arg_valueC2IiEERT_:
 5645|  21.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  21.1k|    {
 5647|  21.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1828|  7.04k|    {
 1829|  7.04k|        return &value();
 1830|  7.04k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  7.04k|    {
 1783|  7.04k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.04k|        return this->get_value();
 1785|  7.04k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJiEE6valuesEv:
 6475|  21.1k|    {
 6476|  21.1k|        return m_values;
 6477|  21.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  441|  7.04k|        : m_value(T{}), m_has_value(true)
  442|  7.04k|    {
  443|  7.04k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJjEEC2Ev:
 6466|  21.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.04k, False: 0]
  |  |  ------------------
  ------------------
 9835|  7.04k|        out = unexpected(in.error());
 9836|  7.04k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  7.04k|        : base(unexpect, std::move(e.error())),
 1630|  7.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  7.04k|    {
 1632|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  7.04k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  7.04k|          m_has_value(false)
  466|  7.04k|    {
  467|  7.04k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  7.04k|    {
 1330|  7.04k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1570|  7.04k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  916|  7.04k|    {
  917|  7.04k|        assign_common(std::move(other));
  918|  7.04k|        return *this;
  919|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  7.04k|    {
  964|  7.04k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 7.04k, False: 0]
  ------------------
  965|  7.04k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 7.04k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  7.04k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  7.04k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  21.1k|    {
  505|  21.1k|        return m_has_value;
  506|  21.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.04k|    {
  471|  7.04k|        return m_value;
  472|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  7.04k|    {
 1060|  7.04k|        this->destroy_value();
 1061|  7.04k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  7.04k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  7.04k|    {
  519|  7.04k|        scn::detail::construct_at(&get_unexpected(),
  520|  7.04k|                                  std::forward<Args>(args)...);
  521|  7.04k|        m_has_value = false;
  522|  7.04k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.04k|    {
  488|  7.04k|        return m_unexpected;
  489|  7.04k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  7.04k|    {
  496|  7.04k|        return std::move(m_unexpected);
  497|  7.04k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJjEEEbv:
 5910|  21.1k|{
 5911|  21.1k|    constexpr bool default_constructible_constraint =
 5912|  21.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  21.1k|    static_assert(default_constructible_constraint,
 5914|  21.1k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  21.1k|    constexpr bool destructible_constraint =
 5917|  21.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  21.1k|    static_assert(destructible_constraint,
 5919|  21.1k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  21.1k|    constexpr bool non_reference_constraint =
 5922|  21.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  21.1k|    static_assert(non_reference_constraint,
 5924|  21.1k|                  "Scan argument types must not be references");
 5925|       |
 5926|  21.1k|    constexpr bool movable_constraint =
 5927|  21.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  21.1k|    static_assert(movable_constraint,
 5929|  21.1k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  21.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  21.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  21.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEEC2ERNSt3__15tupleIJjEEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE9EjvEEPvRT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEjEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERj:
 5702|  7.04k|    {                                                                        \
 5703|  7.04k|        return val;                                                          \
 5704|  7.04k|    }
_ZN3scn2v46detail15make_value_implIjRjEEDaOT0_:
 5864|  21.1k|{
 5865|  21.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  21.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  21.1k|    constexpr bool scannable_char =
 5869|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  21.1k|    static_assert(scannable_char,
 5871|  21.1k|                  "Cannot scan an argument of an unsupported character "
 5872|  21.1k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  21.1k|    constexpr bool scannable_const =
 5875|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  21.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  21.1k|    constexpr bool scannable_disabled =
 5879|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  21.1k|    static_assert(scannable_disabled,
 5881|  21.1k|                  "Cannot scan an argument that has been disabled by "
 5882|  21.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  21.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  21.1k|    static_assert(
 5886|  21.1k|        scannable,
 5887|  21.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  21.1k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  21.1k|    return arg_value{arg};
 5891|  21.1k|}
_ZN3scn2v46detail9arg_valueC2IjEERT_:
 5645|  21.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  21.1k|    {
 5647|  21.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1828|  7.04k|    {
 1829|  7.04k|        return &value();
 1830|  7.04k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  7.04k|    {
 1783|  7.04k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.04k|        return this->get_value();
 1785|  7.04k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJjEE6valuesEv:
 6475|  21.1k|    {
 6476|  21.1k|        return m_values;
 6477|  21.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|  7.04k|        : m_value(T{}), m_has_value(true)
  442|  7.04k|    {
  443|  7.04k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6466|  21.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.04k, False: 0]
  |  |  ------------------
  ------------------
 9835|  7.04k|        out = unexpected(in.error());
 9836|  7.04k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  7.04k|        : base(unexpect, std::move(e.error())),
 1630|  7.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  7.04k|    {
 1632|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  7.04k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  7.04k|          m_has_value(false)
  466|  7.04k|    {
  467|  7.04k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  7.04k|    {
 1330|  7.04k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  7.04k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  7.04k|    {
  917|  7.04k|        assign_common(std::move(other));
  918|  7.04k|        return *this;
  919|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  7.04k|    {
  964|  7.04k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 7.04k, False: 0]
  ------------------
  965|  7.04k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 7.04k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  7.04k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  7.04k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  21.1k|    {
  505|  21.1k|        return m_has_value;
  506|  21.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.04k|    {
  471|  7.04k|        return m_value;
  472|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  7.04k|    {
 1060|  7.04k|        this->destroy_value();
 1061|  7.04k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  7.04k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  7.04k|    {
  519|  7.04k|        scn::detail::construct_at(&get_unexpected(),
  520|  7.04k|                                  std::forward<Args>(args)...);
  521|  7.04k|        m_has_value = false;
  522|  7.04k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.04k|    {
  488|  7.04k|        return m_unexpected;
  489|  7.04k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  7.04k|    {
  496|  7.04k|        return std::move(m_unexpected);
  497|  7.04k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5910|  21.1k|{
 5911|  21.1k|    constexpr bool default_constructible_constraint =
 5912|  21.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  21.1k|    static_assert(default_constructible_constraint,
 5914|  21.1k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  21.1k|    constexpr bool destructible_constraint =
 5917|  21.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  21.1k|    static_assert(destructible_constraint,
 5919|  21.1k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  21.1k|    constexpr bool non_reference_constraint =
 5922|  21.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  21.1k|    static_assert(non_reference_constraint,
 5924|  21.1k|                  "Scan argument types must not be references");
 5925|       |
 5926|  21.1k|    constexpr bool movable_constraint =
 5927|  21.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  21.1k|    static_assert(movable_constraint,
 5929|  21.1k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  21.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  21.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  21.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5702|  7.04k|    {                                                                        \
 5703|  7.04k|        return val;                                                          \
 5704|  7.04k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5864|  21.1k|{
 5865|  21.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  21.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  21.1k|    constexpr bool scannable_char =
 5869|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  21.1k|    static_assert(scannable_char,
 5871|  21.1k|                  "Cannot scan an argument of an unsupported character "
 5872|  21.1k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  21.1k|    constexpr bool scannable_const =
 5875|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  21.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  21.1k|    constexpr bool scannable_disabled =
 5879|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  21.1k|    static_assert(scannable_disabled,
 5881|  21.1k|                  "Cannot scan an argument that has been disabled by "
 5882|  21.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  21.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  21.1k|    static_assert(
 5886|  21.1k|        scannable,
 5887|  21.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  21.1k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  21.1k|    return arg_value{arg};
 5891|  21.1k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5645|  21.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  21.1k|    {
 5647|  21.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|  7.04k|    {
 1829|  7.04k|        return &value();
 1830|  7.04k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  7.04k|    {
 1783|  7.04k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.04k|        return this->get_value();
 1785|  7.04k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6475|  21.1k|    {
 6476|  21.1k|        return m_values;
 6477|  21.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  441|  7.04k|        : m_value(T{}), m_has_value(true)
  442|  7.04k|    {
  443|  7.04k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJbEEC2Ev:
 6466|  21.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.04k, False: 0]
  |  |  ------------------
  ------------------
 9835|  7.04k|        out = unexpected(in.error());
 9836|  7.04k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  7.04k|        : base(unexpect, std::move(e.error())),
 1630|  7.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  7.04k|    {
 1632|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  7.04k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  7.04k|          m_has_value(false)
  466|  7.04k|    {
  467|  7.04k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  7.04k|    {
 1330|  7.04k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1570|  7.04k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  916|  7.04k|    {
  917|  7.04k|        assign_common(std::move(other));
  918|  7.04k|        return *this;
  919|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  7.04k|    {
  964|  7.04k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 7.04k, False: 0]
  ------------------
  965|  7.04k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 7.04k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  7.04k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  7.04k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  21.1k|    {
  505|  21.1k|        return m_has_value;
  506|  21.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.04k|    {
  471|  7.04k|        return m_value;
  472|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  7.04k|    {
 1060|  7.04k|        this->destroy_value();
 1061|  7.04k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  7.04k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  7.04k|    {
  519|  7.04k|        scn::detail::construct_at(&get_unexpected(),
  520|  7.04k|                                  std::forward<Args>(args)...);
  521|  7.04k|        m_has_value = false;
  522|  7.04k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.04k|    {
  488|  7.04k|        return m_unexpected;
  489|  7.04k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  7.04k|    {
  496|  7.04k|        return std::move(m_unexpected);
  497|  7.04k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJbEEEbv:
 5910|  21.1k|{
 5911|  21.1k|    constexpr bool default_constructible_constraint =
 5912|  21.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  21.1k|    static_assert(default_constructible_constraint,
 5914|  21.1k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  21.1k|    constexpr bool destructible_constraint =
 5917|  21.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  21.1k|    static_assert(destructible_constraint,
 5919|  21.1k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  21.1k|    constexpr bool non_reference_constraint =
 5922|  21.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  21.1k|    static_assert(non_reference_constraint,
 5924|  21.1k|                  "Scan argument types must not be references");
 5925|       |
 5926|  21.1k|    constexpr bool movable_constraint =
 5927|  21.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  21.1k|    static_assert(movable_constraint,
 5929|  21.1k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  21.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  21.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  21.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEEC2ERNSt3__15tupleIJbEEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE13EbvEEPvRT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEbEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERb:
 5702|  7.04k|    {                                                                        \
 5703|  7.04k|        return val;                                                          \
 5704|  7.04k|    }
_ZN3scn2v46detail15make_value_implIbRbEEDaOT0_:
 5864|  21.1k|{
 5865|  21.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  21.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  21.1k|    constexpr bool scannable_char =
 5869|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  21.1k|    static_assert(scannable_char,
 5871|  21.1k|                  "Cannot scan an argument of an unsupported character "
 5872|  21.1k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  21.1k|    constexpr bool scannable_const =
 5875|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  21.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  21.1k|    constexpr bool scannable_disabled =
 5879|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  21.1k|    static_assert(scannable_disabled,
 5881|  21.1k|                  "Cannot scan an argument that has been disabled by "
 5882|  21.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  21.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  21.1k|    static_assert(
 5886|  21.1k|        scannable,
 5887|  21.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  21.1k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  21.1k|    return arg_value{arg};
 5891|  21.1k|}
_ZN3scn2v46detail9arg_valueC2IbEERT_:
 5645|  21.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  21.1k|    {
 5647|  21.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEptEv:
 1828|  7.04k|    {
 1829|  7.04k|        return &value();
 1830|  7.04k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  7.04k|    {
 1783|  7.04k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.04k|        return this->get_value();
 1785|  7.04k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJbEE6valuesEv:
 6475|  21.1k|    {
 6476|  21.1k|        return m_values;
 6477|  21.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  441|  7.04k|        : m_value(T{}), m_has_value(true)
  442|  7.04k|    {
  443|  7.04k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJPvEEC2Ev:
 6466|  21.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.04k, False: 0]
  |  |  ------------------
  ------------------
 9835|  7.04k|        out = unexpected(in.error());
 9836|  7.04k|    }
 9837|      0|    else {
 9838|      0|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|      0|    }
 9840|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1629|  7.04k|        : base(unexpect, std::move(e.error())),
 1630|  7.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  7.04k|    {
 1632|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  464|  7.04k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  7.04k|          m_has_value(false)
  466|  7.04k|    {
  467|  7.04k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  7.04k|    {
 1330|  7.04k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1570|  7.04k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  916|  7.04k|    {
  917|  7.04k|        assign_common(std::move(other));
  918|  7.04k|        return *this;
  919|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  7.04k|    {
  964|  7.04k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 7.04k, False: 0]
  ------------------
  965|  7.04k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 7.04k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  7.04k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  7.04k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  21.1k|    {
  505|  21.1k|        return m_has_value;
  506|  21.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.04k|    {
  471|  7.04k|        return m_value;
  472|  7.04k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  7.04k|    {
 1060|  7.04k|        this->destroy_value();
 1061|  7.04k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  7.04k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  518|  7.04k|    {
  519|  7.04k|        scn::detail::construct_at(&get_unexpected(),
  520|  7.04k|                                  std::forward<Args>(args)...);
  521|  7.04k|        m_has_value = false;
  522|  7.04k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.04k|    {
  488|  7.04k|        return m_unexpected;
  489|  7.04k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  7.04k|    {
  496|  7.04k|        return std::move(m_unexpected);
  497|  7.04k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJPvEEEbv:
 5910|  21.1k|{
 5911|  21.1k|    constexpr bool default_constructible_constraint =
 5912|  21.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  21.1k|    static_assert(default_constructible_constraint,
 5914|  21.1k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  21.1k|    constexpr bool destructible_constraint =
 5917|  21.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  21.1k|    static_assert(destructible_constraint,
 5919|  21.1k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  21.1k|    constexpr bool non_reference_constraint =
 5922|  21.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  21.1k|    static_assert(non_reference_constraint,
 5924|  21.1k|                  "Scan argument types must not be references");
 5925|       |
 5926|  21.1k|    constexpr bool movable_constraint =
 5927|  21.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  21.1k|    static_assert(movable_constraint,
 5929|  21.1k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  21.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  21.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  21.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EPvvEES8_RT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEPvEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERPv:
 5702|  7.04k|    {                                                                        \
 5703|  7.04k|        return val;                                                          \
 5704|  7.04k|    }
_ZN3scn2v46detail15make_value_implIPvRS3_EEDaOT0_:
 5864|  21.1k|{
 5865|  21.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  21.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  21.1k|    constexpr bool scannable_char =
 5869|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  21.1k|    static_assert(scannable_char,
 5871|  21.1k|                  "Cannot scan an argument of an unsupported character "
 5872|  21.1k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  21.1k|    constexpr bool scannable_const =
 5875|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  21.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  21.1k|    constexpr bool scannable_disabled =
 5879|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  21.1k|    static_assert(scannable_disabled,
 5881|  21.1k|                  "Cannot scan an argument that has been disabled by "
 5882|  21.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  21.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  21.1k|    static_assert(
 5886|  21.1k|        scannable,
 5887|  21.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  21.1k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  21.1k|    return arg_value{arg};
 5891|  21.1k|}
_ZN3scn2v46detail9arg_valueC2IPvEERT_:
 5645|  21.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  21.1k|    {
 5647|  21.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEptEv:
 1828|  7.04k|    {
 1829|  7.04k|        return &value();
 1830|  7.04k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1782|  7.04k|    {
 1783|  7.04k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.04k|        return this->get_value();
 1785|  7.04k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJPvEE6valuesEv:
 6475|  21.1k|    {
 6476|  21.1k|        return m_values;
 6477|  21.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|  7.04k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  7.04k|    {
  628|  7.04k|        construct();
  629|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  7.04k|    {
  709|  7.04k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  7.04k|        m_has_value = true;
  711|  7.04k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  410|  7.04k|{
  411|  7.04k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  7.04k|        T(std::forward<Args>(args)...);
  413|  7.04k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6466|  21.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  21.9k|    {
  733|  21.9k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  21.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  21.9k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.22k, False: 820]
  |  |  ------------------
  ------------------
 9835|  6.22k|        out = unexpected(in.error());
 9836|  6.22k|    }
 9837|    820|    else {
 9838|    820|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    820|    static_cast<    \
  |  | 1109|    820|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    820|    }
 9840|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  6.22k|        : base(unexpect, std::move(e.error())),
 1630|  6.22k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.22k|    {
 1632|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  6.22k|        : m_has_value(false)
  652|  6.22k|    {
  653|  6.22k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  6.22k|    {
  716|  6.22k|        scn::detail::construct_at(unexpected_ptr(),
  717|  6.22k|                                  std::forward<Args>(args)...);
  718|  6.22k|        m_has_value = false;
  719|  6.22k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  410|  39.5k|{
  411|  39.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  39.5k|        T(std::forward<Args>(args)...);
  413|  39.5k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  31.1k|    {
  745|  31.1k|        return reinterpret_cast<unexpected<E>*>(
  746|  31.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  31.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  31.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.22k|    {
 1330|  6.22k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  6.22k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  6.22k|    {
  917|  6.22k|        assign_common(std::move(other));
  918|  6.22k|        return *this;
  919|  6.22k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  6.22k|    {
  964|  6.22k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.22k, False: 0]
  ------------------
  965|  6.22k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.22k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.22k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.22k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  33.5k|    {
  702|  33.5k|        return m_has_value;
  703|  33.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  7.86k|    {
  668|  7.86k|        return *value_ptr();
  669|  7.86k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  6.22k|    {
 1060|  6.22k|        this->destroy_value();
 1061|  6.22k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  7.04k|    {
  723|  7.04k|        scn::detail::destroy_at(value_ptr());
  724|  7.04k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  416|  7.04k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  7.04k|    else {
  423|  7.04k|        p->~T();
  424|  7.04k|    }
  425|  7.04k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6699|  7.04k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  6.22k|    {
  716|  6.22k|        scn::detail::construct_at(unexpected_ptr(),
  717|  6.22k|                                  std::forward<Args>(args)...);
  718|  6.22k|        m_has_value = false;
  719|  6.22k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  6.22k|    {
  693|  6.22k|        return std::move(*unexpected_ptr());
  694|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  12.4k|    {
  727|  12.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  12.4k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  416|  79.0k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  79.0k|    else {
  423|  79.0k|        p->~T();
  424|  79.0k|    }
  425|  79.0k|}
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5910|  21.1k|{
 5911|  21.1k|    constexpr bool default_constructible_constraint =
 5912|  21.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  21.1k|    static_assert(default_constructible_constraint,
 5914|  21.1k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  21.1k|    constexpr bool destructible_constraint =
 5917|  21.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  21.1k|    static_assert(destructible_constraint,
 5919|  21.1k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  21.1k|    constexpr bool non_reference_constraint =
 5922|  21.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  21.1k|    static_assert(non_reference_constraint,
 5924|  21.1k|                  "Scan argument types must not be references");
 5925|       |
 5926|  21.1k|    constexpr bool movable_constraint =
 5927|  21.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  21.1k|    static_assert(movable_constraint,
 5929|  21.1k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  21.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  21.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  21.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5702|  7.04k|    {                                                                        \
 5703|  7.04k|        return val;                                                          \
 5704|  7.04k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5864|  21.1k|{
 5865|  21.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  21.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  21.1k|    constexpr bool scannable_char =
 5869|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  21.1k|    static_assert(scannable_char,
 5871|  21.1k|                  "Cannot scan an argument of an unsupported character "
 5872|  21.1k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  21.1k|    constexpr bool scannable_const =
 5875|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  21.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  21.1k|    constexpr bool scannable_disabled =
 5879|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  21.1k|    static_assert(scannable_disabled,
 5881|  21.1k|                  "Cannot scan an argument that has been disabled by "
 5882|  21.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  21.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  21.1k|    static_assert(
 5886|  21.1k|        scannable,
 5887|  21.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  21.1k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  21.1k|    return arg_value{arg};
 5891|  21.1k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5645|  21.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  21.1k|    {
 5647|  21.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1828|  7.86k|    {
 1829|  7.86k|        return &value();
 1830|  7.86k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  7.86k|    {
 1783|  7.86k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.86k|        return this->get_value();
 1785|  7.86k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6475|  21.1k|    {
 6476|  21.1k|        return m_values;
 6477|  21.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  13.2k|    {
  658|  13.2k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 820, False: 12.4k]
  ------------------
  659|    820|            destroy_value();
  660|    820|        }
  661|  12.4k|        else {
  662|  12.4k|            destroy_unexpected();
  663|  12.4k|        }
  664|  13.2k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|  7.04k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  7.04k|    {
  628|  7.04k|        construct();
  629|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  7.04k|    {
  709|  7.04k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  7.04k|        m_has_value = true;
  711|  7.04k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  410|  7.04k|{
  411|  7.04k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  7.04k|        T(std::forward<Args>(args)...);
  413|  7.04k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6466|  21.1k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  21.9k|    {
  733|  21.9k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  21.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  21.9k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.22k, False: 820]
  |  |  ------------------
  ------------------
 9835|  6.22k|        out = unexpected(in.error());
 9836|  6.22k|    }
 9837|    820|    else {
 9838|    820|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    820|    static_cast<    \
  |  | 1109|    820|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    820|    }
 9840|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  6.22k|        : base(unexpect, std::move(e.error())),
 1630|  6.22k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.22k|    {
 1632|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  6.22k|        : m_has_value(false)
  652|  6.22k|    {
  653|  6.22k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  6.22k|    {
  716|  6.22k|        scn::detail::construct_at(unexpected_ptr(),
  717|  6.22k|                                  std::forward<Args>(args)...);
  718|  6.22k|        m_has_value = false;
  719|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  31.1k|    {
  745|  31.1k|        return reinterpret_cast<unexpected<E>*>(
  746|  31.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  31.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  31.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.22k|    {
 1330|  6.22k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  6.22k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  6.22k|    {
  917|  6.22k|        assign_common(std::move(other));
  918|  6.22k|        return *this;
  919|  6.22k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  6.22k|    {
  964|  6.22k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.22k, False: 0]
  ------------------
  965|  6.22k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.22k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.22k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.22k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  33.5k|    {
  702|  33.5k|        return m_has_value;
  703|  33.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  7.86k|    {
  668|  7.86k|        return *value_ptr();
  669|  7.86k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  6.22k|    {
 1060|  6.22k|        this->destroy_value();
 1061|  6.22k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  7.04k|    {
  723|  7.04k|        scn::detail::destroy_at(value_ptr());
  724|  7.04k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  416|  7.04k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  7.04k|    else {
  423|  7.04k|        p->~T();
  424|  7.04k|    }
  425|  7.04k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6699|  7.04k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  6.22k|    {
  716|  6.22k|        scn::detail::construct_at(unexpected_ptr(),
  717|  6.22k|                                  std::forward<Args>(args)...);
  718|  6.22k|        m_has_value = false;
  719|  6.22k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  6.22k|    {
  693|  6.22k|        return std::move(*unexpected_ptr());
  694|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  12.4k|    {
  727|  12.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  12.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5910|  21.1k|{
 5911|  21.1k|    constexpr bool default_constructible_constraint =
 5912|  21.1k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  21.1k|    static_assert(default_constructible_constraint,
 5914|  21.1k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  21.1k|    constexpr bool destructible_constraint =
 5917|  21.1k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  21.1k|    static_assert(destructible_constraint,
 5919|  21.1k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  21.1k|    constexpr bool non_reference_constraint =
 5922|  21.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  21.1k|    static_assert(non_reference_constraint,
 5924|  21.1k|                  "Scan argument types must not be references");
 5925|       |
 5926|  21.1k|    constexpr bool movable_constraint =
 5927|  21.1k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  21.1k|    static_assert(movable_constraint,
 5929|  21.1k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  21.1k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  21.1k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  21.1k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5702|  7.04k|    {                                                                        \
 5703|  7.04k|        return val;                                                          \
 5704|  7.04k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5864|  21.1k|{
 5865|  21.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  21.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  21.1k|    constexpr bool scannable_char =
 5869|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  21.1k|    static_assert(scannable_char,
 5871|  21.1k|                  "Cannot scan an argument of an unsupported character "
 5872|  21.1k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  21.1k|    constexpr bool scannable_const =
 5875|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  21.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  21.1k|    constexpr bool scannable_disabled =
 5879|  21.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  21.1k|    static_assert(scannable_disabled,
 5881|  21.1k|                  "Cannot scan an argument that has been disabled by "
 5882|  21.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  21.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  21.1k|    static_assert(
 5886|  21.1k|        scannable,
 5887|  21.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  21.1k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  21.1k|    return arg_value{arg};
 5891|  21.1k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5645|  21.1k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  21.1k|    {
 5647|  21.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  7.86k|    {
 1829|  7.86k|        return &value();
 1830|  7.86k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  7.86k|    {
 1783|  7.86k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.86k|        return this->get_value();
 1785|  7.86k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6475|  21.1k|    {
 6476|  21.1k|        return m_values;
 6477|  21.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  13.2k|    {
  658|  13.2k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 820, False: 12.4k]
  ------------------
  659|    820|            destroy_value();
  660|    820|        }
  661|  12.4k|        else {
  662|  12.4k|            destroy_unexpected();
  663|  12.4k|        }
  664|  13.2k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 9892|  3.52k|{
 9893|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9894|  3.52k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  3.52k|                                   make_scan_args(result->values())));
 9896|  3.52k|    return result;
 9897|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEEDav:
 9848|  7.04k|{
 9849|  7.04k|    return scan_result_type<Source, Args...>();
 9850|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  7.04k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  441|  7.04k|        : m_value(T{}), m_has_value(true)
  442|  7.04k|    {
  443|  7.04k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6692|  7.04k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6466|  7.04k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9833|  7.04k|{
 9834|  7.04k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  7.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.22k, False: 820]
  |  |  ------------------
  ------------------
 9835|  6.22k|        out = unexpected(in.error());
 9836|  6.22k|    }
 9837|    820|    else {
 9838|    820|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    820|    static_cast<    \
  |  | 1109|    820|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    820|    }
 9840|  7.04k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  6.22k|        : base(unexpect, std::move(e.error())),
 1630|  6.22k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.22k|    {
 1632|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  464|  6.22k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.22k|          m_has_value(false)
  466|  6.22k|    {
  467|  6.22k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.22k|    {
 1330|  6.22k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1570|  6.22k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  916|  6.22k|    {
  917|  6.22k|        assign_common(std::move(other));
  918|  6.22k|        return *this;
  919|  6.22k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  963|  6.22k|    {
  964|  6.22k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 6.22k, False: 0]
  ------------------
  965|  6.22k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 6.22k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  6.22k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  6.22k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  20.3k|    {
  505|  20.3k|        return m_has_value;
  506|  20.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.86k|    {
  471|  7.86k|        return m_value;
  472|  7.86k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1059|  6.22k|    {
 1060|  6.22k|        this->destroy_value();
 1061|  6.22k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  6.22k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  6.22k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  518|  6.22k|    {
  519|  6.22k|        scn::detail::construct_at(&get_unexpected(),
  520|  6.22k|                                  std::forward<Args>(args)...);
  521|  6.22k|        m_has_value = false;
  522|  6.22k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  6.22k|    {
  488|  6.22k|        return m_unexpected;
  489|  6.22k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  6.22k|    {
  496|  6.22k|        return std::move(m_unexpected);
  497|  6.22k|    }
_ZNK3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 8854|  7.04k|    {
 8855|  7.04k|        return m_str;
 8856|  7.04k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  7.04k|{
 6196|  7.04k|    detail::check_scan_arg_types<Args...>();
 6197|  7.04k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  7.04k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5910|  7.04k|{
 5911|  7.04k|    constexpr bool default_constructible_constraint =
 5912|  7.04k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  7.04k|    static_assert(default_constructible_constraint,
 5914|  7.04k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  7.04k|    constexpr bool destructible_constraint =
 5917|  7.04k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  7.04k|    static_assert(destructible_constraint,
 5919|  7.04k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  7.04k|    constexpr bool non_reference_constraint =
 5922|  7.04k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  7.04k|    static_assert(non_reference_constraint,
 5924|  7.04k|                  "Scan argument types must not be references");
 5925|       |
 5926|  7.04k|    constexpr bool movable_constraint =
 5927|  7.04k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  7.04k|    static_assert(movable_constraint,
 5929|  7.04k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  7.04k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  7.04k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  7.04k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6171|  7.04k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  7.04k|    {
 6173|  7.04k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  7.04k|    {
 6181|  7.04k|        return {detail::make_arg<
 6182|  7.04k|            kind, Context,
 6183|  7.04k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  7.04k|                                 typename Context::char_type>::value>(args)...};
 6185|  7.04k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE26ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5960|  7.04k|{
 5961|  7.04k|    return make_value<Context>(value).ref_value;
 5962|  7.04k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5895|  7.04k|{
 5896|  7.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  7.04k|                                  needs_context_tag>) {
 5900|  7.04k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  7.04k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5702|  7.04k|    {                                                                        \
 5703|  7.04k|        return val;                                                          \
 5704|  7.04k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5864|  7.04k|{
 5865|  7.04k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  7.04k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  7.04k|    constexpr bool scannable_char =
 5869|  7.04k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  7.04k|    static_assert(scannable_char,
 5871|  7.04k|                  "Cannot scan an argument of an unsupported character "
 5872|  7.04k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  7.04k|    constexpr bool scannable_const =
 5875|  7.04k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  7.04k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  7.04k|    constexpr bool scannable_disabled =
 5879|  7.04k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  7.04k|    static_assert(scannable_disabled,
 5881|  7.04k|                  "Cannot scan an argument that has been disabled by "
 5882|  7.04k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  7.04k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  7.04k|    static_assert(
 5886|  7.04k|        scannable,
 5887|  7.04k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  7.04k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  7.04k|    return arg_value{arg};
 5891|  7.04k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5645|  7.04k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  7.04k|    {
 5647|  7.04k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1828|  7.86k|    {
 1829|  7.86k|        return &value();
 1830|  7.86k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|  7.86k|    {
 1783|  7.86k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.86k|        return this->get_value();
 1785|  7.86k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6475|  7.04k|    {
 6476|  7.04k|        return m_values;
 6477|  7.04k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  7.04k|        : basic_scan_args(store.desc, store.args.data())
 6222|  7.04k|    {
 6223|  7.04k|    }
_ZN3scn2v424basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  7.04k|        : m_str(r.str)
 8850|  7.04k|    {
 8851|  7.04k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 9961|  3.52k|{
 9962|  3.52k|    auto result = make_scan_result<Source, Args...>();
 9963|  3.52k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  3.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  3.52k|                                   make_scan_args(result->values())));
 9965|  3.52k|    return result;
 9966|  3.52k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2Ev:
  441|  14.0k|        : m_value(T{}), m_has_value(true)
  442|  14.0k|    {
  443|  14.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|   126k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|   126k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJwEEC2Ev:
 6466|  14.0k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.8k, False: 268]
  |  |  ------------------
  ------------------
 9835|  13.8k|        out = unexpected(in.error());
 9836|  13.8k|    }
 9837|    268|    else {
 9838|    268|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    268|    static_cast<    \
  |  | 1109|    268|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    268|    }
 9840|  14.0k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|   126k|    {
 1754|   126k|        return has_value();
 1755|   126k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   253k|    {
  505|   253k|        return m_has_value;
  506|   253k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|   124k|    {
 1760|   124k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   124k|        return this->get_unexpected().error();
 1762|   124k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   124k|    {
  488|   124k|        return m_unexpected;
  489|   124k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  13.8k|        : base(unexpect, std::move(e.error())),
 1630|  13.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.8k|    {
 1632|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  13.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.8k|          m_has_value(false)
  466|  13.8k|    {
  467|  13.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.8k|    {
 1330|  13.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEaSEOSC_:
 1570|  13.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvEaSEOSD_:
  916|  13.8k|    {
  917|  13.8k|        assign_common(std::move(other));
  918|  13.8k|        return *this;
  919|  13.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  13.8k|    {
  964|  13.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.8k, False: 0]
  ------------------
  965|  13.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  41.9k|    {
  505|  41.9k|        return m_has_value;
  506|  41.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.3k|    {
  471|  14.3k|        return m_value;
  472|  14.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  13.8k|    {
 1060|  13.8k|        this->destroy_value();
 1061|  13.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  13.8k|    {
  519|  13.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.8k|                                  std::forward<Args>(args)...);
  521|  13.8k|        m_has_value = false;
  522|  13.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.8k|    {
  488|  13.8k|        return m_unexpected;
  489|  13.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.8k|    {
  496|  13.8k|        return std::move(m_unexpected);
  497|  13.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|  2.17k|    {
 6567|  2.17k|        m_range = std::forward<Other>(r);
 6568|  2.17k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  2.17k|    {
 1809|  2.17k|        return value();
 1810|  2.17k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  2.17k|    {
 1783|  2.17k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.17k|        return this->get_value();
 1785|  2.17k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.17k|    {
  471|  2.17k|        return m_value;
  472|  2.17k|    }
_ZN3scn2v46detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESN_EEEE:
 9591|  63.3k|{
 9592|  63.3k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  63.3k|    auto result = vscan_impl(buffer, format, args);
 9595|  63.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.2k, False: 1.08k]
  |  |  ------------------
  ------------------
 9596|  62.2k|        return unexpected(result.error());
 9597|  62.2k|    }
 9598|  1.08k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  63.3k|}
_ZN3scn2v46detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 5398|   126k|{
 5399|   126k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   126k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   126k|                  "\n"
 5403|   126k|                  "Unsupported range type given as input to a scanning "
 5404|   126k|                  "function.\n"
 5405|   126k|                  "A range needs to have a character type (value type) "
 5406|   126k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   126k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   126k|                  "to be included.\n"
 5409|   126k|                  "See the scnlib documentation for more details.");
 5410|   126k|    static_assert(
 5411|   126k|        !std::is_same_v<T, custom_char_traits>,
 5412|   126k|        "\n"
 5413|   126k|        "Unsupported range type given as input to a scanning "
 5414|   126k|        "function.\n"
 5415|   126k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   126k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   126k|        "not supported.");
 5418|   126k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   126k|                  "\n"
 5420|   126k|                  "Unsupported range type given as input to a scanning "
 5421|   126k|                  "function.\n"
 5422|   126k|                  "file_marker_found cannot be used as an "
 5423|   126k|                  "source range type to scn::scan.\n"
 5424|   126k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   126k|                  "and do not provide an explicit source range, "
 5426|   126k|                  "or use scn::scan with a FILE* directly.");
 5427|   126k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   126k|                  "\n"
 5429|   126k|                  "Unsupported range type given as input to a scanning "
 5430|   126k|                  "function.\n"
 5431|   126k|                  "In order to be scannable, a range needs to satisfy "
 5432|   126k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   126k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   126k|                  "\n"
 5435|   126k|                  "Unsupported range type given as input to a scanning "
 5436|   126k|                  "function.\n"
 5437|   126k|                  "A range needs to model forward_range and have a valid "
 5438|   126k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   126k|                  "Examples of scannable ranges are std::string, "
 5440|   126k|                  "std::string_view, "
 5441|   126k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   126k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   126k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   126k|}
_ZN3scn2v46detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 5290|   126k|{
 5291|   126k|    if constexpr (is_valid_char_type<CharT>) {
 5292|   126k|        return r;
 5293|       |        // return make_string_scan_buffer(r);
 5294|       |    }
 5295|       |    else {
 5296|       |        return invalid_char_type{};
 5297|       |    }
 5298|   126k|}
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|   124k|        : base(unexpect, std::move(e.error())),
 1630|   124k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   124k|    {
 1632|   124k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|   124k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   124k|          m_has_value(false)
  466|   124k|    {
  467|   124k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   126k|    {
 1330|   126k|    }
_ZN3scn2v46detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 6796|  2.17k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  2.17k|                      ranges::iterator_t<SourceRange>>) {
 6799|  2.17k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  2.17k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.17k|    {
 2883|  2.17k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.17k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.17k|    {
 2864|  2.17k|        return decay_copy(t.begin());
 2865|  2.17k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|   269k|{
 2108|   269k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   269k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   269k|}
_ZN3scn2v46detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 6783|  2.17k|{
 6784|  2.17k|    return ranges::end(source);
 6785|  2.17k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.17k|    {
 2940|  2.17k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.17k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.17k|    {
 2922|  2.17k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.17k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|   417k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   417k|    static_cast<    \
  |  | 1109|   417k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   417k|    static_cast<    \
  |  | 1109|   417k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   417k|    {
 3480|   417k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  2.17k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.17k|    {
 1586|  2.17k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  2.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.17k|    {
  457|  2.17k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJwEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail20check_scan_arg_typesIJwEEEbv:
 5910|  14.0k|{
 5911|  14.0k|    constexpr bool default_constructible_constraint =
 5912|  14.0k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  14.0k|    static_assert(default_constructible_constraint,
 5914|  14.0k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  14.0k|    constexpr bool destructible_constraint =
 5917|  14.0k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  14.0k|    static_assert(destructible_constraint,
 5919|  14.0k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  14.0k|    constexpr bool non_reference_constraint =
 5922|  14.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  14.0k|    static_assert(non_reference_constraint,
 5924|  14.0k|                  "Scan argument types must not be references");
 5925|       |
 5926|  14.0k|    constexpr bool movable_constraint =
 5927|  14.0k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  14.0k|    static_assert(movable_constraint,
 5929|  14.0k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  14.0k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  14.0k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEEC2ERNSt3__15tupleIJwEEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE15EwvEEPvRT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEwEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERw:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v46detail15make_value_implIwRwEEDaOT0_:
 5864|  14.0k|{
 5865|  14.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  14.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  14.0k|    constexpr bool scannable_char =
 5869|  14.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  14.0k|    static_assert(scannable_char,
 5871|  14.0k|                  "Cannot scan an argument of an unsupported character "
 5872|  14.0k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  14.0k|    constexpr bool scannable_const =
 5875|  14.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  14.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  14.0k|    constexpr bool scannable_disabled =
 5879|  14.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  14.0k|    static_assert(scannable_disabled,
 5881|  14.0k|                  "Cannot scan an argument that has been disabled by "
 5882|  14.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  14.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  14.0k|    static_assert(
 5886|  14.0k|        scannable,
 5887|  14.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  14.0k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  14.0k|    return arg_value{arg};
 5891|  14.0k|}
_ZN3scn2v46detail9arg_valueC2IwEERT_:
 5645|  14.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  14.0k|    {
 5647|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEptEv:
 1828|  14.3k|    {
 1829|  14.3k|        return &value();
 1830|  14.3k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  14.3k|    {
 1783|  14.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.3k|        return this->get_value();
 1785|  14.3k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJwEE6valuesEv:
 6475|  14.0k|    {
 6476|  14.0k|        return m_values;
 6477|  14.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJwEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|   126k|        : m_desc(desc), m_builtin_values(data)
 6274|   126k|    {
 6275|   126k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|   126k|{
 8537|   126k|    return s;
 8538|   126k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|   126k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESR_EEEE:
 9607|  63.3k|{
 9608|  63.3k|#if !SCN_DISABLE_LOCALE
 9609|  63.3k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  63.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  63.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  63.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  63.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 62.2k, False: 1.08k]
  |  |  ------------------
  ------------------
 9616|  62.2k|        return unexpected(result.error());
 9617|  62.2k|    }
 9618|  1.08k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  63.3k|}
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2Ev:
  441|  14.0k|        : m_value(T{}), m_has_value(true)
  442|  14.0k|    {
  443|  14.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.0k, False: 40]
  |  |  ------------------
  ------------------
 9835|  14.0k|        out = unexpected(in.error());
 9836|  14.0k|    }
 9837|     40|    else {
 9838|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     40|    static_cast<    \
  |  | 1109|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     40|    }
 9840|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.0k|        : base(unexpect, std::move(e.error())),
 1630|  14.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.0k|    {
 1632|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.0k|          m_has_value(false)
  466|  14.0k|    {
  467|  14.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.0k|    {
 1330|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.0k|    {
  917|  14.0k|        assign_common(std::move(other));
  918|  14.0k|        return *this;
  919|  14.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.0k|    {
  964|  14.0k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.0k, False: 0]
  ------------------
  965|  14.0k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.0k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.0k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  42.2k|    {
  505|  42.2k|        return m_has_value;
  506|  42.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.1k|    {
  471|  14.1k|        return m_value;
  472|  14.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.0k|    {
 1060|  14.0k|        this->destroy_value();
 1061|  14.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.0k|    {
  519|  14.0k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.0k|                                  std::forward<Args>(args)...);
  521|  14.0k|        m_has_value = false;
  522|  14.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.0k|    {
  488|  14.0k|        return m_unexpected;
  489|  14.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.0k|    {
  496|  14.0k|        return std::move(m_unexpected);
  497|  14.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJiEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEEC2ERNSt3__15tupleIJiEEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE3EivEEPvRT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEiEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERi:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1828|  14.1k|    {
 1829|  14.1k|        return &value();
 1830|  14.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  14.1k|    {
 1783|  14.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.1k|        return this->get_value();
 1785|  14.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJiEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2Ev:
  441|  14.0k|        : m_value(T{}), m_has_value(true)
  442|  14.0k|    {
  443|  14.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.0k, False: 40]
  |  |  ------------------
  ------------------
 9835|  14.0k|        out = unexpected(in.error());
 9836|  14.0k|    }
 9837|     40|    else {
 9838|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     40|    static_cast<    \
  |  | 1109|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     40|    }
 9840|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.0k|        : base(unexpect, std::move(e.error())),
 1630|  14.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.0k|    {
 1632|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.0k|          m_has_value(false)
  466|  14.0k|    {
  467|  14.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.0k|    {
 1330|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.0k|    {
  917|  14.0k|        assign_common(std::move(other));
  918|  14.0k|        return *this;
  919|  14.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.0k|    {
  964|  14.0k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.0k, False: 0]
  ------------------
  965|  14.0k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.0k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.0k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  42.2k|    {
  505|  42.2k|        return m_has_value;
  506|  42.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.1k|    {
  471|  14.1k|        return m_value;
  472|  14.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.0k|    {
 1060|  14.0k|        this->destroy_value();
 1061|  14.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.0k|    {
  519|  14.0k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.0k|                                  std::forward<Args>(args)...);
  521|  14.0k|        m_has_value = false;
  522|  14.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.0k|    {
  488|  14.0k|        return m_unexpected;
  489|  14.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.0k|    {
  496|  14.0k|        return std::move(m_unexpected);
  497|  14.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJjEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEEC2ERNSt3__15tupleIJjEEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE9EjvEEPvRT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEjEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERj:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1828|  14.1k|    {
 1829|  14.1k|        return &value();
 1830|  14.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  14.1k|    {
 1783|  14.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.1k|        return this->get_value();
 1785|  14.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJjEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|  14.0k|        : m_value(T{}), m_has_value(true)
  442|  14.0k|    {
  443|  14.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.0k, False: 42]
  |  |  ------------------
  ------------------
 9835|  14.0k|        out = unexpected(in.error());
 9836|  14.0k|    }
 9837|     42|    else {
 9838|     42|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     42|    static_cast<    \
  |  | 1109|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     42|    }
 9840|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.0k|        : base(unexpect, std::move(e.error())),
 1630|  14.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.0k|    {
 1632|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.0k|          m_has_value(false)
  466|  14.0k|    {
  467|  14.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.0k|    {
 1330|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.0k|    {
  917|  14.0k|        assign_common(std::move(other));
  918|  14.0k|        return *this;
  919|  14.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.0k|    {
  964|  14.0k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.0k, False: 0]
  ------------------
  965|  14.0k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.0k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.0k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  42.1k|    {
  505|  42.1k|        return m_has_value;
  506|  42.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.1k|    {
  471|  14.1k|        return m_value;
  472|  14.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.0k|    {
 1060|  14.0k|        this->destroy_value();
 1061|  14.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.0k|    {
  519|  14.0k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.0k|                                  std::forward<Args>(args)...);
  521|  14.0k|        m_has_value = false;
  522|  14.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.0k|    {
  488|  14.0k|        return m_unexpected;
  489|  14.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.0k|    {
  496|  14.0k|        return std::move(m_unexpected);
  497|  14.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|  14.1k|    {
 1829|  14.1k|        return &value();
 1830|  14.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  14.1k|    {
 1783|  14.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.1k|        return this->get_value();
 1785|  14.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2Ev:
  441|  14.0k|        : m_value(T{}), m_has_value(true)
  442|  14.0k|    {
  443|  14.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.0k, False: 40]
  |  |  ------------------
  ------------------
 9835|  14.0k|        out = unexpected(in.error());
 9836|  14.0k|    }
 9837|     40|    else {
 9838|     40|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     40|    static_cast<    \
  |  | 1109|     40|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     40|    }
 9840|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  14.0k|        : base(unexpect, std::move(e.error())),
 1630|  14.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.0k|    {
 1632|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  14.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.0k|          m_has_value(false)
  466|  14.0k|    {
  467|  14.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.0k|    {
 1330|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEaSEOSC_:
 1570|  14.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvEaSEOSD_:
  916|  14.0k|    {
  917|  14.0k|        assign_common(std::move(other));
  918|  14.0k|        return *this;
  919|  14.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  14.0k|    {
  964|  14.0k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.0k, False: 0]
  ------------------
  965|  14.0k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.0k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.0k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  42.2k|    {
  505|  42.2k|        return m_has_value;
  506|  42.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.1k|    {
  471|  14.1k|        return m_value;
  472|  14.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  14.0k|    {
 1060|  14.0k|        this->destroy_value();
 1061|  14.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  14.0k|    {
  519|  14.0k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.0k|                                  std::forward<Args>(args)...);
  521|  14.0k|        m_has_value = false;
  522|  14.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.0k|    {
  488|  14.0k|        return m_unexpected;
  489|  14.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.0k|    {
  496|  14.0k|        return std::move(m_unexpected);
  497|  14.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJbEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEEC2ERNSt3__15tupleIJbEEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE13EbvEEPvRT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEbEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERb:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEptEv:
 1828|  14.1k|    {
 1829|  14.1k|        return &value();
 1830|  14.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  14.1k|    {
 1783|  14.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.1k|        return this->get_value();
 1785|  14.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJbEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2Ev:
  441|  14.0k|        : m_value(T{}), m_has_value(true)
  442|  14.0k|    {
  443|  14.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELSA_0EEEvRNS0_13scan_expectedISG_EEONSR_ISM_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.0k, False: 18]
  |  |  ------------------
  ------------------
 9835|  14.0k|        out = unexpected(in.error());
 9836|  14.0k|    }
 9837|     18|    else {
 9838|     18|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|     18|    }
 9840|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1629|  14.0k|        : base(unexpect, std::move(e.error())),
 1630|  14.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  14.0k|    {
 1632|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  464|  14.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.0k|          m_has_value(false)
  466|  14.0k|    {
  467|  14.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.0k|    {
 1330|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEaSEOSD_:
 1570|  14.0k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvEaSEOSE_:
  916|  14.0k|    {
  917|  14.0k|        assign_common(std::move(other));
  918|  14.0k|        return *this;
  919|  14.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  14.0k|    {
  964|  14.0k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 14.0k, False: 0]
  ------------------
  965|  14.0k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 14.0k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  14.0k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  14.0k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  42.2k|    {
  505|  42.2k|        return m_has_value;
  506|  42.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.0k|    {
  471|  14.0k|        return m_value;
  472|  14.0k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  14.0k|    {
 1060|  14.0k|        this->destroy_value();
 1061|  14.0k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  14.0k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  518|  14.0k|    {
  519|  14.0k|        scn::detail::construct_at(&get_unexpected(),
  520|  14.0k|                                  std::forward<Args>(args)...);
  521|  14.0k|        m_has_value = false;
  522|  14.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.0k|    {
  488|  14.0k|        return m_unexpected;
  489|  14.0k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  14.0k|    {
  496|  14.0k|        return std::move(m_unexpected);
  497|  14.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJPvEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJPvEE12make_argptrsIJS6_EEENSt3__15arrayIS6_Lm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EPvvEES8_RT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEPvEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERPv:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEptEv:
 1828|  14.0k|    {
 1829|  14.0k|        return &value();
 1830|  14.0k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELSA_0EEERSH_v:
 1782|  14.0k|    {
 1783|  14.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.0k|        return this->get_value();
 1785|  14.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJPvEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|  14.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  14.0k|    {
  628|  14.0k|        construct();
  629|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  14.0k|    {
  709|  14.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  14.0k|        m_has_value = true;
  711|  14.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  410|  14.0k|{
  411|  14.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  14.0k|        T(std::forward<Args>(args)...);
  413|  14.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  42.8k|    {
  733|  42.8k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  42.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  42.8k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.5k, False: 574]
  |  |  ------------------
  ------------------
 9835|  13.5k|        out = unexpected(in.error());
 9836|  13.5k|    }
 9837|    574|    else {
 9838|    574|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    574|    static_cast<    \
  |  | 1109|    574|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    574|    }
 9840|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  13.5k|        : base(unexpect, std::move(e.error())),
 1630|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.5k|    {
 1632|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  13.5k|        : m_has_value(false)
  652|  13.5k|    {
  653|  13.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  13.5k|    {
  716|  13.5k|        scn::detail::construct_at(unexpected_ptr(),
  717|  13.5k|                                  std::forward<Args>(args)...);
  718|  13.5k|        m_has_value = false;
  719|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  67.5k|    {
  745|  67.5k|        return reinterpret_cast<unexpected<E>*>(
  746|  67.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  67.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  67.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.5k|    {
 1330|  13.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  13.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  13.5k|    {
  917|  13.5k|        assign_common(std::move(other));
  918|  13.5k|        return *this;
  919|  13.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  13.5k|    {
  964|  13.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.5k, False: 0]
  ------------------
  965|  13.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  69.2k|    {
  702|  69.2k|        return m_has_value;
  703|  69.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  14.6k|    {
  668|  14.6k|        return *value_ptr();
  669|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  13.5k|    {
 1060|  13.5k|        this->destroy_value();
 1061|  13.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  14.0k|    {
  723|  14.0k|        scn::detail::destroy_at(value_ptr());
  724|  14.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  416|  14.0k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  14.0k|    else {
  423|  14.0k|        p->~T();
  424|  14.0k|    }
  425|  14.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6699|  14.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  13.5k|    {
  716|  13.5k|        scn::detail::construct_at(unexpected_ptr(),
  717|  13.5k|                                  std::forward<Args>(args)...);
  718|  13.5k|        m_has_value = false;
  719|  13.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  13.5k|    {
  693|  13.5k|        return std::move(*unexpected_ptr());
  694|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  27.0k|    {
  727|  27.0k|        scn::detail::destroy_at(unexpected_ptr());
  728|  27.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1828|  14.6k|    {
 1829|  14.6k|        return &value();
 1830|  14.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  14.6k|    {
 1783|  14.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.6k|        return this->get_value();
 1785|  14.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  27.5k|    {
  658|  27.5k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 574, False: 27.0k]
  ------------------
  659|    574|            destroy_value();
  660|    574|        }
  661|  27.0k|        else {
  662|  27.0k|            destroy_unexpected();
  663|  27.0k|        }
  664|  27.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|  14.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  14.0k|    {
  628|  14.0k|        construct();
  629|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  14.0k|    {
  709|  14.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  14.0k|        m_has_value = true;
  711|  14.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  410|  14.0k|{
  411|  14.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  14.0k|        T(std::forward<Args>(args)...);
  413|  14.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  42.8k|    {
  733|  42.8k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  42.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  42.8k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.5k, False: 574]
  |  |  ------------------
  ------------------
 9835|  13.5k|        out = unexpected(in.error());
 9836|  13.5k|    }
 9837|    574|    else {
 9838|    574|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    574|    static_cast<    \
  |  | 1109|    574|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    574|    }
 9840|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  13.5k|        : base(unexpect, std::move(e.error())),
 1630|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.5k|    {
 1632|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  13.5k|        : m_has_value(false)
  652|  13.5k|    {
  653|  13.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  13.5k|    {
  716|  13.5k|        scn::detail::construct_at(unexpected_ptr(),
  717|  13.5k|                                  std::forward<Args>(args)...);
  718|  13.5k|        m_has_value = false;
  719|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  67.5k|    {
  745|  67.5k|        return reinterpret_cast<unexpected<E>*>(
  746|  67.5k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  67.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  67.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.5k|    {
 1330|  13.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  13.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  13.5k|    {
  917|  13.5k|        assign_common(std::move(other));
  918|  13.5k|        return *this;
  919|  13.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  13.5k|    {
  964|  13.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.5k, False: 0]
  ------------------
  965|  13.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  69.2k|    {
  702|  69.2k|        return m_has_value;
  703|  69.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  14.6k|    {
  668|  14.6k|        return *value_ptr();
  669|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  13.5k|    {
 1060|  13.5k|        this->destroy_value();
 1061|  13.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  14.0k|    {
  723|  14.0k|        scn::detail::destroy_at(value_ptr());
  724|  14.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  416|  14.0k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  14.0k|    else {
  423|  14.0k|        p->~T();
  424|  14.0k|    }
  425|  14.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6699|  14.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  13.5k|    {
  716|  13.5k|        scn::detail::construct_at(unexpected_ptr(),
  717|  13.5k|                                  std::forward<Args>(args)...);
  718|  13.5k|        m_has_value = false;
  719|  13.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  13.5k|    {
  693|  13.5k|        return std::move(*unexpected_ptr());
  694|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  27.0k|    {
  727|  27.0k|        scn::detail::destroy_at(unexpected_ptr());
  728|  27.0k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  14.6k|    {
 1829|  14.6k|        return &value();
 1830|  14.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  14.6k|    {
 1783|  14.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.6k|        return this->get_value();
 1785|  14.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|  27.5k|    {
  658|  27.5k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 574, False: 27.0k]
  ------------------
  659|    574|            destroy_value();
  660|    574|        }
  661|  27.0k|        else {
  662|  27.0k|            destroy_unexpected();
  663|  27.0k|        }
  664|  27.5k|    }
_ZN3scn2v416make_scan_resultIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEEDav:
 9848|  14.0k|{
 9849|  14.0k|    return scan_result_type<Source, Args...>();
 9850|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|  14.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  441|  14.0k|        : m_value(T{}), m_has_value(true)
  442|  14.0k|    {
  443|  14.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6692|  14.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6466|  14.0k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9833|  14.0k|{
 9834|  14.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.5k, False: 574]
  |  |  ------------------
  ------------------
 9835|  13.5k|        out = unexpected(in.error());
 9836|  13.5k|    }
 9837|    574|    else {
 9838|    574|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|    574|    static_cast<    \
  |  | 1109|    574|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|    574|    }
 9840|  14.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  13.5k|        : base(unexpect, std::move(e.error())),
 1630|  13.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  13.5k|    {
 1632|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  464|  13.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  13.5k|          m_has_value(false)
  466|  13.5k|    {
  467|  13.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  13.5k|    {
 1330|  13.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1570|  13.5k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  916|  13.5k|    {
  917|  13.5k|        assign_common(std::move(other));
  918|  13.5k|        return *this;
  919|  13.5k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  963|  13.5k|    {
  964|  13.5k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 13.5k, False: 0]
  ------------------
  965|  13.5k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 13.5k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  13.5k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  13.5k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  41.6k|    {
  505|  41.6k|        return m_has_value;
  506|  41.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  14.6k|    {
  471|  14.6k|        return m_value;
  472|  14.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1059|  13.5k|    {
 1060|  13.5k|        this->destroy_value();
 1061|  13.5k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  13.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  13.5k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  518|  13.5k|    {
  519|  13.5k|        scn::detail::construct_at(&get_unexpected(),
  520|  13.5k|                                  std::forward<Args>(args)...);
  521|  13.5k|        m_has_value = false;
  522|  13.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  13.5k|    {
  488|  13.5k|        return m_unexpected;
  489|  13.5k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  13.5k|    {
  496|  13.5k|        return std::move(m_unexpected);
  497|  13.5k|    }
_ZNK3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 8854|  14.0k|    {
 8855|  14.0k|        return m_str;
 8856|  14.0k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  14.0k|{
 6196|  14.0k|    detail::check_scan_arg_types<Args...>();
 6197|  14.0k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  14.0k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5910|  14.0k|{
 5911|  14.0k|    constexpr bool default_constructible_constraint =
 5912|  14.0k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  14.0k|    static_assert(default_constructible_constraint,
 5914|  14.0k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  14.0k|    constexpr bool destructible_constraint =
 5917|  14.0k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  14.0k|    static_assert(destructible_constraint,
 5919|  14.0k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  14.0k|    constexpr bool non_reference_constraint =
 5922|  14.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  14.0k|    static_assert(non_reference_constraint,
 5924|  14.0k|                  "Scan argument types must not be references");
 5925|       |
 5926|  14.0k|    constexpr bool movable_constraint =
 5927|  14.0k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  14.0k|    static_assert(movable_constraint,
 5929|  14.0k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  14.0k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  14.0k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  14.0k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6171|  14.0k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  14.0k|    {
 6173|  14.0k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  14.0k|    {
 6181|  14.0k|        return {detail::make_arg<
 6182|  14.0k|            kind, Context,
 6183|  14.0k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  14.0k|                                 typename Context::char_type>::value>(args)...};
 6185|  14.0k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE26ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5960|  14.0k|{
 5961|  14.0k|    return make_value<Context>(value).ref_value;
 5962|  14.0k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5895|  14.0k|{
 5896|  14.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  14.0k|                                  needs_context_tag>) {
 5900|  14.0k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  14.0k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5702|  14.0k|    {                                                                        \
 5703|  14.0k|        return val;                                                          \
 5704|  14.0k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5864|  14.0k|{
 5865|  14.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  14.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  14.0k|    constexpr bool scannable_char =
 5869|  14.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  14.0k|    static_assert(scannable_char,
 5871|  14.0k|                  "Cannot scan an argument of an unsupported character "
 5872|  14.0k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  14.0k|    constexpr bool scannable_const =
 5875|  14.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  14.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  14.0k|    constexpr bool scannable_disabled =
 5879|  14.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  14.0k|    static_assert(scannable_disabled,
 5881|  14.0k|                  "Cannot scan an argument that has been disabled by "
 5882|  14.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  14.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  14.0k|    static_assert(
 5886|  14.0k|        scannable,
 5887|  14.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  14.0k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  14.0k|    return arg_value{arg};
 5891|  14.0k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5645|  14.0k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  14.0k|    {
 5647|  14.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  14.6k|    {
 1829|  14.6k|        return &value();
 1830|  14.6k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|  14.6k|    {
 1783|  14.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  14.6k|        return this->get_value();
 1785|  14.6k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6475|  14.0k|    {
 6476|  14.0k|        return m_values;
 6477|  14.0k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  14.0k|        : basic_scan_args(store.desc, store.args.data())
 6222|  14.0k|    {
 6223|  14.0k|    }
_ZN3scn2v424basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  14.0k|        : m_str(r.str)
 8850|  14.0k|    {
 8851|  14.0k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|   374k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|   374k|    {
 3760|   374k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|   374k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|   374k|    }
_ZNK3scn2v410scan_error4codeEv:
 3770|  3.78k|    {
 3771|  3.78k|        return m_code;
 3772|  3.78k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|  89.3k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|  89.3k|    else {
 3999|  89.3k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|  89.3k|    }
 4001|  89.3k|}
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  4.19M|    {
  587|  4.19M|        return m_has_value;
  588|  4.19M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|   211k|    {
  570|   211k|        return m_unexpected;
  571|   211k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   206k|    {
 1760|   206k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   206k|        return this->get_unexpected().error();
 1762|   206k|    }
_ZNK3scn2v46detail9fill_type4sizeEv:
 7017|  5.33k|    {
 7018|  5.33k|        return m_size;
 7019|  5.33k|    }
_ZNK3scn2v46detail12format_specs8get_baseEv:
 7058|  5.46k|    {
 7059|  5.46k|        SCN_GCC_COMPAT_PUSH
 7060|  5.46k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 7061|  5.46k|        switch (type) {
 7062|  2.53k|            case presentation_type::none:
  ------------------
  |  Branch (7062:13): [True: 2.53k, False: 2.92k]
  ------------------
 7063|  2.53k|                return 10;
 7064|    112|            case presentation_type::int_generic:
  ------------------
  |  Branch (7064:13): [True: 112, False: 5.35k]
  ------------------
 7065|    112|                return 0;
 7066|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (7066:13): [True: 0, False: 5.46k]
  ------------------
 7067|      0|                return arbitrary_base;
 7068|       |
 7069|     88|            case presentation_type::int_binary:
  ------------------
  |  Branch (7069:13): [True: 88, False: 5.37k]
  ------------------
 7070|     88|                return 2;
 7071|    102|            case presentation_type::int_octal:
  ------------------
  |  Branch (7071:13): [True: 102, False: 5.36k]
  ------------------
 7072|    102|                return 8;
 7073|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (7073:13): [True: 40, False: 5.42k]
  ------------------
 7074|    110|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (7074:13): [True: 70, False: 5.39k]
  ------------------
 7075|    110|                return 10;
 7076|  2.51k|            case presentation_type::int_hex:
  ------------------
  |  Branch (7076:13): [True: 2.51k, False: 2.94k]
  ------------------
 7077|  2.51k|                return 16;
 7078|       |
 7079|      0|            default:
  ------------------
  |  Branch (7079:13): [True: 0, False: 5.46k]
  ------------------
 7080|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7081|      0|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7082|  5.46k|        }
 7083|  5.46k|        SCN_GCC_COMPAT_POP
 7084|  5.46k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  49.0k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_alignENS1_10align_typeE:
 7099|  8.70k|    {
 7100|  8.70k|        m_specs.align = align;
 7101|  8.70k|    }
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7119|  8.75k|    {
 7120|  8.75k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7120:13): [True: 0, False: 8.75k]
  |  Branch (7120:39): [True: 0, False: 0]
  ------------------
 7121|       |            // clang-format off
 7122|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7123|       |            // clang-format on
 7124|      0|        }
 7125|       |
 7126|  8.75k|        m_specs.width = width;
 7127|  8.75k|    }
_ZN3scn2v46detail12specs_setter12on_precisionEi:
 7129|  17.9k|    {
 7130|  17.9k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (7130:13): [True: 68, False: 17.8k]
  ------------------
 7131|       |            // clang-format off
 7132|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7133|       |            // clang-format on
 7134|     68|        }
 7135|       |
 7136|  17.8k|        m_specs.precision = prec;
 7137|  17.8k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|  58.1k|    {
 7141|  58.1k|        m_specs.type = type;
 7142|  58.1k|    }
_ZN3scn2v46detail12specs_setter17on_charset_singleEDi:
 7145|  2.61M|    {
 7146|  2.61M|        const auto cp_value = static_cast<unsigned>(cp);
 7147|  2.61M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  | 1038|  2.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.13M, False: 476k]
  |  |  ------------------
  ------------------
 7148|  2.13M|            m_specs.charset_literals[cp_value / 8] |=
 7149|  2.13M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 7150|  2.13M|        }
 7151|   476k|        else {
 7152|   476k|            m_specs.charset_has_nonascii = true;
 7153|   476k|        }
 7154|  2.61M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7157|  17.1k|    {
 7158|  17.1k|        const auto begin_value = static_cast<unsigned>(begin);
 7159|  17.1k|        const auto end_value = static_cast<unsigned>(end);
 7160|  17.1k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1104|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7161|       |
 7162|  17.1k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  | 1038|  17.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 8.40k, False: 8.76k]
  |  |  ------------------
  ------------------
 7163|       |            // No need to bit-twiddle with a mask, because with the
 7164|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7165|  8.40k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1058|  8.40k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7166|   539k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7166:40): [True: 531k, False: 8.40k]
  ------------------
 7167|   531k|                m_specs.charset_literals[v / 8] |=
 7168|   531k|                    static_cast<unsigned char>(1ul << (v % 8));
 7169|   531k|            }
 7170|  8.40k|        }
 7171|  8.76k|        else {
 7172|  8.76k|            m_specs.charset_has_nonascii = true;
 7173|  8.76k|        }
 7174|  17.1k|    }
_ZN3scn2v46detail12specs_setter19on_charset_invertedEv:
 7177|  4.81k|    {
 7178|  4.81k|        m_specs.charset_is_inverted = true;
 7179|  4.81k|    }
_ZN3scn2v46detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 7196|  3.99k|    {
 7197|  3.99k|        m_specs.regexp_flags = flags;
 7198|  3.99k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7202|  11.0k|    {
 7203|  11.0k|        SCN_UNLIKELY_ATTR
 7204|  11.0k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7205|  11.0k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|  2.69M|    {
 7214|  2.69M|        return m_error;
 7215|  2.69M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|   177k|{
 3936|   177k|    return unexpected(scan_error{c, m});
 3937|   177k|}
_ZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4186|   233k|{
 4187|   233k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4188|       |
 4189|   233k|    const auto is_trailing_code_unit = [](char ch) {
 4190|   233k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4191|   233k|    };
 4192|       |
 4193|   233k|    if (input.size() == 1) {
  ------------------
  |  Branch (4193:9): [True: 194k, False: 39.5k]
  ------------------
 4194|   194k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  | 1104|   194k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   194k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4195|   194k|        return static_cast<char32_t>(input[0]);
 4196|   194k|    }
 4197|       |
 4198|  39.5k|    if (input.size() == 2) {
  ------------------
  |  Branch (4198:9): [True: 38.3k, False: 1.18k]
  ------------------
 4199|  38.3k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  | 1104|  38.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4200|  38.3k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1104|  38.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|       |
 4202|  38.3k|        char32_t cp{};
 4203|  38.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4204|  38.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4205|  38.3k|        return cp;
 4206|  38.3k|    }
 4207|       |
 4208|  1.18k|    if (input.size() == 3) {
  ------------------
  |  Branch (4208:9): [True: 1.02k, False: 154]
  ------------------
 4209|  1.02k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  | 1104|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  1.02k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1104|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|  1.02k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  | 1104|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4212|       |
 4213|  1.02k|        char32_t cp{};
 4214|  1.02k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4215|  1.02k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4216|  1.02k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4217|  1.02k|        return cp;
 4218|  1.02k|    }
 4219|       |
 4220|    154|    if (input.size() == 4) {
  ------------------
  |  Branch (4220:9): [True: 154, False: 0]
  ------------------
 4221|    154|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4222|    154|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4223|    154|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4224|    154|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4225|    154|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  | 1104|    154|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    154|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4226|       |
 4227|    154|        char32_t cp{};
 4228|    154|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4229|    154|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4230|    154|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4231|    154|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4232|    154|        return cp;
 4233|    154|    }
 4234|       |
 4235|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4236|       |    // gcc 7 thinks we'll get here, even when we won't
 4237|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4238|      0|#endif
 4239|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4240|      0|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|   710k|{
 4326|       |    // Pattern_White_Space property
 4327|   710k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 234k, False: 476k]
  |  Branch (4327:27): [True: 15.9k, False: 218k]
  ------------------
 4328|   710k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 14.5k, False: 680k]
  ------------------
 4329|   710k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 10.6k, False: 669k]
  ------------------
 4330|   710k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 5.31k, False: 664k]
  ------------------
 4331|   710k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 6.07k, False: 658k]
  ------------------
 4332|   710k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 6.33k, False: 651k]
  ------------------
 4333|   710k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 544, False: 651k]
  ------------------
 4334|   710k|}
_ZN3scn2v46detailanENS1_11regex_flagsES2_:
 6947|  2.10k|{
 6948|  2.10k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6949|  2.10k|                                    static_cast<unsigned>(b));
 6950|  2.10k|}
_ZN3scn2v46detailorENS1_11regex_flagsES2_:
 6952|    222|{
 6953|    222|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6954|    222|                                    static_cast<unsigned>(b));
 6955|    222|}
_ZN3scn2v46detailoRERNS1_11regex_flagsES2_:
 6967|    222|{
 6968|    222|    return a = a | b;
 6969|    222|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|  1.33k|{
 7897|  1.33k|    switch (type) {
 7898|    160|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 160, False: 1.17k]
  ------------------
 7899|    160|            return arg_type_category::none;
 7900|       |
 7901|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 0, False: 1.33k]
  ------------------
 7902|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 1.33k]
  ------------------
 7903|    132|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 132, False: 1.20k]
  ------------------
 7904|    132|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 1.33k]
  ------------------
 7905|    132|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 0, False: 1.33k]
  ------------------
 7906|    132|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 1.33k]
  ------------------
 7907|    132|            return arg_type_category::integer;
 7908|       |
 7909|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 0, False: 1.33k]
  ------------------
 7910|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 1.33k]
  ------------------
 7911|    132|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 132, False: 1.20k]
  ------------------
 7912|    132|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 1.33k]
  ------------------
 7913|    132|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 0, False: 1.33k]
  ------------------
 7914|    132|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 1.33k]
  ------------------
 7915|    132|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|    130|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 130, False: 1.20k]
  ------------------
 7918|    130|            return arg_type_category::pointer;
 7919|    132|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 132, False: 1.20k]
  ------------------
 7920|    132|            return arg_type_category::boolean;
 7921|     60|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 60, False: 1.27k]
  ------------------
 7922|    130|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 70, False: 1.26k]
  ------------------
 7923|    130|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 1.33k]
  ------------------
 7924|    130|            return arg_type_category::character;
 7925|       |
 7926|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 0, False: 1.33k]
  ------------------
 7927|    132|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 132, False: 1.20k]
  ------------------
 7928|    132|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 0, False: 1.33k]
  ------------------
 7929|    132|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 1.33k]
  ------------------
 7930|    132|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 1.33k]
  ------------------
 7931|    132|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 1.33k]
  ------------------
 7932|    132|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 1.33k]
  ------------------
 7933|    132|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 1.33k]
  ------------------
 7934|    132|            return arg_type_category::floating;
 7935|       |
 7936|    130|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 130, False: 1.20k]
  ------------------
 7937|    260|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 130, False: 1.20k]
  ------------------
 7938|    390|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 130, False: 1.20k]
  ------------------
 7939|    390|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 1.33k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 1.33k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|  1.33k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|  1.33k|            SCN_CLANG_POP
 7950|  1.33k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|  1.33k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1769|  5.14k|    {
 1770|  5.14k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  5.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  5.14k|        return std::move(this->get_unexpected().error());
 1772|  5.14k|    }
_ZN3scn2v46detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7988|  9.50k|{
 7989|  9.50k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  | 1039|  9.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.50k, False: 3.00k]
  |  |  ------------------
  ------------------
 7990|  6.50k|        return handler.on_error("Invalid type specifier for integer type");
 7991|  6.50k|    }
 7992|  3.00k|    if (specs.localized) {
  ------------------
  |  Branch (7992:9): [True: 180, False: 2.82k]
  ------------------
 7993|    180|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  | 1039|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16, False: 164]
  |  |  ------------------
  ------------------
 7994|       |            // clang-format off
 7995|     16|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7996|       |            // clang-format on
 7997|     16|            return;
 7998|     16|        }
 7999|    164|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  | 1039|    164|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 164]
  |  |  ------------------
  ------------------
 8000|       |            // clang-format off
 8001|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 8002|       |            // clang-format on
 8003|      0|        }
 8004|    164|    }
 8005|  3.00k|}
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|   190k|{
 2108|   190k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   190k|}
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|    108|    {
 3055|    108|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|    108|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3088|    108|    {
 3089|    108|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|    108|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3111|    108|    {
 3112|    108|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|    108|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3120|    108|    {
 3121|    108|        return fn::impl(std::forward<T>(t));
 3122|    108|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8032|  4.75k|{
 8033|  4.75k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8033:9): [True: 3.44k, False: 1.30k]
  ------------------
 8034|  4.75k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8034:10): [True: 194, False: 3.25k]
  ------------------
 8035|  3.44k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8035:10): [True: 3.03k, False: 216]
  ------------------
 8036|  3.22k|        SCN_UNLIKELY_ATTR
 8037|  3.22k|        return handler.on_error("Invalid type specifier for float type");
 8038|  3.22k|    }
 8039|  4.75k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  3.98M|    {
 1754|  3.98M|        return has_value();
 1755|  3.98M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8044|  13.9k|{
 8045|  13.9k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (8045:9): [True: 3.76k, False: 10.1k]
  ------------------
 8046|  13.9k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (8046:9): [True: 1.17k, False: 8.97k]
  ------------------
 8047|  13.9k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (8047:9): [True: 6.24k, False: 2.73k]
  ------------------
 8048|  13.9k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (8048:9): [True: 102, False: 2.62k]
  ------------------
 8049|  13.9k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (8049:9): [True: 1.20k, False: 1.42k]
  ------------------
 8050|  12.4k|        return;
 8051|  12.4k|    }
 8052|  1.42k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (8052:9): [True: 276, False: 1.14k]
  ------------------
 8053|    276|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  | 1039|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12, False: 264]
  |  |  ------------------
  ------------------
 8054|       |            // clang-format off
 8055|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 8056|       |            // clang-format on
 8057|     12|        }
 8058|    264|        return;
 8059|    276|    }
 8060|  1.14k|    SCN_UNLIKELY_ATTR
 8061|  1.14k|    handler.on_error("Invalid type specifier for string");
 8062|  1.14k|}
_ZN3scn2v46detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8078|  4.75k|{
 8079|  4.75k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8079:9): [True: 3.44k, False: 1.30k]
  ------------------
 8080|  4.75k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (8080:9): [True: 3.03k, False: 410]
  ------------------
 8081|  4.75k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (8081:9): [True: 2.98k, False: 46]
  ------------------
 8082|  4.75k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (8082:9): [True: 2.96k, False: 26]
  ------------------
 8083|  4.75k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (8083:9): [True: 2.92k, False: 40]
  ------------------
 8084|  4.75k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (8084:9): [True: 2.89k, False: 26]
  ------------------
 8085|  4.75k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (8085:9): [True: 2.85k, False: 40]
  ------------------
 8086|  4.75k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (8086:9): [True: 2.84k, False: 16]
  ------------------
 8087|  2.84k|        SCN_UNLIKELY_ATTR
 8088|  2.84k|        return handler.on_error("Invalid type specifier for boolean");
 8089|  2.84k|    }
 8090|  4.75k|}
_ZN3scn2v46detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8010|  4.63k|{
 8011|  4.63k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (8011:9): [True: 3.22k, False: 1.41k]
  ------------------
 8012|  4.63k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (8012:9): [True: 0, False: 1.41k]
  ------------------
 8013|  3.22k|        SCN_UNLIKELY_ATTR
 8014|  3.22k|        return handler.on_error("Invalid type specifier for character type");
 8015|  3.22k|    }
 8016|  4.63k|}
_ZN3scn2v46detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8067|  4.63k|{
 8068|  4.63k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8068:9): [True: 3.38k, False: 1.25k]
  ------------------
 8069|  4.63k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (8069:9): [True: 3.36k, False: 16]
  ------------------
 8070|  3.36k|        SCN_UNLIKELY_ATTR
 8071|  3.36k|        return handler.on_error("Invalid type specifier for pointer");
 8072|  3.36k|    }
 8073|  4.63k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   487k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   487k|    else {
 3999|   487k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   487k|    }
 4001|   487k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  2.39M|    {
 3494|  2.39M|        return m_iterator;
 3495|  2.39M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  2.50M|    {
 3498|  2.50M|        return m_sentinel;
 3499|  2.50M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|   800k|    {
 3494|   800k|        return m_iterator;
 3495|   800k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  1.29M|    {
 3498|  1.29M|        return m_sentinel;
 3499|  1.29M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|   103k|    constexpr locale_ref() = default;
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|    354|{
 1364|    354|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|    354|}
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|  3.52k|    {
  380|  3.52k|        return m_unexpected;
  381|  3.52k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|   177k|        : m_unexpected(std::forward<Err>(e))
  365|   177k|    {
  366|   177k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   177k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   177k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   188k|        : base(unexpect, std::move(e.error())),
 1630|   188k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   188k|    {
 1632|   188k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   188k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   188k|          m_has_value(false)
  466|   188k|    {
  467|   188k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   194k|    {
 1330|   194k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  38.7k|        : base(unexpect, std::move(e.error())),
 1630|  38.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  38.7k|    {
 1632|  38.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  39.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  39.7k|          m_has_value(false)
  466|  39.7k|    {
  467|  39.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  66.9k|    {
 1330|  66.9k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  24.4k|        : base(std::in_place, std::forward<U>(val)),
 1584|  24.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  24.4k|    {
 1586|  24.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  24.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  24.4k|    {
  457|  24.4k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|  67.8k|    {
 1754|  67.8k|        return has_value();
 1755|  67.8k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|   133k|    {
  505|   133k|        return m_has_value;
  506|   133k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|  38.7k|    {
 1760|  38.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  38.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  38.7k|        return this->get_unexpected().error();
 1762|  38.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  38.7k|    {
  488|  38.7k|        return m_unexpected;
  489|  38.7k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  16.3k|    {
 1819|  16.3k|        return std::move(value());
 1820|  16.3k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  26.3k|    {
 1783|  26.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  26.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  26.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  26.3k|        return this->get_value();
 1785|  26.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|  26.3k|    {
  471|  26.3k|        return m_value;
  472|  26.3k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  21.9k|        : base(unexpect, std::move(e.error())),
 1630|  21.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  21.9k|    {
 1632|  21.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  23.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  23.0k|          m_has_value(false)
  466|  23.0k|    {
  467|  23.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.9k|    {
 1330|  45.9k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  22.1k|        : base(std::in_place, std::forward<U>(val)),
 1584|  22.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  22.1k|    {
 1586|  22.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  22.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  22.1k|    {
  457|  22.1k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|  47.0k|    {
 1754|  47.0k|        return has_value();
 1755|  47.0k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  90.7k|    {
  505|  90.7k|        return m_has_value;
  506|  90.7k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|  21.9k|    {
 1760|  21.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  21.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  21.9k|        return this->get_unexpected().error();
 1762|  21.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  21.9k|    {
  488|  21.9k|        return m_unexpected;
  489|  21.9k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  16.2k|    {
 1819|  16.2k|        return std::move(value());
 1820|  16.2k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  21.8k|    {
 1783|  21.8k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  21.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  21.8k|        return this->get_value();
 1785|  21.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|  21.8k|    {
  471|  21.8k|        return m_value;
  472|  21.8k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  8.51k|    {
 1993|  8.51k|        return detail::transform_error_impl(std::move(*this),
 1994|  8.51k|                                            std::forward<F>(f));
 1995|  8.51k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  8.51k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  8.51k|    else {
 1486|  8.51k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  8.51k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  8.51k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 8.51k, False: 0]
  |  |  ------------------
  ------------------
 1488|  8.51k|                   ? result(*std::forward<Exp>(exp))
 1489|  8.51k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  8.51k|    }
 1493|  8.51k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   101k|    {
  505|   101k|        return m_has_value;
  506|   101k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  10.5k|    {
 1819|  10.5k|        return std::move(value());
 1820|  10.5k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  47.5k|    {
 1783|  47.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.5k|        return this->get_value();
 1785|  47.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  47.5k|    {
  471|  47.5k|        return m_value;
  472|  47.5k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|    102|    {
 1770|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    102|        return std::move(this->get_unexpected().error());
 1772|    102|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|    102|    {
  488|    102|        return m_unexpected;
  489|    102|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|    958|        : base(unexpect, std::forward<Args>(args)...),
 1640|    958|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    958|    {
 1642|    958|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8923|  6.01k|    {
 8924|  6.01k|        return m_args;
 8925|  6.01k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|  35.1k|    {
 8929|  35.1k|        return m_locale;
 8930|  35.1k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|  63.3k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|  63.3k|    static_cast<    \
  |  | 1109|  63.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|  63.3k|    static_cast<    \
  |  | 1109|  63.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|  63.3k|    {
 8936|  63.3k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  8.44k|    {
 3014|  8.44k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  8.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  8.44k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  8.44k|    {
 2995|  8.44k|        return t.data();
 2996|  8.44k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8923|  5.35k|    {
 8924|  5.35k|        return m_args;
 8925|  5.35k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|  18.7k|    {
 8929|  18.7k|        return m_locale;
 8930|  18.7k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   126k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   126k|    {
 8936|   126k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   392k|        : base(unexpect, std::move(e.error())),
 1630|   392k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   392k|    {
 1632|   392k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|   392k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|   392k|          m_has_value(false)
  565|   392k|    {
  566|   392k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   392k|    {
 1330|   392k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|   479k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|   479k|        : m_deferred_init(), m_has_value(true)
  544|   479k|    {
  545|   479k|    }
_ZNK3scn2v46detail9fill_type13get_code_unitIcEET_v:
 7023|  1.39k|    {
 7024|  1.39k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  | 1104|  1.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7025|  1.39k|        CharT r{};
 7026|  1.39k|        std::memcpy(&r, m_data, m_size);
 7027|  1.39k|        return r;
 7028|  1.39k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  364|  1.71k|        : m_unexpected(std::forward<Err>(e))
  365|  1.71k|    {
  366|  1.71k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  1.71k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  1.71k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  2.08k|        : m_unexpected(std::forward<Args>(args)...)
  374|  2.08k|    {
  375|  2.08k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.08k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  2.08k|    }
_ZNK3scn2v46detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7032|  1.76k|    {
 7033|  1.76k|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 7034|  1.76k|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 3120|    142|    {
 3121|    142|        return fn::impl(std::forward<T>(t));
 3122|    142|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 3111|    142|    {
 3112|    142|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|    142|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|    142|    {
 3089|    142|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|    142|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|    142|    {
 3055|    142|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|    142|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|    368|        : m_unexpected(std::forward<Err>(e))
  365|    368|    {
  366|    368|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|    368|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|    368|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  364|     22|        : m_unexpected(std::forward<Err>(e))
  365|     22|    {
  366|     22|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|     22|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|     22|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  379|  23.2k|    {
  380|  23.2k|        return m_unexpected;
  381|  23.2k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  4.84k|        : m_unexpected(std::forward<Args>(args)...)
  374|  4.84k|    {
  375|  4.84k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  4.84k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  4.84k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  364|  34.1k|        : m_unexpected(std::forward<Err>(e))
  365|  34.1k|    {
  366|  34.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  34.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  34.1k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  379|  34.1k|    {
  380|  34.1k|        return m_unexpected;
  381|  34.1k|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  373|  34.1k|        : m_unexpected(std::forward<Args>(args)...)
  374|  34.1k|    {
  375|  34.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  34.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  34.1k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  1.07k|{
 1364|  1.07k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  1.07k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  364|  3.74k|        : m_unexpected(std::forward<Err>(e))
  365|  3.74k|    {
  366|  3.74k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  3.74k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  3.74k|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1363|  1.80k|{
 1364|  1.80k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  1.80k|}
_ZNK3scn2v46ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 3120|     16|    {
 3121|     16|        return fn::impl(std::forward<T>(t));
 3122|     16|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3111|     16|    {
 3112|     16|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|     16|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 3088|     16|    {
 3089|     16|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|     16|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 3054|     16|    {
 3055|     16|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|     16|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   176k|{
  331|   176k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   176k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   139k|    {
 3510|   139k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   139k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|    530|        : base(unexpect, std::move(e.error())),
 1630|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    530|    {
 1632|    530|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|    530|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    530|          m_has_value(false)
  466|    530|    {
  467|    530|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  53.4k|    {
 1330|  53.4k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  52.8k|        : base(std::in_place, std::forward<U>(val)),
 1584|  52.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  52.8k|    {
 1586|  52.8k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  52.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  52.8k|    {
  457|  52.8k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1753|  42.7k|    {
 1754|  42.7k|        return has_value();
 1755|  42.7k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  36.9k|    {
 1809|  36.9k|        return value();
 1810|  36.9k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1583|  11.5k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.5k|    {
 1586|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  11.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.5k|    {
  457|  11.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.0k|    {
 1330|  12.0k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    530|        : base(unexpect, std::move(e.error())),
 1630|    530|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    530|    {
 1632|    530|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    530|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    530|          m_has_value(false)
  466|    530|    {
  467|    530|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1753|  8.39k|    {
 1754|  8.39k|        return has_value();
 1755|  8.39k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  504|  22.0k|    {
  505|  22.0k|        return m_has_value;
  506|  22.0k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|  6.27k|    {
 1809|  6.27k|        return value();
 1810|  6.27k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  9.48k|    {
 1783|  9.48k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  9.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  9.48k|        return this->get_value();
 1785|  9.48k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  470|  9.48k|    {
  471|  9.48k|        return m_value;
  472|  9.48k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|    238|        : base(unexpect, std::move(e.error())),
 1630|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    238|    {
 1632|    238|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    238|          m_has_value(false)
  466|    238|    {
  467|    238|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.17k|    {
 1330|  6.17k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|  5.94k|        : base(std::in_place, std::forward<U>(val)),
 1584|  5.94k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  5.94k|    {
 1586|  5.94k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  455|  5.94k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  5.94k|    {
  457|  5.94k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|  1.01k|    {
 1993|  1.01k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.01k|                                            std::forward<F>(f));
 1995|  1.01k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|  1.01k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.01k|    else {
 1486|  1.01k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.01k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.01k, False: 0]
  |  |  ------------------
  ------------------
 1488|  1.01k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.01k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  1.01k|    }
 1493|  1.01k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  3.21k|    {
 1819|  3.21k|        return std::move(value());
 1820|  3.21k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1583|  2.89k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.89k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.89k|    {
 1586|  2.89k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  2.89k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.89k|    {
  457|  2.89k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.2k|    {
 1330|  12.2k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1769|    460|    {
 1770|    460|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    460|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    460|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    460|        return std::move(this->get_unexpected().error());
 1772|    460|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|    460|    {
  488|    460|        return m_unexpected;
  489|    460|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.95k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.95k|    {
 1642|  1.95k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  8.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  8.47k|          m_has_value(false)
  466|  8.47k|    {
  467|  8.47k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  2.49k|    {
 2883|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  2.49k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  2.49k|    {
 2864|  2.49k|        return decay_copy(t.begin());
 2865|  2.49k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 2107|  5.37k|{
 2108|  5.37k|    return SCN_FWD(t);
  ------------------
  |  | 1110|  5.37k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  5.37k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3493|  2.49k|    {
 3494|  2.49k|        return m_iterator;
 3495|  2.49k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.49k|    {
 2940|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.49k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.49k|    {
 2922|  2.49k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.49k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3497|  2.49k|    {
 3498|  2.49k|        return m_sentinel;
 3499|  2.49k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3478|  2.49k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  2.49k|    static_cast<    \
  |  | 1109|  2.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  2.49k|    static_cast<    \
  |  | 1109|  2.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  2.49k|    {
 3480|  2.49k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1753|  6.17k|    {
 1754|  6.17k|        return has_value();
 1755|  6.17k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  12.3k|    {
  505|  12.3k|        return m_has_value;
  506|  12.3k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1759|    238|    {
 1760|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    238|        return this->get_unexpected().error();
 1762|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    238|    {
  488|    238|        return m_unexpected;
  489|    238|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  5.94k|    {
 1819|  5.94k|        return std::move(value());
 1820|  5.94k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  5.94k|    {
 1783|  5.94k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  5.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  5.94k|        return this->get_value();
 1785|  5.94k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  470|  5.94k|    {
  471|  5.94k|        return m_value;
  472|  5.94k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.3k|    {
 1330|  12.3k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  12.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  12.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  12.3k|    {
 1586|  12.3k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|  12.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  12.3k|    {
  457|  12.3k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|  12.3k|    {
 1754|  12.3k|        return has_value();
 1755|  12.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|  24.6k|    {
  505|  24.6k|        return m_has_value;
  506|  24.6k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  12.3k|    {
 1819|  12.3k|        return std::move(value());
 1820|  12.3k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  12.3k|    {
 1783|  12.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  12.3k|        return this->get_value();
 1785|  12.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|  12.3k|    {
  471|  12.3k|        return m_value;
  472|  12.3k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  6.51k|        : base(unexpect, std::move(e.error())),
 1630|  6.51k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.51k|    {
 1632|  6.51k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    862|        : base(unexpect, std::move(e.error())),
 1630|    862|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    862|    {
 1632|    862|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  1.32k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.32k|          m_has_value(false)
  466|  1.32k|    {
  467|  1.32k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  9.71k|    {
 1330|  9.71k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  6.19k|        : base(unexpect, std::move(e.error())),
 1630|  6.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  6.19k|    {
 1632|  6.19k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  6.19k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  6.19k|          m_has_value(false)
  466|  6.19k|    {
  467|  6.19k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1753|  8.97k|    {
 1754|  8.97k|        return has_value();
 1755|  8.97k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  504|  17.5k|    {
  505|  17.5k|        return m_has_value;
  506|  17.5k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1759|  3.24k|    {
 1760|  3.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.24k|        return this->get_unexpected().error();
 1762|  3.24k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  487|  4.39k|    {
  488|  4.39k|        return m_unexpected;
  489|  4.39k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1583|  1.57k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.57k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.57k|    {
 1586|  1.57k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  455|  1.57k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.57k|    {
  457|  1.57k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.57k|    {
 1330|  1.57k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  2.19k|    {
 1783|  2.19k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.19k|        return this->get_value();
 1785|  2.19k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  470|  2.19k|    {
  471|  2.19k|        return m_value;
  472|  2.19k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1753|  1.17k|    {
 1754|  1.17k|        return has_value();
 1755|  1.17k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  504|  3.15k|    {
  505|  3.15k|        return m_has_value;
  506|  3.15k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.17k|    {
 1330|  1.17k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1818|  1.57k|    {
 1819|  1.57k|        return std::move(value());
 1820|  1.57k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  1.57k|    {
 1783|  1.57k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.57k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.57k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.57k|        return this->get_value();
 1785|  1.57k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  470|  1.57k|    {
  471|  1.57k|        return m_value;
  472|  1.57k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3497|   122k|    {
 3498|   122k|        return m_sentinel;
 3499|   122k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|  2.65k|    {
 1993|  2.65k|        return detail::transform_error_impl(std::move(*this),
 1994|  2.65k|                                            std::forward<F>(f));
 1995|  2.65k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|  2.65k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.65k|    else {
 1486|  2.65k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.65k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.19k, False: 460]
  |  |  ------------------
  ------------------
 1488|  2.65k|                   ? result(*std::forward<Exp>(exp))
 1489|  2.65k|                   : result(unexpect,
 1490|    460|                            trivial_invoke(std::forward<F>(f),
 1491|    460|                                           std::forward<Exp>(exp).error()));
 1492|  2.65k|    }
 1493|  2.65k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1583|  2.19k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.19k|    {
 1586|  2.19k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  2.19k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.19k|    {
  457|  2.19k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1639|    460|        : base(unexpect, std::forward<Args>(args)...),
 1640|    460|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    460|    {
 1642|    460|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  2.19k|    {
 1819|  2.19k|        return std::move(value());
 1820|  2.19k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3493|   136k|    {
 3494|   136k|        return m_iterator;
 3495|   136k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1583|  1.17k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.17k|    {
 1586|  1.17k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  455|  1.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.17k|    {
  457|  1.17k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1992|  1.17k|    {
 1993|  1.17k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.17k|                                            std::forward<F>(f));
 1995|  1.17k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1475|  1.17k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.17k|    else {
 1486|  1.17k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.17k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.17k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.17k, False: 0]
  |  |  ------------------
  ------------------
 1488|  1.17k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.17k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  1.17k|    }
 1493|  1.17k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  504|  2.34k|    {
  505|  2.34k|        return m_has_value;
  506|  2.34k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  1.17k|    {
 1819|  1.17k|        return std::move(value());
 1820|  1.17k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  1.17k|    {
 1783|  1.17k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.17k|        return this->get_value();
 1785|  1.17k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  470|  1.17k|    {
  471|  1.17k|        return m_value;
  472|  1.17k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1583|  1.17k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.17k|    {
 1586|  1.17k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  455|  1.17k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.17k|    {
  457|  1.17k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.17k|    {
 1330|  1.17k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1753|  1.17k|    {
 1754|  1.17k|        return has_value();
 1755|  1.17k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.34k|    {
  505|  2.34k|        return m_has_value;
  506|  2.34k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  1.17k|    {
 1819|  1.17k|        return std::move(value());
 1820|  1.17k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  1.17k|    {
 1783|  1.17k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.17k|        return this->get_value();
 1785|  1.17k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.17k|    {
  471|  1.17k|        return m_value;
  472|  1.17k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|  1.15k|    {
 1993|  1.15k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.15k|                                            std::forward<F>(f));
 1995|  1.15k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|  1.15k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.15k|    else {
 1486|  1.15k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.15k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 1.15k]
  |  |  ------------------
  ------------------
 1488|  1.15k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.15k|                   : result(unexpect,
 1490|  1.15k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.15k|                                           std::forward<Exp>(exp).error()));
 1492|  1.15k|    }
 1493|  1.15k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1769|  1.15k|    {
 1770|  1.15k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.15k|        return std::move(this->get_unexpected().error());
 1772|  1.15k|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3928|  1.95k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  1.95k|    static_cast<    \
  |  | 1109|  1.95k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  1.95k|    {
 3930|  1.95k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3478|  57.0k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  57.0k|    static_cast<    \
  |  | 1109|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  57.0k|    static_cast<    \
  |  | 1109|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  57.0k|    {
 3480|  57.0k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|     24|        : base(unexpect, std::move(e.error())),
 1630|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     24|    {
 1632|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  651|     24|        : m_has_value(false)
  652|     24|    {
  653|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  715|     24|    {
  716|     24|        scn::detail::construct_at(unexpected_ptr(),
  717|     24|                                  std::forward<Args>(args)...);
  718|     24|        m_has_value = false;
  719|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|     72|    {
  745|     72|        return reinterpret_cast<unexpected<E>*>(
  746|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|     72|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|     24|    {
 1330|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1753|     24|    {
 1754|     24|        return has_value();
 1755|     24|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  701|     72|    {
  702|     72|        return m_has_value;
  703|     72|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1759|     24|    {
 1760|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     24|        return this->get_unexpected().error();
 1762|     24|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|     24|    {
  685|     24|        return *unexpected_ptr();
  686|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  657|     24|    {
  658|     24|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 0, False: 24]
  ------------------
  659|      0|            destroy_value();
  660|      0|        }
  661|     24|        else {
  662|     24|            destroy_unexpected();
  663|     24|        }
  664|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|     24|    {
  727|     24|        scn::detail::destroy_at(unexpected_ptr());
  728|     24|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1753|  12.6k|    {
 1754|  12.6k|        return has_value();
 1755|  12.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  24.4k|    {
  505|  24.4k|        return m_has_value;
  506|  24.4k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1759|  8.07k|    {
 1760|  8.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  8.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  8.07k|        return this->get_unexpected().error();
 1762|  8.07k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  8.07k|    {
  488|  8.07k|        return m_unexpected;
  489|  8.07k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  2.89k|    {
 1819|  2.89k|        return std::move(value());
 1820|  2.89k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  3.77k|    {
 1783|  3.77k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.77k|        return this->get_value();
 1785|  3.77k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  3.77k|    {
  471|  3.77k|        return m_value;
  472|  3.77k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  1.04k|        : base(unexpect, std::move(e.error())),
 1630|  1.04k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.04k|    {
 1632|  1.04k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.14k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.14k|          m_has_value(false)
  466|  1.14k|    {
  467|  1.14k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  14.6k|    {
 1330|  14.6k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  11.5k|        : base(unexpect, std::move(e.error())),
 1630|  11.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.5k|    {
 1632|  11.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  11.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  11.5k|          m_has_value(false)
  466|  11.5k|    {
  467|  11.5k|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1753|  15.5k|    {
 1754|  15.5k|        return has_value();
 1755|  15.5k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  24.2k|    {
  505|  24.2k|        return m_has_value;
  506|  24.2k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1759|  5.73k|    {
 1760|  5.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  5.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  5.73k|        return this->get_unexpected().error();
 1762|  5.73k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  5.73k|    {
  488|  5.73k|        return m_unexpected;
  489|  5.73k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|  3.73k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.73k|    {
 1586|  3.73k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|  3.73k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.73k|    {
  457|  3.73k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.73k|    {
 1330|  3.73k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  2.00k|    {
 1783|  2.00k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.00k|        return this->get_value();
 1785|  2.00k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  2.00k|    {
  471|  2.00k|        return m_value;
  472|  2.00k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  2.79k|    {
 1754|  2.79k|        return has_value();
 1755|  2.79k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  7.46k|    {
  505|  7.46k|        return m_has_value;
  506|  7.46k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.79k|    {
 1330|  2.79k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  3.73k|    {
 1819|  3.73k|        return std::move(value());
 1820|  3.73k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  3.73k|    {
 1783|  3.73k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.73k|        return this->get_value();
 1785|  3.73k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|  3.73k|    {
  471|  3.73k|        return m_value;
  472|  3.73k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|   163k|    {
 3389|   163k|        return detail::to_address(ranges::begin(derived()));
 3390|   163k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   163k|    {
 2883|   163k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   163k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   163k|    {
 2864|   163k|        return decay_copy(t.begin());
 2865|   163k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|   163k|    {
 3348|   163k|        return static_cast<D&>(*this);
 3349|   163k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  2.00k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.00k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.00k|    {
 1586|  2.00k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.00k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.00k|    {
  457|  2.00k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|  2.79k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.79k|    {
 1586|  2.79k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  2.79k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.79k|    {
  457|  2.79k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  2.79k|    {
 1993|  2.79k|        return detail::transform_error_impl(std::move(*this),
 1994|  2.79k|                                            std::forward<F>(f));
 1995|  2.79k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|  2.79k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.79k|    else {
 1486|  2.79k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.79k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.79k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.79k, False: 0]
  |  |  ------------------
  ------------------
 1488|  2.79k|                   ? result(*std::forward<Exp>(exp))
 1489|  2.79k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  2.79k|    }
 1493|  2.79k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  504|  5.59k|    {
  505|  5.59k|        return m_has_value;
  506|  5.59k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.79k|    {
 1819|  2.79k|        return std::move(value());
 1820|  2.79k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.79k|    {
 1783|  2.79k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.79k|        return this->get_value();
 1785|  2.79k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  470|  2.79k|    {
  471|  2.79k|        return m_value;
  472|  2.79k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  2.79k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.79k|    {
 1586|  2.79k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  2.79k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.79k|    {
  457|  2.79k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.79k|    {
 1330|  2.79k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1753|  2.79k|    {
 1754|  2.79k|        return has_value();
 1755|  2.79k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  504|  5.59k|    {
  505|  5.59k|        return m_has_value;
  506|  5.59k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.79k|    {
 1819|  2.79k|        return std::move(value());
 1820|  2.79k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.79k|    {
 1783|  2.79k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.79k|        return this->get_value();
 1785|  2.79k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.79k|    {
  471|  2.79k|        return m_value;
  472|  2.79k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|     28|        : base(unexpect, std::move(e.error())),
 1630|     28|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     28|    {
 1632|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  651|     28|        : m_has_value(false)
  652|     28|    {
  653|     28|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  715|     28|    {
  716|     28|        scn::detail::construct_at(unexpected_ptr(),
  717|     28|                                  std::forward<Args>(args)...);
  718|     28|        m_has_value = false;
  719|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|     84|    {
  745|     84|        return reinterpret_cast<unexpected<E>*>(
  746|     84|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|     84|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|     84|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|     28|    {
 1330|     28|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1753|     28|    {
 1754|     28|        return has_value();
 1755|     28|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  701|     84|    {
  702|     84|        return m_has_value;
  703|     84|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1759|     28|    {
 1760|     28|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     28|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     28|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     28|        return this->get_unexpected().error();
 1762|     28|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|     28|    {
  685|     28|        return *unexpected_ptr();
  686|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  657|     28|    {
  658|     28|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 0, False: 28]
  ------------------
  659|      0|            destroy_value();
  660|      0|        }
  661|     28|        else {
  662|     28|            destroy_unexpected();
  663|     28|        }
  664|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|     28|    {
  727|     28|        scn::detail::destroy_at(unexpected_ptr());
  728|     28|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   159k|    {
 3014|   159k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   159k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   159k|    {
 2995|   159k|        return t.data();
 2996|   159k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|  5.12k|        : base(std::in_place, std::forward<U>(val)),
 1584|  5.12k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  5.12k|    {
 1586|  5.12k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|  5.12k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  5.12k|    {
  457|  5.12k|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1818|    216|    {
 1819|    216|        return std::move(value());
 1820|    216|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1363|  3.33k|{
 1364|  3.33k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  3.33k|}
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1992|    402|    {
 1993|    402|        return detail::transform_error_impl(std::move(*this),
 1994|    402|                                            std::forward<F>(f));
 1995|    402|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1475|    402|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    402|    else {
 1486|    402|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    402|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    402|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 402, False: 0]
  |  |  ------------------
  ------------------
 1488|    402|                   ? result(*std::forward<Exp>(exp))
 1489|    402|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    402|    }
 1493|    402|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1583|    402|        : base(std::in_place, std::forward<U>(val)),
 1584|    402|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    402|    {
 1586|    402|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  455|    402|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    402|    {
  457|    402|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    402|    {
 1330|    402|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|    402|    {
 1754|    402|        return has_value();
 1755|    402|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|    804|    {
  505|    804|        return m_has_value;
  506|    804|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1818|    402|    {
 1819|    402|        return std::move(value());
 1820|    402|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|    402|    {
 1783|    402|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    402|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    402|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    402|        return this->get_value();
 1785|    402|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|    402|    {
  471|    402|        return m_value;
  472|    402|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1978|    804|    {
 1979|    804|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|    804|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1475|    804|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    804|    else {
 1486|    804|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    804|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    804|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 804]
  |  |  ------------------
  ------------------
 1488|    804|                   ? result(*std::forward<Exp>(exp))
 1489|    804|                   : result(unexpect,
 1490|    804|                            trivial_invoke(std::forward<F>(f),
 1491|    804|                                           std::forward<Exp>(exp).error()));
 1492|    804|    }
 1493|    804|}
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|    882|    {
 1809|    882|        return value();
 1810|    882|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3953|      8|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|    394|    {
 2883|    394|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|    394|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|    394|    {
 2864|    394|        return decay_copy(t.begin());
 2865|    394|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3953|    364|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|    936|    {
 1993|    936|        return detail::transform_error_impl(std::move(*this),
 1994|    936|                                            std::forward<F>(f));
 1995|    936|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|    936|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    936|    else {
 1486|    936|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    936|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    936|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 936, False: 0]
  |  |  ------------------
  ------------------
 1488|    936|                   ? result(*std::forward<Exp>(exp))
 1489|    936|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    936|    }
 1493|    936|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|    936|        : base(std::in_place, std::forward<U>(val)),
 1584|    936|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    936|    {
 1586|    936|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|    936|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    936|    {
  457|    936|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    936|    {
 1330|    936|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|    936|    {
 1754|    936|        return has_value();
 1755|    936|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.87k|    {
  505|  1.87k|        return m_has_value;
  506|  1.87k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|    936|    {
 1819|    936|        return std::move(value());
 1820|    936|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|    936|    {
 1783|    936|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    936|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    936|        return this->get_value();
 1785|    936|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|    936|    {
  471|    936|        return m_value;
  472|    936|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|    958|    {
 1979|    958|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|    958|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|    958|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    958|    else {
 1486|    958|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    958|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    958|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 958]
  |  |  ------------------
  ------------------
 1488|    958|                   ? result(*std::forward<Exp>(exp))
 1489|    958|                   : result(unexpect,
 1490|    958|                            trivial_invoke(std::forward<F>(f),
 1491|    958|                                           std::forward<Exp>(exp).error()));
 1492|    958|    }
 1493|    958|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|    958|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|    958|    static_cast<    \
  |  | 1109|    958|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|    958|    {
 3930|    958|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|  9.94k|    {
 1809|  9.94k|        return value();
 1810|  9.94k|    }
_ZN3scn2v46detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7529|  4.27k|{
 7530|  4.27k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  4.27k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  4.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  4.27k|    auto start = begin;
 7534|  4.27k|    ++begin;
 7535|       |
 7536|  4.27k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.27k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  4.27k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 492, False: 3.78k]
  ------------------
 7543|    492|        handler.on_charset_inverted();
 7544|    492|        ++begin;
 7545|    492|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|    492|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 492]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|    492|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 6, False: 486]
  ------------------
 7552|      6|            handler.on_charset_single(char32_t{']'});
 7553|      6|            ++begin;
 7554|      6|        }
 7555|    492|    }
 7556|  3.78k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 3.78k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|   866k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 866k, False: 0]
  ------------------
 7561|   866k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 866k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|   866k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 4.27k, False: 862k]
  ------------------
 7566|  4.27k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  4.27k|        }
 7568|       |
 7569|   862k|        parse_presentation_set_literal(begin, end, handler);
 7570|   862k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  4.27k|}
_ZN3scn2v46detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7493|   862k|{
 7494|   862k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   862k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   862k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|   862k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|   862k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|   862k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 862k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|   862k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 862k, False: 0]
  |  Branch (7501:25): [True: 4.55k, False: 857k]
  |  Branch (7501:49): [True: 4.55k, False: 0]
  ------------------
 7502|   862k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 4.47k, False: 78]
  ------------------
 7503|  4.47k|        ++begin;
 7504|       |
 7505|  4.47k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  4.47k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  4.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.47k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  4.47k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  4.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.47k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  4.47k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  4.47k|        return;
 7519|  4.47k|    }
 7520|       |
 7521|   857k|    handler.on_charset_single(cp_first);
 7522|   857k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7469|   866k|{
 7470|   866k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   866k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   866k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|   866k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|   866k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 866k]
  |  |  |  Branch (1039:45): [True: 0, False: 866k]
  |  |  |  Branch (1039:45): [True: 0, False: 866k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|   866k|    const auto cp =
 7479|   866k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|   866k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 866k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|   866k|    begin += len;
 7486|   866k|    return cp;
 7487|   866k|}
_ZNK3scn2v46detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7088|  5.58k|    {
 7089|  5.58k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7090|  5.58k|                charset_string_size};
 7091|  5.58k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1583|    882|        : base(std::in_place, std::forward<U>(val)),
 1584|    882|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    882|    {
 1586|    882|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  455|    882|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    882|    {
  457|    882|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1583|  2.79k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.79k|    {
 1586|  2.79k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.79k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.79k|    {
  457|  2.79k|    }
_ZN3scn2v46detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4311|   233k|{
 4312|   233k|    if constexpr (sizeof(CharT) == 1) {
 4313|   233k|        return decode_utf8_code_point_exhaustive_valid(input);
 4314|       |    }
 4315|       |    else if constexpr (sizeof(CharT) == 2) {
 4316|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4317|       |    }
 4318|       |    else {
 4319|       |        SCN_EXPECT(input.size() == 1);
 4320|       |        return static_cast<char32_t>(input.front());
 4321|       |    }
 4322|   233k|}
_ZZN3scn2v46detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4189|  40.8k|    const auto is_trailing_code_unit = [](char ch) {
 4190|  40.8k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4191|  40.8k|    };
_ZNK3scn2v46detail9fill_type13get_code_unitIwEET_v:
 7023|  2.17k|    {
 7024|  2.17k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  | 1104|  2.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7025|  2.17k|        CharT r{};
 7026|  2.17k|        std::memcpy(&r, m_data, m_size);
 7027|  2.17k|        return r;
 7028|  2.17k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|   751k|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|   751k|    else {
 4093|       |        // utf-32
 4094|   751k|        static_assert(sizeof(U) == 4);
 4095|   751k|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|   751k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|   751k|        return 1;
 4097|   751k|    }
 4098|   751k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   698k|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|   698k|    else {
 4299|   698k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|   698k|        auto cp = static_cast<char32_t>(input.front());
 4301|   698k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 65.9k, False: 632k]
  |  |  ------------------
  ------------------
 4302|  65.9k|            return invalid_code_point;
 4303|  65.9k|        }
 4304|   632k|        return cp;
 4305|   698k|    }
 4306|   698k|}
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  71.2k|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  71.2k|    else {
 3984|  71.2k|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  71.2k|                                       to_address(first), to_address(last)))};
 3986|  71.2k|    }
 3987|  71.2k|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   243k|{
  331|   243k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   243k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|   511k|{
  309|   511k|    return p;
  310|   511k|}
_ZN3scn2v46detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  11.6k|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  11.6k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  11.6k|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  11.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  11.6k|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  11.6k|}
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   268k|{
  331|   268k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   268k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   145k|    {
 3510|   145k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   145k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|    186|        : base(unexpect, std::move(e.error())),
 1630|    186|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    186|    {
 1632|    186|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|    186|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    186|          m_has_value(false)
  466|    186|    {
  467|    186|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.1k|    {
 1330|  22.1k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  21.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.9k|    {
 1586|  21.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  21.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.9k|    {
  457|  21.9k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1753|  6.36k|    {
 1754|  6.36k|        return has_value();
 1755|  6.36k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  38.0k|    {
  505|  38.0k|        return m_has_value;
  506|  38.0k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|     74|    {
 1809|     74|        return value();
 1810|     74|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  15.6k|    {
 1783|  15.6k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  15.6k|        return this->get_value();
 1785|  15.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  15.6k|    {
  471|  15.6k|        return m_value;
  472|  15.6k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1583|  3.61k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.61k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.61k|    {
 1586|  3.61k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  3.61k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.61k|    {
  457|  3.61k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.95k|    {
 1330|  3.95k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    340|        : base(unexpect, std::move(e.error())),
 1630|    340|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    340|    {
 1632|    340|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    340|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    340|          m_has_value(false)
  466|    340|    {
  467|    340|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1753|  1.61k|    {
 1754|  1.61k|        return has_value();
 1755|  1.61k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  504|  6.34k|    {
  505|  6.34k|        return m_has_value;
  506|  6.34k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|     40|    {
 1809|     40|        return value();
 1810|     40|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  2.05k|    {
 1783|  2.05k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.05k|        return this->get_value();
 1785|  2.05k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  470|  2.05k|    {
  471|  2.05k|        return m_value;
  472|  2.05k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|    116|        : base(unexpect, std::move(e.error())),
 1630|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    116|    {
 1632|    116|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    116|          m_has_value(false)
  466|    116|    {
  467|    116|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.09k|    {
 1330|  3.09k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|  2.97k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.97k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.97k|    {
 1586|  2.97k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  455|  2.97k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.97k|    {
  457|  2.97k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|    720|    {
 1993|    720|        return detail::transform_error_impl(std::move(*this),
 1994|    720|                                            std::forward<F>(f));
 1995|    720|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|    720|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    720|    else {
 1486|    720|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    720|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    720|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 720, False: 0]
  |  |  ------------------
  ------------------
 1488|    720|                   ? result(*std::forward<Exp>(exp))
 1489|    720|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    720|    }
 1493|    720|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  2.01k|    {
 1819|  2.01k|        return std::move(value());
 1820|  2.01k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1583|  2.02k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.02k|    {
 1586|  2.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  2.02k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.02k|    {
  457|  2.02k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.40k|    {
 1330|  6.40k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1769|    326|    {
 1770|    326|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    326|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    326|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    326|        return std::move(this->get_unexpected().error());
 1772|    326|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|    340|    {
  488|    340|        return m_unexpected;
  489|    340|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.12k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.12k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.12k|    {
 1642|  1.12k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  3.79k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.79k|          m_has_value(false)
  466|  3.79k|    {
  467|  3.79k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|    980|    {
 2883|    980|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|    980|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|    980|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|    980|    {
 2864|    980|        return decay_copy(t.begin());
 2865|    980|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 2107|  2.18k|{
 2108|  2.18k|    return SCN_FWD(t);
  ------------------
  |  | 1110|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  2.18k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3493|    980|    {
 3494|    980|        return m_iterator;
 3495|    980|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|    980|    {
 2940|    980|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|    980|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|    980|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|    980|    {
 2922|    980|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|    980|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|    980|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3497|    980|    {
 3498|    980|        return m_sentinel;
 3499|    980|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3478|    980|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|    980|    static_cast<    \
  |  | 1109|    980|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|    980|    static_cast<    \
  |  | 1109|    980|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|    980|    {
 3480|    980|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1753|  3.09k|    {
 1754|  3.09k|        return has_value();
 1755|  3.09k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  6.18k|    {
  505|  6.18k|        return m_has_value;
  506|  6.18k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5errorEv:
 1759|    116|    {
 1760|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    116|        return this->get_unexpected().error();
 1762|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    116|    {
  488|    116|        return m_unexpected;
  489|    116|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|  2.97k|    {
 1819|  2.97k|        return std::move(value());
 1820|  2.97k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|  2.97k|    {
 1783|  2.97k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.97k|        return this->get_value();
 1785|  2.97k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.97k|    {
  471|  2.97k|        return m_value;
  472|  2.97k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  7.71k|    {
 1330|  7.71k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  7.71k|        : base(std::in_place, std::forward<U>(val)),
 1584|  7.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  7.71k|    {
 1586|  7.71k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|  7.71k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  7.71k|    {
  457|  7.71k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  9.32k|    {
 1993|  9.32k|        return detail::transform_error_impl(std::move(*this),
 1994|  9.32k|                                            std::forward<F>(f));
 1995|  9.32k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  9.32k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  9.32k|    else {
 1486|  9.32k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  9.32k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  9.32k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 9.32k, False: 0]
  |  |  ------------------
  ------------------
 1488|  9.32k|                   ? result(*std::forward<Exp>(exp))
 1489|  9.32k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  9.32k|    }
 1493|  9.32k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  15.5k|    {
 1819|  15.5k|        return std::move(value());
 1820|  15.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|    186|    {
 1770|    186|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    186|        return std::move(this->get_unexpected().error());
 1772|    186|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|    186|    {
  488|    186|        return m_unexpected;
  489|    186|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.10k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.10k|    {
 1642|  1.10k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|  7.71k|    {
 1754|  7.71k|        return has_value();
 1755|  7.71k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|  15.4k|    {
  505|  15.4k|        return m_has_value;
  506|  15.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  7.71k|    {
 1819|  7.71k|        return std::move(value());
 1820|  7.71k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  7.71k|    {
 1783|  7.71k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  7.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  7.71k|        return this->get_value();
 1785|  7.71k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|  7.71k|    {
  471|  7.71k|        return m_value;
  472|  7.71k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  2.66k|        : base(unexpect, std::move(e.error())),
 1630|  2.66k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.66k|    {
 1632|  2.66k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1759|     14|    {
 1760|     14|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     14|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     14|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     14|        return this->get_unexpected().error();
 1762|     14|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    586|        : base(unexpect, std::move(e.error())),
 1630|    586|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    586|    {
 1632|    586|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    912|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    912|          m_has_value(false)
  466|    912|    {
  467|    912|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.12k|    {
 1330|  6.12k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IRS7_vEEOT_:
 1583|     58|        : base(std::in_place, std::forward<U>(val)),
 1584|     58|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|     58|    {
 1586|     58|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  455|     58|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|     58|    {
  457|     58|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  3.80k|        : base(unexpect, std::move(e.error())),
 1630|  3.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.80k|    {
 1632|  3.80k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  3.80k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.80k|          m_has_value(false)
  466|  3.80k|    {
  467|  3.80k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1753|  5.67k|    {
 1754|  5.67k|        return has_value();
 1755|  5.67k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  504|  10.9k|    {
  505|  10.9k|        return m_has_value;
  506|  10.9k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1759|  2.05k|    {
 1760|  2.05k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.05k|        return this->get_unexpected().error();
 1762|  2.05k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  487|  2.70k|    {
  488|  2.70k|        return m_unexpected;
  489|  2.70k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1583|  1.01k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.01k|    {
 1586|  1.01k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  455|  1.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.01k|    {
  457|  1.01k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.01k|    {
 1330|  1.01k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|    102|    {
 1809|    102|        return value();
 1810|    102|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  1.43k|    {
 1783|  1.43k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.43k|        return this->get_value();
 1785|  1.43k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  470|  1.43k|    {
  471|  1.43k|        return m_value;
  472|  1.43k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1753|    764|    {
 1754|    764|        return has_value();
 1755|    764|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  504|  2.02k|    {
  505|  2.02k|        return m_has_value;
  506|  2.02k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    764|    {
 1330|    764|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1818|  1.01k|    {
 1819|  1.01k|        return std::move(value());
 1820|  1.01k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|  1.01k|    {
 1783|  1.01k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.01k|        return this->get_value();
 1785|  1.01k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  470|  1.01k|    {
  471|  1.01k|        return m_value;
  472|  1.01k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3497|  43.4k|    {
 3498|  43.4k|        return m_sentinel;
 3499|  43.4k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1992|  1.61k|    {
 1993|  1.61k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.61k|                                            std::forward<F>(f));
 1995|  1.61k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1475|  1.61k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.61k|    else {
 1486|  1.61k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.61k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.61k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.29k, False: 326]
  |  |  ------------------
  ------------------
 1488|  1.61k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.61k|                   : result(unexpect,
 1490|    326|                            trivial_invoke(std::forward<F>(f),
 1491|    326|                                           std::forward<Exp>(exp).error()));
 1492|  1.61k|    }
 1493|  1.61k|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1583|  1.35k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.35k|    {
 1586|  1.35k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  455|  1.35k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.35k|    {
  457|  1.35k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1639|    326|        : base(unexpect, std::forward<Args>(args)...),
 1640|    326|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    326|    {
 1642|    326|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  1.32k|    {
 1819|  1.32k|        return std::move(value());
 1820|  1.32k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3493|  56.2k|    {
 3494|  56.2k|        return m_iterator;
 3495|  56.2k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1583|    764|        : base(std::in_place, std::forward<U>(val)),
 1584|    764|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    764|    {
 1586|    764|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  455|    764|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    764|    {
  457|    764|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1992|    764|    {
 1993|    764|        return detail::transform_error_impl(std::move(*this),
 1994|    764|                                            std::forward<F>(f));
 1995|    764|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1475|    764|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    764|    else {
 1486|    764|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    764|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    764|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 764, False: 0]
  |  |  ------------------
  ------------------
 1488|    764|                   ? result(*std::forward<Exp>(exp))
 1489|    764|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    764|    }
 1493|    764|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  504|  1.52k|    {
  505|  1.52k|        return m_has_value;
  506|  1.52k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|    764|    {
 1819|    764|        return std::move(value());
 1820|    764|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|    764|    {
 1783|    764|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    764|        return this->get_value();
 1785|    764|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  470|    764|    {
  471|    764|        return m_value;
  472|    764|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1583|    764|        : base(std::in_place, std::forward<U>(val)),
 1584|    764|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    764|    {
 1586|    764|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  455|    764|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    764|    {
  457|    764|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    764|    {
 1330|    764|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1753|    764|    {
 1754|    764|        return has_value();
 1755|    764|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.52k|    {
  505|  1.52k|        return m_has_value;
  506|  1.52k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|    764|    {
 1819|    764|        return std::move(value());
 1820|    764|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|    764|    {
 1783|    764|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    764|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    764|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    764|        return this->get_value();
 1785|    764|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  470|    764|    {
  471|    764|        return m_value;
  472|    764|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1992|    694|    {
 1993|    694|        return detail::transform_error_impl(std::move(*this),
 1994|    694|                                            std::forward<F>(f));
 1995|    694|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1475|    694|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    694|    else {
 1486|    694|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    694|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    694|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 38, False: 656]
  |  |  ------------------
  ------------------
 1488|    694|                   ? result(*std::forward<Exp>(exp))
 1489|    694|                   : result(unexpect,
 1490|    656|                            trivial_invoke(std::forward<F>(f),
 1491|    656|                                           std::forward<Exp>(exp).error()));
 1492|    694|    }
 1493|    694|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1769|    656|    {
 1770|    656|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    656|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    656|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    656|        return std::move(this->get_unexpected().error());
 1772|    656|    }
_ZN3scn2v413scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3928|  1.16k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  1.16k|    static_cast<    \
  |  | 1109|  1.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  1.16k|    {
 3930|  1.16k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3478|  19.3k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  19.3k|    static_cast<    \
  |  | 1109|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  19.3k|    static_cast<    \
  |  | 1109|  19.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  19.3k|    {
 3480|  19.3k|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1629|     44|        : base(unexpect, std::move(e.error())),
 1630|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     44|    {
 1632|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  651|     44|        : m_has_value(false)
  652|     44|    {
  653|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  715|     44|    {
  716|     44|        scn::detail::construct_at(unexpected_ptr(),
  717|     44|                                  std::forward<Args>(args)...);
  718|     44|        m_has_value = false;
  719|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|    132|    {
  745|    132|        return reinterpret_cast<unexpected<E>*>(
  746|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|    132|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|     52|    {
 1330|     52|    }
_ZN3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISJ_vEEOT_:
 1583|      8|        : base(std::in_place, std::forward<U>(val)),
 1584|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|      8|    {
 1586|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSK_EvEENS3_10in_place_tEDpOT_:
  641|      8|        : m_has_value(true)
  642|      8|    {
  643|      8|        construct(std::forward<Args>(args)...);
  644|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSK_EEEvDpOT_:
  708|      8|    {
  709|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|      8|        m_has_value = true;
  711|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEJSK_EEEPT_SM_DpOT0_:
  410|      8|{
  411|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|      8|        T(std::forward<Args>(args)...);
  413|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|     24|    {
  733|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|     52|    {
 1754|     52|        return has_value();
 1755|     52|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|    156|    {
  702|    156|        return m_has_value;
  703|    156|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1759|     44|    {
 1760|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     44|        return this->get_unexpected().error();
 1762|     44|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|     44|    {
  685|     44|        return *unexpected_ptr();
  686|     44|    }
_ZNO3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEdeISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSO_v:
 1818|      8|    {
 1819|      8|        return std::move(value());
 1820|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5valueISJ_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSO_v:
 1782|      8|    {
 1783|      8|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|      8|        return this->get_value();
 1785|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|      8|    {
  668|      8|        return *value_ptr();
  669|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|     52|    {
  658|     52|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 8, False: 44]
  ------------------
  659|      8|            destroy_value();
  660|      8|        }
  661|     44|        else {
  662|     44|            destroy_unexpected();
  663|     44|        }
  664|     52|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|      8|    {
  723|      8|        scn::detail::destroy_at(value_ptr());
  724|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEEEEvPT_:
  416|      8|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|      8|    else {
  423|      8|        p->~T();
  424|      8|    }
  425|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|     44|    {
  727|     44|        scn::detail::destroy_at(unexpected_ptr());
  728|     44|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1753|  6.64k|    {
 1754|  6.64k|        return has_value();
 1755|  6.64k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  12.7k|    {
  505|  12.7k|        return m_has_value;
  506|  12.7k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1759|  3.54k|    {
 1760|  3.54k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  3.54k|        return this->get_unexpected().error();
 1762|  3.54k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  3.54k|    {
  488|  3.54k|        return m_unexpected;
  489|  3.54k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  2.03k|    {
 1819|  2.03k|        return std::move(value());
 1820|  2.03k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  2.59k|    {
 1783|  2.59k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.59k|        return this->get_value();
 1785|  2.59k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.59k|    {
  471|  2.59k|        return m_value;
  472|  2.59k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  1.27k|        : base(unexpect, std::move(e.error())),
 1630|  1.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.27k|    {
 1632|  1.27k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.46k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.46k|          m_has_value(false)
  466|  1.46k|    {
  467|  1.46k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  20.4k|    {
 1330|  20.4k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|    102|        : base(std::in_place, std::forward<U>(val)),
 1584|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    102|    {
 1586|    102|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|    102|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    102|    {
  457|    102|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  12.6k|        : base(unexpect, std::move(e.error())),
 1630|  12.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.6k|    {
 1632|  12.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  12.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.6k|          m_has_value(false)
  466|  12.6k|    {
  467|  12.6k|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1753|  21.5k|    {
 1754|  21.5k|        return has_value();
 1755|  21.5k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  35.6k|    {
  505|  35.6k|        return m_has_value;
  506|  35.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1759|  6.60k|    {
 1760|  6.60k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  6.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  6.60k|        return this->get_unexpected().error();
 1762|  6.60k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  6.60k|    {
  488|  6.60k|        return m_unexpected;
  489|  6.60k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|  4.22k|        : base(std::in_place, std::forward<U>(val)),
 1584|  4.22k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  4.22k|    {
 1586|  4.22k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|  4.22k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  4.22k|    {
  457|  4.22k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  4.22k|    {
 1330|  4.22k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|    114|    {
 1809|    114|        return value();
 1810|    114|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  6.38k|    {
 1783|  6.38k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.38k|        return this->get_value();
 1785|  6.38k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  6.38k|    {
  471|  6.38k|        return m_value;
  472|  6.38k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  3.13k|    {
 1754|  3.13k|        return has_value();
 1755|  3.13k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  8.45k|    {
  505|  8.45k|        return m_has_value;
  506|  8.45k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.13k|    {
 1330|  3.13k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  4.22k|    {
 1819|  4.22k|        return std::move(value());
 1820|  4.22k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  4.22k|    {
 1783|  4.22k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  4.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  4.22k|        return this->get_value();
 1785|  4.22k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|  4.22k|    {
  471|  4.22k|        return m_value;
  472|  4.22k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  6.46k|    {
 1993|  6.46k|        return detail::transform_error_impl(std::move(*this),
 1994|  6.46k|                                            std::forward<F>(f));
 1995|  6.46k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  6.46k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  6.46k|    else {
 1486|  6.46k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  6.46k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  6.46k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 6.27k, False: 186]
  |  |  ------------------
  ------------------
 1488|  6.46k|                   ? result(*std::forward<Exp>(exp))
 1489|  6.46k|                   : result(unexpect,
 1490|    186|                            trivial_invoke(std::forward<F>(f),
 1491|    186|                                           std::forward<Exp>(exp).error()));
 1492|  6.46k|    }
 1493|  6.46k|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  6.28k|        : base(std::in_place, std::forward<U>(val)),
 1584|  6.28k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  6.28k|    {
 1586|  6.28k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  6.28k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  6.28k|    {
  457|  6.28k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|    186|        : base(unexpect, std::forward<Args>(args)...),
 1640|    186|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    186|    {
 1642|    186|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  6.27k|    {
 1819|  6.27k|        return std::move(value());
 1820|  6.27k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|  3.13k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.13k|    {
 1586|  3.13k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  3.13k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.13k|    {
  457|  3.13k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  3.13k|    {
 1993|  3.13k|        return detail::transform_error_impl(std::move(*this),
 1994|  3.13k|                                            std::forward<F>(f));
 1995|  3.13k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|  3.13k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  3.13k|    else {
 1486|  3.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  3.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  3.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 3.13k, False: 0]
  |  |  ------------------
  ------------------
 1488|  3.13k|                   ? result(*std::forward<Exp>(exp))
 1489|  3.13k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  3.13k|    }
 1493|  3.13k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  504|  6.27k|    {
  505|  6.27k|        return m_has_value;
  506|  6.27k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  3.13k|    {
 1819|  3.13k|        return std::move(value());
 1820|  3.13k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  3.13k|    {
 1783|  3.13k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.13k|        return this->get_value();
 1785|  3.13k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  470|  3.13k|    {
  471|  3.13k|        return m_value;
  472|  3.13k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  3.13k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.13k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.13k|    {
 1586|  3.13k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  3.13k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.13k|    {
  457|  3.13k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.13k|    {
 1330|  3.13k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1753|  3.13k|    {
 1754|  3.13k|        return has_value();
 1755|  3.13k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  504|  6.27k|    {
  505|  6.27k|        return m_has_value;
  506|  6.27k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  3.13k|    {
 1819|  3.13k|        return std::move(value());
 1820|  3.13k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  3.13k|    {
 1783|  3.13k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.13k|        return this->get_value();
 1785|  3.13k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  470|  3.13k|    {
  471|  3.13k|        return m_value;
  472|  3.13k|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|     44|        : base(unexpect, std::move(e.error())),
 1630|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     44|    {
 1632|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  651|     44|        : m_has_value(false)
  652|     44|    {
  653|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  715|     44|    {
  716|     44|        scn::detail::construct_at(unexpected_ptr(),
  717|     44|                                  std::forward<Args>(args)...);
  718|     44|        m_has_value = false;
  719|     44|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|    132|    {
  745|    132|        return reinterpret_cast<unexpected<E>*>(
  746|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|    132|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|     52|    {
 1330|     52|    }
_ZN3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1583|      8|        : base(std::in_place, std::forward<U>(val)),
 1584|      8|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|      8|    {
 1586|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  641|      8|        : m_has_value(true)
  642|      8|    {
  643|      8|        construct(std::forward<Args>(args)...);
  644|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  708|      8|    {
  709|      8|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|      8|        m_has_value = true;
  711|      8|    }
_ZN3scn2v46detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  410|      8|{
  411|      8|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|      8|        T(std::forward<Args>(args)...);
  413|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|     24|    {
  733|     24|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|     24|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|     24|    }
_ZNK3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|     52|    {
 1754|     52|        return has_value();
 1755|     52|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|    156|    {
  702|    156|        return m_has_value;
  703|    156|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1759|     44|    {
 1760|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|     44|        return this->get_unexpected().error();
 1762|     44|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  684|     44|    {
  685|     44|        return *unexpected_ptr();
  686|     44|    }
_ZNO3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1818|      8|    {
 1819|      8|        return std::move(value());
 1820|      8|    }
_ZNR3scn2v48expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|      8|    {
 1783|      8|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|      8|        return this->get_value();
 1785|      8|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|      8|    {
  668|      8|        return *value_ptr();
  669|      8|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|     52|    {
  658|     52|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 8, False: 44]
  ------------------
  659|      8|            destroy_value();
  660|      8|        }
  661|     44|        else {
  662|     44|            destroy_unexpected();
  663|     44|        }
  664|     52|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|      8|    {
  723|      8|        scn::detail::destroy_at(value_ptr());
  724|      8|    }
_ZN3scn2v46detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  416|      8|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|      8|    else {
  423|      8|        p->~T();
  424|      8|    }
  425|      8|}
_ZN3scn2v46detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|     44|    {
  727|     44|        scn::detail::destroy_at(unexpected_ptr());
  728|     44|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   265k|    {
 3014|   265k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   265k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   265k|    {
 2995|   265k|        return t.data();
 2996|   265k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|   265k|    {
 3389|   265k|        return detail::to_address(ranges::begin(derived()));
 3390|   265k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   265k|    {
 2883|   265k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   265k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   265k|    {
 2864|   265k|        return decay_copy(t.begin());
 2865|   265k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|   265k|    {
 3348|   265k|        return static_cast<D&>(*this);
 3349|   265k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1992|    246|    {
 1993|    246|        return detail::transform_error_impl(std::move(*this),
 1994|    246|                                            std::forward<F>(f));
 1995|    246|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1475|    246|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    246|    else {
 1486|    246|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    246|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    246|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 246, False: 0]
  |  |  ------------------
  ------------------
 1488|    246|                   ? result(*std::forward<Exp>(exp))
 1489|    246|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|    246|    }
 1493|    246|}
_ZN3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1583|    246|        : base(std::in_place, std::forward<U>(val)),
 1584|    246|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    246|    {
 1586|    246|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  455|    246|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    246|    {
  457|    246|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|    246|    {
 1330|    246|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|    246|    {
 1754|    246|        return has_value();
 1755|    246|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|    492|    {
  505|    492|        return m_has_value;
  506|    492|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1818|    246|    {
 1819|    246|        return std::move(value());
 1820|    246|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|    246|    {
 1783|    246|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|    246|        return this->get_value();
 1785|    246|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|    246|    {
  471|    246|        return m_value;
  472|    246|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1978|    470|    {
 1979|    470|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|    470|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1475|    470|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|    470|    else {
 1486|    470|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|    470|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|    470|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 470]
  |  |  ------------------
  ------------------
 1488|    470|                   ? result(*std::forward<Exp>(exp))
 1489|    470|                   : result(unexpect,
 1490|    470|                            trivial_invoke(std::forward<F>(f),
 1491|    470|                                           std::forward<Exp>(exp).error()));
 1492|    470|    }
 1493|    470|}
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRS7_vEEOT_:
 1583|     44|        : base(std::in_place, std::forward<U>(val)),
 1584|     44|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|     44|    {
 1586|     44|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRS8_EvEENSt3__110in_place_tEDpOT_:
  455|     44|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|     44|    {
  457|     44|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1808|    562|    {
 1809|    562|        return value();
 1810|    562|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3953|     20|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|    226|    {
 2883|    226|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|    226|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|    226|    {
 2864|    226|        return decay_copy(t.begin());
 2865|    226|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3953|    214|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|  1.08k|    {
 1993|  1.08k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.08k|                                            std::forward<F>(f));
 1995|  1.08k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|  1.08k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.08k|    else {
 1486|  1.08k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.08k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.08k, False: 0]
  |  |  ------------------
  ------------------
 1488|  1.08k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.08k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|  1.08k|    }
 1493|  1.08k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  1.08k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.08k|    {
 1586|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|  1.08k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.08k|    {
  457|  1.08k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.08k|    {
 1330|  1.08k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|  1.08k|    {
 1754|  1.08k|        return has_value();
 1755|  1.08k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.17k|    {
  505|  2.17k|        return m_has_value;
  506|  2.17k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|  1.08k|    {
 1819|  1.08k|        return std::move(value());
 1820|  1.08k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|  1.08k|    {
 1783|  1.08k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.08k|        return this->get_value();
 1785|  1.08k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.08k|    {
  471|  1.08k|        return m_value;
  472|  1.08k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.10k|    {
 1979|  1.10k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|  1.10k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1475|  1.10k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.10k|    else {
 1486|  1.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 1.10k]
  |  |  ------------------
  ------------------
 1488|  1.10k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.10k|                   : result(unexpect,
 1490|  1.10k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.10k|                                           std::forward<Exp>(exp).error()));
 1492|  1.10k|    }
 1493|  1.10k|}
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1583|     92|        : base(std::in_place, std::forward<U>(val)),
 1584|     92|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|     92|    {
 1586|     92|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|     92|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|     92|    {
  457|     92|    }
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|  1.10k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  1.10k|    static_cast<    \
  |  | 1109|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  1.10k|    {
 3930|  1.10k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|  5.62k|    {
 1809|  5.62k|        return value();
 1810|  5.62k|    }
_ZN3scn2v46detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 7529|    936|{
 7530|    936|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|    936|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|    936|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|    936|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|    936|    auto start = begin;
 7534|    936|    ++begin;
 7535|       |
 7536|    936|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 936]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|    936|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 558, False: 378]
  ------------------
 7543|    558|        handler.on_charset_inverted();
 7544|    558|        ++begin;
 7545|    558|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 558]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|    558|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 6, False: 552]
  ------------------
 7552|      6|            handler.on_charset_single(char32_t{']'});
 7553|      6|            ++begin;
 7554|      6|        }
 7555|    558|    }
 7556|    378|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 378]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  9.71k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 9.71k, False: 0]
  ------------------
 7561|  9.71k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  9.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.71k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  9.71k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 936, False: 8.77k]
  ------------------
 7566|    936|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|    936|        }
 7568|       |
 7569|  8.77k|        parse_presentation_set_literal(begin, end, handler);
 7570|  8.77k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|    936|}
_ZN3scn2v46detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 7493|  8.77k|{
 7494|  8.77k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  8.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  8.77k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  8.77k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  8.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 8.77k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  8.77k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 8.77k, False: 0]
  |  Branch (7501:25): [True: 600, False: 8.17k]
  |  Branch (7501:49): [True: 600, False: 0]
  ------------------
 7502|  8.77k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 594, False: 6]
  ------------------
 7503|    594|        ++begin;
 7504|       |
 7505|    594|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|    594|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 594]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|    594|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|    594|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 594]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|    594|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|    594|        return;
 7519|    594|    }
 7520|       |
 7521|  8.18k|    handler.on_charset_single(cp_first);
 7522|  8.18k|}
_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 7469|  9.37k|{
 7470|  9.37k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  9.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  9.37k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  9.37k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.37k]
  |  |  |  Branch (1039:45): [True: 0, False: 9.37k]
  |  |  |  Branch (1039:45): [True: 0, False: 9.37k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  9.37k|    const auto cp =
 7479|  9.37k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  9.37k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  9.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.37k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  9.37k|    begin += len;
 7486|  9.37k|    return cp;
 7487|  9.37k|}
_ZNK3scn2v46detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 7088|    936|    {
 7089|    936|        return {reinterpret_cast<const CharT*>(charset_string_data),
 7090|    936|                charset_string_size};
 7091|    936|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1583|    540|        : base(std::in_place, std::forward<U>(val)),
 1584|    540|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    540|    {
 1586|    540|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  455|    540|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    540|    {
  457|    540|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1583|    690|        : base(std::in_place, std::forward<U>(val)),
 1584|    690|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    690|    {
 1586|    690|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  455|    690|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    690|    {
  457|    690|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|  63.3k|    {
 6263|  63.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 63.3k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  63.3k|        return static_cast<std::size_t>(m_desc &
 6268|  63.3k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  63.3k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|   102k|    {
 6289|   102k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   102k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|  38.8k|    {
 6231|  38.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 38.8k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  38.8k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 248, False: 38.5k]
  |  |  ------------------
  ------------------
 6239|    248|            return {};
 6240|    248|        }
 6241|       |
 6242|  38.5k|        const auto t = type(id);
 6243|  38.5k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.35k, False: 37.2k]
  |  |  ------------------
  ------------------
 6244|  1.35k|            return {};
 6245|  1.35k|        }
 6246|       |
 6247|  37.2k|        basic_scan_arg<Context> arg;
 6248|  37.2k|        arg.m_type = t;
 6249|  37.2k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 37.2k, False: 0]
  ------------------
 6250|  37.2k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  37.2k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  37.2k|        return arg;
 6256|  38.5k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|  38.8k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  60.5k|    arg_value() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|  38.5k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  38.5k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  38.5k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  38.5k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  38.5k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|  37.2k|    {
 6293|  37.2k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  37.2k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|  73.5k|    {
 6047|  73.5k|        return m_type != detail::arg_type::none_type;
 6048|  73.5k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  5.70k|{
 9494|  5.70k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  5.70k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  5.70k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  5.70k|{
 9353|  5.70k|#define SCN_VISIT(Type)                                                \
 9354|  5.70k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  5.70k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  5.70k|    }                                                                  \
 9357|  5.70k|    else {                                                             \
 9358|  5.70k|        return vis(monostate_val);                                     \
 9359|  5.70k|    }
 9360|       |
 9361|  5.70k|    monostate monostate_val{};
 9362|       |
 9363|  5.70k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 5.70k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 5.70k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|    634|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 634, False: 5.07k]
  ------------------
 9369|    634|            SCN_VISIT(int);
  ------------------
  |  | 9354|    634|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    634|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    634|    }                                                                  \
  |  | 9357|    634|    else {                                                             \
  |  | 9358|    634|        return vis(monostate_val);                                     \
  |  | 9359|    634|    }
  ------------------
 9370|    634|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 5.70k]
  ------------------
 9371|    634|            SCN_VISIT(long);
  ------------------
  |  | 9354|    634|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    634|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    634|    }                                                                  \
  |  | 9357|    634|    else {                                                             \
  |  | 9358|    634|        return vis(monostate_val);                                     \
  |  | 9359|    634|    }
  ------------------
 9372|    634|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 5.70k]
  ------------------
 9373|    634|            SCN_VISIT(long long);
  ------------------
  |  | 9354|    634|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    634|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    634|    }                                                                  \
  |  | 9357|    634|    else {                                                             \
  |  | 9358|    634|        return vis(monostate_val);                                     \
  |  | 9359|    634|    }
  ------------------
 9374|    634|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 5.70k]
  ------------------
 9375|    634|#if SCN_HAS_INT128
 9376|    634|            SCN_VISIT(int128)
  ------------------
  |  | 9354|    634|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    634|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    634|    }                                                                  \
  |  | 9357|    634|    else {                                                             \
  |  | 9358|    634|        return vis(monostate_val);                                     \
  |  | 9359|    634|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|    634|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 5.70k]
  ------------------
 9381|    634|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|    634|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    634|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    634|    }                                                                  \
  |  | 9357|    634|    else {                                                             \
  |  | 9358|    634|        return vis(monostate_val);                                     \
  |  | 9359|    634|    }
  ------------------
 9382|    634|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 5.70k]
  ------------------
 9383|    634|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|    634|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    634|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    634|    }                                                                  \
  |  | 9357|    634|    else {                                                             \
  |  | 9358|    634|        return vis(monostate_val);                                     \
  |  | 9359|    634|    }
  ------------------
 9384|  1.26k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 634, False: 5.07k]
  ------------------
 9385|  1.26k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9386|  1.26k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 5.70k]
  ------------------
 9387|  1.26k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9388|  1.26k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 5.70k]
  ------------------
 9389|  1.26k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9390|  1.26k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 5.70k]
  ------------------
 9391|  1.26k|#if SCN_HAS_INT128
 9392|  1.26k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  1.90k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 634, False: 5.07k]
  ------------------
 9397|  1.90k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  1.90k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.90k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.90k|    }                                                                  \
  |  | 9357|  1.90k|    else {                                                             \
  |  | 9358|  1.90k|        return vis(monostate_val);                                     \
  |  | 9359|  1.90k|    }
  ------------------
 9398|  2.53k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 634, False: 5.07k]
  ------------------
 9399|  2.53k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  2.53k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.53k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.53k|    }                                                                  \
  |  | 9357|  2.53k|    else {                                                             \
  |  | 9358|  2.53k|        return vis(monostate_val);                                     \
  |  | 9359|  2.53k|    }
  ------------------
 9400|  3.17k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 634, False: 5.07k]
  ------------------
 9401|  3.17k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  3.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.17k|    }                                                                  \
  |  | 9357|  3.17k|    else {                                                             \
  |  | 9358|  3.17k|        return vis(monostate_val);                                     \
  |  | 9359|  3.17k|    }
  ------------------
 9402|  3.17k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 5.70k]
  ------------------
 9403|  3.17k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  3.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.17k|    }                                                                  \
  |  | 9357|  3.17k|    else {                                                             \
  |  | 9358|  3.17k|        return vis(monostate_val);                                     \
  |  | 9359|  3.17k|    }
  ------------------
 9404|  3.17k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 5.70k]
  ------------------
 9405|  3.17k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  3.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.17k|    }                                                                  \
  |  | 9357|  3.17k|    else {                                                             \
  |  | 9358|  3.17k|        return vis(monostate_val);                                     \
  |  | 9359|  3.17k|    }
  ------------------
 9406|  3.17k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 5.70k]
  ------------------
 9407|  3.17k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  3.17k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.17k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.17k|    }                                                                  \
  |  | 9357|  3.17k|    else {                                                             \
  |  | 9358|  3.17k|        return vis(monostate_val);                                     \
  |  | 9359|  3.17k|    }
  ------------------
 9408|  3.80k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 634, False: 5.07k]
  ------------------
 9409|  3.80k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  3.80k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.80k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.80k|    }                                                                  \
  |  | 9357|  3.80k|    else {                                                             \
  |  | 9358|  3.80k|        return vis(monostate_val);                                     \
  |  | 9359|  3.80k|    }
  ------------------
 9410|  3.80k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 5.70k]
  ------------------
 9411|  3.80k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  3.80k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.80k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.80k|    }                                                                  \
  |  | 9357|  3.80k|    else {                                                             \
  |  | 9358|  3.80k|        return vis(monostate_val);                                     \
  |  | 9359|  3.80k|    }
  ------------------
 9412|  3.80k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 5.70k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  3.80k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 5.70k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 5.70k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 5.70k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 5.70k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|    634|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 634, False: 5.07k]
  ------------------
 9443|    634|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|    634|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    634|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    634|    }                                                                  \
  |  | 9357|    634|    else {                                                             \
  |  | 9358|    634|        return vis(monostate_val);                                     \
  |  | 9359|    634|    }
  ------------------
 9444|  1.26k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 634, False: 5.07k]
  ------------------
 9445|  1.26k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  1.26k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.26k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.26k|    }                                                                  \
  |  | 9357|  1.26k|    else {                                                             \
  |  | 9358|  1.26k|        return vis(monostate_val);                                     \
  |  | 9359|  1.26k|    }
  ------------------
 9446|  1.90k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 634, False: 5.07k]
  ------------------
 9447|  1.90k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  1.90k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  1.90k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.90k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.90k|    }                                                                  \
  |  | 9357|  1.90k|    else {                                                             \
  |  | 9358|  1.90k|        return vis(monostate_val);                                     \
  |  | 9359|  1.90k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  1.90k|        }
 9454|       |
 9455|  1.90k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 5.70k]
  ------------------
 9456|  1.90k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  1.90k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  1.90k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 5.70k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 5.70k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  5.70k|            SCN_CLANG_POP
 9473|  5.70k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|   100k|{
 6092|   100k|    return arg.m_type;
 6093|   100k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  34.6k|{
 6104|  34.6k|    return arg.m_value;
 6105|  34.6k|}
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  2.10k|    {
 1993|  2.10k|        return detail::transform_error_impl(std::move(*this),
 1994|  2.10k|                                            std::forward<F>(f));
 1995|  2.10k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  2.10k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.10k|    else {
 1486|  2.10k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.10k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.00k, False: 102]
  |  |  ------------------
  ------------------
 1488|  2.10k|                   ? result(*std::forward<Exp>(exp))
 1489|  2.10k|                   : result(unexpect,
 1490|    102|                            trivial_invoke(std::forward<F>(f),
 1491|    102|                                           std::forward<Exp>(exp).error()));
 1492|  2.10k|    }
 1493|  2.10k|}
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|    102|        : base(unexpect, std::forward<Args>(args)...),
 1640|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    102|    {
 1642|    102|    }
_ZNO3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  2.00k|    {
 1819|  2.00k|        return std::move(value());
 1820|  2.00k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|  63.3k|        : m_format{format},
 6362|  63.3k|          m_next_arg_id{next_arg_id},
 6363|  63.3k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  63.3k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  63.3k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  63.3k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  63.3k|    {
 6369|  63.3k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  63.3k|    {
 3089|  63.3k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  63.3k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|  63.3k|    {
 3055|  63.3k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  63.3k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  63.3k|{
 7878|  63.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  63.3k|    handler.check_args_exhausted();
 7880|  63.3k|    return handler.get_error();
 7881|  63.3k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  63.3k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  63.3k|    auto begin = format.data();
 7846|  63.3k|    auto it = begin;
 7847|  63.3k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   266k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 258k, False: 7.40k]
  ------------------
 7850|   258k|        const auto ch = *it++;
 7851|   258k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 68.2k, False: 190k]
  ------------------
 7852|  68.2k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  68.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  68.2k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 54.2k, False: 13.9k]
  ------------------
 7856|  54.2k|                return;
 7857|  54.2k|            }
 7858|  68.2k|        }
 7859|   190k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 2.99k, False: 187k]
  ------------------
 7860|  2.99k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.70k, False: 1.28k]
  |  |  |  Branch (1039:45): [True: 306, False: 2.68k]
  |  |  |  Branch (1039:45): [True: 1.40k, False: 1.28k]
  |  |  ------------------
  ------------------
 7861|  1.70k|                handler.on_error("Unmatched '}' in format string");
 7862|  1.70k|                return;
 7863|  1.70k|            }
 7864|       |
 7865|  1.28k|            handler.on_literal_text(begin, it);
 7866|  1.28k|            begin = ++it;
 7867|  1.28k|        }
 7868|   258k|    }
 7869|       |
 7870|  7.40k|    handler.on_literal_text(begin, end);
 7871|  7.40k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|  68.2k|{
 7775|  68.2k|    struct id_adapter {
 7776|  68.2k|        constexpr void operator()()
 7777|  68.2k|        {
 7778|  68.2k|            arg_id = handler.on_arg_id();
 7779|  68.2k|        }
 7780|  68.2k|        constexpr void operator()(std::size_t id)
 7781|  68.2k|        {
 7782|  68.2k|            arg_id = handler.on_arg_id(id);
 7783|  68.2k|        }
 7784|       |
 7785|  68.2k|        constexpr void on_error(const char* msg)
 7786|  68.2k|        {
 7787|  68.2k|            SCN_UNLIKELY_ATTR
 7788|  68.2k|            handler.on_error(msg);
 7789|  68.2k|        }
 7790|       |
 7791|  68.2k|        Handler& handler;
 7792|  68.2k|        std::size_t arg_id;
 7793|  68.2k|    };
 7794|       |
 7795|  68.2k|    ++begin;
 7796|  68.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 206, False: 68.0k]
  |  |  ------------------
  ------------------
 7797|    206|        handler.on_error("Unexpected end of replacement field");
 7798|    206|        return begin;
 7799|    206|    }
 7800|       |
 7801|  68.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 5.69k, False: 62.3k]
  ------------------
 7802|  5.69k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|  5.69k|    }
 7804|  62.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 6.98k, False: 55.3k]
  ------------------
 7805|  6.98k|        handler.on_literal_text(begin, begin + 1);
 7806|  6.98k|    }
 7807|  55.3k|    else {
 7808|  55.3k|        auto adapter = id_adapter{handler, 0};
 7809|  55.3k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  55.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  55.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 110, False: 55.2k]
  |  |  ------------------
  ------------------
 7812|    110|            handler.on_error("Missing '}' in format string");
 7813|    110|            return begin;
 7814|    110|        }
 7815|       |
 7816|  55.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 320, False: 54.8k]
  ------------------
 7817|    320|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|    320|        }
 7819|  54.8k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 32.8k, False: 22.0k]
  ------------------
 7820|  32.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 74, False: 32.7k]
  |  |  ------------------
  ------------------
 7821|     74|                handler.on_error("Unexpected end of replacement field");
 7822|     74|                return begin;
 7823|     74|            }
 7824|  32.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  32.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.34k, False: 29.4k]
  |  |  |  Branch (1039:45): [True: 0, False: 32.7k]
  |  |  |  Branch (1039:45): [True: 3.34k, False: 29.4k]
  |  |  ------------------
  ------------------
 7826|  3.34k|                handler.on_error("Unknown format specifier");
 7827|  3.34k|                return begin;
 7828|  3.34k|            }
 7829|  32.7k|        }
 7830|  22.0k|        else {
 7831|  22.0k|            SCN_UNLIKELY_ATTR
 7832|  22.0k|            handler.on_error("Missing '}' in format string");
 7833|  22.0k|            return begin;
 7834|  22.0k|        }
 7835|  55.2k|    }
 7836|  42.4k|    return begin + 1;
 7837|  68.0k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|  38.8k|    {
 8919|  38.8k|        return m_args.get(id);
 8920|  38.8k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|  38.1k|    {
 6397|  38.1k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42, False: 38.0k]
  |  |  ------------------
  ------------------
 6398|     42|            on_error(
 6399|     42|                "Cannot switch from manual to automatic argument indexing");
 6400|     42|            return 0;
 6401|     42|        }
 6402|       |
 6403|  38.0k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|  38.0k|        do_check_arg_id(id);
 6405|  38.0k|        return id;
 6406|  38.1k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6426|    112|    {
 6427|    112|        m_error = unexpected(detail::handle_error(
 6428|    112|            scan_error{scan_error::invalid_format_string, msg}));
 6429|    112|        return m_error.error();
 6430|    112|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|  38.7k|{
 6891|  38.7k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|  38.7k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|  38.7k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  55.3k|{
 7276|  55.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  55.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  55.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  55.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 55.3k, False: 0]
  |  Branch (7277:26): [True: 22.8k, False: 32.4k]
  ------------------
 7278|  22.8k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|  22.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|  22.8k|    }
 7280|       |
 7281|  32.4k|    handler();
 7282|  32.4k|    return begin;
 7283|  55.3k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7245|  22.8k|{
 7246|  22.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  22.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7247|       |
 7248|  22.8k|    CharT c = *begin;
 7249|  22.8k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7249:9): [True: 21.8k, False: 1.04k]
  |  Branch (7249:27): [True: 124, False: 918]
  ------------------
 7250|  21.9k|        handler.on_error("Invalid argument ID");
 7251|  21.9k|        return begin;
 7252|  21.9k|    }
 7253|       |
 7254|    918|    int idx = 0;
 7255|    918|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7255:9): [True: 486, False: 432]
  ------------------
 7256|    486|        idx = parse_simple_int(begin, end);
 7257|    486|    }
 7258|    432|    else {
 7259|    432|        ++begin;
 7260|    432|    }
 7261|       |
 7262|    918|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7262:9): [True: 110, False: 808]
  |  Branch (7262:26): [True: 488, False: 320]
  |  Branch (7262:50): [True: 72, False: 416]
  ------------------
 7263|    182|        handler.on_error("Invalid argument ID");
 7264|    182|        return begin;
 7265|    182|    }
 7266|    736|    handler(idx);
 7267|       |
 7268|    736|    return begin;
 7269|    918|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7786|  22.1k|        {
 7787|  22.1k|            SCN_UNLIKELY_ATTR
 7788|  22.1k|            handler.on_error(msg);
 7789|  22.1k|        }
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7224|  16.5k|{
 7225|  16.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7226|  16.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1104|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7227|       |
 7228|  16.5k|    unsigned long long value = 0;
 7229|  32.1k|    do {
 7230|  32.1k|        value *= 10;
 7231|  32.1k|        value += static_cast<unsigned long long>(*begin - '0');
 7232|  32.1k|        if (value >
  ------------------
  |  Branch (7232:13): [True: 116, False: 32.0k]
  ------------------
 7233|  32.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7234|    116|            return -1;
 7235|    116|        }
 7236|  32.0k|        ++begin;
 7237|  32.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7237:14): [True: 31.7k, False: 294]
  |  Branch (7237:30): [True: 27.5k, False: 4.20k]
  |  Branch (7237:47): [True: 15.6k, False: 11.8k]
  ------------------
 7238|  16.3k|    return static_cast<int>(value);
 7239|  16.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7781|    736|        {
 7782|    736|            arg_id = handler.on_arg_id(id);
 7783|    736|        }
_ZN3scn2v424basic_scan_parse_contextIcE12check_arg_idEm:
 6409|    736|    {
 6410|    736|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  | 1039|    736|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 70, False: 666]
  |  |  ------------------
  ------------------
 6411|     70|            on_error(
 6412|     70|                "Cannot switch from manual to automatic argument indexing");
 6413|     70|            return;
 6414|     70|        }
 6415|    666|        m_next_arg_id = -1;
 6416|    666|        do_check_arg_id(id);
 6417|    666|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  32.4k|        {
 7778|  32.4k|            arg_id = handler.on_arg_id();
 7779|  32.4k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|  29.1k|    {
 6392|  29.1k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|  29.1k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|  61.9k|    {
 6381|  61.9k|        return m_format.data();
 6382|  61.9k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|  32.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|  32.7k|    {
 7962|  32.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|  32.7k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|  32.7k|{
 7691|  32.7k|    auto do_presentation = [&]() -> const CharT* {
 7692|  32.7k|        if (*begin == CharT{'['}) {
 7693|  32.7k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  32.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|  32.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|  32.7k|                return begin;
 7699|  32.7k|            }
 7700|  32.7k|            handler.on_character_set_string(set);
 7701|  32.7k|            return begin;
 7702|  32.7k|        }
 7703|  32.7k|        if (*begin == CharT{'/'}) {
 7704|  32.7k|            return parse_presentation_regex(begin, end, handler);
 7705|  32.7k|        }
 7706|  32.7k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  32.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|  32.7k|            handler.on_error("Invalid type specifier in format string");
 7709|  32.7k|            return begin;
 7710|  32.7k|        }
 7711|  32.7k|        handler.on_type(type);
 7712|  32.7k|        return begin;
 7713|  32.7k|    };
 7714|       |
 7715|  32.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 31.6k, False: 1.09k]
  |  Branch (7715:28): [True: 2.51k, False: 29.1k]
  ------------------
 7716|  32.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 968, False: 1.54k]
  |  Branch (7716:36): [True: 934, False: 34]
  ------------------
 7717|    934|        return do_presentation();
 7718|    934|    }
 7719|       |
 7720|  31.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 31.8k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  31.8k|    begin = parse_align(begin, end, handler);
 7726|  31.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 126, False: 31.7k]
  |  |  ------------------
  ------------------
 7727|    126|        handler.on_error("Unexpected end of format string");
 7728|    126|        return begin;
 7729|    126|    }
 7730|       |
 7731|  31.7k|    begin = parse_width(begin, end, handler);
 7732|  31.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  31.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 102, False: 31.6k]
  |  |  ------------------
  ------------------
 7733|    102|        handler.on_error("Unexpected end of format string");
 7734|    102|        return begin;
 7735|    102|    }
 7736|       |
 7737|  31.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 12.0k, False: 19.6k]
  ------------------
 7738|  12.0k|        ++begin;
 7739|  12.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 11.9k]
  |  |  ------------------
  ------------------
 7740|     34|            handler.on_error("Unexpected end of format string");
 7741|     34|            return begin;
 7742|     34|        }
 7743|  11.9k|        begin = parse_precision(begin, end, handler);
 7744|  11.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 114, False: 11.8k]
  |  |  ------------------
  ------------------
 7745|    114|            handler.on_error("Unexpected end of format string");
 7746|    114|            return begin;
 7747|    114|        }
 7748|  11.9k|    }
 7749|       |
 7750|  31.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 596, False: 30.8k]
  ------------------
 7751|    596|        handler.on_localized();
 7752|    596|        ++begin;
 7753|    596|    }
 7754|  31.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  31.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52, False: 31.4k]
  |  |  ------------------
  ------------------
 7755|     52|        handler.on_error("Unexpected end of format string");
 7756|     52|        return begin;
 7757|     52|    }
 7758|       |
 7759|  31.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 31.4k, False: 0]
  |  Branch (7759:25): [True: 25.3k, False: 6.04k]
  ------------------
 7760|  25.3k|        do_presentation();
 7761|  25.3k|    }
 7762|  31.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  31.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.99k, False: 29.4k]
  |  |  ------------------
  ------------------
 7763|  1.99k|        handler.on_error("Unexpected end of format string");
 7764|  1.99k|        return begin;
 7765|  1.99k|    }
 7766|       |
 7767|  29.4k|    return begin;
 7768|  31.4k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|  2.51k|{
 7340|  2.51k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 932, False: 1.58k]
  |  Branch (7340:33): [True: 880, False: 52]
  ------------------
 7341|  2.51k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 304, False: 1.32k]
  |  Branch (7341:33): [True: 88, False: 216]
  ------------------
 7342|  2.51k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|  26.3k|    auto do_presentation = [&]() -> const CharT* {
 7692|  26.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 15.6k, False: 10.6k]
  ------------------
 7693|  15.6k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  15.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 828, False: 14.8k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|    828|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|    828|                return begin;
 7699|    828|            }
 7700|  14.8k|            handler.on_character_set_string(set);
 7701|  14.8k|            return begin;
 7702|  15.6k|        }
 7703|  10.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 4.37k, False: 6.29k]
  ------------------
 7704|  4.37k|            return parse_presentation_regex(begin, end, handler);
 7705|  4.37k|        }
 7706|  6.29k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  6.29k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|  6.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 916, False: 5.37k]
  |  |  ------------------
  ------------------
 7708|    916|            handler.on_error("Invalid type specifier in format string");
 7709|    916|            return begin;
 7710|    916|        }
 7711|  5.37k|        handler.on_type(type);
 7712|  5.37k|        return begin;
 7713|  6.29k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7529|  15.6k|{
 7530|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  15.6k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  15.6k|    auto start = begin;
 7534|  15.6k|    ++begin;
 7535|       |
 7536|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42, False: 15.6k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|     42|        return {};
 7541|     42|    }
 7542|  15.6k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 2.46k, False: 13.1k]
  ------------------
 7543|  2.46k|        handler.on_charset_inverted();
 7544|  2.46k|        ++begin;
 7545|  2.46k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 2.42k]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|     34|            return {};
 7550|     34|        }
 7551|  2.42k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 52, False: 2.37k]
  ------------------
 7552|     52|            handler.on_charset_single(char32_t{']'});
 7553|     52|            ++begin;
 7554|     52|        }
 7555|  2.42k|    }
 7556|  13.1k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 34, False: 13.1k]
  ------------------
 7557|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|     34|    }
 7559|       |
 7560|  2.61M|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 2.61M, False: 484]
  ------------------
 7561|  2.61M|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 234, False: 2.61M]
  |  |  ------------------
  ------------------
 7562|    234|            break;
 7563|    234|        }
 7564|       |
 7565|  2.61M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 14.8k, False: 2.59M]
  ------------------
 7566|  14.8k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  14.8k|        }
 7568|       |
 7569|  2.59M|        parse_presentation_set_literal(begin, end, handler);
 7570|  2.59M|    }
 7571|       |
 7572|    718|    SCN_UNLIKELY_ATTR
 7573|    718|    handler.on_error("Invalid [character set] specifier in format string");
 7574|    718|    return {};
 7575|  15.5k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7493|  2.59M|{
 7494|  2.59M|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  2.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  2.59M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  2.59M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  2.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 112, False: 2.59M]
  |  |  ------------------
  ------------------
 7498|    112|        return;
 7499|    112|    }
 7500|       |
 7501|  2.59M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 2.59M, False: 188]
  |  Branch (7501:25): [True: 15.0k, False: 2.58M]
  |  Branch (7501:49): [True: 15.0k, False: 34]
  ------------------
 7502|  2.59M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 14.7k, False: 268]
  ------------------
 7503|  14.7k|        ++begin;
 7504|       |
 7505|  14.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  14.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 70, False: 14.7k]
  |  |  ------------------
  ------------------
 7507|     70|            return;
 7508|     70|        }
 7509|       |
 7510|  14.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 14.6k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|     34|            return;
 7515|     34|        }
 7516|       |
 7517|  14.6k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  14.6k|        return;
 7519|  14.7k|    }
 7520|       |
 7521|  2.58M|    handler.on_charset_single(cp_first);
 7522|  2.58M|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7469|  2.61M|{
 7470|  2.61M|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  2.61M|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  2.61M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  5.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 96, False: 2.61M]
  |  |  |  Branch (1039:45): [True: 70, False: 2.61M]
  |  |  |  Branch (1039:45): [True: 26, False: 2.61M]
  |  |  ------------------
  ------------------
 7474|     96|        handler.on_error("Invalid encoding in format string");
 7475|     96|        return invalid_code_point;
 7476|     96|    }
 7477|       |
 7478|  2.61M|    const auto cp =
 7479|  2.61M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  2.61M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 86, False: 2.61M]
  |  |  ------------------
  ------------------
 7481|     86|        handler.on_error("Invalid encoding in format string");
 7482|     86|        return invalid_code_point;
 7483|     86|    }
 7484|       |
 7485|  2.61M|    begin += len;
 7486|  2.61M|    return cp;
 7487|  2.61M|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7183|  14.8k|    {
 7184|  14.8k|        m_specs.charset_string_data = fmt.data();
 7185|  14.8k|        m_specs.charset_string_size = fmt.size();
 7186|  14.8k|        on_type(presentation_type::string_set);
 7187|  14.8k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_RSK_SK_OT0_:
 7581|  4.37k|{
 7582|  4.37k|#if !SCN_DISABLE_REGEX
 7583|  4.37k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7584|  4.37k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  | 1104|  4.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7585|       |
 7586|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7587|       |                  std::is_same_v<CharT, wchar_t>) {
 7588|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 7589|       |        return begin;
 7590|       |    }
 7591|       |
 7592|  4.37k|    auto start = begin;
 7593|  4.37k|    ++begin;
 7594|       |
 7595|  4.37k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 4.33k]
  |  |  ------------------
  ------------------
 7596|     34|        handler.on_error("Unexpected end of regex in format string");
 7597|     34|        return begin;
 7598|     34|    }
 7599|       |
 7600|  4.33k|    handler.on_type(presentation_type::regex);
 7601|   274k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7601:12): [True: 274k, False: 182]
  ------------------
 7602|   274k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7602:13): [True: 29.3k, False: 245k]
  ------------------
 7603|  29.3k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7603:17): [True: 4.15k, False: 25.1k]
  ------------------
 7604|  4.15k|                break;
 7605|  4.15k|            }
 7606|  25.1k|            else {
 7607|  25.1k|                handler.on_type(presentation_type::regex_escaped);
 7608|  25.1k|            }
 7609|  29.3k|        }
 7610|   274k|    }
 7611|  4.33k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 182, False: 4.15k]
  |  |  ------------------
  ------------------
 7612|    182|        handler.on_error("Unexpected end of regex in format string");
 7613|    182|        return begin;
 7614|    182|    }
 7615|       |
 7616|  4.15k|    auto regex_end = begin;
 7617|  4.15k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7618|  4.15k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  | 1039|  4.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 4.12k]
  |  |  ------------------
  ------------------
 7619|     34|        handler.on_error("Invalid (empty) regex in format string");
 7620|     34|        return begin;
 7621|     34|    }
 7622|  4.12k|    handler.on_regex_pattern(regex_pattern);
 7623|  4.12k|    ++begin;
 7624|       |
 7625|  4.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 4.08k]
  |  |  ------------------
  ------------------
 7626|     34|        handler.on_error("Unexpected end of regex in format string");
 7627|     34|        return begin;
 7628|     34|    }
 7629|       |
 7630|  4.08k|    regex_flags flags{regex_flags::none};
 7631|  4.08k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7632|  4.08k|        {{'m', regex_flags::multiline},
 7633|  4.08k|         {'s', regex_flags::singleline},
 7634|  4.08k|         {'i', regex_flags::nocase},
 7635|  4.08k|         {'n', regex_flags::nocapture}}};
 7636|  4.30k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7636:12): [True: 4.26k, False: 42]
  ------------------
 7637|  4.26k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7637:13): [True: 3.95k, False: 310]
  ------------------
 7638|  3.95k|            break;
 7639|  3.95k|        }
 7640|    310|        bool found_flag = false;
 7641|    874|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7641:24): [True: 874, False: 54]
  ------------------
 7642|    874|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7642:17): [True: 618, False: 256]
  ------------------
 7643|    618|                continue;
 7644|    618|            }
 7645|    256|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7645:17): [True: 34, False: 222]
  ------------------
 7646|     34|                handler.on_error("Flag set multiple times in regex");
 7647|     34|                return begin;
 7648|     34|            }
 7649|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7650|       |            if (*begin == CharT{'s'}) {
 7651|       |                // clang-format off
 7652|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7653|       |                // clang-format on
 7654|       |            }
 7655|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7656|       |            if (*begin == CharT{'m'}) {
 7657|       |                // clang-format off
 7658|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7659|       |                // clang-format on
 7660|       |            }
 7661|       |#endif
 7662|       |#endif
 7663|    222|            flags |= flag.second;
 7664|    222|            found_flag = true;
 7665|    222|            break;
 7666|    256|        }
 7667|    276|        if (!found_flag) {
  ------------------
  |  Branch (7667:13): [True: 54, False: 222]
  ------------------
 7668|     54|            handler.on_error("Invalid flag in regex");
 7669|     54|            return begin;
 7670|     54|        }
 7671|    276|    }
 7672|  3.99k|    handler.on_regex_flags(flags);
 7673|       |
 7674|  3.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  3.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42, False: 3.95k]
  |  |  ------------------
  ------------------
 7675|     42|        handler.on_error("Unexpected end of regex in format string");
 7676|     42|        return begin;
 7677|     42|    }
 7678|       |
 7679|  3.95k|    return begin;
 7680|       |#else
 7681|       |    handler.on_error("Regular expression support is disabled");
 7682|       |    return {};
 7683|       |#endif
 7684|  3.99k|}
_ZN3scn2v46detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7191|  4.12k|    {
 7192|  4.12k|        m_specs.charset_string_data = pattern.data();
 7193|  4.12k|        m_specs.charset_string_size = pattern.size();
 7194|  4.12k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|  6.29k|{
 7288|  6.29k|    switch (type) {
 7289|    142|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 142, False: 6.15k]
  ------------------
 7290|    194|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 52, False: 6.24k]
  ------------------
 7291|    194|            return presentation_type::int_binary;
 7292|    108|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 108, False: 6.18k]
  ------------------
 7293|    108|            return presentation_type::int_decimal;
 7294|    196|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 196, False: 6.09k]
  ------------------
 7295|    196|            return presentation_type::int_generic;
 7296|     88|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 88, False: 6.20k]
  ------------------
 7297|     88|            return presentation_type::int_unsigned_decimal;
 7298|    196|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 196, False: 6.09k]
  ------------------
 7299|    196|            return presentation_type::int_octal;
 7300|     98|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 98, False: 6.19k]
  ------------------
 7301|    150|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 52, False: 6.24k]
  ------------------
 7302|    150|            return presentation_type::int_hex;
 7303|     34|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 34, False: 6.25k]
  ------------------
 7304|     84|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 50, False: 6.24k]
  ------------------
 7305|     84|            return presentation_type::int_arbitrary_base;
 7306|    124|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 124, False: 6.16k]
  ------------------
 7307|    230|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 106, False: 6.18k]
  ------------------
 7308|    230|            return presentation_type::float_hex;
 7309|     88|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 88, False: 6.20k]
  ------------------
 7310|    212|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 124, False: 6.16k]
  ------------------
 7311|    212|            return presentation_type::float_scientific;
 7312|    214|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 214, False: 6.07k]
  ------------------
 7313|    320|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 106, False: 6.18k]
  ------------------
 7314|    320|            return presentation_type::float_fixed;
 7315|    150|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 150, False: 6.14k]
  ------------------
 7316|    232|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 82, False: 6.21k]
  ------------------
 7317|    232|            return presentation_type::float_general;
 7318|  2.66k|        case 's':
  ------------------
  |  Branch (7318:9): [True: 2.66k, False: 3.63k]
  ------------------
 7319|  2.66k|            return presentation_type::string;
 7320|    592|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 592, False: 5.70k]
  ------------------
 7321|    592|            return presentation_type::character;
 7322|     34|        case '?':
  ------------------
  |  Branch (7322:9): [True: 34, False: 6.25k]
  ------------------
 7323|     34|            return presentation_type::escaped_character;
 7324|     78|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 78, False: 6.21k]
  ------------------
 7325|     78|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 6.29k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 6.29k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|    916|        default:
  ------------------
  |  Branch (7332:9): [True: 916, False: 5.37k]
  ------------------
 7333|    916|            return presentation_type::none;
 7334|  6.29k|    }
 7335|  6.29k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|  31.8k|{
 7365|  31.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  31.8k|    auto check_align = [](wchar_t ch) {
 7368|  31.8k|        switch (ch) {
 7369|  31.8k|            case L'<':
 7370|  31.8k|                return align_type::left;
 7371|  31.8k|            case L'>':
 7372|  31.8k|                return align_type::right;
 7373|  31.8k|            case L'^':
 7374|  31.8k|                return align_type::center;
 7375|  31.8k|            default:
 7376|  31.8k|                return align_type::none;
 7377|  31.8k|        }
 7378|  31.8k|    };
 7379|       |
 7380|  31.8k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  31.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44, False: 31.8k]
  |  |  |  Branch (1039:45): [True: 38, False: 31.8k]
  |  |  |  Branch (1039:45): [True: 6, False: 31.8k]
  |  |  ------------------
  ------------------
 7382|  31.8k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|     44|        handler.on_error("Invalid encoding in fill character");
 7384|     44|        return begin;
 7385|     44|    }
 7386|       |
 7387|  31.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  31.8k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  31.8k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  31.8k|    const auto begin_before_fill = begin;
 7392|  31.8k|    begin += potential_fill_len;
 7393|       |
 7394|  31.8k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 1.05k, False: 30.7k]
  ------------------
 7395|  1.05k|        return begin_before_fill;
 7396|  1.05k|    }
 7397|       |
 7398|  30.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  30.7k|    const auto begin_after_fill = begin;
 7400|  30.7k|    ++begin;
 7401|       |
 7402|  30.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 28.3k, False: 2.44k]
  ------------------
 7403|  28.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 60, False: 28.2k]
  |  |  ------------------
  ------------------
 7404|     60|            handler.on_error("Invalid fill character '{' in format string");
 7405|     60|            return begin;
 7406|     60|        }
 7407|  28.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 12.1k, False: 16.1k]
  ------------------
 7408|  12.1k|            return begin_before_fill;
 7409|  12.1k|        }
 7410|  28.2k|    }
 7411|       |
 7412|  18.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 15.9k, False: 2.63k]
  ------------------
 7413|  15.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 2.38k, False: 13.5k]
  ------------------
 7414|  2.38k|            handler.on_align(potential_align_on_fill);
 7415|  2.38k|            return begin_after_fill;
 7416|  2.38k|        }
 7417|  13.5k|        return begin_before_fill;
 7418|  15.9k|    }
 7419|       |
 7420|  2.63k|    handler.on_fill(potential_fill);
 7421|  2.63k|    handler.on_align(potential_align_after_fill);
 7422|  2.63k|    return begin;
 7423|  18.5k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|  31.8k|{
 7347|  31.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|  31.8k|    else {
 7352|  31.8k|        const auto lengths =
 7353|  31.8k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|  31.8k|            "\3\4";
 7355|  31.8k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|  31.8k|        return len;
 7357|  31.8k|    }
 7358|  31.8k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|  62.5k|    auto check_align = [](wchar_t ch) {
 7368|  62.5k|        switch (ch) {
 7369|  1.48k|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 1.48k, False: 61.0k]
  ------------------
 7370|  1.48k|                return align_type::left;
 7371|    994|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 994, False: 61.5k]
  ------------------
 7372|    994|                return align_type::right;
 7373|  3.70k|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 3.70k, False: 58.8k]
  ------------------
 7374|  3.70k|                return align_type::center;
 7375|  56.3k|            default:
  ------------------
  |  Branch (7375:13): [True: 56.3k, False: 6.19k]
  ------------------
 7376|  56.3k|                return align_type::none;
 7377|  62.5k|        }
 7378|  62.5k|    };
_ZN3scn2v46detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7104|  2.63k|    {
 7105|  2.63k|        m_specs.fill = fill;
 7106|  2.63k|    }
_ZN3scn2v46detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6985|  2.63k|    {
 6986|  2.63k|        SCN_EXPECT(!s.empty());
  ------------------
  |  | 1104|  2.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6987|  2.63k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  | 1104|  2.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6988|  2.63k|        if constexpr (sizeof(CharT) == 1) {
 6989|  9.54k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6989:32): [True: 6.90k, False: 2.63k]
  ------------------
 6990|  6.90k|                SCN_GCC_PUSH
 6991|  6.90k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6992|  6.90k|                m_data[i] = s[i];
 6993|  6.90k|                SCN_GCC_POP
 6994|  6.90k|            }
 6995|  2.63k|            m_size = static_cast<unsigned char>(s.size());
 6996|       |        }
 6997|       |        else if constexpr (sizeof(CharT) == 2) {
 6998|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6999|       |            m_data[1] =
 7000|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 7001|       |            if (s.size() == 1) {
 7002|       |                return;
 7003|       |            }
 7004|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 7005|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 7006|       |        }
 7007|       |        else {
 7008|       |            const auto front = static_cast<unsigned>(s.front());
 7009|       |            m_data[0] = static_cast<char>(front);
 7010|       |            m_data[1] = static_cast<char>(front >> 8);
 7011|       |            m_data[2] = static_cast<char>(front >> 16);
 7012|       |            m_data[3] = static_cast<char>(front >> 24);
 7013|       |        }
 7014|  2.63k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|  31.7k|{
 7430|  31.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  31.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  31.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  31.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 18.8k, False: 12.8k]
  |  Branch (7432:33): [True: 4.14k, False: 14.7k]
  ------------------
 7433|  4.14k|        int width = parse_simple_int(begin, end);
 7434|  4.14k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  4.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 4.11k, False: 34]
  |  |  ------------------
  ------------------
 7435|  4.11k|            handler.on_width(width);
 7436|  4.11k|        }
 7437|     34|        else {
 7438|     34|            handler.on_error("Invalid field width");
 7439|     34|            return begin;
 7440|     34|        }
 7441|  4.14k|    }
 7442|  31.6k|    return begin;
 7443|  31.7k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7449|  11.9k|{
 7450|  11.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7451|       |
 7452|  11.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7452:9): [True: 11.9k, False: 40]
  |  Branch (7452:33): [True: 11.8k, False: 58]
  ------------------
 7453|  11.8k|        int prec = parse_simple_int(begin, end);
 7454|  11.8k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  | 1038|  11.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 11.8k, False: 48]
  |  |  ------------------
  ------------------
 7455|  11.8k|            handler.on_precision(prec);
 7456|  11.8k|        }
 7457|     48|        else {
 7458|     48|            handler.on_error("Invalid field precision");
 7459|     48|            return begin;
 7460|     48|        }
 7461|  11.8k|    }
 7462|  11.9k|    return begin;
 7463|  11.9k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|    596|    {
 7967|    596|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|    596|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 536, False: 60]
  ------------------
 7969|    596|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 476, False: 60]
  ------------------
 7970|    596|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 416, False: 60]
  ------------------
 7971|    596|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 356, False: 60]
  ------------------
 7972|    356|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|    356|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|    356|        }
 7977|       |
 7978|    240|        Handler::on_localized();
 7979|    240|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7109|    528|    {
 7110|    528|        if constexpr (!SCN_DISABLE_LOCALE) {
 7111|    528|            m_specs.localized = true;
 7112|       |        }
 7113|       |        else {
 7114|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7115|       |        }
 7116|    528|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  28.9k|{
 9494|  28.9k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  28.9k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  28.9k|{
 9353|  28.9k|#define SCN_VISIT(Type)                                                \
 9354|  28.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  28.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  28.9k|    }                                                                  \
 9357|  28.9k|    else {                                                             \
 9358|  28.9k|        return vis(monostate_val);                                     \
 9359|  28.9k|    }
 9360|       |
 9361|  28.9k|    monostate monostate_val{};
 9362|       |
 9363|  28.9k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 28.9k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 28.9k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|  3.24k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 3.24k, False: 25.7k]
  ------------------
 9369|  3.24k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  3.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.24k|    }                                                                  \
  |  | 9357|  3.24k|    else {                                                             \
  |  | 9358|  3.24k|        return vis(monostate_val);                                     \
  |  | 9359|  3.24k|    }
  ------------------
 9370|  3.24k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 28.9k]
  ------------------
 9371|  3.24k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  3.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.24k|    }                                                                  \
  |  | 9357|  3.24k|    else {                                                             \
  |  | 9358|  3.24k|        return vis(monostate_val);                                     \
  |  | 9359|  3.24k|    }
  ------------------
 9372|  3.24k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 28.9k]
  ------------------
 9373|  3.24k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  3.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.24k|    }                                                                  \
  |  | 9357|  3.24k|    else {                                                             \
  |  | 9358|  3.24k|        return vis(monostate_val);                                     \
  |  | 9359|  3.24k|    }
  ------------------
 9374|  3.24k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 28.9k]
  ------------------
 9375|  3.24k|#if SCN_HAS_INT128
 9376|  3.24k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  3.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.24k|    }                                                                  \
  |  | 9357|  3.24k|    else {                                                             \
  |  | 9358|  3.24k|        return vis(monostate_val);                                     \
  |  | 9359|  3.24k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  3.24k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 28.9k]
  ------------------
 9381|  3.24k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  3.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.24k|    }                                                                  \
  |  | 9357|  3.24k|    else {                                                             \
  |  | 9358|  3.24k|        return vis(monostate_val);                                     \
  |  | 9359|  3.24k|    }
  ------------------
 9382|  3.24k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 28.9k]
  ------------------
 9383|  3.24k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  3.24k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.24k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.24k|    }                                                                  \
  |  | 9357|  3.24k|    else {                                                             \
  |  | 9358|  3.24k|        return vis(monostate_val);                                     \
  |  | 9359|  3.24k|    }
  ------------------
 9384|  6.49k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 3.24k, False: 25.7k]
  ------------------
 9385|  6.49k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  6.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.49k|    }                                                                  \
  |  | 9357|  6.49k|    else {                                                             \
  |  | 9358|  6.49k|        return vis(monostate_val);                                     \
  |  | 9359|  6.49k|    }
  ------------------
 9386|  6.49k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 28.9k]
  ------------------
 9387|  6.49k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  6.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.49k|    }                                                                  \
  |  | 9357|  6.49k|    else {                                                             \
  |  | 9358|  6.49k|        return vis(monostate_val);                                     \
  |  | 9359|  6.49k|    }
  ------------------
 9388|  6.49k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 28.9k]
  ------------------
 9389|  6.49k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  6.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.49k|    }                                                                  \
  |  | 9357|  6.49k|    else {                                                             \
  |  | 9358|  6.49k|        return vis(monostate_val);                                     \
  |  | 9359|  6.49k|    }
  ------------------
 9390|  6.49k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 28.9k]
  ------------------
 9391|  6.49k|#if SCN_HAS_INT128
 9392|  6.49k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  6.49k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.49k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.49k|    }                                                                  \
  |  | 9357|  6.49k|    else {                                                             \
  |  | 9358|  6.49k|        return vis(monostate_val);                                     \
  |  | 9359|  6.49k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  9.69k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 3.20k, False: 25.7k]
  ------------------
 9397|  9.69k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  9.69k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  9.69k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  9.69k|    }                                                                  \
  |  | 9357|  9.69k|    else {                                                             \
  |  | 9358|  9.69k|        return vis(monostate_val);                                     \
  |  | 9359|  9.69k|    }
  ------------------
 9398|  12.9k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 3.24k, False: 25.7k]
  ------------------
 9399|  12.9k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  12.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  12.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  12.9k|    }                                                                  \
  |  | 9357|  12.9k|    else {                                                             \
  |  | 9358|  12.9k|        return vis(monostate_val);                                     \
  |  | 9359|  12.9k|    }
  ------------------
 9400|  16.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 3.20k, False: 25.7k]
  ------------------
 9401|  16.1k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  16.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  16.1k|    }                                                                  \
  |  | 9357|  16.1k|    else {                                                             \
  |  | 9358|  16.1k|        return vis(monostate_val);                                     \
  |  | 9359|  16.1k|    }
  ------------------
 9402|  16.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 28.9k]
  ------------------
 9403|  16.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  16.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  16.1k|    }                                                                  \
  |  | 9357|  16.1k|    else {                                                             \
  |  | 9358|  16.1k|        return vis(monostate_val);                                     \
  |  | 9359|  16.1k|    }
  ------------------
 9404|  16.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 28.9k]
  ------------------
 9405|  16.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  16.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  16.1k|    }                                                                  \
  |  | 9357|  16.1k|    else {                                                             \
  |  | 9358|  16.1k|        return vis(monostate_val);                                     \
  |  | 9359|  16.1k|    }
  ------------------
 9406|  16.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 28.9k]
  ------------------
 9407|  16.1k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  16.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  16.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  16.1k|    }                                                                  \
  |  | 9357|  16.1k|    else {                                                             \
  |  | 9358|  16.1k|        return vis(monostate_val);                                     \
  |  | 9359|  16.1k|    }
  ------------------
 9408|  19.3k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 3.24k, False: 25.7k]
  ------------------
 9409|  19.3k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  19.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  19.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  19.3k|    }                                                                  \
  |  | 9357|  19.3k|    else {                                                             \
  |  | 9358|  19.3k|        return vis(monostate_val);                                     \
  |  | 9359|  19.3k|    }
  ------------------
 9410|  19.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 28.9k]
  ------------------
 9411|  19.3k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  19.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  19.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  19.3k|    }                                                                  \
  |  | 9357|  19.3k|    else {                                                             \
  |  | 9358|  19.3k|        return vis(monostate_val);                                     \
  |  | 9359|  19.3k|    }
  ------------------
 9412|  19.3k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 28.9k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  19.3k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 28.9k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 28.9k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 28.9k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 28.9k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  3.20k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 3.20k, False: 25.7k]
  ------------------
 9443|  3.20k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  3.20k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.20k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.20k|    }                                                                  \
  |  | 9357|  3.20k|    else {                                                             \
  |  | 9358|  3.20k|        return vis(monostate_val);                                     \
  |  | 9359|  3.20k|    }
  ------------------
 9444|  6.40k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 3.20k, False: 25.7k]
  ------------------
 9445|  6.40k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  6.40k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  6.40k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  6.40k|    }                                                                  \
  |  | 9357|  6.40k|    else {                                                             \
  |  | 9358|  6.40k|        return vis(monostate_val);                                     \
  |  | 9359|  6.40k|    }
  ------------------
 9446|  9.60k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 3.20k, False: 25.7k]
  ------------------
 9447|  9.60k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  9.60k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  9.60k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  9.60k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  9.60k|    }                                                                  \
  |  | 9357|  9.60k|    else {                                                             \
  |  | 9358|  9.60k|        return vis(monostate_val);                                     \
  |  | 9359|  9.60k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  9.60k|        }
 9454|       |
 9455|  9.60k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 28.9k]
  ------------------
 9456|  9.60k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  9.60k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  9.60k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 28.9k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 28.9k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  28.9k|            SCN_CLANG_POP
 9473|  28.9k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3493|  15.9k|    {
 3494|  15.9k|        return m_iterator;
 3495|  15.9k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1583|  3.50k|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.50k|    {
 1586|  3.50k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  455|  3.50k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.50k|    {
  457|  3.50k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.88k|    {
 1330|  3.88k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3497|  11.6k|    {
 3498|  11.6k|        return m_sentinel;
 3499|  11.6k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1629|    382|        : base(unexpect, std::move(e.error())),
 1630|    382|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    382|    {
 1632|    382|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|    382|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    382|          m_has_value(false)
  466|    382|    {
  467|    382|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3478|  7.90k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.90k|    static_cast<    \
  |  | 1109|  7.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.90k|    static_cast<    \
  |  | 1109|  7.90k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  7.90k|    {
 3480|  7.90k|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1753|  1.33k|    {
 1754|  1.33k|        return has_value();
 1755|  1.33k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  504|  8.21k|    {
  505|  8.21k|        return m_has_value;
  506|  8.21k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1808|  1.76k|    {
 1809|  1.76k|        return value();
 1810|  1.76k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1782|  4.08k|    {
 1783|  4.08k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  4.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  4.08k|        return this->get_value();
 1785|  4.08k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  470|  4.08k|    {
  471|  4.08k|        return m_value;
  472|  4.08k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1992|  2.55k|    {
 1993|  2.55k|        return detail::transform_error_impl(std::move(*this),
 1994|  2.55k|                                            std::forward<F>(f));
 1995|  2.55k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1475|  2.55k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  2.55k|    else {
 1486|  2.55k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  2.55k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  2.55k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.31k, False: 238]
  |  |  ------------------
  ------------------
 1488|  2.55k|                   ? result(*std::forward<Exp>(exp))
 1489|  2.55k|                   : result(unexpect,
 1490|    238|                            trivial_invoke(std::forward<F>(f),
 1491|    238|                                           std::forward<Exp>(exp).error()));
 1492|  2.55k|    }
 1493|  2.55k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1818|  2.31k|    {
 1819|  2.31k|        return std::move(value());
 1820|  2.31k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1583|  2.31k|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.31k|    {
 1586|  2.31k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  455|  2.31k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.31k|    {
  457|  2.31k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.55k|    {
 1330|  2.55k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1769|    238|    {
 1770|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    238|        return std::move(this->get_unexpected().error());
 1772|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|    238|    {
  488|    238|        return m_unexpected;
  489|    238|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1639|    238|        : base(unexpect, std::forward<Args>(args)...),
 1640|    238|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    238|    {
 1642|    238|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|    238|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    238|          m_has_value(false)
  466|    238|    {
  467|    238|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1753|  2.55k|    {
 1754|  2.55k|        return has_value();
 1755|  2.55k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  5.11k|    {
  505|  5.11k|        return m_has_value;
  506|  5.11k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1759|    238|    {
 1760|    238|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    238|        return this->get_unexpected().error();
 1762|    238|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    238|    {
  488|    238|        return m_unexpected;
  489|    238|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1818|  2.31k|    {
 1819|  2.31k|        return std::move(value());
 1820|  2.31k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1782|  2.31k|    {
 1783|  2.31k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.31k|        return this->get_value();
 1785|  2.31k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.31k|    {
  471|  2.31k|        return m_value;
  472|  2.31k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|   126k|    {
 6263|   126k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   126k|        return static_cast<std::size_t>(m_desc &
 6268|   126k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   126k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|   148k|    {
 6289|   148k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   148k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|  21.6k|    {
 6231|  21.6k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 21.6k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  21.6k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 68, False: 21.6k]
  |  |  ------------------
  ------------------
 6239|     68|            return {};
 6240|     68|        }
 6241|       |
 6242|  21.6k|        const auto t = type(id);
 6243|  21.6k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.27k, False: 20.3k]
  |  |  ------------------
  ------------------
 6244|  1.27k|            return {};
 6245|  1.27k|        }
 6246|       |
 6247|  20.3k|        basic_scan_arg<Context> arg;
 6248|  20.3k|        arg.m_type = t;
 6249|  20.3k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 20.3k, False: 0]
  ------------------
 6250|  20.3k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  20.3k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  20.3k|        return arg;
 6256|  21.6k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|  21.6k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|  21.6k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  21.6k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  21.6k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  21.6k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  21.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|  20.3k|    {
 6293|  20.3k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  20.3k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|  40.0k|    {
 6047|  40.0k|        return m_type != detail::arg_type::none_type;
 6048|  40.0k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|  5.14k|{
 9494|  5.14k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  5.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  5.14k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  5.14k|{
 9353|  5.14k|#define SCN_VISIT(Type)                                                \
 9354|  5.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  5.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  5.14k|    }                                                                  \
 9357|  5.14k|    else {                                                             \
 9358|  5.14k|        return vis(monostate_val);                                     \
 9359|  5.14k|    }
 9360|       |
 9361|  5.14k|    monostate monostate_val{};
 9362|       |
 9363|  5.14k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 5.14k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 5.14k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|    572|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 572, False: 4.57k]
  ------------------
 9369|    572|            SCN_VISIT(int);
  ------------------
  |  | 9354|    572|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    572|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    572|    }                                                                  \
  |  | 9357|    572|    else {                                                             \
  |  | 9358|    572|        return vis(monostate_val);                                     \
  |  | 9359|    572|    }
  ------------------
 9370|    572|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 5.14k]
  ------------------
 9371|    572|            SCN_VISIT(long);
  ------------------
  |  | 9354|    572|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    572|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    572|    }                                                                  \
  |  | 9357|    572|    else {                                                             \
  |  | 9358|    572|        return vis(monostate_val);                                     \
  |  | 9359|    572|    }
  ------------------
 9372|    572|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 5.14k]
  ------------------
 9373|    572|            SCN_VISIT(long long);
  ------------------
  |  | 9354|    572|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    572|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    572|    }                                                                  \
  |  | 9357|    572|    else {                                                             \
  |  | 9358|    572|        return vis(monostate_val);                                     \
  |  | 9359|    572|    }
  ------------------
 9374|    572|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 5.14k]
  ------------------
 9375|    572|#if SCN_HAS_INT128
 9376|    572|            SCN_VISIT(int128)
  ------------------
  |  | 9354|    572|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    572|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    572|    }                                                                  \
  |  | 9357|    572|    else {                                                             \
  |  | 9358|    572|        return vis(monostate_val);                                     \
  |  | 9359|    572|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|    572|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 5.14k]
  ------------------
 9381|    572|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|    572|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    572|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    572|    }                                                                  \
  |  | 9357|    572|    else {                                                             \
  |  | 9358|    572|        return vis(monostate_val);                                     \
  |  | 9359|    572|    }
  ------------------
 9382|    572|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 5.14k]
  ------------------
 9383|    572|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|    572|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    572|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    572|    }                                                                  \
  |  | 9357|    572|    else {                                                             \
  |  | 9358|    572|        return vis(monostate_val);                                     \
  |  | 9359|    572|    }
  ------------------
 9384|  1.14k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 572, False: 4.57k]
  ------------------
 9385|  1.14k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  1.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.14k|    }                                                                  \
  |  | 9357|  1.14k|    else {                                                             \
  |  | 9358|  1.14k|        return vis(monostate_val);                                     \
  |  | 9359|  1.14k|    }
  ------------------
 9386|  1.14k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 5.14k]
  ------------------
 9387|  1.14k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  1.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.14k|    }                                                                  \
  |  | 9357|  1.14k|    else {                                                             \
  |  | 9358|  1.14k|        return vis(monostate_val);                                     \
  |  | 9359|  1.14k|    }
  ------------------
 9388|  1.14k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 5.14k]
  ------------------
 9389|  1.14k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  1.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.14k|    }                                                                  \
  |  | 9357|  1.14k|    else {                                                             \
  |  | 9358|  1.14k|        return vis(monostate_val);                                     \
  |  | 9359|  1.14k|    }
  ------------------
 9390|  1.14k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 5.14k]
  ------------------
 9391|  1.14k|#if SCN_HAS_INT128
 9392|  1.14k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  1.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.14k|    }                                                                  \
  |  | 9357|  1.14k|    else {                                                             \
  |  | 9358|  1.14k|        return vis(monostate_val);                                     \
  |  | 9359|  1.14k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  1.71k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 572, False: 4.57k]
  ------------------
 9397|  1.71k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  1.71k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.71k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.71k|    }                                                                  \
  |  | 9357|  1.71k|    else {                                                             \
  |  | 9358|  1.71k|        return vis(monostate_val);                                     \
  |  | 9359|  1.71k|    }
  ------------------
 9398|  2.28k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 572, False: 4.57k]
  ------------------
 9399|  2.28k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.28k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.28k|    }                                                                  \
  |  | 9357|  2.28k|    else {                                                             \
  |  | 9358|  2.28k|        return vis(monostate_val);                                     \
  |  | 9359|  2.28k|    }
  ------------------
 9400|  2.28k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 5.14k]
  ------------------
 9401|  2.28k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  2.28k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.28k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.28k|    }                                                                  \
  |  | 9357|  2.28k|    else {                                                             \
  |  | 9358|  2.28k|        return vis(monostate_val);                                     \
  |  | 9359|  2.28k|    }
  ------------------
 9402|  2.86k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 572, False: 4.57k]
  ------------------
 9403|  2.86k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  2.86k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.86k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.86k|    }                                                                  \
  |  | 9357|  2.86k|    else {                                                             \
  |  | 9358|  2.86k|        return vis(monostate_val);                                     \
  |  | 9359|  2.86k|    }
  ------------------
 9404|  2.86k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 5.14k]
  ------------------
 9405|  2.86k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  2.86k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.86k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.86k|    }                                                                  \
  |  | 9357|  2.86k|    else {                                                             \
  |  | 9358|  2.86k|        return vis(monostate_val);                                     \
  |  | 9359|  2.86k|    }
  ------------------
 9406|  2.86k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 5.14k]
  ------------------
 9407|  2.86k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  2.86k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.86k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.86k|    }                                                                  \
  |  | 9357|  2.86k|    else {                                                             \
  |  | 9358|  2.86k|        return vis(monostate_val);                                     \
  |  | 9359|  2.86k|    }
  ------------------
 9408|  3.43k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 572, False: 4.57k]
  ------------------
 9409|  3.43k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  3.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.43k|    }                                                                  \
  |  | 9357|  3.43k|    else {                                                             \
  |  | 9358|  3.43k|        return vis(monostate_val);                                     \
  |  | 9359|  3.43k|    }
  ------------------
 9410|  3.43k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 5.14k]
  ------------------
 9411|  3.43k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  3.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.43k|    }                                                                  \
  |  | 9357|  3.43k|    else {                                                             \
  |  | 9358|  3.43k|        return vis(monostate_val);                                     \
  |  | 9359|  3.43k|    }
  ------------------
 9412|  3.43k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 5.14k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  3.43k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 5.14k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 5.14k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 5.14k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 5.14k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|    572|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 572, False: 4.57k]
  ------------------
 9443|    572|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|    572|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|    572|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|    572|    }                                                                  \
  |  | 9357|    572|    else {                                                             \
  |  | 9358|    572|        return vis(monostate_val);                                     \
  |  | 9359|    572|    }
  ------------------
 9444|  1.14k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 572, False: 4.57k]
  ------------------
 9445|  1.14k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  1.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.14k|    }                                                                  \
  |  | 9357|  1.14k|    else {                                                             \
  |  | 9358|  1.14k|        return vis(monostate_val);                                     \
  |  | 9359|  1.14k|    }
  ------------------
 9446|  1.71k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 572, False: 4.57k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|  1.71k|            else {
 9451|  1.71k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|  1.71k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.71k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.71k|    }                                                                  \
  |  | 9357|  1.71k|    else {                                                             \
  |  | 9358|  1.71k|        return vis(monostate_val);                                     \
  |  | 9359|  1.71k|    }
  ------------------
 9452|  1.71k|            }
 9453|  1.71k|        }
 9454|       |
 9455|  1.71k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 5.14k]
  ------------------
 9456|  1.71k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  1.71k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  1.71k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 5.14k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 5.14k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  5.14k|            SCN_CLANG_POP
 9473|  5.14k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  50.9k|{
 6092|  50.9k|    return arg.m_type;
 6093|  50.9k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  18.3k|{
 6104|  18.3k|    return arg.m_value;
 6105|  18.3k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   126k|        : m_format{format},
 6362|   126k|          m_next_arg_id{next_arg_id},
 6363|   126k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   126k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   126k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   126k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   126k|    {
 6369|   126k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   126k|    {
 3089|   126k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   126k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   126k|    {
 3055|   126k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   126k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   126k|{
 7878|   126k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   126k|    handler.check_args_exhausted();
 7880|   126k|    return handler.get_error();
 7881|   126k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   126k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   126k|    auto begin = format.data();
 7846|   126k|    auto it = begin;
 7847|   126k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   261M|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 260M, False: 45.3k]
  ------------------
 7850|   260M|        const auto ch = *it++;
 7851|   260M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 34.3k, False: 260M]
  ------------------
 7852|  34.3k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  34.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  34.3k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 17.9k, False: 16.3k]
  ------------------
 7856|  17.9k|                return;
 7857|  17.9k|            }
 7858|  34.3k|        }
 7859|   260M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 68.5k, False: 260M]
  ------------------
 7860|  68.5k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 63.4k, False: 5.13k]
  |  |  |  Branch (1039:45): [True: 106, False: 68.4k]
  |  |  |  Branch (1039:45): [True: 63.3k, False: 5.13k]
  |  |  ------------------
  ------------------
 7861|  63.4k|                handler.on_error("Unmatched '}' in format string");
 7862|  63.4k|                return;
 7863|  63.4k|            }
 7864|       |
 7865|  5.13k|            handler.on_literal_text(begin, it);
 7866|  5.13k|            begin = ++it;
 7867|  5.13k|        }
 7868|   260M|    }
 7869|       |
 7870|  45.3k|    handler.on_literal_text(begin, end);
 7871|  45.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|  34.3k|{
 7775|  34.3k|    struct id_adapter {
 7776|  34.3k|        constexpr void operator()()
 7777|  34.3k|        {
 7778|  34.3k|            arg_id = handler.on_arg_id();
 7779|  34.3k|        }
 7780|  34.3k|        constexpr void operator()(std::size_t id)
 7781|  34.3k|        {
 7782|  34.3k|            arg_id = handler.on_arg_id(id);
 7783|  34.3k|        }
 7784|       |
 7785|  34.3k|        constexpr void on_error(const char* msg)
 7786|  34.3k|        {
 7787|  34.3k|            SCN_UNLIKELY_ATTR
 7788|  34.3k|            handler.on_error(msg);
 7789|  34.3k|        }
 7790|       |
 7791|  34.3k|        Handler& handler;
 7792|  34.3k|        std::size_t arg_id;
 7793|  34.3k|    };
 7794|       |
 7795|  34.3k|    ++begin;
 7796|  34.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 184, False: 34.1k]
  |  |  ------------------
  ------------------
 7797|    184|        handler.on_error("Unexpected end of replacement field");
 7798|    184|        return begin;
 7799|    184|    }
 7800|       |
 7801|  34.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 5.16k, False: 28.9k]
  ------------------
 7802|  5.16k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|  5.16k|    }
 7804|  28.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 11.6k, False: 17.2k]
  ------------------
 7805|  11.6k|        handler.on_literal_text(begin, begin + 1);
 7806|  11.6k|    }
 7807|  17.2k|    else {
 7808|  17.2k|        auto adapter = id_adapter{handler, 0};
 7809|  17.2k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  17.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 112, False: 17.1k]
  |  |  ------------------
  ------------------
 7812|    112|            handler.on_error("Missing '}' in format string");
 7813|    112|            return begin;
 7814|    112|        }
 7815|       |
 7816|  17.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 194, False: 16.9k]
  ------------------
 7817|    194|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|    194|        }
 7819|  16.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 16.3k, False: 626]
  ------------------
 7820|  16.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 50, False: 16.3k]
  |  |  ------------------
  ------------------
 7821|     50|                handler.on_error("Unexpected end of replacement field");
 7822|     50|                return begin;
 7823|     50|            }
 7824|  16.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  16.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.52k, False: 13.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 16.3k]
  |  |  |  Branch (1039:45): [True: 2.52k, False: 13.7k]
  |  |  ------------------
  ------------------
 7826|  2.52k|                handler.on_error("Unknown format specifier");
 7827|  2.52k|                return begin;
 7828|  2.52k|            }
 7829|  16.3k|        }
 7830|    626|        else {
 7831|    626|            SCN_UNLIKELY_ATTR
 7832|    626|            handler.on_error("Missing '}' in format string");
 7833|    626|            return begin;
 7834|    626|        }
 7835|  17.1k|    }
 7836|  30.8k|    return begin + 1;
 7837|  34.1k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|  21.6k|    {
 8919|  21.6k|        return m_args.get(id);
 8920|  21.6k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|  19.9k|    {
 6397|  19.9k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 164, False: 19.7k]
  |  |  ------------------
  ------------------
 6398|    164|            on_error(
 6399|    164|                "Cannot switch from manual to automatic argument indexing");
 6400|    164|            return 0;
 6401|    164|        }
 6402|       |
 6403|  19.7k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|  19.7k|        do_check_arg_id(id);
 6405|  19.7k|        return id;
 6406|  19.9k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6426|    242|    {
 6427|    242|        m_error = unexpected(detail::handle_error(
 6428|    242|            scan_error{scan_error::invalid_format_string, msg}));
 6429|    242|        return m_error.error();
 6430|    242|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|  21.4k|{
 6891|  21.4k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|  21.4k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|  21.4k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  17.2k|{
 7276|  17.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  17.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 17.2k, False: 0]
  |  Branch (7277:26): [True: 2.52k, False: 14.7k]
  ------------------
 7278|  2.52k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|  2.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|  2.52k|    }
 7280|       |
 7281|  14.7k|    handler();
 7282|  14.7k|    return begin;
 7283|  17.2k|}
impl.cpp:_ZN3scn2v46detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7245|  2.52k|{
 7246|  2.52k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  2.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7247|       |
 7248|  2.52k|    CharT c = *begin;
 7249|  2.52k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (7249:9): [True: 172, False: 2.35k]
  |  Branch (7249:27): [True: 244, False: 2.11k]
  ------------------
 7250|    416|        handler.on_error("Invalid argument ID");
 7251|    416|        return begin;
 7252|    416|    }
 7253|       |
 7254|  2.11k|    int idx = 0;
 7255|  2.11k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (7255:9): [True: 598, False: 1.51k]
  ------------------
 7256|    598|        idx = parse_simple_int(begin, end);
 7257|    598|    }
 7258|  1.51k|    else {
 7259|  1.51k|        ++begin;
 7260|  1.51k|    }
 7261|       |
 7262|  2.11k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (7262:9): [True: 112, False: 1.99k]
  |  Branch (7262:26): [True: 1.80k, False: 194]
  |  Branch (7262:50): [True: 210, False: 1.59k]
  ------------------
 7263|    322|        handler.on_error("Invalid argument ID");
 7264|    322|        return begin;
 7265|    322|    }
 7266|  1.78k|    handler(idx);
 7267|       |
 7268|  1.78k|    return begin;
 7269|  2.11k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 7786|    738|        {
 7787|    738|            SCN_UNLIKELY_ATTR
 7788|    738|            handler.on_error(msg);
 7789|    738|        }
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7224|  11.3k|{
 7225|  11.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7226|  11.3k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1104|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7227|       |
 7228|  11.3k|    unsigned long long value = 0;
 7229|  16.8k|    do {
 7230|  16.8k|        value *= 10;
 7231|  16.8k|        value += static_cast<unsigned long long>(*begin - '0');
 7232|  16.8k|        if (value >
  ------------------
  |  Branch (7232:13): [True: 102, False: 16.7k]
  ------------------
 7233|  16.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7234|    102|            return -1;
 7235|    102|        }
 7236|  16.7k|        ++begin;
 7237|  16.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7237:14): [True: 16.4k, False: 352]
  |  Branch (7237:30): [True: 15.0k, False: 1.34k]
  |  Branch (7237:47): [True: 5.48k, False: 9.59k]
  ------------------
 7238|  11.2k|    return static_cast<int>(value);
 7239|  11.3k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 7781|  1.78k|        {
 7782|  1.78k|            arg_id = handler.on_arg_id(id);
 7783|  1.78k|        }
_ZN3scn2v424basic_scan_parse_contextIwE12check_arg_idEm:
 6409|  1.78k|    {
 6410|  1.78k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  | 1039|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 78, False: 1.71k]
  |  |  ------------------
  ------------------
 6411|     78|            on_error(
 6412|     78|                "Cannot switch from manual to automatic argument indexing");
 6413|     78|            return;
 6414|     78|        }
 6415|  1.71k|        m_next_arg_id = -1;
 6416|  1.71k|        do_check_arg_id(id);
 6417|  1.71k|    }
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  14.7k|        {
 7778|  14.7k|            arg_id = handler.on_arg_id();
 7779|  14.7k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|  13.3k|    {
 6392|  13.3k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|  13.3k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|  29.6k|    {
 6381|  29.6k|        return m_format.data();
 6382|  29.6k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|  16.3k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|  16.3k|    {
 7962|  16.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|  16.3k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|  16.3k|{
 7691|  16.3k|    auto do_presentation = [&]() -> const CharT* {
 7692|  16.3k|        if (*begin == CharT{'['}) {
 7693|  16.3k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  16.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|  16.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|  16.3k|                return begin;
 7699|  16.3k|            }
 7700|  16.3k|            handler.on_character_set_string(set);
 7701|  16.3k|            return begin;
 7702|  16.3k|        }
 7703|  16.3k|        if (*begin == CharT{'/'}) {
 7704|  16.3k|            return parse_presentation_regex(begin, end, handler);
 7705|  16.3k|        }
 7706|  16.3k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  16.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|  16.3k|            handler.on_error("Invalid type specifier in format string");
 7709|  16.3k|            return begin;
 7710|  16.3k|        }
 7711|  16.3k|        handler.on_type(type);
 7712|  16.3k|        return begin;
 7713|  16.3k|    };
 7714|       |
 7715|  16.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 15.0k, False: 1.28k]
  |  Branch (7715:28): [True: 2.86k, False: 12.1k]
  ------------------
 7716|  16.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 572, False: 2.28k]
  |  Branch (7716:36): [True: 520, False: 52]
  ------------------
 7717|    520|        return do_presentation();
 7718|    520|    }
 7719|       |
 7720|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  15.7k|    begin = parse_align(begin, end, handler);
 7726|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 120, False: 15.6k]
  |  |  ------------------
  ------------------
 7727|    120|        handler.on_error("Unexpected end of format string");
 7728|    120|        return begin;
 7729|    120|    }
 7730|       |
 7731|  15.6k|    begin = parse_width(begin, end, handler);
 7732|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 124, False: 15.5k]
  |  |  ------------------
  ------------------
 7733|    124|        handler.on_error("Unexpected end of format string");
 7734|    124|        return begin;
 7735|    124|    }
 7736|       |
 7737|  15.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 6.24k, False: 9.30k]
  ------------------
 7738|  6.24k|        ++begin;
 7739|  6.24k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  6.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 6.21k]
  |  |  ------------------
  ------------------
 7740|     34|            handler.on_error("Unexpected end of format string");
 7741|     34|            return begin;
 7742|     34|        }
 7743|  6.21k|        begin = parse_precision(begin, end, handler);
 7744|  6.21k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  6.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 134, False: 6.07k]
  |  |  ------------------
  ------------------
 7745|    134|            handler.on_error("Unexpected end of format string");
 7746|    134|            return begin;
 7747|    134|        }
 7748|  6.21k|    }
 7749|       |
 7750|  15.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 742, False: 14.6k]
  ------------------
 7751|    742|        handler.on_localized();
 7752|    742|        ++begin;
 7753|    742|    }
 7754|  15.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 78, False: 15.3k]
  |  |  ------------------
  ------------------
 7755|     78|        handler.on_error("Unexpected end of format string");
 7756|     78|        return begin;
 7757|     78|    }
 7758|       |
 7759|  15.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 15.3k, False: 0]
  |  Branch (7759:25): [True: 9.34k, False: 5.96k]
  ------------------
 7760|  9.34k|        do_presentation();
 7761|  9.34k|    }
 7762|  15.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.60k, False: 13.6k]
  |  |  ------------------
  ------------------
 7763|  1.60k|        handler.on_error("Unexpected end of format string");
 7764|  1.60k|        return begin;
 7765|  1.60k|    }
 7766|       |
 7767|  13.6k|    return begin;
 7768|  15.3k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|  2.86k|{
 7340|  2.86k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 464, False: 2.39k]
  |  Branch (7340:33): [True: 430, False: 34]
  ------------------
 7341|  2.86k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 212, False: 2.21k]
  |  Branch (7341:33): [True: 142, False: 70]
  ------------------
 7342|  2.86k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|  9.86k|    auto do_presentation = [&]() -> const CharT* {
 7692|  9.86k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 4.64k, False: 5.21k]
  ------------------
 7693|  4.64k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  4.64k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 590, False: 4.05k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|    590|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|    590|                return begin;
 7699|    590|            }
 7700|  4.05k|            handler.on_character_set_string(set);
 7701|  4.05k|            return begin;
 7702|  4.64k|        }
 7703|  5.21k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 42, False: 5.17k]
  ------------------
 7704|     42|            return parse_presentation_regex(begin, end, handler);
 7705|     42|        }
 7706|  5.17k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  5.17k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|  5.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 762, False: 4.41k]
  |  |  ------------------
  ------------------
 7708|    762|            handler.on_error("Invalid type specifier in format string");
 7709|    762|            return begin;
 7710|    762|        }
 7711|  4.41k|        handler.on_type(type);
 7712|  4.41k|        return begin;
 7713|  5.17k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7529|  4.64k|{
 7530|  4.64k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  4.64k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  4.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  4.64k|    auto start = begin;
 7534|  4.64k|    ++begin;
 7535|       |
 7536|  4.64k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 4.61k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|     34|        return {};
 7541|     34|    }
 7542|  4.61k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 2.35k, False: 2.26k]
  ------------------
 7543|  2.35k|        handler.on_charset_inverted();
 7544|  2.35k|        ++begin;
 7545|  2.35k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 2.31k]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|     34|            return {};
 7550|     34|        }
 7551|  2.31k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 52, False: 2.26k]
  ------------------
 7552|     52|            handler.on_charset_single(char32_t{']'});
 7553|     52|            ++begin;
 7554|     52|        }
 7555|  2.31k|    }
 7556|  2.26k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 34, False: 2.22k]
  ------------------
 7557|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|     34|    }
 7559|       |
 7560|  36.3k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 36.0k, False: 326]
  ------------------
 7561|  36.0k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 162, False: 35.8k]
  |  |  ------------------
  ------------------
 7562|    162|            break;
 7563|    162|        }
 7564|       |
 7565|  35.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 4.05k, False: 31.8k]
  ------------------
 7566|  4.05k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  4.05k|        }
 7568|       |
 7569|  31.8k|        parse_presentation_set_literal(begin, end, handler);
 7570|  31.8k|    }
 7571|       |
 7572|    488|    SCN_UNLIKELY_ATTR
 7573|    488|    handler.on_error("Invalid [character set] specifier in format string");
 7574|    488|    return {};
 7575|  4.54k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7493|  31.8k|{
 7494|  31.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  31.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  31.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  31.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  31.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  31.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 126, False: 31.6k]
  |  |  ------------------
  ------------------
 7498|    126|        return;
 7499|    126|    }
 7500|       |
 7501|  31.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 31.5k, False: 94]
  |  Branch (7501:25): [True: 2.65k, False: 28.9k]
  |  Branch (7501:49): [True: 2.61k, False: 34]
  ------------------
 7502|  31.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 2.56k, False: 52]
  ------------------
 7503|  2.56k|        ++begin;
 7504|       |
 7505|  2.56k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  2.56k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  2.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 2.53k]
  |  |  ------------------
  ------------------
 7507|     34|            return;
 7508|     34|        }
 7509|       |
 7510|  2.53k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  2.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 34, False: 2.49k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|     34|            return;
 7515|     34|        }
 7516|       |
 7517|  2.49k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  2.49k|        return;
 7519|  2.53k|    }
 7520|       |
 7521|  29.1k|    handler.on_charset_single(cp_first);
 7522|  29.1k|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7469|  34.3k|{
 7470|  34.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  34.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  34.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  34.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 34.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 34.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 34.3k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  34.3k|    const auto cp =
 7479|  34.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  34.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  34.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 160, False: 34.2k]
  |  |  ------------------
  ------------------
 7481|    160|        handler.on_error("Invalid encoding in format string");
 7482|    160|        return invalid_code_point;
 7483|    160|    }
 7484|       |
 7485|  34.2k|    begin += len;
 7486|  34.2k|    return cp;
 7487|  34.3k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7183|  4.05k|    {
 7184|  4.05k|        m_specs.charset_string_data = fmt.data();
 7185|  4.05k|        m_specs.charset_string_size = fmt.size();
 7186|  4.05k|        on_type(presentation_type::string_set);
 7187|  4.05k|    }
impl.cpp:_ZN3scn2v46detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_RSK_SK_OT0_:
 7581|     42|{
 7582|     42|#if !SCN_DISABLE_REGEX
 7583|     42|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7584|     42|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  | 1104|     42|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     42|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7585|       |
 7586|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 7587|     42|                  std::is_same_v<CharT, wchar_t>) {
 7588|     42|        handler.on_error("Regex backend doesn't support wide strings as input");
 7589|     42|        return begin;
 7590|     42|    }
 7591|       |
 7592|      0|    auto start = begin;
 7593|     42|    ++begin;
 7594|       |
 7595|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7596|      0|        handler.on_error("Unexpected end of regex in format string");
 7597|      0|        return begin;
 7598|      0|    }
 7599|       |
 7600|     42|    handler.on_type(presentation_type::regex);
 7601|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7601:12): [True: 0, False: 42]
  ------------------
 7602|      0|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7602:13): [True: 0, False: 0]
  ------------------
 7603|      0|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (7603:17): [True: 0, False: 0]
  ------------------
 7604|      0|                break;
 7605|      0|            }
 7606|      0|            else {
 7607|      0|                handler.on_type(presentation_type::regex_escaped);
 7608|      0|            }
 7609|      0|        }
 7610|      0|    }
 7611|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7612|      0|        handler.on_error("Unexpected end of regex in format string");
 7613|      0|        return begin;
 7614|      0|    }
 7615|       |
 7616|     42|    auto regex_end = begin;
 7617|     42|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 7618|     42|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7619|      0|        handler.on_error("Invalid (empty) regex in format string");
 7620|      0|        return begin;
 7621|      0|    }
 7622|     42|    handler.on_regex_pattern(regex_pattern);
 7623|     42|    ++begin;
 7624|       |
 7625|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7626|      0|        handler.on_error("Unexpected end of regex in format string");
 7627|      0|        return begin;
 7628|      0|    }
 7629|       |
 7630|     42|    regex_flags flags{regex_flags::none};
 7631|     42|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 7632|     42|        {{'m', regex_flags::multiline},
 7633|     42|         {'s', regex_flags::singleline},
 7634|     42|         {'i', regex_flags::nocase},
 7635|     42|         {'n', regex_flags::nocapture}}};
 7636|     42|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (7636:12): [True: 0, False: 42]
  ------------------
 7637|      0|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7637:13): [True: 0, False: 0]
  ------------------
 7638|      0|            break;
 7639|      0|        }
 7640|      0|        bool found_flag = false;
 7641|      0|        for (auto flag : flag_map) {
  ------------------
  |  Branch (7641:24): [True: 0, False: 0]
  ------------------
 7642|      0|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (7642:17): [True: 0, False: 0]
  ------------------
 7643|      0|                continue;
 7644|      0|            }
 7645|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (7645:17): [True: 0, False: 0]
  ------------------
 7646|      0|                handler.on_error("Flag set multiple times in regex");
 7647|      0|                return begin;
 7648|      0|            }
 7649|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 7650|       |            if (*begin == CharT{'s'}) {
 7651|       |                // clang-format off
 7652|       |                handler.on_error("/s flag for regex isn't supported by regex backend");
 7653|       |                // clang-format on
 7654|       |            }
 7655|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 7656|       |            if (*begin == CharT{'m'}) {
 7657|       |                // clang-format off
 7658|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 7659|       |                // clang-format on
 7660|       |            }
 7661|       |#endif
 7662|       |#endif
 7663|      0|            flags |= flag.second;
 7664|      0|            found_flag = true;
 7665|      0|            break;
 7666|      0|        }
 7667|      0|        if (!found_flag) {
  ------------------
  |  Branch (7667:13): [True: 0, False: 0]
  ------------------
 7668|      0|            handler.on_error("Invalid flag in regex");
 7669|      0|            return begin;
 7670|      0|        }
 7671|      0|    }
 7672|     42|    handler.on_regex_flags(flags);
 7673|       |
 7674|     42|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 7675|      0|        handler.on_error("Unexpected end of regex in format string");
 7676|      0|        return begin;
 7677|      0|    }
 7678|       |
 7679|     42|    return begin;
 7680|       |#else
 7681|       |    handler.on_error("Regular expression support is disabled");
 7682|       |    return {};
 7683|       |#endif
 7684|     42|}
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|  5.17k|{
 7288|  5.17k|    switch (type) {
 7289|    232|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 232, False: 4.94k]
  ------------------
 7290|    284|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 52, False: 5.12k]
  ------------------
 7291|    284|            return presentation_type::int_binary;
 7292|    106|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 106, False: 5.06k]
  ------------------
 7293|    106|            return presentation_type::int_decimal;
 7294|    286|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 286, False: 4.88k]
  ------------------
 7295|    286|            return presentation_type::int_generic;
 7296|    196|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 196, False: 4.97k]
  ------------------
 7297|    196|            return presentation_type::int_unsigned_decimal;
 7298|    232|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 232, False: 4.94k]
  ------------------
 7299|    232|            return presentation_type::int_octal;
 7300|    142|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 142, False: 5.03k]
  ------------------
 7301|    194|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 52, False: 5.12k]
  ------------------
 7302|    194|            return presentation_type::int_hex;
 7303|     34|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 34, False: 5.13k]
  ------------------
 7304|     68|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 34, False: 5.13k]
  ------------------
 7305|     68|            return presentation_type::int_arbitrary_base;
 7306|    222|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 222, False: 4.95k]
  ------------------
 7307|    922|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 700, False: 4.47k]
  ------------------
 7308|    922|            return presentation_type::float_hex;
 7309|     70|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 70, False: 5.10k]
  ------------------
 7310|    194|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 124, False: 5.04k]
  ------------------
 7311|    194|            return presentation_type::float_scientific;
 7312|    142|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 142, False: 5.03k]
  ------------------
 7313|    266|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 124, False: 5.04k]
  ------------------
 7314|    266|            return presentation_type::float_fixed;
 7315|     34|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 34, False: 5.13k]
  ------------------
 7316|    122|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 88, False: 5.08k]
  ------------------
 7317|    122|            return presentation_type::float_general;
 7318|  1.07k|        case 's':
  ------------------
  |  Branch (7318:9): [True: 1.07k, False: 4.09k]
  ------------------
 7319|  1.07k|            return presentation_type::string;
 7320|    304|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 304, False: 4.86k]
  ------------------
 7321|    304|            return presentation_type::character;
 7322|     34|        case '?':
  ------------------
  |  Branch (7322:9): [True: 34, False: 5.13k]
  ------------------
 7323|     34|            return presentation_type::escaped_character;
 7324|    124|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 124, False: 5.04k]
  ------------------
 7325|    124|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 5.17k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 5.17k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|    762|        default:
  ------------------
  |  Branch (7332:9): [True: 762, False: 4.41k]
  ------------------
 7333|    762|            return presentation_type::none;
 7334|  5.17k|    }
 7335|  5.17k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  15.7k|{
 7365|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  15.7k|    auto check_align = [](wchar_t ch) {
 7368|  15.7k|        switch (ch) {
 7369|  15.7k|            case L'<':
 7370|  15.7k|                return align_type::left;
 7371|  15.7k|            case L'>':
 7372|  15.7k|                return align_type::right;
 7373|  15.7k|            case L'^':
 7374|  15.7k|                return align_type::center;
 7375|  15.7k|            default:
 7376|  15.7k|                return align_type::none;
 7377|  15.7k|        }
 7378|  15.7k|    };
 7379|       |
 7380|  15.7k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  15.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 15.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7382|  15.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  15.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  15.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  15.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  15.7k|    const auto begin_before_fill = begin;
 7392|  15.7k|    begin += potential_fill_len;
 7393|       |
 7394|  15.7k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 1.28k, False: 14.5k]
  ------------------
 7395|  1.28k|        return begin_before_fill;
 7396|  1.28k|    }
 7397|       |
 7398|  14.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  14.5k|    const auto begin_after_fill = begin;
 7400|  14.5k|    ++begin;
 7401|       |
 7402|  14.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 14.5k, False: 0]
  ------------------
 7403|  14.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42, False: 14.4k]
  |  |  ------------------
  ------------------
 7404|     42|            handler.on_error("Invalid fill character '{' in format string");
 7405|     42|            return begin;
 7406|     42|        }
 7407|  14.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 1.75k, False: 12.7k]
  ------------------
 7408|  1.75k|            return begin_before_fill;
 7409|  1.75k|        }
 7410|  14.4k|    }
 7411|       |
 7412|  12.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 10.2k, False: 2.50k]
  ------------------
 7413|  10.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 1.17k, False: 9.03k]
  ------------------
 7414|  1.17k|            handler.on_align(potential_align_on_fill);
 7415|  1.17k|            return begin_after_fill;
 7416|  1.17k|        }
 7417|  9.03k|        return begin_before_fill;
 7418|  10.2k|    }
 7419|       |
 7420|  2.50k|    handler.on_fill(potential_fill);
 7421|  2.50k|    handler.on_align(potential_align_after_fill);
 7422|  2.50k|    return begin;
 7423|  12.7k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|  15.7k|{
 7347|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|  15.7k|    if constexpr (sizeof(CharT) != 1) {
 7349|  15.7k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|  15.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|  30.3k|    auto check_align = [](wchar_t ch) {
 7368|  30.3k|        switch (ch) {
 7369|    716|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 716, False: 29.5k]
  ------------------
 7370|    716|                return align_type::left;
 7371|    482|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 482, False: 29.8k]
  ------------------
 7372|    482|                return align_type::right;
 7373|  3.07k|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 3.07k, False: 27.2k]
  ------------------
 7374|  3.07k|                return align_type::center;
 7375|  26.0k|            default:
  ------------------
  |  Branch (7375:13): [True: 26.0k, False: 4.26k]
  ------------------
 7376|  26.0k|                return align_type::none;
 7377|  30.3k|        }
 7378|  30.3k|    };
_ZN3scn2v46detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7104|  2.50k|    {
 7105|  2.50k|        m_specs.fill = fill;
 7106|  2.50k|    }
_ZN3scn2v46detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6985|  2.50k|    {
 6986|  2.50k|        SCN_EXPECT(!s.empty());
  ------------------
  |  | 1104|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6987|  2.50k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  | 1104|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6988|       |        if constexpr (sizeof(CharT) == 1) {
 6989|       |            for (size_t i = 0; i < s.size(); ++i) {
 6990|       |                SCN_GCC_PUSH
 6991|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6992|       |                m_data[i] = s[i];
 6993|       |                SCN_GCC_POP
 6994|       |            }
 6995|       |            m_size = static_cast<unsigned char>(s.size());
 6996|       |        }
 6997|       |        else if constexpr (sizeof(CharT) == 2) {
 6998|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6999|       |            m_data[1] =
 7000|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 7001|       |            if (s.size() == 1) {
 7002|       |                return;
 7003|       |            }
 7004|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 7005|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 7006|       |        }
 7007|  2.50k|        else {
 7008|  2.50k|            const auto front = static_cast<unsigned>(s.front());
 7009|  2.50k|            m_data[0] = static_cast<char>(front);
 7010|  2.50k|            m_data[1] = static_cast<char>(front >> 8);
 7011|  2.50k|            m_data[2] = static_cast<char>(front >> 16);
 7012|  2.50k|            m_data[3] = static_cast<char>(front >> 24);
 7013|  2.50k|        }
 7014|  2.50k|    }
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|  15.6k|{
 7430|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  15.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 10.3k, False: 5.30k]
  |  Branch (7432:33): [True: 4.68k, False: 5.68k]
  ------------------
 7433|  4.68k|        int width = parse_simple_int(begin, end);
 7434|  4.68k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  4.68k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 4.64k, False: 34]
  |  |  ------------------
  ------------------
 7435|  4.64k|            handler.on_width(width);
 7436|  4.64k|        }
 7437|     34|        else {
 7438|     34|            handler.on_error("Invalid field width");
 7439|     34|            return begin;
 7440|     34|        }
 7441|  4.68k|    }
 7442|  15.6k|    return begin;
 7443|  15.6k|}
impl.cpp:_ZN3scn2v46detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7449|  6.21k|{
 7450|  6.21k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  6.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7451|       |
 7452|  6.21k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7452:9): [True: 6.17k, False: 34]
  |  Branch (7452:33): [True: 6.10k, False: 70]
  ------------------
 7453|  6.10k|        int prec = parse_simple_int(begin, end);
 7454|  6.10k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  | 1038|  6.10k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 6.07k, False: 34]
  |  |  ------------------
  ------------------
 7455|  6.07k|            handler.on_precision(prec);
 7456|  6.07k|        }
 7457|     34|        else {
 7458|     34|            handler.on_error("Invalid field precision");
 7459|     34|            return begin;
 7460|     34|        }
 7461|  6.10k|    }
 7462|  6.17k|    return begin;
 7463|  6.21k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|    742|    {
 7967|    742|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|    742|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 670, False: 72]
  ------------------
 7969|    742|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 598, False: 72]
  ------------------
 7970|    742|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 526, False: 72]
  ------------------
 7971|    742|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 454, False: 72]
  ------------------
 7972|    454|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|    454|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|    454|        }
 7977|       |
 7978|    288|        Handler::on_localized();
 7979|    288|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|  13.2k|{
 9494|  13.2k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  13.2k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  13.2k|{
 9353|  13.2k|#define SCN_VISIT(Type)                                                \
 9354|  13.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  13.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  13.2k|    }                                                                  \
 9357|  13.2k|    else {                                                             \
 9358|  13.2k|        return vis(monostate_val);                                     \
 9359|  13.2k|    }
 9360|       |
 9361|  13.2k|    monostate monostate_val{};
 9362|       |
 9363|  13.2k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 13.2k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 13.2k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|  1.50k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 1.50k, False: 11.7k]
  ------------------
 9369|  1.50k|            SCN_VISIT(int);
  ------------------
  |  | 9354|  1.50k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.50k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.50k|    }                                                                  \
  |  | 9357|  1.50k|    else {                                                             \
  |  | 9358|  1.50k|        return vis(monostate_val);                                     \
  |  | 9359|  1.50k|    }
  ------------------
 9370|  1.50k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 13.2k]
  ------------------
 9371|  1.50k|            SCN_VISIT(long);
  ------------------
  |  | 9354|  1.50k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.50k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.50k|    }                                                                  \
  |  | 9357|  1.50k|    else {                                                             \
  |  | 9358|  1.50k|        return vis(monostate_val);                                     \
  |  | 9359|  1.50k|    }
  ------------------
 9372|  1.50k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 13.2k]
  ------------------
 9373|  1.50k|            SCN_VISIT(long long);
  ------------------
  |  | 9354|  1.50k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.50k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.50k|    }                                                                  \
  |  | 9357|  1.50k|    else {                                                             \
  |  | 9358|  1.50k|        return vis(monostate_val);                                     \
  |  | 9359|  1.50k|    }
  ------------------
 9374|  1.50k|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 13.2k]
  ------------------
 9375|  1.50k|#if SCN_HAS_INT128
 9376|  1.50k|            SCN_VISIT(int128)
  ------------------
  |  | 9354|  1.50k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.50k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.50k|    }                                                                  \
  |  | 9357|  1.50k|    else {                                                             \
  |  | 9358|  1.50k|        return vis(monostate_val);                                     \
  |  | 9359|  1.50k|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|  1.50k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 13.2k]
  ------------------
 9381|  1.50k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|  1.50k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.50k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.50k|    }                                                                  \
  |  | 9357|  1.50k|    else {                                                             \
  |  | 9358|  1.50k|        return vis(monostate_val);                                     \
  |  | 9359|  1.50k|    }
  ------------------
 9382|  1.50k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 13.2k]
  ------------------
 9383|  1.50k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|  1.50k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.50k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.50k|    }                                                                  \
  |  | 9357|  1.50k|    else {                                                             \
  |  | 9358|  1.50k|        return vis(monostate_val);                                     \
  |  | 9359|  1.50k|    }
  ------------------
 9384|  3.00k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 1.50k, False: 11.7k]
  ------------------
 9385|  3.00k|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.00k|    }                                                                  \
  |  | 9357|  3.00k|    else {                                                             \
  |  | 9358|  3.00k|        return vis(monostate_val);                                     \
  |  | 9359|  3.00k|    }
  ------------------
 9386|  3.00k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 13.2k]
  ------------------
 9387|  3.00k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.00k|    }                                                                  \
  |  | 9357|  3.00k|    else {                                                             \
  |  | 9358|  3.00k|        return vis(monostate_val);                                     \
  |  | 9359|  3.00k|    }
  ------------------
 9388|  3.00k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 13.2k]
  ------------------
 9389|  3.00k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.00k|    }                                                                  \
  |  | 9357|  3.00k|    else {                                                             \
  |  | 9358|  3.00k|        return vis(monostate_val);                                     \
  |  | 9359|  3.00k|    }
  ------------------
 9390|  3.00k|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 13.2k]
  ------------------
 9391|  3.00k|#if SCN_HAS_INT128
 9392|  3.00k|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|  3.00k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  3.00k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  3.00k|    }                                                                  \
  |  | 9357|  3.00k|    else {                                                             \
  |  | 9358|  3.00k|        return vis(monostate_val);                                     \
  |  | 9359|  3.00k|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|  4.44k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 1.43k, False: 11.7k]
  ------------------
 9397|  4.44k|            SCN_VISIT(void*);
  ------------------
  |  | 9354|  4.44k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  4.44k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  4.44k|    }                                                                  \
  |  | 9357|  4.44k|    else {                                                             \
  |  | 9358|  4.44k|        return vis(monostate_val);                                     \
  |  | 9359|  4.44k|    }
  ------------------
 9398|  5.95k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 1.50k, False: 11.7k]
  ------------------
 9399|  5.95k|            SCN_VISIT(bool);
  ------------------
  |  | 9354|  5.95k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  5.95k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  5.95k|    }                                                                  \
  |  | 9357|  5.95k|    else {                                                             \
  |  | 9358|  5.95k|        return vis(monostate_val);                                     \
  |  | 9359|  5.95k|    }
  ------------------
 9400|  5.95k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 13.2k]
  ------------------
 9401|  5.95k|            SCN_VISIT(char);
  ------------------
  |  | 9354|  5.95k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  5.95k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  5.95k|    }                                                                  \
  |  | 9357|  5.95k|    else {                                                             \
  |  | 9358|  5.95k|        return vis(monostate_val);                                     \
  |  | 9359|  5.95k|    }
  ------------------
 9402|  7.38k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 1.43k, False: 11.7k]
  ------------------
 9403|  7.38k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|  7.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  7.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  7.38k|    }                                                                  \
  |  | 9357|  7.38k|    else {                                                             \
  |  | 9358|  7.38k|        return vis(monostate_val);                                     \
  |  | 9359|  7.38k|    }
  ------------------
 9404|  7.38k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 13.2k]
  ------------------
 9405|  7.38k|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|  7.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  7.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  7.38k|    }                                                                  \
  |  | 9357|  7.38k|    else {                                                             \
  |  | 9358|  7.38k|        return vis(monostate_val);                                     \
  |  | 9359|  7.38k|    }
  ------------------
 9406|  7.38k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 13.2k]
  ------------------
 9407|  7.38k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  7.38k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  7.38k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  7.38k|    }                                                                  \
  |  | 9357|  7.38k|    else {                                                             \
  |  | 9358|  7.38k|        return vis(monostate_val);                                     \
  |  | 9359|  7.38k|    }
  ------------------
 9408|  8.89k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 1.50k, False: 11.7k]
  ------------------
 9409|  8.89k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  8.89k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  8.89k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  8.89k|    }                                                                  \
  |  | 9357|  8.89k|    else {                                                             \
  |  | 9358|  8.89k|        return vis(monostate_val);                                     \
  |  | 9359|  8.89k|    }
  ------------------
 9410|  8.89k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 13.2k]
  ------------------
 9411|  8.89k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|  8.89k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  8.89k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  8.89k|    }                                                                  \
  |  | 9357|  8.89k|    else {                                                             \
  |  | 9358|  8.89k|        return vis(monostate_val);                                     \
  |  | 9359|  8.89k|    }
  ------------------
 9412|  8.89k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 13.2k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|  8.89k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 13.2k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 13.2k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 13.2k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 13.2k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  1.43k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 1.43k, False: 11.7k]
  ------------------
 9443|  1.43k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  1.43k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  1.43k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  1.43k|    }                                                                  \
  |  | 9357|  1.43k|    else {                                                             \
  |  | 9358|  1.43k|        return vis(monostate_val);                                     \
  |  | 9359|  1.43k|    }
  ------------------
 9444|  2.87k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 1.43k, False: 11.7k]
  ------------------
 9445|  2.87k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  2.87k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  2.87k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  2.87k|    }                                                                  \
  |  | 9357|  2.87k|    else {                                                             \
  |  | 9358|  2.87k|        return vis(monostate_val);                                     \
  |  | 9359|  2.87k|    }
  ------------------
 9446|  4.31k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 1.43k, False: 11.7k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|  4.31k|            else {
 9451|  4.31k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|  4.31k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  4.31k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  4.31k|    }                                                                  \
  |  | 9357|  4.31k|    else {                                                             \
  |  | 9358|  4.31k|        return vis(monostate_val);                                     \
  |  | 9359|  4.31k|    }
  ------------------
 9452|  4.31k|            }
 9453|  4.31k|        }
 9454|       |
 9455|  4.31k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 13.2k]
  ------------------
 9456|  4.31k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  4.31k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  4.31k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 13.2k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 13.2k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  13.2k|            SCN_CLANG_POP
 9473|  13.2k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3493|  8.20k|    {
 3494|  8.20k|        return m_iterator;
 3495|  8.20k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1583|  1.55k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.55k|    {
 1586|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  455|  1.55k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.55k|    {
  457|  1.55k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.66k|    {
 1330|  1.66k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3497|  3.84k|    {
 3498|  3.84k|        return m_sentinel;
 3499|  3.84k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1629|    116|        : base(unexpect, std::move(e.error())),
 1630|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    116|    {
 1632|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    116|          m_has_value(false)
  466|    116|    {
  467|    116|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3478|  3.84k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  3.84k|    static_cast<    \
  |  | 1109|  3.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  3.84k|    static_cast<    \
  |  | 1109|  3.84k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  3.84k|    {
 3480|  3.84k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  504|  3.33k|    {
  505|  3.33k|        return m_has_value;
  506|  3.33k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1782|  1.55k|    {
 1783|  1.55k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.55k|        return this->get_value();
 1785|  1.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  470|  1.55k|    {
  471|  1.55k|        return m_value;
  472|  1.55k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1992|  1.66k|    {
 1993|  1.66k|        return detail::transform_error_impl(std::move(*this),
 1994|  1.66k|                                            std::forward<F>(f));
 1995|  1.66k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1475|  1.66k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.66k|    else {
 1486|  1.66k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.66k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.66k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.55k, False: 116]
  |  |  ------------------
  ------------------
 1488|  1.66k|                   ? result(*std::forward<Exp>(exp))
 1489|  1.66k|                   : result(unexpect,
 1490|    116|                            trivial_invoke(std::forward<F>(f),
 1491|    116|                                           std::forward<Exp>(exp).error()));
 1492|  1.66k|    }
 1493|  1.66k|}
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1818|  1.55k|    {
 1819|  1.55k|        return std::move(value());
 1820|  1.55k|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1583|  1.55k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.55k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.55k|    {
 1586|  1.55k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  455|  1.55k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.55k|    {
  457|  1.55k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.66k|    {
 1330|  1.66k|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1769|    116|    {
 1770|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    116|        return std::move(this->get_unexpected().error());
 1772|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|    116|    {
  488|    116|        return m_unexpected;
  489|    116|    }
_ZN3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1639|    116|        : base(unexpect, std::forward<Args>(args)...),
 1640|    116|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    116|    {
 1642|    116|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|    116|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    116|          m_has_value(false)
  466|    116|    {
  467|    116|    }
_ZNK3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1753|  1.66k|    {
 1754|  1.66k|        return has_value();
 1755|  1.66k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.33k|    {
  505|  3.33k|        return m_has_value;
  506|  3.33k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1759|    116|    {
 1760|    116|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    116|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    116|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    116|        return this->get_unexpected().error();
 1762|    116|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    116|    {
  488|    116|        return m_unexpected;
  489|    116|    }
_ZNO3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1818|  1.55k|    {
 1819|  1.55k|        return std::move(value());
 1820|  1.55k|    }
_ZNR3scn2v48expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1782|  1.55k|    {
 1783|  1.55k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.55k|        return this->get_value();
 1785|  1.55k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.55k|    {
  471|  1.55k|        return m_value;
  472|  1.55k|    }

_ZN3scn2v44scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSF_16buffer_range_tagEwEEEE:
   43|  63.3k|{
   44|  63.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  63.3k|}
_ZN3scn2v44scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}
_ZN3scn2v45vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEwEEEE:
   59|  63.3k|{
   60|  63.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  63.3k|}
_ZN3scn2v44scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v44scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}
_ZN3scn2v44scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v44scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}
_ZN3scn2v44scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v44scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}
_ZN3scn2v44scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v44scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}
_ZN3scn2v44scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v44scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  7.04k|{
   89|  7.04k|    auto result = make_scan_result<Source, Args...>();
   90|  7.04k|    fill_scan_result(result,
   91|  7.04k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  7.04k|                           make_scan_args<wscan_context>(result->values())));
   93|  7.04k|    return result;
   94|  7.04k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  130|  7.04k|{
  131|  7.04k|    auto result = make_scan_result<Source, Args...>();
  132|  7.04k|    fill_scan_result(result,
  133|  7.04k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  7.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  7.04k|                           make_scan_args<wscan_context>(result->values())));
  135|  7.04k|    return result;
  136|  7.04k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  95.0k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  95.0k|{
  309|  95.0k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  95.0k|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|    270|{
  315|    270|    static_assert(std::is_same_v<Locale, std::locale>);
  316|    270|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 135, False: 135]
  ------------------
  317|    270|                    : std::locale{};
  318|    270|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|    914|{
 1829|    914|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|    914|                                      m_nan_payload_buffer, value);
 1831|    914|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|    914|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 914]
  |  |  ------------------
  ------------------
 1832|      0|        value = this->setsign(value);
 1833|      0|        return n;
 1834|      0|    }
 1835|       |
 1836|    914|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 0, False: 914]
  ------------------
 1837|    914|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 0, False: 0]
  ------------------
 1838|      0|        return detail::unexpected_scan_error(
 1839|      0|            scan_error::value_negative_overflow, n.error().msg());
 1840|      0|    }
 1841|    914|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 0, False: 914]
  ------------------
 1842|    914|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 0, False: 0]
  ------------------
 1843|      0|        return detail::unexpected_scan_error(
 1844|      0|            scan_error::value_negative_underflow, n.error().msg());
 1845|      0|    }
 1846|    914|    return n;
 1847|    914|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|  1.08k|{
 1829|  1.08k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|  1.08k|                                      m_nan_payload_buffer, value);
 1831|  1.08k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|  1.08k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 108, False: 980]
  |  |  ------------------
  ------------------
 1832|    108|        value = this->setsign(value);
 1833|    108|        return n;
 1834|    108|    }
 1835|       |
 1836|    980|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 0, False: 980]
  ------------------
 1837|    980|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 0, False: 0]
  ------------------
 1838|      0|        return detail::unexpected_scan_error(
 1839|      0|            scan_error::value_negative_overflow, n.error().msg());
 1840|      0|    }
 1841|    980|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 0, False: 980]
  ------------------
 1842|    980|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 0, False: 0]
  ------------------
 1843|      0|        return detail::unexpected_scan_error(
 1844|      0|            scan_error::value_negative_underflow, n.error().msg());
 1845|      0|    }
 1846|    980|    return n;
 1847|    980|}
_ZN3scn2v44impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|     22|{
 2185|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 22, False: 0]
  ------------------
 2191|     22|        SCN_UNLIKELY_ATTR
 2192|     22|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|     22|                                             "Invalid integer value");
 2194|     22|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|      0|    auto start = source.data();
 2198|      0|    const auto end = source.data() + source.size();
 2199|      0|    {
 2200|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 0, False: 0]
  ------------------
 2201|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 0]
  ------------------
 2202|      0|                break;
 2203|      0|            }
 2204|      0|        }
 2205|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2206|      0|            value = 0;
 2207|      0|            return ranges::next(source.begin(),
 2208|      0|                                ranges::distance(source.data(), start));
 2209|      0|        }
 2210|      0|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|      0|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 0, False: 0]
  ------------------
 2215|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|      0|                             detail::make_string_view_from_pointers(start, end),
 2217|      0|                             value, sign == sign_type::minus_sign));
 2218|      0|            return ranges::next(source.begin(),
 2219|      0|                                ranges::distance(source.data(), ptr));
 2220|      0|        }
 2221|      0|    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|    922|{
 2185|    922|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|    922|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|    922|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|    922|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|    922|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 922, False: 0]
  ------------------
 2191|    922|        SCN_UNLIKELY_ATTR
 2192|    922|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    922|                                             "Invalid integer value");
 2194|    922|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|      0|    auto start = source.data();
 2198|      0|    const auto end = source.data() + source.size();
 2199|      0|    {
 2200|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 0, False: 0]
  ------------------
 2201|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 0]
  ------------------
 2202|      0|                break;
 2203|      0|            }
 2204|      0|        }
 2205|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2206|      0|            value = 0;
 2207|      0|            return ranges::next(source.begin(),
 2208|      0|                                ranges::distance(source.data(), start));
 2209|      0|        }
 2210|      0|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|      0|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 0, False: 0]
  ------------------
 2215|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|      0|                             detail::make_string_view_from_pointers(start, end),
 2217|      0|                             value, sign == sign_type::minus_sign));
 2218|      0|            return ranges::next(source.begin(),
 2219|      0|                                ranges::distance(source.data(), ptr));
 2220|      0|        }
 2221|      0|    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  1.08k|{
 2185|  1.08k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  1.08k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  1.08k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  1.08k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  1.08k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 1.02k, False: 60]
  ------------------
 2191|  1.02k|        SCN_UNLIKELY_ATTR
 2192|  1.02k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|  1.02k|                                             "Invalid integer value");
 2194|  1.02k|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|     60|    auto start = source.data();
 2198|     60|    const auto end = source.data() + source.size();
 2199|     60|    {
 2200|    120|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 96, False: 24]
  ------------------
 2201|     96|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 36, False: 60]
  ------------------
 2202|     36|                break;
 2203|     36|            }
 2204|     96|        }
 2205|     60|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 60, False: 0]
  |  |  |  Branch (1039:45): [True: 24, False: 36]
  |  |  |  Branch (1039:45): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 2206|     60|            value = 0;
 2207|     60|            return ranges::next(source.begin(),
 2208|     60|                                ranges::distance(source.data(), start));
 2209|     60|        }
 2210|     60|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|    922|{
 2185|    922|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|    922|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|    922|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|    922|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|    922|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 922, False: 0]
  ------------------
 2191|    922|        SCN_UNLIKELY_ATTR
 2192|    922|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    922|                                             "Invalid integer value");
 2194|    922|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|      0|    auto start = source.data();
 2198|      0|    const auto end = source.data() + source.size();
 2199|      0|    {
 2200|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 0, False: 0]
  ------------------
 2201|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 0]
  ------------------
 2202|      0|                break;
 2203|      0|            }
 2204|      0|        }
 2205|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2206|      0|            value = 0;
 2207|      0|            return ranges::next(source.begin(),
 2208|      0|                                ranges::distance(source.data(), start));
 2209|      0|        }
 2210|      0|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|      0|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 0, False: 0]
  ------------------
 2215|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|      0|                             detail::make_string_view_from_pointers(start, end),
 2217|      0|                             value, sign == sign_type::minus_sign));
 2218|      0|            return ranges::next(source.begin(),
 2219|      0|                                ranges::distance(source.data(), ptr));
 2220|      0|        }
 2221|      0|    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  1.03k|{
 2185|  1.03k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  1.03k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  1.03k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  1.03k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  1.03k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 986, False: 52]
  ------------------
 2191|    986|        SCN_UNLIKELY_ATTR
 2192|    986|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    986|                                             "Invalid integer value");
 2194|    986|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|     52|    auto start = source.data();
 2198|     52|    const auto end = source.data() + source.size();
 2199|     52|    {
 2200|    104|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 84, False: 20]
  ------------------
 2201|     84|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 32, False: 52]
  ------------------
 2202|     32|                break;
 2203|     32|            }
 2204|     84|        }
 2205|     52|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52, False: 0]
  |  |  |  Branch (1039:45): [True: 20, False: 32]
  |  |  |  Branch (1039:45): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 2206|     52|            value = 0;
 2207|     52|            return ranges::next(source.begin(),
 2208|     52|                                ranges::distance(source.data(), start));
 2209|     52|        }
 2210|     52|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|    904|{
 2185|    904|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|    904|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|    904|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|    904|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|    904|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    904|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|    904|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 904, False: 0]
  ------------------
 2191|    904|        SCN_UNLIKELY_ATTR
 2192|    904|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    904|                                             "Invalid integer value");
 2194|    904|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|      0|    auto start = source.data();
 2198|      0|    const auto end = source.data() + source.size();
 2199|      0|    {
 2200|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 0, False: 0]
  ------------------
 2201|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 0]
  ------------------
 2202|      0|                break;
 2203|      0|            }
 2204|      0|        }
 2205|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2206|      0|            value = 0;
 2207|      0|            return ranges::next(source.begin(),
 2208|      0|                                ranges::distance(source.data(), start));
 2209|      0|        }
 2210|      0|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|      0|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|      0|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 0, False: 0]
  ------------------
 2215|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|      0|                             detail::make_string_view_from_pointers(start, end),
 2217|      0|                             value, sign == sign_type::minus_sign));
 2218|      0|            return ranges::next(source.begin(),
 2219|      0|                                ranges::distance(source.data(), ptr));
 2220|      0|        }
 2221|      0|    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v44impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|    988|{
 2185|    988|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|    988|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|    988|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|    988|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|    988|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 948, False: 40]
  ------------------
 2191|    948|        SCN_UNLIKELY_ATTR
 2192|    948|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|    948|                                             "Invalid integer value");
 2194|    948|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|     40|    auto start = source.data();
 2198|     40|    const auto end = source.data() + source.size();
 2199|     40|    {
 2200|     80|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 70, False: 10]
  ------------------
 2201|     70|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 30, False: 40]
  ------------------
 2202|     30|                break;
 2203|     30|            }
 2204|     70|        }
 2205|     40|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|     70|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 40, False: 0]
  |  |  |  Branch (1039:45): [True: 10, False: 30]
  |  |  |  Branch (1039:45): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 2206|     40|            value = 0;
 2207|     40|            return ranges::next(source.begin(),
 2208|     40|                                ranges::distance(source.data(), start));
 2209|     40|        }
 2210|     40|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|       |                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|       |        if (base == 10) {
 2215|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 2216|       |                             detail::make_string_view_from_pointers(start, end),
 2217|       |                             value, sign == sign_type::minus_sign));
 2218|       |            return ranges::next(source.begin(),
 2219|       |                                ranges::distance(source.data(), ptr));
 2220|       |        }
 2221|       |    }
 2222|       |
 2223|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|      0|                     detail::make_string_view_from_pointers(start, end), value,
 2225|      0|                     base, sign == sign_type::minus_sign));
 2226|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|      0|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2951|  31.6k|{
 2952|  31.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2953|  31.6k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2969|  63.3k|{
 2970|  63.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2971|  63.3k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|  4.00k|{
  207|  4.00k|    return find_classic_impl(
  208|  4.00k|        source, [](char ch) { return is_ascii_space(ch); },
  209|  4.00k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|  4.00k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  27.0k|{
  215|  27.0k|    return find_classic_impl(
  216|  27.0k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  27.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  27.0k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|    354|{
  329|    354|    SCN_UNLIKELY_ATTR
  330|    354|    return e;
  331|    354|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2920|  31.6k|{
 2921|  31.6k|    return vscan_internal(source, format, args);
 2922|  31.6k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2934|  63.3k|{
 2935|  63.3k|    return vscan_internal(source, format, args);
 2936|  63.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  4.00k|{
  131|  4.00k|    auto it = source.begin();
  132|       |
  133|  11.9k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 8.64k, False: 3.25k]
  ------------------
  134|  8.64k|        auto sv =
  135|  8.64k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  8.64k|                .substr(0, 8);
  137|       |
  138|  8.64k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.56k, False: 6.07k]
  ------------------
  139|  2.56k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.56k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.56k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 420, False: 2.14k]
  ------------------
  142|    420|                break;
  143|    420|            }
  144|  2.14k|            continue;
  145|  2.56k|        }
  146|       |
  147|  23.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 17.7k, False: 5.74k]
  ------------------
  148|  17.7k|            auto tmp =
  149|  17.7k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  17.7k|            auto res = get_next_code_point(tmp);
  151|  17.7k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 330, False: 17.3k]
  ------------------
  152|    330|                return it;
  153|    330|            }
  154|  17.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  17.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  17.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  17.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  17.3k|        }
  158|  6.07k|    }
  159|       |
  160|  3.67k|    return detail::make_string_view_iterator(source, it);
  161|  4.00k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  34.8k|{
  118|  34.8k|    static_assert(sizeof(*source.data()) == 1);
  119|  34.8k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  34.8k|    uint64_t word{};
  121|  34.8k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  34.8k|    return has_byte_greater(word, 127) != 0;
  124|  34.8k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  14.2k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|  17.7k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  27.0k|{
  131|  27.0k|    auto it = source.begin();
  132|       |
  133|  34.5k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 26.1k, False: 8.43k]
  ------------------
  134|  26.1k|        auto sv =
  135|  26.1k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  26.1k|                .substr(0, 8);
  137|       |
  138|  26.1k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 12.4k, False: 13.7k]
  ------------------
  139|  12.4k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  12.4k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  12.4k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 10.3k, False: 2.02k]
  ------------------
  142|  10.3k|                break;
  143|  10.3k|            }
  144|  2.02k|            continue;
  145|  12.4k|        }
  146|       |
  147|  27.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 22.2k, False: 5.48k]
  ------------------
  148|  22.2k|            auto tmp =
  149|  22.2k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  22.2k|            auto res = get_next_code_point(tmp);
  151|  22.2k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 8.27k, False: 13.9k]
  ------------------
  152|  8.27k|                return it;
  153|  8.27k|            }
  154|  13.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  13.9k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  13.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  13.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  13.9k|        }
  158|  13.7k|    }
  159|       |
  160|  18.8k|    return detail::make_string_view_iterator(source, it);
  161|  27.0k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  24.7k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  22.2k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|    914|{
 1737|    914|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 914]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|    914|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 914]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|    914|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 914]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|    914|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 914]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|    914|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|    914|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 8, False: 906]
  ------------------
 1807|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1808|      8|            return detail::unexpected_scan_error(
 1809|      8|                scan_error::invalid_scanned_value,
 1810|      8|                "Invalid floating-point digit");
 1811|      8|        }
 1812|      8|    }
 1813|    906|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 906, False: 0]
  |  |  ------------------
  ------------------
 1814|    906|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|    906|                                             "Invalid floating-point digit");
 1816|    906|    }
 1817|       |
 1818|      0|    return dispatch_parse_float_value<
 1819|      0|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|      0|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|      0|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|    906|}
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  915|    108|    {
  916|    108|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 108, False: 0]
  |  Branch (916:41): [True: 0, False: 108]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|    108|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 0, False: 108]
  ------------------
  924|    108|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 0]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|    108|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 0, False: 108]
  |  Branch (932:34): [True: 0, False: 0]
  ------------------
  933|      0|            SCN_UNLIKELY_ATTR
  934|      0|            return detail::unexpected_scan_error(
  935|      0|                scan_error::value_positive_underflow,
  936|      0|                "strtod failed: Value too small");
  937|      0|        }
  938|    108|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 0, False: 108]
  |  Branch (938:34): [True: 0, False: 0]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|    108|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 108, False: 0]
  ------------------
  948|    108|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 108, False: 0]
  ------------------
  949|    108|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 0, False: 108]
  ------------------
  950|      0|            SCN_UNLIKELY_ATTR
  951|      0|            return detail::unexpected_scan_error(
  952|      0|                scan_error::value_positive_overflow,
  953|      0|                "strtod failed: Value too large");
  954|      0|        }
  955|    108|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 108, False: 0]
  ------------------
  956|    108|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 108, False: 0]
  ------------------
  957|    108|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 108]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|    108|        return {};
  965|    108|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  754|    108|{
  755|    108|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 108, False: 0]
  |  Branch (755:44): [True: 0, False: 0]
  ------------------
  756|    108|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  797|    108|{
  798|    108|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|    108|        return value == std::numeric_limits<T>::infinity();
  815|    108|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|    108|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  824|    108|{
  825|    108|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|    108|        return value == -std::numeric_limits<T>::infinity();
  843|    108|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|    108|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|  1.08k|{
 1737|  1.08k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 1.08k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|  1.08k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 1.08k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|  1.08k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 1.08k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|  1.08k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 1.08k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|  1.08k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|  1.08k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 80, False: 1.00k]
  ------------------
 1807|     80|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|     80|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22, False: 58]
  |  |  ------------------
  ------------------
 1808|     22|            return detail::unexpected_scan_error(
 1809|     22|                scan_error::invalid_scanned_value,
 1810|     22|                "Invalid floating-point digit");
 1811|     22|        }
 1812|     80|    }
 1813|  1.06k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 958, False: 108]
  |  |  ------------------
  ------------------
 1814|    958|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|    958|                                             "Invalid floating-point digit");
 1816|    958|    }
 1817|       |
 1818|    108|    return dispatch_parse_float_value<
 1819|    108|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|    108|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|    108|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|  1.06k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|    108|{
 1711|    108|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|    108|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|    108|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|    108|{
 1711|    108|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|    108|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|    108|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|    108|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|    108|    else {
 1715|    108|        auto next =
 1716|    108|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|    108|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|    108|                if (!err.has_value()) {
 1721|    108|                    return unexpected(err.error());
 1722|    108|                }
 1723|    108|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|    108|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|    108|        };
 1727|    108|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|    108|    }
 1729|    108|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|    108|{
 1686|    108|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|    108|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|    108|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|    108|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1071|    108|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|    108|    {
 1073|    108|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|    108|    {
 1078|    108|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|    108|                           generic_strtod);
 1080|    108|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|    108|    {
  873|    108|        CharT* end{};
  874|    108|        errno = 0;
  875|    108|        value = strtod_cb(src, &end);
  876|    108|        const auto saved_errno = errno;
  877|    108|        auto chars_read = end - src;
  878|       |
  879|    108|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|    108|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 108]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
  880|       |
  881|    108|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 58, False: 50]
  ------------------
  882|    108|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 58, False: 0]
  ------------------
  883|     58|            chars_read -= 2;
  884|     58|        }
  885|       |
  886|    108|        return chars_read;
  887|    108|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|    108|    {
  893|    108|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 88, False: 20]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|     88|            auto first_space = read_until_classic_space(input.view());
  896|     88|            input.assign(
  897|     88|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|     88|        }
  899|       |
  900|    108|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 58, False: 50]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|     58|            else {
  905|     58|                input.get_allocated_string().insert(0, L"0x");
  906|     58|            }
  907|     58|        }
  908|       |
  909|    108|        return input.get_allocated_string().c_str();
  910|    108|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1084|    108|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|    108|        else {
 1089|    108|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|    108|        }
 1091|    108|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1016|    108|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|    108|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|    108|        else if constexpr (std::is_same_v<T, double>) {
 1052|    108|            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|    108|        SCN_EXPECT(false);
  ------------------
  |  | 1104|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|    108|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|  63.3k|{
 2366|  63.3k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 62.9k, False: 378]
  ------------------
 2367|  62.9k|        return false;
 2368|  62.9k|    }
 2369|    378|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 126, False: 252]
  |  Branch (2369:39): [True: 18, False: 108]
  ------------------
 2370|  63.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2641|  63.3k|        : format_handler_base{argcount},
 2642|  63.3k|          parse_ctx{source_tag<Source&&>, format},
 2643|  63.3k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  63.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  63.3k|    static_cast<    \
  |  | 1109|  63.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  63.3k|    static_cast<    \
  |  | 1109|  63.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|  63.3k|    {
 2645|  63.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2459|   190k|    format_handler_base(size_t argcount) : args_count(argcount)
 2460|   190k|    {
 2461|   190k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
 2462|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2463|      0|        }
 2464|   190k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2592|  63.3k|        : contiguous_ctx(source, args, loc)
 2593|  63.3k|    {
 2594|  63.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|  63.3k|{
 2783|  63.3k|    const auto beg = handler.get_ctx().begin();
 2784|  63.3k|    detail::parse_format_string<false>(format, handler);
 2785|  63.3k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 60.6k, False: 2.73k]
  |  |  ------------------
  ------------------
 2786|  60.6k|        return unexpected(err.error());
 2787|  60.6k|    }
 2788|  2.73k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|  63.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2766|   457k|    {
 2767|   457k|        return ctx.get();
 2768|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2597|   457k|    {
 2598|   457k|        return contiguous_ctx;
 2599|   457k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2648|  83.8k|    {
 2649|   156k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 77.6k, False: 79.1k]
  ------------------
 2650|  77.6k|            auto it = get_ctx().begin();
 2651|  77.6k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 1.17k, False: 76.4k]
  ------------------
 2652|  1.17k|                SCN_UNLIKELY_ATTR
 2653|  1.17k|                return on_error(
 2654|  1.17k|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|  1.17k|            }
 2656|       |
 2657|  76.4k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|  76.4k|                    detail::make_string_view_from_pointers(begin, end));
 2659|  76.4k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 2.35k, False: 74.1k]
  ------------------
 2660|  2.35k|                SCN_UNLIKELY_ATTR
 2661|  2.35k|                return on_error({scan_error::invalid_format_string,
 2662|  2.35k|                                 "Invalid encoding in format string"});
 2663|  2.35k|            }
 2664|  74.1k|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 8.44k, False: 65.6k]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|  8.44k|                get_ctx().advance_to(
 2667|  8.44k|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|  8.44k|                auto begin_it = impl::read_while_classic_space(
 2670|  8.44k|                    detail::make_string_view_from_pointers(
 2671|  8.44k|                        detail::to_address(after_space_it),
 2672|  8.44k|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|  8.44k|                begin = detail::to_address(begin_it) - 1;
 2675|  8.44k|                continue;
 2676|  8.44k|            }
 2677|       |
 2678|  65.6k|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 1.24k, False: 64.4k]
  ------------------
 2679|  1.24k|                SCN_UNLIKELY_ATTR
 2680|  1.24k|                return on_error({scan_error::invalid_literal,
 2681|  1.24k|                                 "Unexpected literal character in source"});
 2682|  1.24k|            }
 2683|  64.4k|            get_ctx().advance_to(ranges::next(it));
 2684|  64.4k|        }
 2685|  83.8k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2508|   234k|    {
 2509|   234k|        error = unexpected(err);
 2510|   234k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 2715|  6.01k|    {
 2716|  6.01k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2717|  6.01k|        set_arg_as_visited(arg_id);
 2718|       |
 2719|  6.01k|        on_visit_scan_arg(
 2720|  6.01k|            impl::default_arg_reader<context_type>{
 2721|  6.01k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 2722|  6.01k|            arg);
 2723|  6.01k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2420|  38.8k|{
 2421|  38.8k|    auto arg = ctx.arg(id);
 2422|  38.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.60k, False: 37.2k]
  |  |  ------------------
  ------------------
 2423|  1.60k|        handler.on_error("Failed to find argument with ID");
 2424|  1.60k|    }
 2425|  38.8k|    return arg;
 2426|  38.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2534|  60.4k|    {
 2535|  60.4k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.94k, False: 57.5k]
  |  |  ------------------
  ------------------
 2536|  2.94k|            on_error({scan_error::invalid_format_string,
 2537|  2.94k|                      "Argument ID out-of-range"});
 2538|  2.94k|            return;
 2539|  2.94k|        }
 2540|       |
 2541|  57.5k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 246, False: 57.2k]
  |  |  ------------------
  ------------------
 2542|    246|            on_error({scan_error::invalid_format_string,
 2543|    246|                      "Argument with this ID has already been scanned"});
 2544|    246|        }
 2545|       |
 2546|  57.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  57.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 57.5k, False: 0]
  |  |  ------------------
  ------------------
 2547|  57.5k|            visited_args_lower64 |= (1ull << id);
 2548|  57.5k|            return;
 2549|  57.5k|        }
 2550|       |
 2551|      0|        id -= 64;
 2552|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2553|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2518|  57.5k|    {
 2519|  57.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 57.5k]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return false;
 2523|      0|        }
 2524|       |
 2525|  57.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  57.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 57.5k, False: 0]
  |  |  ------------------
  ------------------
 2526|  57.5k|            return (visited_args_lower64 >> id) & 1ull;
 2527|  57.5k|        }
 2528|       |
 2529|      0|        id -= 64;
 2530|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2531|  57.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2699|  6.01k|    {
 2700|  6.01k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 328, False: 5.68k]
  |  Branch (2700:13): [True: 328, False: 5.68k]
  |  Branch (2700:29): [True: 0, False: 5.68k]
  ------------------
 2701|    328|            SCN_UNLIKELY_ATTR
 2702|    328|            return;
 2703|    328|        }
 2704|       |
 2705|  5.68k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  5.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  5.68k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  5.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.94k, False: 1.74k]
  |  |  ------------------
  ------------------
 2707|  3.94k|            on_error(r.error());
 2708|  3.94k|        }
 2709|  1.74k|        else {
 2710|  1.74k|            get_ctx().advance_to(*r);
 2711|  1.74k|        }
 2712|  5.68k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2688|  38.1k|    {
 2689|  38.1k|        return parse_ctx.next_arg_id();
 2690|  38.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 2692|    736|    {
 2693|    736|        parse_ctx.check_arg_id(id);
 2694|    736|        return id;
 2695|    736|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2728|  32.7k|    {
 2729|  32.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|  32.7k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|  32.7k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 32.7k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|  32.7k|        auto specs = detail::format_specs{};
 2742|  32.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|  32.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|  32.7k|            detail::get_arg_type(arg)};
 2745|       |
 2746|  32.7k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|  32.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 2.42k, False: 30.3k]
  |  Branch (2747:29): [True: 914, False: 29.4k]
  ------------------
 2748|  3.34k|            SCN_UNLIKELY_ATTR
 2749|  3.34k|            on_error({scan_error::invalid_format_string,
 2750|  3.34k|                      "Missing '}' in format string"});
 2751|  3.34k|            return parse_ctx.begin();
 2752|  3.34k|        }
 2753|  29.4k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 294, False: 29.1k]
  |  |  ------------------
  ------------------
 2754|    294|            return parse_ctx.begin();
 2755|    294|        }
 2756|  29.1k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|  29.1k|        on_visit_scan_arg(
 2759|  29.1k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|  29.1k|                                           get_ctx().locale()},
 2761|  29.1k|            arg);
 2762|  29.1k|        return parse_ctx.begin();
 2763|  29.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2438|  32.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|  32.7k|    {
 2440|  32.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2699|  29.1k|    {
 2700|  29.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 160, False: 28.9k]
  |  Branch (2700:13): [True: 160, False: 28.9k]
  |  Branch (2700:29): [True: 0, False: 28.9k]
  ------------------
 2701|    160|            SCN_UNLIKELY_ATTR
 2702|    160|            return;
 2703|    160|        }
 2704|       |
 2705|  28.9k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  28.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.5k, False: 5.41k]
  |  |  ------------------
  ------------------
 2707|  23.5k|            on_error(r.error());
 2708|  23.5k|        }
 2709|  5.41k|        else {
 2710|  5.41k|            get_ctx().advance_to(*r);
 2711|  5.41k|        }
 2712|  28.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2502|   120k|    {
 2503|   120k|        SCN_UNLIKELY_ATTR
 2504|   120k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2505|   120k|                                              msg);
 2506|   120k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2467|   190k|    {
 2468|   190k|        {
 2469|   190k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2469:45): [True: 0, False: 190k]
  ------------------
 2470|   190k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2470:35): [True: 0, False: 190k]
  ------------------
 2471|   190k|                                      ? std::numeric_limits<uint64_t>::max()
 2472|   190k|                                      : (1ull << args_count_lower64) - 1;
 2473|       |
 2474|   190k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2474:17): [True: 132k, False: 57.2k]
  ------------------
 2475|   132k|                return on_error({scan_error::invalid_format_string,
 2476|   132k|                                 "Argument list not exhausted"});
 2477|   132k|            }
 2478|   190k|        }
 2479|       |
 2480|  57.2k|        if (args_count < 64) {
  ------------------
  |  Branch (2480:13): [True: 57.2k, False: 0]
  ------------------
 2481|  57.2k|            return;
 2482|  57.2k|        }
 2483|       |
 2484|      0|        auto last_args_count = args_count - 64;
 2485|      0|        for (auto it = visited_args_upper.begin();
 2486|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2486:14): [True: 0, False: 0]
  ------------------
 2487|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return on_error({scan_error::invalid_format_string,
 2489|      0|                                 "Argument list not exhausted"});
 2490|      0|            }
 2491|      0|            last_args_count -= 8;
 2492|      0|        }
 2493|       |
 2494|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2495|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2495:13): [True: 0, False: 0]
  ------------------
 2496|      0|            return on_error({scan_error::invalid_format_string,
 2497|      0|                             "Argument list not exhausted"});
 2498|      0|        }
 2499|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2513|   536k|    {
 2514|   536k|        return error;
 2515|   536k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|  63.3k|{
 2798|  63.3k|    const auto argcount = args.size();
 2799|  63.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 18, False: 63.3k]
  |  Branch (2799:60): [True: 18, False: 0]
  ------------------
 2800|     18|        auto arg = args.get(0);
 2801|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|     18|    }
 2803|       |
 2804|  63.3k|    auto handler = format_handler<true, CharT>{
 2805|  63.3k|        ranges::subrange<const CharT*>{source.data(),
 2806|  63.3k|                                       source.data() + source.size()},
 2807|  63.3k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  63.3k|    static_cast<    \
  |  | 1109|  63.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  63.3k|    static_cast<    \
  |  | 1109|  63.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|  63.3k|    return vscan_parse_format_string(format, handler);
 2809|  63.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|     18|{
 2379|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|     18|    auto reader =
 2385|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|     18|            ranges::subrange<const CharT*>{source.data(),
 2387|     18|                                           source.data() + source.size()},
 2388|     18|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|      8|    return ranges::distance(source.data(), it);
 2391|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|   126k|{
 2798|   126k|    const auto argcount = args.size();
 2799|   126k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 18, False: 126k]
  |  Branch (2799:60): [True: 18, False: 0]
  ------------------
 2800|     18|        auto arg = args.get(0);
 2801|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|     18|    }
 2803|       |
 2804|   126k|    auto handler = format_handler<true, CharT>{
 2805|   126k|        ranges::subrange<const CharT*>{source.data(),
 2806|   126k|                                       source.data() + source.size()},
 2807|   126k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|   126k|    return vscan_parse_format_string(format, handler);
 2809|   126k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|   126k|{
 2366|   126k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 120k, False: 6.46k]
  ------------------
 2367|   120k|        return false;
 2368|   120k|    }
 2369|  6.46k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 126, False: 6.33k]
  |  Branch (2369:39): [True: 18, False: 108]
  ------------------
 2370|   126k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|     18|{
 2379|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|     18|    auto reader =
 2385|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|     18|            ranges::subrange<const CharT*>{source.data(),
 2387|     18|                                           source.data() + source.size()},
 2388|     18|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|     18|    static_cast<    \
  |  | 1109|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|     18|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|      8|    return ranges::distance(source.data(), it);
 2391|     18|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2641|   126k|        : format_handler_base{argcount},
 2642|   126k|          parse_ctx{source_tag<Source&&>, format},
 2643|   126k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   126k|    {
 2645|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2592|   126k|        : contiguous_ctx(source, args, loc)
 2593|   126k|    {
 2594|   126k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   126k|{
 2783|   126k|    const auto beg = handler.get_ctx().begin();
 2784|   126k|    detail::parse_format_string<false>(format, handler);
 2785|   126k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 124k, False: 2.16k]
  |  |  ------------------
  ------------------
 2786|   124k|        return unexpected(err.error());
 2787|   124k|    }
 2788|  2.16k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   126k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2766|  1.61M|    {
 2767|  1.61M|        return ctx.get();
 2768|  1.61M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2597|  1.61M|    {
 2598|  1.61M|        return contiguous_ctx;
 2599|  1.61M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2648|  96.4k|    {
 2649|   527k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 477k, False: 49.3k]
  ------------------
 2650|   477k|            auto it = get_ctx().begin();
 2651|   477k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 642, False: 477k]
  ------------------
 2652|    642|                SCN_UNLIKELY_ATTR
 2653|    642|                return on_error(
 2654|    642|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|    642|            }
 2656|       |
 2657|   477k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|   477k|                    detail::make_string_view_from_pointers(begin, end));
 2659|   477k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 44.4k, False: 432k]
  ------------------
 2660|  44.4k|                SCN_UNLIKELY_ATTR
 2661|  44.4k|                return on_error({scan_error::invalid_format_string,
 2662|  44.4k|                                 "Invalid encoding in format string"});
 2663|  44.4k|            }
 2664|   432k|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 10.0k, False: 422k]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|  10.0k|                get_ctx().advance_to(
 2667|  10.0k|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|  10.0k|                auto begin_it = impl::read_while_classic_space(
 2670|  10.0k|                    detail::make_string_view_from_pointers(
 2671|  10.0k|                        detail::to_address(after_space_it),
 2672|  10.0k|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|  10.0k|                begin = detail::to_address(begin_it) - 1;
 2675|  10.0k|                continue;
 2676|  10.0k|            }
 2677|       |
 2678|   422k|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 2.02k, False: 420k]
  ------------------
 2679|  2.02k|                SCN_UNLIKELY_ATTR
 2680|  2.02k|                return on_error({scan_error::invalid_literal,
 2681|  2.02k|                                 "Unexpected literal character in source"});
 2682|  2.02k|            }
 2683|   420k|            get_ctx().advance_to(ranges::next(it));
 2684|   420k|        }
 2685|  96.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 2715|  5.35k|    {
 2716|  5.35k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2717|  5.35k|        set_arg_as_visited(arg_id);
 2718|       |
 2719|  5.35k|        on_visit_scan_arg(
 2720|  5.35k|            impl::default_arg_reader<context_type>{
 2721|  5.35k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 2722|  5.35k|            arg);
 2723|  5.35k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2420|  21.6k|{
 2421|  21.6k|    auto arg = ctx.arg(id);
 2422|  21.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.34k, False: 20.3k]
  |  |  ------------------
  ------------------
 2423|  1.34k|        handler.on_error("Failed to find argument with ID");
 2424|  1.34k|    }
 2425|  21.6k|    return arg;
 2426|  21.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2699|  5.35k|    {
 2700|  5.35k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 224, False: 5.13k]
  |  Branch (2700:13): [True: 224, False: 5.13k]
  |  Branch (2700:29): [True: 0, False: 5.13k]
  ------------------
 2701|    224|            SCN_UNLIKELY_ATTR
 2702|    224|            return;
 2703|    224|        }
 2704|       |
 2705|  5.13k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  5.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  5.13k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  5.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.55k, False: 1.57k]
  |  |  ------------------
  ------------------
 2707|  3.55k|            on_error(r.error());
 2708|  3.55k|        }
 2709|  1.57k|        else {
 2710|  1.57k|            get_ctx().advance_to(*r);
 2711|  1.57k|        }
 2712|  5.13k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2688|  19.9k|    {
 2689|  19.9k|        return parse_ctx.next_arg_id();
 2690|  19.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 2692|  1.78k|    {
 2693|  1.78k|        parse_ctx.check_arg_id(id);
 2694|  1.78k|        return id;
 2695|  1.78k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2728|  16.3k|    {
 2729|  16.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|  16.3k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|  16.3k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 16.3k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|  16.3k|        auto specs = detail::format_specs{};
 2742|  16.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|  16.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|  16.3k|            detail::get_arg_type(arg)};
 2745|       |
 2746|  16.3k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|  16.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 2.09k, False: 14.2k]
  |  Branch (2747:29): [True: 468, False: 13.7k]
  ------------------
 2748|  2.56k|            SCN_UNLIKELY_ATTR
 2749|  2.56k|            on_error({scan_error::invalid_format_string,
 2750|  2.56k|                      "Missing '}' in format string"});
 2751|  2.56k|            return parse_ctx.begin();
 2752|  2.56k|        }
 2753|  13.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 374, False: 13.3k]
  |  |  ------------------
  ------------------
 2754|    374|            return parse_ctx.begin();
 2755|    374|        }
 2756|  13.3k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|  13.3k|        on_visit_scan_arg(
 2759|  13.3k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|  13.3k|                                           get_ctx().locale()},
 2761|  13.3k|            arg);
 2762|  13.3k|        return parse_ctx.begin();
 2763|  13.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2438|  16.3k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|  16.3k|    {
 2440|  16.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2699|  13.3k|    {
 2700|  13.3k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 164, False: 13.2k]
  |  Branch (2700:13): [True: 164, False: 13.2k]
  |  Branch (2700:29): [True: 0, False: 13.2k]
  ------------------
 2701|    164|            SCN_UNLIKELY_ATTR
 2702|    164|            return;
 2703|    164|        }
 2704|       |
 2705|  13.2k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  13.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.89k, False: 3.31k]
  |  |  ------------------
  ------------------
 2707|  9.89k|            on_error(r.error());
 2708|  9.89k|        }
 2709|  3.31k|        else {
 2710|  3.31k|            get_ctx().advance_to(*r);
 2711|  3.31k|        }
 2712|  13.2k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  3.52k|{
 1462|  3.52k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  3.52k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  3.52k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  3.52k|            return transcode_to_string_impl_to32(src, dest);
 1473|  3.52k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  3.52k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  3.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  3.52k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  3.52k|{
 1355|  3.52k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  3.52k|    auto it = src.begin();
 1358|   274k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 271k, False: 3.52k]
  ------------------
 1359|   271k|        auto res = get_next_code_point(
 1360|   271k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   271k|                                                                 src.end()));
 1362|   271k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   271k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.90k, False: 266k]
  |  |  ------------------
  ------------------
 1363|  4.90k|            dest.push_back(DestCharT{0xfffd});
 1364|  4.90k|        }
 1365|   266k|        else {
 1366|   266k|            dest.push_back(res.value);
 1367|   266k|        }
 1368|   271k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   271k|    }
 1370|  3.52k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   442k|{
 1279|   442k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   442k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   442k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.35k, False: 434k]
  |  |  ------------------
  ------------------
 1283|  7.35k|        return {get_start_for_next_code_point(input),
 1284|  7.35k|                detail::invalid_code_point};
 1285|  7.35k|    }
 1286|   434k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.00k, False: 433k]
  |  |  ------------------
  ------------------
 1287|  1.00k|        return {input.end(), detail::invalid_code_point};
 1288|  1.00k|    }
 1289|       |
 1290|   433k|    return {input.begin() + len,
 1291|   433k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   434k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  7.35k|{
 1265|  7.35k|    auto it = input.begin();
 1266|  25.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 24.1k, False: 1.48k]
  ------------------
 1267|  24.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 5.86k, False: 18.3k]
  ------------------
 1268|  5.86k|            break;
 1269|  5.86k|        }
 1270|  24.1k|    }
 1271|  7.35k|    return it;
 1272|  7.35k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  61.1k|    constexpr parse_error(code c) : m_code(c)
  808|  61.1k|    {
  809|  61.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  61.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  61.1k|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  25.9k|    {
  823|  25.9k|        return a.m_code == b.m_code;
  824|  25.9k|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  5.14k|    {
  827|  5.14k|        return !(a == b);
  828|  5.14k|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|    108|    clocale_restorer(int cat) : m_category(cat)
 1826|    108|    {
 1827|    108|        const auto loc = std::setlocale(cat, nullptr);
 1828|    108|        std::strcpy(m_locbuf, loc);
 1829|    108|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|    108|    {
 1832|       |        // Restore locale to what it was before
 1833|    108|        std::setlocale(m_category, m_locbuf);
 1834|    108|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|    108|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|    108|    {
 1856|    108|        std::setlocale(cat, "C");
 1857|    108|    }
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3077|  20.3k|    {
 3078|  20.3k|        SCN_UNLIKELY_ATTR
 3079|  20.3k|        m_msg = msg;
 3080|  20.3k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|  42.1k|    {
 3083|  42.1k|        return m_msg == nullptr;
 3084|  42.1k|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3726|  1.46k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl22nonascii_specs_handler17on_charset_singleEDi:
 5087|   866k|    {
 5088|   866k|        on_charset_range(cp, cp + 1);
 5089|   866k|    }
_ZN3scn2v44impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 5092|   871k|    {
 5093|   871k|        if (end <= 127) {
  ------------------
  |  Branch (5093:13): [True: 475k, False: 395k]
  ------------------
 5094|   475k|            return;
 5095|   475k|        }
 5096|       |
 5097|  73.0M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5097:25): [True: 73.0M, False: 389k]
  ------------------
 5098|       |            // TODO: check for overlap
 5099|  73.0M|            if (elem.first == end) {
  ------------------
  |  Branch (5099:17): [True: 1.10k, False: 73.0M]
  ------------------
 5100|  1.10k|                elem.first = begin;
 5101|  1.10k|                return;
 5102|  1.10k|            }
 5103|       |
 5104|  73.0M|            if (elem.second == begin) {
  ------------------
  |  Branch (5104:17): [True: 5.63k, False: 73.0M]
  ------------------
 5105|  5.63k|                elem.second = end;
 5106|  5.63k|                return;
 5107|  5.63k|            }
 5108|  73.0M|        }
 5109|       |
 5110|   389k|        extra_ranges.push_back(std::make_pair(begin, end));
 5111|   389k|    }
_ZNK3scn2v44impl22nonascii_specs_handler19on_charset_invertedEv:
 5114|  1.05k|    {
 5115|       |        // no-op
 5116|  1.05k|    }
_ZNK3scn2v44impl22nonascii_specs_handler9get_errorEv:
 5129|   881k|    {
 5130|   881k|        return err;
 5131|   881k|    }
_ZN3scn2v44impl16bool_reader_baseC2Ej:
 5443|  1.84k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  39.0k|{
  458|  39.0k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  39.0k|        static_cast<unsigned char>(ch))];
  460|  39.0k|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   592k|{
  469|   592k|    return static_cast<unsigned char>(ch) <= 127;
  470|   592k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  4.21k|{
  474|  4.21k|#if WCHAR_MIN < 0
  475|  4.21k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 4.18k, False: 30]
  |  Branch (475:23): [True: 4.02k, False: 168]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  4.21k|}
_ZN3scn2v44impl13is_ascii_charEDi:
  482|   689k|{
  483|   689k|    return cp <= 127;
  484|   689k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  34.8k|{
  539|  34.8k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  34.8k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  53.6k|{
  784|  53.6k|    return e != eof_error::good;
  785|  53.6k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    354|{
  798|    354|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|    354|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    354|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    354|    return scan_error{scan_error::end_of_input, "EOF"};
  800|    354|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  1.09k|{
  845|  1.09k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  1.09k|    return parse_error::eof;
  847|  1.09k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.14k|{
  854|  5.14k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.14k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.14k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 142, False: 5.00k]
  ------------------
  859|    142|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|    142|    }
  861|       |
  862|  5.00k|    return detail::unexpected_scan_error(code, msg);
  863|  5.14k|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.18k|{
  868|  5.18k|    return [code, msg](parse_error err) {
  869|  5.18k|        assert(err != parse_error::good);
  870|  5.18k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  5.18k|    };
  872|  5.18k|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2352|  3.77k|{
 2353|  3.77k|    unsigned char running_diff{0};
 2354|  13.1k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2354:24): [True: 9.42k, False: 3.77k]
  ------------------
 2355|  9.42k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2356|  9.42k|    }
 2357|  3.77k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2357:12): [True: 0, False: 3.77k]
  |  Branch (2357:33): [True: 0, False: 3.77k]
  ------------------
 2358|  3.77k|}
_ZN3scn2v44impl32calculate_text_width_for_fmt_v10EDi:
 2435|   192k|{
 2436|   192k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2436:9): [True: 47.0k, False: 145k]
  ------------------
 2437|   192k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2437:10): [True: 224, False: 46.8k]
  ------------------
 2438|  47.0k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2438:10): [True: 108, False: 46.7k]
  ------------------
 2439|  47.0k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2439:10): [True: 72, False: 46.6k]
  ------------------
 2440|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2441|  47.0k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2441:11): [True: 18.4k, False: 28.1k]
  |  Branch (2441:27): [True: 2.81k, False: 15.6k]
  |  Branch (2441:43): [True: 1.74k, False: 1.06k]
  ------------------
 2442|  47.0k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2442:11): [True: 15.6k, False: 29.2k]
  |  Branch (2442:27): [True: 248, False: 15.4k]
  ------------------
 2443|  47.0k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2443:11): [True: 15.3k, False: 29.3k]
  |  Branch (2443:27): [True: 240, False: 15.1k]
  ------------------
 2444|  47.0k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2444:11): [True: 15.1k, False: 29.3k]
  |  Branch (2444:27): [True: 462, False: 14.6k]
  ------------------
 2445|  47.0k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2445:11): [True: 14.6k, False: 29.3k]
  |  Branch (2445:27): [True: 214, False: 14.4k]
  ------------------
 2446|  47.0k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2446:11): [True: 14.4k, False: 29.3k]
  |  Branch (2446:27): [True: 206, False: 14.2k]
  ------------------
 2447|  47.0k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2447:11): [True: 14.2k, False: 29.3k]
  |  Branch (2447:27): [True: 284, False: 13.9k]
  ------------------
 2448|  47.0k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2448:11): [True: 13.6k, False: 29.5k]
  |  Branch (2448:28): [True: 442, False: 13.2k]
  ------------------
 2449|  47.0k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2449:11): [True: 13.2k, False: 29.5k]
  |  Branch (2449:28): [True: 292, False: 12.9k]
  ------------------
 2450|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2451|  47.0k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2451:11): [True: 13.1k, False: 29.4k]
  |  Branch (2451:28): [True: 78, False: 13.0k]
  ------------------
 2452|       |         // Supplemental Symbols and Pictographs:
 2453|  47.0k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2453:11): [True: 13.0k, False: 29.4k]
  |  Branch (2453:28): [True: 72, False: 12.9k]
  ------------------
 2454|  4.68k|        return 2;
 2455|  4.68k|    }
 2456|   188k|    return 1;
 2457|   192k|}
_ZN3scn2v44impl26calculate_valid_text_widthEDi:
 2460|   126k|{
 2461|   126k|    return calculate_text_width_for_fmt_v10(cp);
 2462|   126k|}
_ZN3scn2v44impl20calculate_text_widthEDi:
 2475|    262|{
 2476|    262|    return calculate_text_width_for_fmt_v10(cp);
 2477|    262|}
_ZN3scn2v44impl11char_to_intEc:
 3271|  18.5k|{
 3272|  18.5k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3273|  18.5k|}
_ZN3scn2v44impl11char_to_intEw:
 3275|  9.39k|{
 3276|  9.39k|#if WCHAR_MIN < 0
 3277|  9.39k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3277:9): [True: 9.39k, False: 0]
  |  Branch (3277:20): [True: 9.28k, False: 112]
  ------------------
 3278|       |#else
 3279|       |    if (ch <= 255) {
 3280|       |#endif
 3281|  9.28k|        return char_to_int(static_cast<char>(ch));
 3282|  9.28k|    }
 3283|    112|    return 255;
 3284|  9.39k|}
_ZN3scn2v44impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4412|    462|{
 4413|    462|    RE2::Options opt{RE2::Quiet};
 4414|    462|    std::string_view stringflags{};
 4415|       |
 4416|    462|    if ((flags & detail::regex_flags::multiline) == detail::regex_flags::none) {
  ------------------
  |  Branch (4416:9): [True: 450, False: 12]
  ------------------
 4417|    450|        stringflags = "(?m)";
 4418|    450|    }
 4419|    462|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4419:9): [True: 6, False: 456]
  ------------------
 4420|    462|        detail::regex_flags::none) {
 4421|      6|        opt.set_dot_nl(true);
 4422|      6|    }
 4423|    462|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4423:9): [True: 6, False: 456]
  ------------------
 4424|      6|        opt.set_case_sensitive(false);
 4425|      6|    }
 4426|    462|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4426:9): [True: 6, False: 456]
  ------------------
 4427|      6|        opt.set_never_capture(true);
 4428|      6|    }
 4429|       |
 4430|    462|    return {opt, stringflags};
 4431|    462|}
_ZN3scn2v44impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4741|  1.20k|{
 4742|  1.20k|    std::string result{pattern};
 4743|  9.54k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4743:24): [True: 8.34k, False: 1.20k]
  ------------------
 4744|  8.34k|        result.replace(n, 2, "/");
 4745|  8.34k|        ++n;
 4746|  8.34k|    }
 4747|  1.20k|    return result;
 4748|  1.20k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6115|  9.68k|{
 6116|  9.68k|    if (specs.width != 0) {
  ------------------
  |  Branch (6116:9): [True: 2.27k, False: 7.41k]
  ------------------
 6117|  2.27k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6117:13): [True: 958, False: 1.31k]
  ------------------
 6118|    958|            return detail::unexpected_scan_error(
 6119|    958|                scan_error::length_too_short,
 6120|    958|                "Scanned value too narrow, width did not exceed what "
 6121|    958|                "was specified in the format string");
 6122|    958|        }
 6123|  2.27k|    }
 6124|  8.72k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6124:9): [True: 3.11k, False: 5.60k]
  ------------------
 6125|       |        // Ensured by take_width_view
 6126|  3.11k|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|  3.11k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6127|  3.11k|                   specs.precision);
 6128|  3.11k|    }
 6129|  8.72k|    return {};
 6130|  8.72k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  65.6k|    {
  304|  65.6k|        ranges::advance(x, n);
  305|  65.6k|        return x;
  306|  65.6k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  65.6k|    {
  268|  65.6k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  65.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   180k|    {
  151|   180k|        i += n;
  152|   180k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  61.3k|    {
  108|  61.3k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  61.3k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  61.3k|    {
   87|  61.3k|        return s - i;
   88|  61.3k|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.62k|    {
  304|  6.62k|        ranges::advance(x, n);
  305|  6.62k|        return x;
  306|  6.62k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.62k|    {
  268|  6.62k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.62k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.62k|    {
  151|  6.62k|        i += n;
  152|  6.62k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.61k|    {
  108|  2.61k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.61k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.61k|    {
   87|  2.61k|        return s - i;
   88|  2.61k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|   187k|    {
 3025|   187k|        return m_current;
 3026|   187k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|   635k|    {
 3025|   635k|        return m_current;
 3026|   635k|    }
_ZN3scn2v44impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5718|  3.20k|    {
 5719|  3.20k|        reader_error_handler eh{};
 5720|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5721|       |            detail::check_code_point_type_specs(specs, eh);
 5722|       |        }
 5723|  3.20k|        else {
 5724|  3.20k|            detail::check_char_type_specs(specs, eh);
 5725|  3.20k|        }
 5726|  3.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.49k, False: 706]
  |  |  ------------------
  ------------------
 5727|  2.49k|            return detail::unexpected_scan_error(
 5728|  2.49k|                scan_error::invalid_format_string, eh.m_msg);
 5729|  2.49k|        }
 5730|    706|        return {};
 5731|  3.20k|    }
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  21.5k|    {
  763|  21.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  21.5k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.00k|        : m_fptr([](storage fn,
  743|  3.00k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.00k|              cvref<T> obj = *get<T>(fn);
  745|  3.00k|              if constexpr (std::is_void_v<R>) {
  746|  3.00k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.00k|              }
  748|  3.00k|              else {
  749|  3.00k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.00k|              }
  751|  3.00k|          }),
  752|  3.00k|          m_storage(std::addressof(f))
  753|  3.00k|    {
  754|  3.00k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  7.52k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.52k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.52k|              else {
  749|  7.52k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.52k|              }
  751|  7.52k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  7.52k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.52k|        else if constexpr (std::is_object_v<T>) {
  688|  7.52k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.52k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.00k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.00k|        {
  662|  3.00k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.53M|    {
  763|  1.53M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.53M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  37.3k|        : m_fptr([](storage fn,
  743|  37.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.3k|              cvref<T> obj = *get<T>(fn);
  745|  37.3k|              if constexpr (std::is_void_v<R>) {
  746|  37.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.3k|              }
  748|  37.3k|              else {
  749|  37.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.3k|              }
  751|  37.3k|          }),
  752|  37.3k|          m_storage(std::addressof(f))
  753|  37.3k|    {
  754|  37.3k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   725k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   725k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   725k|              else {
  749|   725k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   725k|              }
  751|   725k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   725k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   725k|        else if constexpr (std::is_object_v<T>) {
  688|   725k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   725k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  37.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  37.3k|        {
  662|  37.3k|        }
_ZNK3scn2v44impl16char_reader_baseIcE19skip_ws_before_readEv:
 5713|  1.98k|    {
 5714|  1.98k|        return false;
 5715|  1.98k|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.14k|    return [code, msg](parse_error err) {
  869|  5.14k|        assert(err != parse_error::good);
  870|  5.14k|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  5.14k|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|     72|    {
 1879|     72|        auto stdloc = loc.get<std::locale>();
 1880|     72|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|     72|        grouping = numpunct.grouping();
 1882|     72|        thousands_sep =
 1883|     72|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 72]
  ------------------
 1884|     72|        decimal_point = numpunct.decimal_point();
 1885|     72|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|    102|{
 1816|    102|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 102, False: 0]
  ------------------
 1817|    102|        return std::use_facet<Facet>(stdloc);
 1818|    102|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|    102|}
_ZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2481|  43.7k|{
 2482|  43.7k|    size_t count{0};
 2483|  43.7k|    for_each_code_point(input, [&count](char32_t cp) {
 2484|  43.7k|        count += calculate_text_width_for_fmt_v10(cp);
 2485|  43.7k|    });
 2486|  43.7k|    return count;
 2487|  43.7k|}
_ZN3scn2v44impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  43.7k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  43.7k|    auto it = input.begin();
 1547|  98.1k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 54.4k, False: 43.7k]
  ------------------
 1548|  54.4k|        auto res = get_next_code_point(
 1549|  54.4k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  54.4k|        cb(res.value);
 1551|  54.4k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  54.4k|    }
 1553|  43.7k|}
_ZNK3scn2v44impl12function_refIFvDiES3_EclEDi:
  762|  66.1k|    {
  763|  66.1k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  66.1k|    }
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  43.7k|        : m_fptr([](storage fn,
  743|  43.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.7k|              cvref<T> obj = *get<T>(fn);
  745|  43.7k|              if constexpr (std::is_void_v<R>) {
  746|  43.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.7k|              }
  748|  43.7k|              else {
  749|  43.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.7k|              }
  751|  43.7k|          }),
  752|  43.7k|          m_storage(std::addressof(f))
  753|  43.7k|    {
  754|  43.7k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  54.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.4k|              cvref<T> obj = *get<T>(fn);
  745|  54.4k|              if constexpr (std::is_void_v<R>) {
  746|  54.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  54.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  54.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  54.4k|        else if constexpr (std::is_object_v<T>) {
  688|  54.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  54.4k|    }
_ZZN3scn2v44impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2483|  54.4k|    for_each_code_point(input, [&count](char32_t cp) {
 2484|  54.4k|        count += calculate_text_width_for_fmt_v10(cp);
 2485|  54.4k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  43.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  43.7k|        {
  662|  43.7k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  4.81k|    {
 1681|  4.81k|        return m_view;
 1682|  4.81k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  5.16k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2553|  32.8k|    {
 2554|  32.8k|        return m_multibyte_left;
 2555|  32.8k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E22is_current_double_wideEv:
 2558|  8.99k|    {
 2559|  8.99k|        assert(count() != 0 || multibyte_left() != 0);
 2560|  8.99k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2561|  8.99k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2785|   105k|    {
 2786|   105k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1039|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.97k, False: 103k]
  |  |  ------------------
  ------------------
 2787|  1.97k|            return 0;
 2788|  1.97k|        }
 2789|       |
 2790|   103k|        if (cplen == 1) {
  ------------------
  |  Branch (2790:13): [True: 67.4k, False: 36.4k]
  ------------------
 2791|  67.4k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  67.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  67.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2792|  67.4k|            auto cp = static_cast<char32_t>(*m_current);
 2793|  67.4k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2794|  67.4k|        }
 2795|       |
 2796|  36.4k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2797|  36.4k|                                           cplen);
 2798|  36.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  36.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 422, False: 36.0k]
  |  |  ------------------
  ------------------
 2799|    422|            return 0;
 2800|    422|        }
 2801|       |
 2802|  36.0k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2803|  36.0k|        return static_cast<difference_type>(
 2804|  36.0k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2805|  36.4k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  39.2k|{
 1956|  39.2k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  39.2k|    if constexpr (ranges::sized_range<Range>) {
 1959|  39.2k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  39.2k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 530, False: 38.7k]
  ------------------
 1961|    530|            return unexpected(eof_error::eof);
 1962|    530|        }
 1963|       |
 1964|  38.7k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  39.2k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2779|   105k|    {
 2780|   105k|        return static_cast<difference_type>(
 2781|   105k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2782|   105k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2564|   183k|    {
 2565|   183k|        return *m_current;
 2566|   183k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2573|   201k|    {
 2574|   201k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|   201k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   201k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2575|   201k|        _increment_current();
 2576|   201k|        return *this;
 2577|   201k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2808|   201k|    {
 2809|   201k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2809:13): [True: 96.9k, False: 105k]
  ------------------
 2810|  96.9k|            auto cplen = _get_cp_length_at_current();
 2811|  96.9k|            m_multibyte_left = cplen - 1;
 2812|  96.9k|            m_count -= _get_width_at_current_cp_start(cplen);
 2813|  96.9k|        }
 2814|   105k|        else {
 2815|   105k|            --m_multibyte_left;
 2816|   105k|        }
 2817|       |
 2818|   201k|        ++m_current;
 2819|   201k|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2669|   115k|    {
 2670|   115k|        return !(a == b);
 2671|   115k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2661|   128k|    {
 2662|   128k|        return a.m_current == b.m_current;
 2663|   128k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2568|  16.3k|    {
 2569|  16.3k|        return *m_current;
 2570|  16.3k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.72k|    {
  268|  1.72k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.72k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.72k|    {
  161|  1.72k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.72k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.72k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.72k|        else {
  169|  1.72k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.72k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.72k|        }
  173|  1.72k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1988|  40.2k|    {
 1989|  40.2k|        return !codepoint.empty();
 1990|  40.2k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1781|  2.49k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  2.49k|    else {
 1788|  2.49k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  2.49k|    }
 1790|  2.49k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|  2.49k|    {
 1636|  2.49k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  2.49k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1719|  2.49k|    {
 1720|  2.49k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|  2.49k|        else {
 1753|  2.49k|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|  2.49k|            if constexpr (ranges::common_range<Range>) {
 1758|  2.49k|                std::copy(ranges::begin(range), ranges::end(range),
 1759|  2.49k|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|  2.49k|            m_view = string_view_type{str};
 1768|  2.49k|        }
 1769|  2.49k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2513|  29.6k|        : m_current(x), m_end(s), m_count(n)
 2514|  29.6k|    {
 2515|  29.6k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2545|   200k|    {
 2546|   200k|        return m_current;
 2547|   200k|    }
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2974|  13.1k|    {
 2975|  13.1k|        return take_width_view{r, n};
 2976|  13.1k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2942|  13.1k|        : m_base(base), m_count(count)
 2943|  13.1k|    {
 2944|  13.1k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2854|  13.1k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5758|    412|    {
 5759|    412|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5759:13): [True: 376, False: 36]
  ------------------
 5760|    412|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5760:13): [True: 0, False: 36]
  ------------------
 5761|    376|            return read_default(range, value, loc);
 5762|    376|        }
 5763|       |
 5764|     36|        reader_impl_for_int<CharT> reader{};
 5765|     36|        signed char tmp_value{};
 5766|     36|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5767|     36|        value = static_cast<signed char>(value);
 5768|     36|        return ret;
 5769|    412|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5740|    376|    {
 5741|    376|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    376|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5742|    376|        if constexpr (std::is_same_v<CharT, char>) {
 5743|    376|            return code_unit_reader<char>{}.read(range, value);
 5744|       |        }
 5745|       |        else {
 5746|       |            SCN_UNUSED(range);
 5747|       |            SCN_EXPECT(false);
 5748|       |            SCN_UNREACHABLE;
 5749|       |        }
 5750|    376|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5658|    376|    {
 5659|    376|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3958|    376|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    376|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    376|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    376|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 376]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    376|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5660|    376|        ch = *range.begin();
 5661|    376|        return it;
 5662|    376|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  2.74k|{
 1945|  2.74k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  2.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.74k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  2.74k|    return ranges::next(range.begin());
 1950|  2.74k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  950|  2.74k|{
  951|  2.74k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.74k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  2.74k|    return eof_error::good;
  955|  2.74k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  944|  2.74k|{
  945|  2.74k|    return is_range_eof(r.begin(), r.end());
  946|  2.74k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  43.0k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  43.0k|    {
  938|  43.0k|        return begin == end;
  939|  43.0k|    }
  940|  43.0k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2910|   191k|        {
 2911|   191k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2911:21): [True: 5.94k, False: 185k]
  |  Branch (2911:39): [True: 1.18k, False: 4.75k]
  ------------------
 2912|   191k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2912:20): [True: 1.65k, False: 188k]
  ------------------
 2913|   191k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2913:21): [True: 26.9k, False: 161k]
  |  Branch (2913:39): [True: 8.99k, False: 17.9k]
  ------------------
 2914|   188k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2914:21): [True: 130, False: 8.86k]
  ------------------
 2915|   191k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2958|  91.5k|    {
 2959|  91.5k|        return sentinel<true>{m_base.get().end()};
 2960|  91.5k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2857|   150k|    {
 2858|   150k|        return view;
 2859|   150k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2891|  91.5k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1108|  91.5k|    static_cast<    \
  |  | 1109|  91.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.78k|    {
  296|  2.78k|        ++x;
  297|  2.78k|        return x;
  298|  2.78k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2952|  29.6k|    {
 2953|  29.6k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2954|  29.6k|                                      m_count};
 2955|  29.6k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3629|     36|    {
 3630|     36|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|     36|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|     36|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 36]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|      0|            else {
 3641|      0|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 0]
  ------------------
 3642|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|      0|            }
 3648|      0|        }
 3649|       |
 3650|     36|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 36]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|     36|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|     36|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3656|     36|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 36, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     36|    }                                                  \
  |  |  |  | 3957|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|      0|                    parse_integer_digits_without_thsep(
 3658|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|      0|                        prefix_result.parsed_base));
 3660|       |
 3661|      0|            auto buf = make_contiguous_buffer(
 3662|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|      0|                                        prefix_result.parsed_base));
 3666|       |
 3667|      0|            return ranges::next(
 3668|      0|                prefix_result.iterator,
 3669|      0|                ranges::distance(buf.view().begin(), result_it));
 3670|      0|        }
 3671|       |
 3672|      0|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|      0|            localized_number_formatting_options<CharT>{loc};
 3677|      0|#endif
 3678|       |
 3679|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3408|  1.17k|{
 3409|  1.17k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  1.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  1.17k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  1.17k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  1.17k|        parse_integer_base_prefix(
 3414|  1.17k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  1.17k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 0, False: 1.17k]
  ------------------
 3417|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 0]
  |  Branch (3417:13): [True: 0, False: 0]
  ------------------
 3418|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 0, False: 0]
  ------------------
 3419|      0|            digits_begin_it = base_prefix_begin_it;
 3420|      0|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|      0|    }
 3425|  1.17k|    else {
 3426|  1.17k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 1.17k]
  |  Branch (3426:13): [True: 1.17k, False: 0]
  ------------------
 3427|  1.17k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 1.17k, False: 0]
  ------------------
 3428|  1.17k|            digits_begin_it = base_prefix_begin_it;
 3429|  1.17k|        }
 3430|  1.17k|    }
 3431|       |
 3432|  1.17k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 1.17k, False: 0]
  ------------------
 3433|  1.17k|        sign = sign_type::plus_sign;
 3434|  1.17k|    }
 3435|  1.17k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  1.17k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  1.17k|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3289|  1.57k|{
 3290|  1.57k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  1.57k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 1.57k, False: 0]
  ------------------
 3292|  1.57k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 1.57k, False: 0]
  ------------------
 3293|  1.57k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  1.57k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|  1.57k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2404|  1.57k|{
 2405|  1.57k|    auto it = read_code_unit(range);
 2406|  1.57k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.57k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|  3.15k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 3.15k, False: 1.57k]
  ------------------
 2411|  3.15k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 3.15k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  3.15k|    }
 2415|       |
 2416|  1.57k|    return unexpected(parse_error::error);
 2417|  1.57k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3375|  1.17k|{
 3376|  1.17k|    switch (base) {
 3377|     14|        case 2:
  ------------------
  |  Branch (3377:9): [True: 14, False: 1.16k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|     14|                    false};
 3381|       |
 3382|     14|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 14, False: 1.16k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|     14|            bool zero_parsed = false;
 3385|     14|            auto it = apply_opt(
 3386|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|     14|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|    372|        case 16:
  ------------------
  |  Branch (3390:9): [True: 372, False: 802]
  ------------------
 3391|       |            // allow 0x/0X
 3392|    372|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|    372|                    false};
 3394|       |
 3395|     26|        case 0:
  ------------------
  |  Branch (3395:9): [True: 26, False: 1.14k]
  ------------------
 3396|       |            // detect base
 3397|     26|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|    748|        default:
  ------------------
  |  Branch (3399:9): [True: 748, False: 426]
  ------------------
 3400|       |            // no base prefix allowed
 3401|    748|            return {range.begin(), base, false};
 3402|  1.17k|    }
 3403|  1.17k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2423|    400|{
 2424|    400|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 400, False: 0]
  ------------------
 2425|    400|        return range.begin();
 2426|    400|    }
 2427|      0|    return *result;
 2428|    400|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3326|     40|{
 3327|     40|    return read_matching_string_classic_nocase(range, "0b");
 3328|     40|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2363|  1.65k|{
 2364|  1.65k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.65k|    else {
 2377|  1.65k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.65k|            if (ch < 'A' || ch > 'Z') {
 2379|  1.65k|                return ch;
 2380|  1.65k|            }
 2381|  1.65k|            return static_cast<char_type>(ch +
 2382|  1.65k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.65k|        };
 2384|       |
 2385|  1.65k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 270, False: 1.38k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    270|    }                                                  \
  |  |  |  | 3957|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.38k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.38k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.38k|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.38k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.38k, False: 0]
  |  |  ------------------
  ------------------
 2390|  1.38k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.38k|                    return ascii_tolower(a) ==
 2392|  1.38k|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.38k|                }))) {
 2394|  1.38k|            return unexpected(parse_error::error);
 2395|  1.38k|        }
 2396|       |
 2397|      0|        return it;
 2398|  1.38k|    }
 2399|  1.65k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  7.64k|{
 1956|  7.64k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  7.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  7.64k|    else {
 1967|  7.64k|        auto it = range.begin();
 1968|  7.64k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 7.64k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  28.2k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 20.9k, False: 7.30k]
  ------------------
 1973|  20.9k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 340, False: 20.6k]
  ------------------
 1974|    340|                return unexpected(eof_error::eof);
 1975|    340|            }
 1976|  20.9k|        }
 1977|       |
 1978|  7.30k|        return it;
 1979|  7.64k|    }
 1980|  7.64k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  7.64k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  7.64k|    else {
 1116|  7.64k|        return 0;
 1117|  7.64k|    }
 1118|  7.64k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2377|  1.38k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.38k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 74, False: 1.31k]
  |  Branch (2378:29): [True: 1.31k, False: 0]
  ------------------
 2379|  1.38k|                return ch;
 2380|  1.38k|            }
 2381|      0|            return static_cast<char_type>(ch +
 2382|      0|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.38k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3340|     40|{
 3341|     40|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 40]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|     40|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 0, False: 40]
  ------------------
 3346|      0|        zero_parsed = true;
 3347|      0|        return *r;
 3348|      0|    }
 3349|       |
 3350|     40|    return unexpected(parse_error::error);
 3351|     40|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2278|     40|{
 2279|     40|    auto it = read_code_unit(range);
 2280|     40|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|     40|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 2285|     40|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|     40|        return unexpected(parse_error::error);
 2287|     40|    }
 2288|       |
 2289|      0|    return *it;
 2290|     40|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|     40|{
 1945|     40|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|     40|    return ranges::next(range.begin());
 1950|     40|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|     40|{
  951|     40|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 40]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|     40|    return eof_error::good;
  955|     40|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  40.3k|{
  945|  40.3k|    return is_range_eof(r.begin(), r.end());
  946|  40.3k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3333|    398|{
 3334|    398|    return read_matching_string_classic_nocase(range, "0x");
 3335|    398|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3356|     26|{
 3357|     26|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 26]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|     26|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 26]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|     26|    {
 3364|     26|        bool zero_parsed{false};
 3365|     26|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 0, False: 26]
  ------------------
 3366|      0|            return {*r, 8, zero_parsed};
 3367|      0|        }
 3368|     26|    }
 3369|     26|    return {range.begin(), 10, false};
 3370|     26|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3442|  1.15k|{
 3443|  1.15k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|       |    if constexpr (ranges::contiguous_range<Range>) {
 3446|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3447|       |            return detail::unexpected_scan_error(
 3448|       |                scan_error::invalid_scanned_value,
 3449|       |                "Failed to parse integer: No digits found");
 3450|       |        }
 3451|       |        return range.end();
 3452|       |    }
 3453|  1.15k|    else {
 3454|  1.15k|        return read_while1_code_unit(range,
 3455|  1.15k|                                     [&](char_type ch) noexcept {
 3456|  1.15k|                                         return char_to_int(ch) < base;
 3457|  1.15k|                                     })
 3458|  1.15k|            .transform_error(map_parse_error_to_scan_error(
 3459|  1.15k|                scan_error::invalid_scanned_value,
 3460|  1.15k|                "Failed to parse integer: No digits found"));
 3461|  1.15k|    }
 3462|  1.15k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2127|  1.55k|{
 2128|  1.55k|    auto it = read_while_code_unit(range, pred);
 2129|  1.55k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 1.55k, False: 0]
  ------------------
 2130|  1.55k|        return unexpected(parse_error::error);
 2131|  1.55k|    }
 2132|      0|    return it;
 2133|  1.55k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2107|  1.55k|{
 2108|  1.55k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  1.55k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|  1.55k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  1.55k|    else {
 2079|  1.55k|        auto first = range.begin();
 2080|  1.55k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 1.55k, False: 0]
  ------------------
 2081|  1.55k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 1.55k, False: 0]
  ------------------
 2082|  1.55k|                return first;
 2083|  1.55k|            }
 2084|  1.55k|        }
 2085|      0|        return first;
 2086|  1.55k|    }
 2087|  1.55k|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2923|  99.7k|        {
 2924|  99.7k|            return !(y == x);
 2925|  99.7k|        }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|  1.15k|        : m_fptr([](storage fn,
  743|  1.15k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15k|              cvref<T> obj = *get<T>(fn);
  745|  1.15k|              if constexpr (std::is_void_v<R>) {
  746|  1.15k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.15k|              }
  748|  1.15k|              else {
  749|  1.15k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15k|              }
  751|  1.15k|          }),
  752|  1.15k|          m_storage(std::addressof(f))
  753|  1.15k|    {
  754|  1.15k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.15k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15k|              else {
  749|  1.15k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15k|              }
  751|  1.15k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.15k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15k|        else if constexpr (std::is_object_v<T>) {
  688|  1.15k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15k|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3455|  1.15k|                                     [&](char_type ch) noexcept {
 3456|  1.15k|                                         return char_to_int(ch) < base;
 3457|  1.15k|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|  1.15k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.15k|        {
  662|  1.15k|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3472|     24|{
 3473|     24|    std::basic_string<CharT> output;
 3474|     24|    std::string thsep_indices;
 3475|     24|    auto it = range.begin();
 3476|     24|    bool digit_matched = false;
 3477|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 24, False: 0]
  ------------------
 3478|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 0, False: 24]
  ------------------
 3479|      0|            thsep_indices.push_back(
 3480|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|      0|        }
 3482|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 24, False: 0]
  ------------------
 3483|     24|            break;
 3484|     24|        }
 3485|      0|        else {
 3486|      0|            output.push_back(*it);
 3487|      0|            digit_matched = true;
 3488|      0|        }
 3489|     24|    }
 3490|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3491|     24|        return detail::unexpected_scan_error(
 3492|     24|            scan_error::invalid_scanned_value,
 3493|     24|            "Failed to parse integer: No digits found");
 3494|     24|    }
 3495|      0|    return std::tuple{it, output, thsep_indices};
 3496|     24|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2549|   391k|    {
 2550|   391k|        return m_count;
 2551|   391k|    }
_ZN3scn2v44impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5758|    288|    {
 5759|    288|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5759:13): [True: 266, False: 22]
  ------------------
 5760|    288|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5760:13): [True: 0, False: 22]
  ------------------
 5761|    266|            return read_default(range, value, loc);
 5762|    266|        }
 5763|       |
 5764|     22|        reader_impl_for_int<CharT> reader{};
 5765|     22|        signed char tmp_value{};
 5766|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5767|     22|        value = static_cast<signed char>(value);
 5768|     22|        return ret;
 5769|    288|    }
_ZN3scn2v44impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5740|    900|    {
 5741|    900|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    900|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5742|    900|        if constexpr (std::is_same_v<CharT, char>) {
 5743|    900|            return code_unit_reader<char>{}.read(range, value);
 5744|       |        }
 5745|       |        else {
 5746|       |            SCN_UNUSED(range);
 5747|       |            SCN_EXPECT(false);
 5748|       |            SCN_UNREACHABLE;
 5749|       |        }
 5750|    900|    }
_ZN3scn2v44impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5658|    900|    {
 5659|    900|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3958|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 900]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    900|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5660|    900|        ch = *range.begin();
 5661|    900|        return it;
 5662|    900|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  6.55k|{
 1945|  6.55k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  6.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.55k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  6.55k|    return ranges::next(range.begin());
 1950|  6.55k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  21.8k|{
  951|  21.8k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 21.8k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  21.8k|    return eof_error::good;
  955|  21.8k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   685k|{
  945|   685k|    return is_range_eof(r.begin(), r.end());
  946|   685k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   763k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   763k|    {
  938|   763k|        return begin == end;
  939|   763k|    }
  940|   763k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  70.9k|    {
  296|  70.9k|        ++x;
  297|  70.9k|        return x;
  298|  70.9k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|     22|    {
 3630|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|     22|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 22]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|      0|            else {
 3641|      0|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 0]
  ------------------
 3642|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|      0|            }
 3648|      0|        }
 3649|       |
 3650|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 22]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3656|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|     22|                    parse_integer_digits_without_thsep(
 3658|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|     22|                        prefix_result.parsed_base));
 3660|       |
 3661|     22|            auto buf = make_contiguous_buffer(
 3662|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3958|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|      0|                                        prefix_result.parsed_base));
 3666|       |
 3667|      0|            return ranges::next(
 3668|      0|                prefix_result.iterator,
 3669|      0|                ranges::distance(buf.view().begin(), result_it));
 3670|     22|        }
 3671|       |
 3672|      0|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|      0|            localized_number_formatting_options<CharT>{loc};
 3677|      0|#endif
 3678|       |
 3679|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3408|  2.79k|{
 3409|  2.79k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  2.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 2.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  2.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  2.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  2.79k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  2.79k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  2.79k|        parse_integer_base_prefix(
 3414|  2.79k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  2.79k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 0, False: 2.79k]
  ------------------
 3417|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 0]
  ------------------
 3418|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 0, False: 0]
  ------------------
 3419|      0|            digits_begin_it = base_prefix_begin_it;
 3420|      0|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|      0|    }
 3425|  2.79k|    else {
 3426|  2.79k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 2.79k]
  ------------------
 3427|  2.79k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 2.79k, False: 0]
  ------------------
 3428|  2.79k|            digits_begin_it = base_prefix_begin_it;
 3429|  2.79k|        }
 3430|  2.79k|    }
 3431|       |
 3432|  2.79k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 2.79k, False: 0]
  ------------------
 3433|  2.79k|        sign = sign_type::plus_sign;
 3434|  2.79k|    }
 3435|  2.79k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  2.79k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  2.79k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|  3.73k|{
 3290|  3.73k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  3.73k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 3.73k, False: 0]
  ------------------
 3292|  3.73k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 3.73k, False: 0]
  ------------------
 3293|  3.73k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  3.73k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|  3.73k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|  3.73k|{
 2405|  3.73k|    auto it = read_code_unit(range);
 2406|  3.73k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.73k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|  7.46k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 7.46k, False: 3.73k]
  ------------------
 2411|  7.46k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 7.46k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  7.46k|    }
 2415|       |
 2416|  3.73k|    return unexpected(parse_error::error);
 2417|  3.73k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|  2.79k|{
 3376|  2.79k|    switch (base) {
 3377|      6|        case 2:
  ------------------
  |  Branch (3377:9): [True: 6, False: 2.79k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|      6|                    false};
 3381|       |
 3382|     30|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 30, False: 2.76k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|     30|            bool zero_parsed = false;
 3385|     30|            auto it = apply_opt(
 3386|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|     30|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|    916|        case 16:
  ------------------
  |  Branch (3390:9): [True: 916, False: 1.88k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|    916|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|    916|                    false};
 3394|       |
 3395|     16|        case 0:
  ------------------
  |  Branch (3395:9): [True: 16, False: 2.78k]
  ------------------
 3396|       |            // detect base
 3397|     16|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  1.83k|        default:
  ------------------
  |  Branch (3399:9): [True: 1.83k, False: 968]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  1.83k|            return {range.begin(), base, false};
 3402|  2.79k|    }
 3403|  2.79k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2423|    952|{
 2424|    952|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 952, False: 0]
  ------------------
 2425|    952|        return range.begin();
 2426|    952|    }
 2427|      0|    return *result;
 2428|    952|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3326|     22|{
 3327|     22|    return read_matching_string_classic_nocase(range, "0b");
 3328|     22|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  3.78k|{
 2364|  3.78k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|  3.78k|                  std::is_same_v<char_type, char>) {
 2368|  3.78k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2368:13): [True: 8, False: 3.77k]
  ------------------
 2369|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|      8|        }
 2371|  3.77k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2371:13): [True: 3.77k, False: 0]
  ------------------
 2372|  3.77k|            return unexpected(parse_error::error);
 2373|  3.77k|        }
 2374|      0|        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|       |    else {
 2377|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|       |            if (ch < 'A' || ch > 'Z') {
 2379|       |                return ch;
 2380|       |            }
 2381|       |            return static_cast<char_type>(ch +
 2382|       |                                          static_cast<char_type>('a' - 'A'));
 2383|       |        };
 2384|       |
 2385|       |        SCN_TRY(it, read_exactly_n_code_units(
 2386|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|       |                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|       |        if (SCN_UNLIKELY(!std::equal(
 2390|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|       |                    return ascii_tolower(a) ==
 2392|       |                           static_cast<detail::char_t<Range>>(b);
 2393|       |                }))) {
 2394|       |            return unexpected(parse_error::error);
 2395|       |        }
 2396|       |
 2397|       |        return it;
 2398|       |    }
 2399|  3.78k|}
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3340|     46|{
 3341|     46|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 46]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|     46|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 0, False: 46]
  ------------------
 3346|      0|        zero_parsed = true;
 3347|      0|        return *r;
 3348|      0|    }
 3349|       |
 3350|     46|    return unexpected(parse_error::error);
 3351|     46|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|  1.92k|{
 2279|  1.92k|    auto it = read_code_unit(range);
 2280|  1.92k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|  1.92k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.92k, False: 0]
  |  |  ------------------
  ------------------
 2285|  1.92k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|  1.92k|        return unexpected(parse_error::error);
 2287|  1.92k|    }
 2288|       |
 2289|      0|    return *it;
 2290|  1.92k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3333|    932|{
 3334|    932|    return read_matching_string_classic_nocase(range, "0x");
 3335|    932|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3356|     16|{
 3357|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 16]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 16]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|     16|    {
 3364|     16|        bool zero_parsed{false};
 3365|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 0, False: 16]
  ------------------
 3366|      0|            return {*r, 8, zero_parsed};
 3367|      0|        }
 3368|     16|    }
 3369|     16|    return {range.begin(), 10, false};
 3370|     16|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|  2.77k|{
 3443|  2.77k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|  2.77k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|  2.77k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.77k]
  |  |  ------------------
  ------------------
 3447|      0|            return detail::unexpected_scan_error(
 3448|      0|                scan_error::invalid_scanned_value,
 3449|      0|                "Failed to parse integer: No digits found");
 3450|      0|        }
 3451|  2.77k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|  2.77k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3472|     28|{
 3473|     28|    std::basic_string<CharT> output;
 3474|     28|    std::string thsep_indices;
 3475|     28|    auto it = range.begin();
 3476|     28|    bool digit_matched = false;
 3477|     28|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 28, False: 0]
  ------------------
 3478|     28|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 0, False: 28]
  ------------------
 3479|      0|            thsep_indices.push_back(
 3480|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|      0|        }
 3482|     28|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 28, False: 0]
  ------------------
 3483|     28|            break;
 3484|     28|        }
 3485|      0|        else {
 3486|      0|            output.push_back(*it);
 3487|      0|            digit_matched = true;
 3488|      0|        }
 3489|     28|    }
 3490|     28|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3491|     28|        return detail::unexpected_scan_error(
 3492|     28|            scan_error::invalid_scanned_value,
 3493|     28|            "Failed to parse integer: No digits found");
 3494|     28|    }
 3495|      0|    return std::tuple{it, output, thsep_indices};
 3496|     28|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  13.7k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  13.7k|                  ranges::sized_range<Range>) {
 1785|  13.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  13.7k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  13.7k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  13.7k|    {
 1589|  13.7k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  70.6k|    {
 1602|  70.6k|        return sv;
 1603|  70.6k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 6058|  1.22k|{
 6059|  1.22k|    using char_type = detail::char_t<Range>;
 6060|  1.22k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6061|       |
 6062|  1.22k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6062:9): [True: 502, False: 720]
  ------------------
 6063|    502|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6064|    502|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6065|       |
 6066|    502|        if (max_width == 0) {
  ------------------
  |  Branch (6066:13): [True: 398, False: 104]
  ------------------
 6067|    398|            auto it = read_while_code_unit(range, pred);
 6068|       |
 6069|    398|            if (want_skipped_width) {
  ------------------
  |  Branch (6069:17): [True: 124, False: 274]
  ------------------
 6070|    124|                auto prefix_width =
 6071|    124|                    static_cast<std::ptrdiff_t>(
 6072|    124|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6073|    124|                    ranges::distance(range.begin(), it);
 6074|    124|                return result_type{it, prefix_width};
 6075|    124|            }
 6076|    274|            return result_type{it, 0};
 6077|    398|        }
 6078|       |
 6079|    104|        auto max_width_view = take_width(range, max_width);
 6080|    104|        auto w_it = read_while_code_unit(max_width_view, pred);
 6081|       |
 6082|    104|        if (want_skipped_width) {
  ------------------
  |  Branch (6082:13): [True: 104, False: 0]
  ------------------
 6083|    104|            return result_type{w_it.base(), max_width - w_it.count()};
 6084|    104|        }
 6085|      0|        return result_type{w_it.base(), 0};
 6086|    104|    }
 6087|       |
 6088|    720|    const auto fill_chars = fill.template get_code_units<char_type>();
 6089|    720|    if (max_width == 0) {
  ------------------
  |  Branch (6089:9): [True: 378, False: 342]
  ------------------
 6090|    378|        auto it = read_while_code_units(range, fill_chars);
 6091|       |
 6092|    378|        if (want_skipped_width) {
  ------------------
  |  Branch (6092:13): [True: 142, False: 236]
  ------------------
 6093|    142|            auto prefix_width =
 6094|    142|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6095|    142|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6096|    142|            return result_type{it, prefix_width};
 6097|    142|        }
 6098|    236|        return result_type{it, 0};
 6099|    378|    }
 6100|       |
 6101|    342|    auto max_width_view = take_width(range, max_width);
 6102|    342|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6103|       |
 6104|    342|    if (want_skipped_width) {
  ------------------
  |  Branch (6104:9): [True: 342, False: 0]
  ------------------
 6105|    342|        return result_type{w_it.base(), max_width - w_it.count()};
 6106|    342|    }
 6107|      0|    return result_type{w_it.base(), 0};
 6108|    342|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|    546|{
 2108|    546|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    546|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|    648|{
 2075|    648|    if constexpr (ranges::common_range<Range>) {
 2076|    648|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|    648|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    502|        : m_fptr([](storage fn,
  743|    502|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    502|              cvref<T> obj = *get<T>(fn);
  745|    502|              if constexpr (std::is_void_v<R>) {
  746|    502|                  obj(static_cast<decltype(args)>(args)...);
  747|    502|              }
  748|    502|              else {
  749|    502|                  return obj(static_cast<decltype(args)>(args)...);
  750|    502|              }
  751|    502|          }),
  752|    502|          m_storage(std::addressof(f))
  753|    502|    {
  754|    502|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|    920|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    920|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    920|              else {
  749|    920|                  return obj(static_cast<decltype(args)>(args)...);
  750|    920|              }
  751|    920|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    920|    {
  684|    920|        if constexpr (std::is_const_v<T>) {
  685|    920|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    920|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 6064|    920|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    502|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    502|        {
  667|    502|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2107|    320|{
 2108|    320|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    320|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    500|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    500|    else {
 2079|    500|        auto first = range.begin();
 2080|  8.04k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 7.82k, False: 220]
  ------------------
 2081|  7.82k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 280, False: 7.54k]
  ------------------
 2082|    280|                return first;
 2083|    280|            }
 2084|  7.82k|        }
 2085|    220|        return first;
 2086|    500|    }
 2087|    500|}
_ZN3scn2v44impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2168|    378|{
 2169|    378|    static_assert(ranges::common_range<CodeUnits>);
 2170|       |
 2171|    378|    auto it = range.begin();
 2172|    664|    while (it != range.end()) {
  ------------------
  |  Branch (2172:12): [True: 664, False: 0]
  ------------------
 2173|    664|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2174|    664|                                           needle.size());
 2175|    664|        if (!r) {
  ------------------
  |  Branch (2175:13): [True: 6, False: 658]
  ------------------
 2176|      6|            return it;
 2177|      6|        }
 2178|    658|        static_assert(
 2179|    658|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2180|    658|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2180:13): [True: 372, False: 286]
  ------------------
 2181|    372|            return it;
 2182|    372|        }
 2183|    286|        it = *r;
 2184|    286|    }
 2185|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|      0|    return it;
 2187|      0|}
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2168|    342|{
 2169|    342|    static_assert(ranges::common_range<CodeUnits>);
 2170|       |
 2171|    342|    auto it = range.begin();
 2172|    692|    while (it != range.end()) {
  ------------------
  |  Branch (2172:12): [True: 640, False: 52]
  ------------------
 2173|    640|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2174|    640|                                           needle.size());
 2175|    640|        if (!r) {
  ------------------
  |  Branch (2175:13): [True: 70, False: 570]
  ------------------
 2176|     70|            return it;
 2177|     70|        }
 2178|    570|        static_assert(
 2179|    570|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2180|    570|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2180:13): [True: 220, False: 350]
  ------------------
 2181|    220|            return it;
 2182|    220|        }
 2183|    350|        it = *r;
 2184|    350|    }
 2185|     52|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1105|     52|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|     52|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|     52|    return it;
 2187|     52|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3097|    640|{
 3098|    640|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 0, False: 640]
  ------------------
 3099|      0|        auto it = read_while_classic_space(range);
 3100|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3102|      0|            return unexpected(e);
 3103|      0|        }
 3104|       |
 3105|      0|        return it;
 3106|      0|    }
 3107|       |
 3108|    640|    return read_while_classic_space(range);
 3109|    640|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2248|    640|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|    640|    else {
 2258|    640|        auto it = range.begin();
 2259|       |
 2260|    640|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|    640|            auto seg = get_contiguous_beginning(range);
 2262|    640|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|    640|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 0, False: 640]
  ------------------
 2264|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|      0|            }
 2266|    640|            ranges::advance(it, seg.size());
 2267|    640|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|    640|            return detail::is_cp_space(cp);
 2271|    640|        });
 2272|    640|    }
 2273|    640|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1039|  1.72k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  1.72k|    else {
 1059|  1.72k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  1.72k|    }
 1061|  1.72k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2213|    910|{
 2214|    910|    return read_until_code_point(range, std::not_fn(pred));
 2215|    910|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2192|  1.15k|{
 2193|  1.15k|    auto it = range.begin();
 2194|  20.9k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 20.4k, False: 470]
  ------------------
 2195|  20.4k|        const auto val =
 2196|  20.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  20.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  20.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 17.6k, False: 2.79k]
  |  |  ------------------
  ------------------
 2198|  17.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  17.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  17.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 680, False: 16.9k]
  ------------------
 2201|    680|                return it;
 2202|    680|            }
 2203|  17.6k|        }
 2204|  19.7k|        it = val.iterator;
 2205|  19.7k|    }
 2206|       |
 2207|    470|    return it;
 2208|  1.15k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  40.2k|{
 1998|  40.2k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  40.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  40.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  40.2k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  40.2k|    auto it = range.begin();
 2002|  40.2k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  40.2k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  40.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.55k, False: 33.7k]
  |  |  ------------------
  ------------------
 2005|  6.55k|        ++it;
 2006|  6.55k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  6.55k|        return {it, {}};
 2008|  6.55k|    }
 2009|       |
 2010|  33.7k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 29.8k, False: 3.92k]
  ------------------
 2011|  29.8k|        ++it;
 2012|  29.8k|        return {it, string_type(1, *range.begin())};
 2013|  29.8k|    }
 2014|       |
 2015|  3.92k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  3.92k|    return {it, string_type{range.begin(), it}};
 2017|  33.7k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1264|  6.55k|{
 1265|  6.55k|    auto it = input.begin();
 1266|  7.98k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 7.74k, False: 240]
  ------------------
 1267|  7.74k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 6.31k, False: 1.43k]
  ------------------
 1268|  6.31k|            break;
 1269|  6.31k|        }
 1270|  7.74k|    }
 1271|  6.55k|    return it;
 1272|  6.55k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  3.92k|    {
  283|  3.92k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  3.92k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  3.92k|    {
  227|  3.92k|        constexpr iter_difference_t<I> zero{0};
  228|  3.92k|        iter_difference_t<I> counter{0};
  229|       |
  230|  3.92k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 3.92k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  3.92k|        else {
  237|  12.9k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 9.15k, False: 3.80k]
  |  Branch (237:34): [True: 9.03k, False: 120]
  ------------------
  238|  9.03k|                ++i;
  239|  9.03k|                ++counter;
  240|  9.03k|            }
  241|  3.92k|        }
  242|       |
  243|  3.92k|        return counter;
  244|  3.92k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    640|        : m_fptr([](storage fn,
  743|    640|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    640|              cvref<T> obj = *get<T>(fn);
  745|    640|              if constexpr (std::is_void_v<R>) {
  746|    640|                  obj(static_cast<decltype(args)>(args)...);
  747|    640|              }
  748|    640|              else {
  749|    640|                  return obj(static_cast<decltype(args)>(args)...);
  750|    640|              }
  751|    640|          }),
  752|    640|          m_storage(std::addressof(f))
  753|    640|    {
  754|    640|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  2.30k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.30k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.30k|              else {
  749|  2.30k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.30k|              }
  751|  2.30k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  2.30k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.30k|        else if constexpr (std::is_object_v<T>) {
  688|  2.30k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.30k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2269|  2.30k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  2.30k|            return detail::is_cp_space(cp);
 2271|  2.30k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    640|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    640|        {
  662|    640|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  6.98k|{
 3098|  6.98k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 6.81k, False: 166]
  ------------------
 3099|  6.81k|        auto it = read_while_classic_space(range);
 3100|  6.81k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  6.81k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  6.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.81k]
  |  |  ------------------
  ------------------
 3102|      0|            return unexpected(e);
 3103|      0|        }
 3104|       |
 3105|  6.81k|        return it;
 3106|  6.81k|    }
 3107|       |
 3108|    166|    return read_while_classic_space(range);
 3109|  6.98k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  15.4k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|  15.4k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|  15.4k|        auto buf = make_contiguous_buffer(range);
 2253|  15.4k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|  15.4k|        return ranges::next(range.begin(),
 2255|  15.4k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|  15.4k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  18.3k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  18.3k|                  ranges::sized_range<Range>) {
 1785|  18.3k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  18.3k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  18.3k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  18.3k|    {
 1589|  18.3k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  6.49k|    {
 3188|  6.49k|        reader_error_handler eh{};
 3189|  6.49k|        get_derived().check_specs_impl(specs, eh);
 3190|  6.49k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  6.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.03k, False: 1.46k]
  |  |  ------------------
  ------------------
 3191|  5.03k|            return detail::unexpected_scan_error(
 3192|  5.03k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  5.03k|        }
 3194|  1.46k|        return {};
 3195|  6.49k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3199|  6.49k|    {
 3200|  6.49k|        return static_cast<Derived&>(*this);
 3201|  6.49k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3575|  6.49k|    {
 3576|  6.49k|        detail::check_int_type_specs(specs, eh);
 3577|  6.49k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3182|  2.73k|    {
 3183|  2.73k|        return true;
 3184|  2.73k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3629|    392|    {
 3630|    392|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    392|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    392|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 392]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|      0|            else {
 3641|      0|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 0]
  ------------------
 3642|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|      0|            }
 3648|      0|        }
 3649|       |
 3650|    392|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 392]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|    392|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    392|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 380, False: 12]
  |  |  ------------------
  ------------------
 3656|    380|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 380, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    380|    }                                                  \
  |  |  |  | 3957|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|      0|                    parse_integer_digits_without_thsep(
 3658|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|      0|                        prefix_result.parsed_base));
 3660|       |
 3661|      0|            auto buf = make_contiguous_buffer(
 3662|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|      0|                                        prefix_result.parsed_base));
 3666|       |
 3667|      0|            return ranges::next(
 3668|      0|                prefix_result.iterator,
 3669|      0|                ranges::distance(buf.view().begin(), result_it));
 3670|      0|        }
 3671|       |
 3672|     12|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|     12|            localized_number_formatting_options<CharT>{loc};
 3677|     12|#endif
 3678|       |
 3679|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|    302|    {
 3630|    302|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    302|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    302|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 302]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|      0|            else {
 3641|      0|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 0]
  ------------------
 3642|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|      0|            }
 3648|      0|        }
 3649|       |
 3650|    302|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 302]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|    302|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    302|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 288, False: 14]
  |  |  ------------------
  ------------------
 3656|    288|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    288|                    parse_integer_digits_without_thsep(
 3658|    288|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    288|                        prefix_result.parsed_base));
 3660|       |
 3661|    288|            auto buf = make_contiguous_buffer(
 3662|    288|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    288|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 288, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    288|    }                                                  \
  |  |  |  | 3957|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|      0|                                        prefix_result.parsed_base));
 3666|       |
 3667|      0|            return ranges::next(
 3668|      0|                prefix_result.iterator,
 3669|      0|                ranges::distance(buf.view().begin(), result_it));
 3670|    288|        }
 3671|       |
 3672|     14|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|     14|            localized_number_formatting_options<CharT>{loc};
 3677|     14|#endif
 3678|       |
 3679|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     14|    }                                                  \
  |  |  |  | 3957|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3629|    392|    {
 3630|    392|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    392|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    392|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 392]
  ------------------
 3634|      0|            if constexpr (!std::is_signed_v<T>) {
 3635|      0|                return detail::unexpected_scan_error(
 3636|      0|                    scan_error::invalid_scanned_value,
 3637|      0|                    "Unexpected '-' sign when parsing an "
 3638|      0|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|      0|        }
 3649|       |
 3650|    392|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 392]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|    392|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    392|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 380, False: 12]
  |  |  ------------------
  ------------------
 3656|    380|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 380, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    380|    }                                                  \
  |  |  |  | 3957|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|      0|                    parse_integer_digits_without_thsep(
 3658|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|      0|                        prefix_result.parsed_base));
 3660|       |
 3661|      0|            auto buf = make_contiguous_buffer(
 3662|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|      0|                                        prefix_result.parsed_base));
 3666|       |
 3667|      0|            return ranges::next(
 3668|      0|                prefix_result.iterator,
 3669|      0|                ranges::distance(buf.view().begin(), result_it));
 3670|      0|        }
 3671|       |
 3672|     12|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|     12|            localized_number_formatting_options<CharT>{loc};
 3677|     12|#endif
 3678|       |
 3679|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     12|    }                                                  \
  |  |  |  | 3957|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|    302|    {
 3630|    302|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    302|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    302|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 302]
  ------------------
 3634|      0|            if constexpr (!std::is_signed_v<T>) {
 3635|      0|                return detail::unexpected_scan_error(
 3636|      0|                    scan_error::invalid_scanned_value,
 3637|      0|                    "Unexpected '-' sign when parsing an "
 3638|      0|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|      0|        }
 3649|       |
 3650|    302|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 302]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|    302|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    302|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 288, False: 14]
  |  |  ------------------
  ------------------
 3656|    288|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    288|                    parse_integer_digits_without_thsep(
 3658|    288|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    288|                        prefix_result.parsed_base));
 3660|       |
 3661|    288|            auto buf = make_contiguous_buffer(
 3662|    288|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    288|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 288, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    288|    }                                                  \
  |  |  |  | 3957|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|      0|                                        prefix_result.parsed_base));
 3666|       |
 3667|      0|            return ranges::next(
 3668|      0|                prefix_result.iterator,
 3669|      0|                ranges::distance(buf.view().begin(), result_it));
 3670|    288|        }
 3671|       |
 3672|     14|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|     14|            localized_number_formatting_options<CharT>{loc};
 3677|     14|#endif
 3678|       |
 3679|     14|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     14|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     14|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     14|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 14, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     14|    }                                                  \
  |  |  |  | 3957|     14|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3629|    354|    {
 3630|    354|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 354]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    354|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    354|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    354|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 354]
  ------------------
 3634|      0|            if constexpr (!std::is_signed_v<T>) {
 3635|      0|                return detail::unexpected_scan_error(
 3636|      0|                    scan_error::invalid_scanned_value,
 3637|      0|                    "Unexpected '-' sign when parsing an "
 3638|      0|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|      0|        }
 3649|       |
 3650|    354|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 354]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|    354|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    354|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 354, False: 0]
  |  |  ------------------
  ------------------
 3656|    354|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 354, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    354|    }                                                  \
  |  |  |  | 3957|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|      0|                    parse_integer_digits_without_thsep(
 3658|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|      0|                        prefix_result.parsed_base));
 3660|       |
 3661|      0|            auto buf = make_contiguous_buffer(
 3662|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|      0|                                        prefix_result.parsed_base));
 3666|       |
 3667|      0|            return ranges::next(
 3668|      0|                prefix_result.iterator,
 3669|      0|                ranges::distance(buf.view().begin(), result_it));
 3670|      0|        }
 3671|       |
 3672|      0|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|      0|            localized_number_formatting_options<CharT>{loc};
 3677|      0|#endif
 3678|       |
 3679|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|    904|    {
 3630|    904|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 904]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    904|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    904|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 904]
  ------------------
 3634|      0|            if constexpr (!std::is_signed_v<T>) {
 3635|      0|                return detail::unexpected_scan_error(
 3636|      0|                    scan_error::invalid_scanned_value,
 3637|      0|                    "Unexpected '-' sign when parsing an "
 3638|      0|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|      0|        }
 3649|       |
 3650|    904|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 904]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|    904|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    904|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 904, False: 0]
  |  |  ------------------
  ------------------
 3656|    904|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 904]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    904|                    parse_integer_digits_without_thsep(
 3658|    904|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    904|                        prefix_result.parsed_base));
 3660|       |
 3661|    904|            auto buf = make_contiguous_buffer(
 3662|    904|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    904|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 904, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    904|    }                                                  \
  |  |  |  | 3957|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|      0|                                        prefix_result.parsed_base));
 3666|       |
 3667|      0|            return ranges::next(
 3668|      0|                prefix_result.iterator,
 3669|      0|                ranges::distance(buf.view().begin(), result_it));
 3670|    904|        }
 3671|       |
 3672|      0|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|      0|            localized_number_formatting_options<CharT>{loc};
 3677|      0|#endif
 3678|       |
 3679|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  3.24k|    {
 3188|  3.24k|        reader_error_handler eh{};
 3189|  3.24k|        get_derived().check_specs_impl(specs, eh);
 3190|  3.24k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.50k, False: 742]
  |  |  ------------------
  ------------------
 3191|  2.50k|            return detail::unexpected_scan_error(
 3192|  2.50k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  2.50k|        }
 3194|    742|        return {};
 3195|  3.24k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3199|  3.24k|    {
 3200|  3.24k|        return static_cast<Derived&>(*this);
 3201|  3.24k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4238|  3.24k|    {
 4239|  3.24k|        detail::check_float_type_specs(specs, eh);
 4240|  3.24k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3182|  1.37k|    {
 3183|  1.37k|        return true;
 3184|  1.37k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4310|    704|    {
 4311|    704|        unsigned options{};
 4312|    704|        if (specs.localized) {
  ------------------
  |  Branch (4312:13): [True: 20, False: 684]
  ------------------
 4313|     20|            options |= float_reader_base::allow_thsep;
 4314|     20|        }
 4315|       |
 4316|    704|        SCN_GCC_COMPAT_PUSH
 4317|    704|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4318|       |
 4319|    704|        switch (specs.type) {
 4320|     28|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4320:13): [True: 28, False: 676]
  ------------------
 4321|     28|                return options | float_reader_base::allow_fixed;
 4322|       |
 4323|     12|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4323:13): [True: 12, False: 692]
  ------------------
 4324|     12|                return options | float_reader_base::allow_scientific;
 4325|       |
 4326|     16|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4326:13): [True: 16, False: 688]
  ------------------
 4327|     16|                return options | float_reader_base::allow_hex;
 4328|       |
 4329|     12|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4329:13): [True: 12, False: 692]
  ------------------
 4330|     12|                return options | float_reader_base::allow_scientific |
 4331|     12|                       float_reader_base::allow_fixed;
 4332|       |
 4333|    636|            case detail::presentation_type::none:
  ------------------
  |  Branch (4333:13): [True: 636, False: 68]
  ------------------
 4334|    636|                return options | float_reader_base::allow_scientific |
 4335|    636|                       float_reader_base::allow_fixed |
 4336|    636|                       float_reader_base::allow_hex;
 4337|       |
 4338|      0|            default:
  ------------------
  |  Branch (4338:13): [True: 0, False: 704]
  ------------------
 4339|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4340|    704|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4341|    704|        }
 4342|       |
 4343|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4344|    704|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3741|    704|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.33k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.67k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4129|    914|    {
 4130|    914|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4130:13): [True: 914, False: 0]
  ------------------
 4131|    914|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4131:13): [True: 914, False: 0]
  ------------------
 4132|    914|            return;
 4133|    914|        }
 4134|       |
 4135|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4136|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4137:27): [True: 0, False: 0]
  ------------------
 4138|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4138:21): [True: 0, False: 0]
  ------------------
 4139|      0|                    ch = CharT{'.'};
 4140|      0|                }
 4141|      0|            }
 4142|      0|        }
 4143|       |
 4144|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4144:13): [True: 0, False: 0]
  ------------------
 4145|      0|            return;
 4146|      0|        }
 4147|       |
 4148|      0|        auto first =
 4149|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4150|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4150:13): [True: 0, False: 0]
  ------------------
 4151|      0|            return;
 4152|      0|        }
 4153|       |
 4154|      0|        m_thsep_indices.push_back(
 4155|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4156|       |
 4157|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4157:31): [True: 0, False: 0]
  ------------------
 4158|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4158:17): [True: 0, False: 0]
  ------------------
 4159|      0|                *first++ = std::move(*it);
 4160|      0|            }
 4161|      0|            else {
 4162|      0|                m_thsep_indices.push_back(
 4163|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4164|      0|            }
 4165|      0|        }
 4166|       |
 4167|      0|        str.erase(first, str.end());
 4168|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  1.00k|    {
 1686|  1.00k|        return m_storage.has_value();
 1687|  1.00k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|    500|    {
 1691|    500|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|    500|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    500|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    500|        return *m_storage;
 1693|    500|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    402|    {
  763|    402|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    402|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3760|     12|    {
 3761|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|     12|        return read_source_impl(range);
 3767|     12|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3786|    402|    {
 3787|    402|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|    402|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|    402|        auto it = sign_result.first;
 3790|    402|        m_sign = sign_result.second;
 3791|       |
 3792|    402|        auto digits_begin = it;
 3793|    402|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|       |                      ranges::sized_range<Range>) {
 3796|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3797|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|       |                SCN_TRY_ASSIGN(
 3799|       |                    it,
 3800|       |                    do_read_source_impl(
 3801|       |                        r,
 3802|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|       |            }
 3805|       |            else {
 3806|       |                auto cb = [&](const auto& rr)
 3807|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|       |                    auto res = read_all(rr);
 3809|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|       |                        return detail::unexpected_scan_error(
 3811|       |                            scan_error::invalid_scanned_value,
 3812|       |                            "Invalid float value");
 3813|       |                    }
 3814|       |                    return res;
 3815|       |                };
 3816|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3817|       |            }
 3818|       |        }
 3819|    402|        else {
 3820|    402|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 402, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    402|    }                                                  \
  |  | 3957|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3821|      0|                it,
 3822|      0|                do_read_source_impl(
 3823|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|      0|        }
 3826|       |
 3827|    402|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|    402|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    402|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 0, False: 0]
  |  Branch (3829:48): [True: 0, False: 0]
  ------------------
 3830|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 0, False: 0]
  ------------------
 3831|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 0, False: 0]
  ------------------
 3832|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|      0|        }
 3834|       |
 3835|      0|        handle_separators();
 3836|       |
 3837|      0|        return it;
 3838|    402|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4072|    402|    {
 4073|    402|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|    402|        const bool allowed_nonhex =
 4075|    402|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|    402|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|    402|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 402, False: 0]
  |  Branch (4078:45): [True: 0, False: 402]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|    402|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 0, False: 402]
  ------------------
 4084|      0|            return *r;
 4085|      0|        }
 4086|       |
 4087|    402|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 402, False: 0]
  |  Branch (4087:45): [True: 0, False: 402]
  ------------------
 4088|      0|            return unexpected(r.error());
 4089|      0|        }
 4090|    402|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 0, False: 402]
  ------------------
 4091|      0|            return *r;
 4092|      0|        }
 4093|       |
 4094|    402|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 372, False: 30]
  |  Branch (4094:28): [True: 8, False: 364]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|      8|            auto it = range.begin();
 4098|       |
 4099|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 0, False: 8]
  ------------------
 4100|      0|                m_kind = float_kind::hex_with_prefix;
 4101|      0|                it = *r;
 4102|      0|            }
 4103|      8|            else {
 4104|      8|                m_kind = float_kind::hex_without_prefix;
 4105|      8|            }
 4106|       |
 4107|      8|            return read_hex(ranges::subrange{it, range.end()});
 4108|      8|        }
 4109|    394|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 30, False: 364]
  |  Branch (4109:29): [True: 30, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|     30|            m_kind = float_kind::generic;
 4113|     30|            return read_regular_float(range);
 4114|     30|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|    364|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 364]
  |  |  ------------------
  ------------------
 4120|      0|            m_kind = float_kind::hex_with_prefix;
 4121|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4122|      0|        }
 4123|       |
 4124|    364|        m_kind = float_kind::generic;
 4125|    364|        return read_regular(range);
 4126|    364|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3880|    402|    {
 3881|    402|        auto it = range.begin();
 3882|    402|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 402, False: 0]
  ------------------
 3883|    402|            return unexpected(r.error());
 3884|    402|        }
 3885|      0|        else {
 3886|      0|            it = *r;
 3887|      0|        }
 3888|       |
 3889|      0|        if (auto r = read_matching_string_classic_nocase(
 3890|      0|                ranges::subrange{it, range.end()}, "inity");
 3891|      0|            !r) {
  ------------------
  |  Branch (3891:13): [True: 0, False: 0]
  ------------------
 3892|      0|            m_kind = float_kind::inf_short;
 3893|      0|            return it;
 3894|      0|        }
 3895|      0|        else {
 3896|      0|            m_kind = float_kind::inf_long;
 3897|      0|            return *r;
 3898|      0|        }
 3899|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|    402|    {
 3904|    402|        auto it = range.begin();
 3905|    402|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 402, False: 0]
  ------------------
 3906|    402|            return r.transform_error(map_parse_error_to_scan_error(
 3907|    402|                scan_error::invalid_scanned_value,
 3908|    402|                "Invalid floating-point NaN value"));
 3909|    402|        }
 3910|      0|        else {
 3911|      0|            it = *r;
 3912|      0|        }
 3913|       |
 3914|      0|        if (auto r =
 3915|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|      0|            !r) {
  ------------------
  |  Branch (3916:13): [True: 0, False: 0]
  ------------------
 3917|      0|            m_kind = float_kind::nan_simple;
 3918|      0|            return it;
 3919|      0|        }
 3920|      0|        else {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        auto payload_beg_it = it;
 3925|      0|        it = read_while_code_unit(
 3926|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|      0|                return is_ascii_char(ch) &&
 3928|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|      0|            });
 3931|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|      0|        m_kind = float_kind::nan_with_payload;
 3934|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 0, False: 0]
  ------------------
 3935|      0|                                             ')')) {
 3936|      0|            return *r;
 3937|      0|        }
 3938|      0|        return detail::unexpected_scan_error(
 3939|      0|            scan_error::invalid_scanned_value,
 3940|      0|            "Invalid floating-point NaN payload");
 3941|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3873|    372|    {
 3874|    372|        return read_matching_string_classic_nocase(range, "0x");
 3875|    372|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3974|      8|    {
 3975|      8|        auto it = range.begin();
 3976|       |
 3977|      8|        std::ptrdiff_t digits_count = 0;
 3978|      8|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3979|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3980|      8|            return r.transform_error(map_parse_error_to_scan_error(
 3981|      8|                scan_error::invalid_scanned_value,
 3982|      8|                "Invalid hexadecimal floating-point value"));
 3983|      8|        }
 3984|      0|        else {
 3985|      0|            digits_count += ranges::distance(it, *r);
 3986|      0|            it = *r;
 3987|      0|        }
 3988|       |
 3989|      0|        m_integral_part_length = digits_count;
 3990|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3990:18): [True: 0, False: 0]
  ------------------
 3991|      0|                                             m_locale_options.decimal_point)) {
 3992|      0|            it = *r;
 3993|      0|        }
 3994|       |
 3995|      0|        if (auto r =
  ------------------
  |  Branch (3995:18): [True: 0, False: 0]
  ------------------
 3996|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3997|      0|            digits_count += ranges::distance(it, *r);
 3998|      0|            it = *r;
 3999|      0|        }
 4000|       |
 4001|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4002|      0|            return detail::unexpected_scan_error(
 4003|      0|                scan_error::invalid_scanned_value,
 4004|      0|                "No significand digits in hexfloat");
 4005|      0|        }
 4006|       |
 4007|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4008|       |
 4009|      0|        return it;
 4010|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3858|      8|    {
 3859|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 8]
  |  |  |  Branch (1039:45): [True: 0, False: 8]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3860|      8|                         thsep_allowed)) {
 3861|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3862|      0|                return char_to_int(ch) < 16 ||
 3863|      0|                       ch == m_locale_options.thousands_sep;
 3864|      0|            });
 3865|      0|        }
 3866|       |
 3867|      8|        return read_while1_code_unit(
 3868|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3869|      8|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3868|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 4015|    394|    {
 4016|    394|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|    394|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 380, False: 14]
  |  Branch (4017:50): [True: 8, False: 372]
  ------------------
 4018|       |
 4019|    394|        auto it = ranges::begin(range);
 4020|    394|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|    394|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|    394|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 394, False: 0]
  |  |  ------------------
  ------------------
 4024|    394|            return r.transform_error(
 4025|    394|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|    394|                                              "Invalid floating-point value"));
 4027|    394|        }
 4028|      0|        else {
 4029|      0|            digits_count += ranges::distance(it, *r);
 4030|      0|            it = *r;
 4031|      0|        }
 4032|       |
 4033|      0|        m_integral_part_length = digits_count;
 4034|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 0, False: 0]
  ------------------
 4035|      0|                                             m_locale_options.decimal_point)) {
 4036|      0|            it = *r;
 4037|      0|        }
 4038|       |
 4039|      0|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 0, False: 0]
  ------------------
 4040|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|      0|            digits_count += ranges::distance(it, *r);
 4042|      0|            it = *r;
 4043|      0|        }
 4044|       |
 4045|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|      0|        auto beg_exp_it = it;
 4052|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|      0|        }
 4055|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 0, False: 0]
  |  Branch (4055:29): [True: 0, False: 0]
  ------------------
 4056|      0|            return detail::unexpected_scan_error(
 4057|      0|                scan_error::invalid_scanned_value,
 4058|      0|                "No exponent given to scientific float");
 4059|      0|        }
 4060|       |
 4061|      0|        m_kind =
 4062|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 0, False: 0]
  ------------------
 4063|       |
 4064|      0|        return it;
 4065|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3843|    394|    {
 3844|    394|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 394]
  |  |  |  Branch (1039:45): [True: 0, False: 394]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|    394|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|    394|        return read_while1_code_unit(
 3853|    394|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|    394|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    394|        : m_fptr([](storage fn,
  743|    394|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    394|              cvref<T> obj = *get<T>(fn);
  745|    394|              if constexpr (std::is_void_v<R>) {
  746|    394|                  obj(static_cast<decltype(args)>(args)...);
  747|    394|              }
  748|    394|              else {
  749|    394|                  return obj(static_cast<decltype(args)>(args)...);
  750|    394|              }
  751|    394|          }),
  752|    394|          m_storage(std::addressof(f))
  753|    394|    {
  754|    394|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    394|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    394|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    394|              else {
  749|    394|                  return obj(static_cast<decltype(args)>(args)...);
  750|    394|              }
  751|    394|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    394|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    394|        else if constexpr (std::is_object_v<T>) {
  688|    394|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    394|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3853|    394|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    394|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    394|        {
  662|    394|        }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3746|    390|    {
 3747|    390|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 390]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|    390|        return read_source_impl(range);
 3753|    390|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    936|    {
  763|    936|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|    936|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    936|    }
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3760|      8|    {
 3761|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|      8|        return read_source_impl(range);
 3767|      8|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3786|    936|    {
 3787|    936|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|    936|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    936|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    936|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 936]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    936|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    936|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|    936|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|    936|        auto it = sign_result.first;
 3790|    936|        m_sign = sign_result.second;
 3791|       |
 3792|    936|        auto digits_begin = it;
 3793|    936|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|    936|                      ranges::sized_range<Range>) {
 3796|    936|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 936]
  |  |  |  Branch (1039:45): [True: 0, False: 936]
  |  |  |  Branch (1039:45): [True: 0, False: 936]
  |  |  ------------------
  ------------------
 3797|    936|                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3799|      0|                    it,
 3800|      0|                    do_read_source_impl(
 3801|      0|                        r,
 3802|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|      0|            }
 3805|    936|            else {
 3806|    936|                auto cb = [&](const auto& rr)
 3807|    936|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|    936|                    auto res = read_all(rr);
 3809|    936|                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|    936|                        return detail::unexpected_scan_error(
 3811|    936|                            scan_error::invalid_scanned_value,
 3812|    936|                            "Invalid float value");
 3813|    936|                    }
 3814|    936|                    return res;
 3815|    936|                };
 3816|    936|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|    936|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    936|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 22, False: 914]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     22|    }                                                  \
  |  | 3957|    936|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    936|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3817|    914|            }
 3818|       |        }
 3819|       |        else {
 3820|       |            SCN_TRY_ASSIGN(
 3821|       |                it,
 3822|       |                do_read_source_impl(
 3823|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|       |        }
 3826|       |
 3827|    936|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|    936|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|    914|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 914, False: 0]
  |  Branch (3829:48): [True: 914, False: 0]
  ------------------
 3830|    914|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 914, False: 0]
  ------------------
 3831|    914|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 914, False: 0]
  ------------------
 3832|    914|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|    914|        }
 3834|       |
 3835|    914|        handle_separators();
 3836|       |
 3837|    914|        return it;
 3838|    936|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3880|    936|    {
 3881|    936|        auto it = range.begin();
 3882|    936|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 936, False: 0]
  ------------------
 3883|    936|            return unexpected(r.error());
 3884|    936|        }
 3885|      0|        else {
 3886|      0|            it = *r;
 3887|      0|        }
 3888|       |
 3889|      0|        if (auto r = read_matching_string_classic_nocase(
 3890|      0|                ranges::subrange{it, range.end()}, "inity");
 3891|      0|            !r) {
  ------------------
  |  Branch (3891:13): [True: 0, False: 0]
  ------------------
 3892|      0|            m_kind = float_kind::inf_short;
 3893|      0|            return it;
 3894|      0|        }
 3895|      0|        else {
 3896|      0|            m_kind = float_kind::inf_long;
 3897|      0|            return *r;
 3898|      0|        }
 3899|      0|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3903|    936|    {
 3904|    936|        auto it = range.begin();
 3905|    936|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 936, False: 0]
  ------------------
 3906|    936|            return r.transform_error(map_parse_error_to_scan_error(
 3907|    936|                scan_error::invalid_scanned_value,
 3908|    936|                "Invalid floating-point NaN value"));
 3909|    936|        }
 3910|      0|        else {
 3911|      0|            it = *r;
 3912|      0|        }
 3913|       |
 3914|      0|        if (auto r =
 3915|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|      0|            !r) {
  ------------------
  |  Branch (3916:13): [True: 0, False: 0]
  ------------------
 3917|      0|            m_kind = float_kind::nan_simple;
 3918|      0|            return it;
 3919|      0|        }
 3920|      0|        else {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        auto payload_beg_it = it;
 3925|      0|        it = read_while_code_unit(
 3926|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|      0|                return is_ascii_char(ch) &&
 3928|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|      0|            });
 3931|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|      0|        m_kind = float_kind::nan_with_payload;
 3934|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 0, False: 0]
  ------------------
 3935|      0|                                             ')')) {
 3936|      0|            return *r;
 3937|      0|        }
 3938|      0|        return detail::unexpected_scan_error(
 3939|      0|            scan_error::invalid_scanned_value,
 3940|      0|            "Invalid floating-point NaN payload");
 3941|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3873|    914|    {
 3874|    914|        return read_matching_string_classic_nocase(range, "0x");
 3875|    914|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|     22|{
 2128|     22|    auto it = read_while_code_unit(range, pred);
 2129|     22|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 22, False: 0]
  ------------------
 2130|     22|        return unexpected(parse_error::error);
 2131|     22|    }
 2132|      0|    return it;
 2133|     22|}
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4015|     22|    {
 4016|     22|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|     22|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 8, False: 14]
  |  Branch (4017:50): [True: 4, False: 4]
  ------------------
 4018|       |
 4019|     22|        auto it = ranges::begin(range);
 4020|     22|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|     22|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|     22|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 4024|     22|            return r.transform_error(
 4025|     22|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|     22|                                              "Invalid floating-point value"));
 4027|     22|        }
 4028|      0|        else {
 4029|      0|            digits_count += ranges::distance(it, *r);
 4030|      0|            it = *r;
 4031|      0|        }
 4032|       |
 4033|      0|        m_integral_part_length = digits_count;
 4034|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 0, False: 0]
  ------------------
 4035|      0|                                             m_locale_options.decimal_point)) {
 4036|      0|            it = *r;
 4037|      0|        }
 4038|       |
 4039|      0|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 0, False: 0]
  ------------------
 4040|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|      0|            digits_count += ranges::distance(it, *r);
 4042|      0|            it = *r;
 4043|      0|        }
 4044|       |
 4045|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|      0|        auto beg_exp_it = it;
 4052|      0|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|      0|        }
 4055|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 0, False: 0]
  |  Branch (4055:29): [True: 0, False: 0]
  ------------------
 4056|      0|            return detail::unexpected_scan_error(
 4057|      0|                scan_error::invalid_scanned_value,
 4058|      0|                "No exponent given to scientific float");
 4059|      0|        }
 4060|       |
 4061|      0|        m_kind =
 4062|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 0, False: 0]
  ------------------
 4063|       |
 4064|      0|        return it;
 4065|      0|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3843|     22|    {
 3844|     22|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 22]
  |  |  |  Branch (1039:45): [True: 0, False: 22]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|     22|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|     22|        return read_while1_code_unit(
 3853|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|     22|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     22|        : m_fptr([](storage fn,
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
  752|     22|          m_storage(std::addressof(f))
  753|     22|    {
  754|     22|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     22|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  688|     22|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     22|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3853|     22|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     22|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     22|        {
  662|     22|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4072|    936|    {
 4073|    936|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|    936|        const bool allowed_nonhex =
 4075|    936|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|    936|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|    936|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 936, False: 0]
  |  Branch (4078:45): [True: 0, False: 936]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|    936|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 0, False: 936]
  ------------------
 4084|      0|            return *r;
 4085|      0|        }
 4086|       |
 4087|    936|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 936, False: 0]
  |  Branch (4087:45): [True: 0, False: 936]
  ------------------
 4088|      0|            return unexpected(r.error());
 4089|      0|        }
 4090|    936|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 0, False: 936]
  ------------------
 4091|      0|            return *r;
 4092|      0|        }
 4093|       |
 4094|    936|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 914, False: 22]
  |  Branch (4094:28): [True: 8, False: 906]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|      8|            auto it = range.begin();
 4098|       |
 4099|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 0, False: 8]
  ------------------
 4100|      0|                m_kind = float_kind::hex_with_prefix;
 4101|      0|                it = *r;
 4102|      0|            }
 4103|      8|            else {
 4104|      8|                m_kind = float_kind::hex_without_prefix;
 4105|      8|            }
 4106|       |
 4107|      8|            return read_hex(ranges::subrange{it, range.end()});
 4108|      8|        }
 4109|    928|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 22, False: 906]
  |  Branch (4109:29): [True: 22, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|     22|            m_kind = float_kind::generic;
 4113|     22|            return read_regular_float(range);
 4114|     22|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|    906|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 906]
  |  |  ------------------
  ------------------
 4120|      0|            m_kind = float_kind::hex_with_prefix;
 4121|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4122|      0|        }
 4123|       |
 4124|    906|        m_kind = float_kind::generic;
 4125|    906|        return read_regular(range);
 4126|    906|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3807|    914|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|    914|                    auto res = read_all(rr);
 3809|    914|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 914]
  |  |  ------------------
  ------------------
 3810|      0|                        return detail::unexpected_scan_error(
 3811|      0|                            scan_error::invalid_scanned_value,
 3812|      0|                            "Invalid float value");
 3813|      0|                    }
 3814|    914|                    return res;
 3815|    914|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|    914|{
 1938|    914|    return ranges::next(range.begin(), range.end());
 1939|    914|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    914|    {
  313|    914|        ranges::advance(x, bound);
  314|    914|        return x;
  315|    914|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    914|    {
  275|    914|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    914|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.02k|    {
  190|  1.02k|        i = std::move(bound);
  191|  1.02k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|    914|    {
 1676|    914|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|    914|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|    914|    {
 1720|    914|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|    914|                      ranges::sized_range<Range>) {
 1725|    914|            m_storage.reset();
 1726|    914|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|    914|    }
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3746|    928|    {
 3747|    928|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 928]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|    928|        return read_source_impl(range);
 3753|    928|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3772|    914|    {
 3773|    914|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|    914|        const std::ptrdiff_t sign_len =
 3776|    914|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 0, False: 914]
  ------------------
 3777|       |
 3778|    914|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 914, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    914|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    914|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    914|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    914|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    914|    }                                                  \
  |  |  |  | 3957|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|    914|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4263|    402|    {
 4264|    402|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|    402|#if !SCN_DISABLE_LOCALE
 4267|    402|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 12, False: 390]
  ------------------
 4268|     12|            return read_impl<Range>(
 4269|     12|                range, rd,
 4270|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4271|     12|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|     12|                },
 4273|     12|                value, loc);
 4274|     12|        }
 4275|    390|#endif
 4276|       |
 4277|    390|        return read_impl<Range>(
 4278|    390|            range, rd,
 4279|    390|            [](float_reader<CharT>& r, auto&&... args) {
 4280|    390|                return r.read_source(SCN_FWD(args)...);
 4281|    390|            },
 4282|    390|            value);
 4283|    402|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|    402|    {
 4300|    402|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|    402|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 402, False: 0]
  |  |  ------------------
  ------------------
 4302|    402|            return unexpected(r.error());
 4303|    402|        }
 4304|       |
 4305|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|      0|        return ranges::next(range.begin(), n);
 4307|      0|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     12|        : m_fptr([](storage fn,
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
  752|     12|          m_storage(std::addressof(f))
  753|     12|    {
  754|     12|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     12|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  688|     12|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     12|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4270|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4271|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|     12|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     12|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     12|        {
  662|     12|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    390|        : m_fptr([](storage fn,
  743|    390|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    390|              cvref<T> obj = *get<T>(fn);
  745|    390|              if constexpr (std::is_void_v<R>) {
  746|    390|                  obj(static_cast<decltype(args)>(args)...);
  747|    390|              }
  748|    390|              else {
  749|    390|                  return obj(static_cast<decltype(args)>(args)...);
  750|    390|              }
  751|    390|          }),
  752|    390|          m_storage(std::addressof(f))
  753|    390|    {
  754|    390|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    390|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    390|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    390|              else {
  749|    390|                  return obj(static_cast<decltype(args)>(args)...);
  750|    390|              }
  751|    390|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    390|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    390|        else if constexpr (std::is_object_v<T>) {
  688|    390|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    390|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4279|    390|            [](float_reader<CharT>& r, auto&&... args) {
 4280|    390|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|    390|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    390|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    390|        {
  662|    390|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|    302|    {
 4264|    302|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|    302|#if !SCN_DISABLE_LOCALE
 4267|    302|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 8, False: 294]
  ------------------
 4268|      8|            return read_impl<Range>(
 4269|      8|                range, rd,
 4270|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4271|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|      8|                },
 4273|      8|                value, loc);
 4274|      8|        }
 4275|    294|#endif
 4276|       |
 4277|    294|        return read_impl<Range>(
 4278|    294|            range, rd,
 4279|    294|            [](float_reader<CharT>& r, auto&&... args) {
 4280|    294|                return r.read_source(SCN_FWD(args)...);
 4281|    294|            },
 4282|    294|            value);
 4283|    302|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|    936|    {
 4300|    936|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|    936|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22, False: 914]
  |  |  ------------------
  ------------------
 4302|     22|            return unexpected(r.error());
 4303|     22|        }
 4304|       |
 4305|    914|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 914, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    914|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    914|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    914|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    914|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    914|    }                                                  \
  |  |  |  | 3957|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|      0|        return ranges::next(range.begin(), n);
 4307|    914|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4271|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|      8|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    294|        : m_fptr([](storage fn,
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|    294|              if constexpr (std::is_void_v<R>) {
  746|    294|                  obj(static_cast<decltype(args)>(args)...);
  747|    294|              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
  752|    294|          m_storage(std::addressof(f))
  753|    294|    {
  754|    294|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    294|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    294|        else if constexpr (std::is_object_v<T>) {
  688|    294|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    294|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|    294|            [](float_reader<CharT>& r, auto&&... args) {
 4280|    294|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|    294|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    294|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    294|        {
  662|    294|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5905|  3.83k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|       |                       std::is_same_v<T, std::wstring_view>) {
 5920|       |        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|  3.83k|                       std::is_same_v<T, std::wstring>) {
 5924|  3.83k|        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|  3.83k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5299|  11.5k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  9.60k|    {
 3188|  9.60k|        reader_error_handler eh{};
 3189|  9.60k|        get_derived().check_specs_impl(specs, eh);
 3190|  9.60k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  9.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 432, False: 9.16k]
  |  |  ------------------
  ------------------
 3191|    432|            return detail::unexpected_scan_error(
 3192|    432|                scan_error::invalid_format_string, eh.m_msg);
 3193|    432|        }
 3194|  9.16k|        return {};
 3195|  9.60k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3199|  9.60k|    {
 3200|  9.60k|        return static_cast<Derived&>(*this);
 3201|  9.60k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5303|  9.60k|    {
 5304|  9.60k|        detail::check_string_type_specs(specs, eh);
 5305|       |
 5306|  9.60k|        SCN_GCC_PUSH
 5307|  9.60k|        SCN_GCC_IGNORE("-Wswitch")
 5308|  9.60k|        SCN_GCC_IGNORE("-Wswitch-default")
 5309|       |
 5310|  9.60k|        SCN_CLANG_PUSH
 5311|  9.60k|        SCN_CLANG_IGNORE("-Wswitch")
 5312|  9.60k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5313|       |
 5314|  9.60k|        switch (specs.type) {
  ------------------
  |  Branch (5314:17): [True: 426, False: 9.17k]
  ------------------
 5315|  1.93k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5315:13): [True: 1.93k, False: 7.66k]
  ------------------
 5316|  1.93k|                m_type = reader_type::word;
 5317|  1.93k|                break;
 5318|       |
 5319|    834|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5319:13): [True: 834, False: 8.76k]
  ------------------
 5320|    834|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5320:21): [True: 114, False: 720]
  ------------------
 5321|    834|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5321:21): [True: 456, False: 264]
  ------------------
 5322|    570|                    m_type = reader_type::custom_word;
 5323|    570|                }
 5324|    264|                else {
 5325|    264|                    m_type = reader_type::word;
 5326|    264|                }
 5327|    834|                break;
 5328|      0|            }
 5329|       |
 5330|    186|            case detail::presentation_type::character:
  ------------------
  |  Branch (5330:13): [True: 186, False: 9.41k]
  ------------------
 5331|    186|                m_type = reader_type::character;
 5332|    186|                break;
 5333|       |
 5334|  4.90k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5334:13): [True: 4.90k, False: 4.69k]
  ------------------
 5335|  4.90k|                m_type = reader_type::character_set;
 5336|  4.90k|                break;
 5337|       |
 5338|    102|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5338:13): [True: 102, False: 9.49k]
  ------------------
 5339|    102|                m_type = reader_type::regex;
 5340|    102|                break;
 5341|       |
 5342|  1.20k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5342:13): [True: 1.20k, False: 8.39k]
  ------------------
 5343|  1.20k|                m_type = reader_type::regex_escaped;
 5344|  1.20k|                break;
 5345|  9.60k|        }
 5346|       |
 5347|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5348|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5349|  9.60k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5352|  15.1k|    {
 5353|  15.1k|        return m_type == reader_type::word;
 5354|  15.1k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  10.6k|{
 1242|  10.6k|    auto it = src.begin();
 1243|   961k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 952k, False: 8.45k]
  ------------------
 1244|   952k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|   952k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 1.51k, False: 951k]
  ------------------
 1246|  1.51k|            return false;
 1247|  1.51k|        }
 1248|   951k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 240, False: 951k]
  ------------------
 1249|    240|            return false;
 1250|    240|        }
 1251|   951k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|   951k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|   951k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 420, False: 950k]
  ------------------
 1254|    420|            return false;
 1255|    420|        }
 1256|   950k|        it += len;
 1257|   950k|    }
 1258|  8.45k|    return true;
 1259|  10.6k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|    500|{
 3140|    500|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|    500|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3141:13): [True: 500, False: 0]
  ------------------
 3142|    500|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1108|    500|    static_cast<    \
  |  | 1109|    500|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3143|    500|        }
 3144|      0|        else {
 3145|      0|            dest.assign(source.view());
 3146|      0|        }
 3147|       |    }
 3148|       |    else {
 3149|       |        return transcode_impl(source.view(), dest);
 3150|       |    }
 3151|       |
 3152|    500|    return {};
 3153|    500|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5200|  4.90k|        {
 5201|  4.90k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5201:17): [True: 624, False: 4.27k]
  ------------------
 5202|    624|                return {};
 5203|    624|            }
 5204|       |
 5205|  4.27k|            auto charset_string = specs.charset_string<SourceCharT>();
 5206|  4.27k|            auto it = detail::to_address(charset_string.begin());
 5207|  4.27k|            auto set = detail::parse_presentation_set(
 5208|  4.27k|                it, detail::to_address(charset_string.end()), nonascii);
 5209|  4.27k|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3948|  4.27k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  4.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.27k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5210|  4.27k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1105|  4.27k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5211|  4.27k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1105|  4.27k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5212|       |
 5213|  4.27k|            std::sort(nonascii.extra_ranges.begin(),
 5214|  4.27k|                      nonascii.extra_ranges.end());
 5215|  4.27k|            return {};
 5216|  4.27k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5233|   677k|        {
 5234|   677k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5234:17): [True: 116k, False: 560k]
  ------------------
 5235|   116k|                return helper.is_char_set_in_extra_literals(cp);
 5236|   116k|            }
 5237|       |
 5238|   560k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5239|   677k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5183|   116k|        {
 5184|       |            // TODO: binary search?
 5185|   116k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5185:17): [True: 0, False: 116k]
  ------------------
 5186|      0|                return false;
 5187|      0|            }
 5188|       |
 5189|   116k|            const auto cp_val = static_cast<uint32_t>(cp);
 5190|   116k|            return std::find_if(
 5191|   116k|                       nonascii.extra_ranges.begin(),
 5192|   116k|                       nonascii.extra_ranges.end(),
 5193|   116k|                       [cp_val](const auto& pair) noexcept {
 5194|   116k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5195|   116k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5196|   116k|                       }) != nonascii.extra_ranges.end();
 5197|   116k|        }
_ZZNK3scn2v44impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5193|  14.3M|                       [cp_val](const auto& pair) noexcept {
 5194|  14.3M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5194:35): [True: 14.3M, False: 2.99k]
  ------------------
 5195|  14.3M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5195:35): [True: 114k, False: 14.2M]
  ------------------
 5196|  14.3M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5173|   569k|        {
 5174|   569k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1104|   569k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   569k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5175|   569k|            const auto val =
 5176|   569k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5177|   569k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5178|   569k|                    (val % 8)) &
 5179|   569k|                   1u;
 5180|   569k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5224|  10.7k|        {
 5225|  10.7k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5225:17): [True: 1.96k, False: 8.79k]
  ------------------
 5226|  1.96k|                return false;
 5227|  1.96k|            }
 5228|       |
 5229|  8.79k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5230|  10.7k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5170|  4.90k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5370|  1.12k|    {
 5371|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  1.12k|        return read_impl(range, specs, value);
 5373|  1.12k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5388|  1.12k|    {
 5389|  1.12k|        SCN_CLANG_PUSH
 5390|  1.12k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  1.12k|        switch (m_type) {
 5393|    360|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 360, False: 768]
  ------------------
 5394|    360|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|    126|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 126, False: 1.00k]
  ------------------
 5397|    126|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|    126|                                                                   value);
 5399|       |
 5400|     58|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 58, False: 1.07k]
  ------------------
 5401|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    302|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 302, False: 826]
  ------------------
 5404|    302|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    302|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      2|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 2, False: 1.12k]
  ------------------
 5409|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      2|                    range, specs.charset_string<SourceCharT>(),
 5411|      2|                    specs.regexp_flags, value);
 5412|       |
 5413|    280|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 280, False: 848]
  ------------------
 5414|    280|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|    280|                    range,
 5416|    280|                    get_unescaped_regex_pattern(
 5417|    280|                        specs.charset_string<SourceCharT>()),
 5418|    280|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 1.12k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  1.12k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  1.12k|        }
 5425|       |
 5426|  1.12k|        SCN_CLANG_POP
 5427|  1.12k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4921|    360|    {
 4922|    360|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|    360|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4855|    544|{
 4856|    544|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    544|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    544|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 232, False: 312]
  ------------------
 4860|    232|        return detail::unexpected_scan_error(
 4861|    232|            scan_error::invalid_scanned_value,
 4862|    232|            "Invalid encoding in scanned string");
 4863|    232|    }
 4864|       |
 4865|    312|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    312|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 312]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    312|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    312|    static_cast<    \
  |  | 1109|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    312|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2219|  1.08k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|  1.08k|    else {
 2229|  1.08k|        auto it = range.begin();
 2230|       |
 2231|  1.08k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|  1.08k|            auto seg = get_contiguous_beginning(range);
 2233|  1.08k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|  1.08k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2234:17): [True: 0, False: 1.08k]
  ------------------
 2235|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|      0|            }
 2237|  1.08k|            ranges::advance(it, seg.size());
 2238|  1.08k|        }
 2239|       |
 2240|      0|        return read_until_code_point(
 2241|  1.08k|            ranges::subrange{it, range.end()},
 2242|  1.08k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|  1.08k|    }
 2244|  1.08k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2192|  1.08k|{
 2193|  1.08k|    auto it = range.begin();
 2194|  20.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 19.8k, False: 816]
  ------------------
 2195|  19.8k|        const auto val =
 2196|  19.8k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  19.8k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  19.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 16.0k, False: 3.75k]
  |  |  ------------------
  ------------------
 2198|  16.0k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  16.0k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  16.0k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 264, False: 15.8k]
  ------------------
 2201|    264|                return it;
 2202|    264|            }
 2203|  16.0k|        }
 2204|  19.5k|        it = val.iterator;
 2205|  19.5k|    }
 2206|       |
 2207|    816|    return it;
 2208|  1.08k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|  1.08k|        : m_fptr([](storage fn,
  743|  1.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.08k|              cvref<T> obj = *get<T>(fn);
  745|  1.08k|              if constexpr (std::is_void_v<R>) {
  746|  1.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.08k|              }
  748|  1.08k|              else {
  749|  1.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.08k|              }
  751|  1.08k|          }),
  752|  1.08k|          m_storage(std::addressof(f))
  753|  1.08k|    {
  754|  1.08k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  16.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.0k|              else {
  749|  16.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.0k|              }
  751|  16.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  16.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.0k|        else if constexpr (std::is_object_v<T>) {
  688|  16.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.0k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2242|  16.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  1.08k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.08k|        {
  662|  1.08k|        }
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4942|    126|    {
 4943|    126|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4943:13): [True: 72, False: 54]
  ------------------
 4944|     72|            return read_string_impl(
 4945|     72|                range,
 4946|     72|                read_until_code_unit(
 4947|     72|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4948|     72|                value);
 4949|     72|        }
 4950|     54|        return read_string_impl(
 4951|     54|            range,
 4952|     54|            read_until_code_units(
 4953|     54|                range, specs.fill.template get_code_units<SourceCharT>()),
 4954|     54|            value);
 4955|    126|    }
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS0_6detail11mp_identityINDTcl4implISE_EEE4typeEE4typeE:
 2055|    216|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find(range.begin(), range.end(), cu);
 2058|       |    }
 2059|    216|    else {
 2060|    216|        auto first = range.begin();
 2061|  5.09k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 4.88k, False: 210]
  ------------------
 2062|  4.88k|            if (*first == cu) {
  ------------------
  |  Branch (2062:17): [True: 6, False: 4.87k]
  ------------------
 2063|      6|                return first;
 2064|      6|            }
 2065|  4.88k|        }
 2066|    210|        return first;
 2067|    216|    }
 2068|    216|}
_ZN3scn2v44impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2138|    162|{
 2139|    162|    static_assert(ranges::common_range<CodeUnits>);
 2140|       |
 2141|       |    if constexpr (ranges::common_range<Range>) {
 2142|       |        return std::search(range.begin(), range.end(), needle.begin(),
 2143|       |                           needle.end());
 2144|       |    }
 2145|    162|    else {
 2146|    162|        auto first = range.begin();
 2147|  2.26k|        while (true) {
  ------------------
  |  Branch (2147:16): [Folded - Ignored]
  ------------------
 2148|  2.26k|            auto it = first;
 2149|  2.78k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2150|  2.78k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2150:21): [True: 108, False: 2.67k]
  ------------------
 2151|    108|                    return first;
 2152|    108|                }
 2153|  2.67k|                if (it == range.end()) {
  ------------------
  |  Branch (2153:21): [True: 54, False: 2.62k]
  ------------------
 2154|     54|                    return it;
 2155|     54|                }
 2156|  2.62k|                if (*it != *needle_it) {
  ------------------
  |  Branch (2156:21): [True: 2.10k, False: 516]
  ------------------
 2157|  2.10k|                    break;
 2158|  2.10k|                }
 2159|  2.62k|            }
 2160|  2.10k|            ++first;
 2161|  2.10k|        }
 2162|    162|    }
 2163|    162|}
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5044|     58|    {
 5045|     58|        return read_impl(
 5046|     58|            range,
 5047|     58|            [&](const auto& rng) {
 5048|     58|                return read_string_impl(rng, read_all(rng), value);
 5049|     58|            },
 5050|     58|            detail::priority_tag<1>{});
 5051|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5071|     58|    {
 5072|     58|        return read_cb(range);
 5073|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5047|     58|            [&](const auto& rng) {
 5048|     58|                return read_string_impl(rng, read_all(rng), value);
 5049|     58|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|    174|{
 1938|    174|    return ranges::next(range.begin(), range.end());
 1939|    174|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    174|    {
  313|    174|        ranges::advance(x, bound);
  314|    174|        return x;
  315|    174|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    174|    {
  275|    174|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    174|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    174|    {
  203|  2.74k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.57k, False: 174]
  ------------------
  204|  2.57k|            ++i;
  205|  2.57k|        }
  206|    174|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5145|    302|    {
 5146|    302|        auto it = read_source_impl(range, {specs});
 5147|    302|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 294]
  |  |  ------------------
  ------------------
 5148|      8|            return unexpected(it.error());
 5149|      8|        }
 5150|       |
 5151|    294|        return read_string_impl(range, *it, value);
 5152|    302|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5248|    906|    {
 5249|    906|        const bool is_inverted = helper.specs.charset_is_inverted;
 5250|    906|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5251|       |
 5252|    906|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|    906|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 906]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5253|       |
 5254|    906|        read_source_callback cb_wrapper{helper};
 5255|       |
 5256|    906|        if (accepts_nonascii) {
  ------------------
  |  Branch (5256:13): [True: 510, False: 396]
  ------------------
 5257|    510|            const auto cb = [&](char32_t cp) {
 5258|    510|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|    510|            };
 5260|       |
 5261|    510|            if (is_inverted) {
  ------------------
  |  Branch (5261:17): [True: 240, False: 270]
  ------------------
 5262|    240|                auto it = read_until_code_point(range, cb);
 5263|    240|                return check_nonempty(it, range);
 5264|    240|            }
 5265|    270|            auto it = read_while_code_point(range, cb);
 5266|    270|            return check_nonempty(it, range);
 5267|    510|        }
 5268|       |
 5269|    396|        const auto cb = [&](SourceCharT ch) {
 5270|    396|            return cb_wrapper.on_ascii_only(ch);
 5271|    396|        };
 5272|       |
 5273|    396|        if (is_inverted) {
  ------------------
  |  Branch (5273:13): [True: 180, False: 216]
  ------------------
 5274|    180|            auto it = read_until_code_unit(range, cb);
 5275|    180|            return check_nonempty(it, range);
 5276|    180|        }
 5277|    216|        auto it = read_while_code_unit(range, cb);
 5278|    216|        return check_nonempty(it, range);
 5279|    396|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    510|        : m_fptr([](storage fn,
  743|    510|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    510|              cvref<T> obj = *get<T>(fn);
  745|    510|              if constexpr (std::is_void_v<R>) {
  746|    510|                  obj(static_cast<decltype(args)>(args)...);
  747|    510|              }
  748|    510|              else {
  749|    510|                  return obj(static_cast<decltype(args)>(args)...);
  750|    510|              }
  751|    510|          }),
  752|    510|          m_storage(std::addressof(f))
  753|    510|    {
  754|    510|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  15.3k|    {
  684|  15.3k|        if constexpr (std::is_const_v<T>) {
  685|  15.3k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.3k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5257|  15.3k|            const auto cb = [&](char32_t cp) {
 5258|  15.3k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|  15.3k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    510|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    510|        {
  667|    510|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5284|    906|    {
 5285|    906|        if (it == range.begin()) {
  ------------------
  |  Branch (5285:13): [True: 24, False: 882]
  ------------------
 5286|     24|            return detail::unexpected_scan_error(
 5287|     24|                scan_error::invalid_scanned_value,
 5288|     24|                "No characters matched in [character set]");
 5289|     24|        }
 5290|       |
 5291|    882|        return it;
 5292|    906|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    396|        : m_fptr([](storage fn,
  743|    396|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    396|              cvref<T> obj = *get<T>(fn);
  745|    396|              if constexpr (std::is_void_v<R>) {
  746|    396|                  obj(static_cast<decltype(args)>(args)...);
  747|    396|              }
  748|    396|              else {
  749|    396|                  return obj(static_cast<decltype(args)>(args)...);
  750|    396|              }
  751|    396|          }),
  752|    396|          m_storage(std::addressof(f))
  753|    396|    {
  754|    396|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  7.53k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.53k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.53k|              else {
  749|  7.53k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.53k|              }
  751|  7.53k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  7.53k|    {
  684|  7.53k|        if constexpr (std::is_const_v<T>) {
  685|  7.53k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.53k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5269|  7.53k|        const auto cb = [&](SourceCharT ch) {
 5270|  7.53k|            return cb_wrapper.on_ascii_only(ch);
 5271|  7.53k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    396|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    396|        {
  667|    396|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4855|    294|{
 4856|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    294|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    294|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 106, False: 188]
  ------------------
 4860|    106|        return detail::unexpected_scan_error(
 4861|    106|            scan_error::invalid_scanned_value,
 4862|    106|            "Invalid encoding in scanned string");
 4863|    106|    }
 4864|       |
 4865|    188|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    188|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    188|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    188|    static_cast<    \
  |  | 1109|    188|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    188|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4988|    282|    {
 4989|    282|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 282, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    282|    }                                                  \
  |  |  |  | 3957|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4990|      0|        return read_string_impl(range, it, value);
 4991|    282|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 5010|    846|    {
 5011|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 5012|       |                      !std::is_same_v<SourceCharT, char>) {
 5013|       |            return detail::unexpected_scan_error(
 5014|       |                scan_error::invalid_format_string,
 5015|       |                "Regex backend doesn't support wide strings as input");
 5016|       |        }
 5017|    846|        else {
 5018|    846|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (5018:17): [True: 846, False: 0]
  ------------------
 5019|    846|                return detail::unexpected_scan_error(
 5020|    846|                    scan_error::invalid_format_string,
 5021|    846|                    "Cannot use regex with a non-contiguous source "
 5022|    846|                    "range");
 5023|    846|            }
 5024|       |
 5025|      0|            auto input = get_as_contiguous(range);
 5026|      0|            SCN_TRY(it,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5027|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 5028|      0|            return ranges::next(range.begin(),
 5029|      0|                                ranges::distance(input.begin(), it));
 5030|      0|        }
 5031|    846|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  959|    846|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|       |                  ranges::sized_range<Range>) {
  962|       |        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|    846|    else {
  975|    846|        return false;
  976|    846|    }
  977|    846|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5370|  1.89k|    {
 5371|  1.89k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  1.89k|        return read_impl(range, specs, value);
 5373|  1.89k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5388|  1.89k|    {
 5389|  1.89k|        SCN_CLANG_PUSH
 5390|  1.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  1.89k|        switch (m_type) {
 5393|    342|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 342, False: 1.54k]
  ------------------
 5394|    342|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 62, False: 1.82k]
  ------------------
 5397|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     62|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 1.89k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  1.33k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 1.33k, False: 558]
  ------------------
 5404|  1.33k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  1.33k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|     32|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 32, False: 1.85k]
  ------------------
 5409|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|     32|                    range, specs.charset_string<SourceCharT>(),
 5411|     32|                    specs.regexp_flags, value);
 5412|       |
 5413|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 122, False: 1.76k]
  ------------------
 5414|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|    122|                    range,
 5416|    122|                    get_unescaped_regex_pattern(
 5417|    122|                        specs.charset_string<SourceCharT>()),
 5418|    122|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 1.89k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  1.89k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  1.89k|        }
 5425|       |
 5426|  1.89k|        SCN_CLANG_POP
 5427|  1.89k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4921|    976|    {
 4922|    976|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|    976|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4855|  1.03k|{
 4856|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 330, False: 708]
  ------------------
 4860|    330|        return detail::unexpected_scan_error(
 4861|    330|            scan_error::invalid_scanned_value,
 4862|    330|            "Invalid encoding in scanned string");
 4863|    330|    }
 4864|       |
 4865|    708|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    708|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 708]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    708|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    708|    static_cast<    \
  |  | 1109|    708|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    708|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|  1.61k|{
 3160|  1.61k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|  1.61k|        dest.assign(source.view());
 3162|       |    }
 3163|       |    else {
 3164|       |        return transcode_impl(source.view(), dest);
 3165|       |    }
 3166|       |
 3167|  1.61k|    return {};
 3168|  1.61k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2219|  2.92k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|  2.92k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|  2.92k|        auto buf = make_contiguous_buffer(range);
 2224|  2.92k|        auto it = find_classic_space_narrow_fast(buf.view());
 2225|  2.92k|        return ranges::next(range.begin(),
 2226|  2.92k|                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|       |    else {
 2229|       |        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|       |        return read_until_code_point(
 2241|       |            ranges::subrange{it, range.end()},
 2242|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|       |    }
 2244|  2.92k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4942|     62|    {
 4943|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4943:13): [True: 30, False: 32]
  ------------------
 4944|     30|            return read_string_impl(
 4945|     30|                range,
 4946|     30|                read_until_code_unit(
 4947|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4948|     30|                value);
 4949|     30|        }
 4950|     32|        return read_string_impl(
 4951|     32|            range,
 4952|     32|            read_until_code_units(
 4953|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4954|     32|            value);
 4955|     62|    }
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS0_6detail11mp_identityINDTcl4implISC_EEE4typeEE4typeE:
 2055|     90|{
 2056|     90|    if constexpr (ranges::common_range<Range>) {
 2057|     90|        return std::find(range.begin(), range.end(), cu);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (*first == cu) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|     90|}
_ZN3scn2v44impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2138|     96|{
 2139|     96|    static_assert(ranges::common_range<CodeUnits>);
 2140|       |
 2141|     96|    if constexpr (ranges::common_range<Range>) {
 2142|     96|        return std::search(range.begin(), range.end(), needle.begin(),
 2143|     96|                           needle.end());
 2144|       |    }
 2145|       |    else {
 2146|       |        auto first = range.begin();
 2147|       |        while (true) {
 2148|       |            auto it = first;
 2149|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2150|       |                if (needle_it == needle.end()) {
 2151|       |                    return first;
 2152|       |                }
 2153|       |                if (it == range.end()) {
 2154|       |                    return it;
 2155|       |                }
 2156|       |                if (*it != *needle_it) {
 2157|       |                    break;
 2158|       |                }
 2159|       |            }
 2160|       |            ++first;
 2161|       |        }
 2162|       |    }
 2163|     96|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5145|  1.33k|    {
 5146|  1.33k|        auto it = read_source_impl(range, {specs});
 5147|  1.33k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 400, False: 932]
  |  |  ------------------
  ------------------
 5148|    400|            return unexpected(it.error());
 5149|    400|        }
 5150|       |
 5151|    932|        return read_string_impl(range, *it, value);
 5152|  1.33k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5248|  3.99k|    {
 5249|  3.99k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5250|  3.99k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5251|       |
 5252|  3.99k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  3.99k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 3.99k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5253|       |
 5254|  3.99k|        read_source_callback cb_wrapper{helper};
 5255|       |
 5256|  3.99k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5256:13): [True: 3.76k, False: 228]
  ------------------
 5257|  3.76k|            const auto cb = [&](char32_t cp) {
 5258|  3.76k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|  3.76k|            };
 5260|       |
 5261|  3.76k|            if (is_inverted) {
  ------------------
  |  Branch (5261:17): [True: 252, False: 3.51k]
  ------------------
 5262|    252|                auto it = read_until_code_point(range, cb);
 5263|    252|                return check_nonempty(it, range);
 5264|    252|            }
 5265|  3.51k|            auto it = read_while_code_point(range, cb);
 5266|  3.51k|            return check_nonempty(it, range);
 5267|  3.76k|        }
 5268|       |
 5269|    228|        const auto cb = [&](SourceCharT ch) {
 5270|    228|            return cb_wrapper.on_ascii_only(ch);
 5271|    228|        };
 5272|       |
 5273|    228|        if (is_inverted) {
  ------------------
  |  Branch (5273:13): [True: 102, False: 126]
  ------------------
 5274|    102|            auto it = read_until_code_unit(range, cb);
 5275|    102|            return check_nonempty(it, range);
 5276|    102|        }
 5277|    126|        auto it = read_while_code_unit(range, cb);
 5278|    126|        return check_nonempty(it, range);
 5279|    228|    }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  3.76k|{
 2193|  3.76k|    auto it = range.begin();
 2194|   663k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 663k, False: 192]
  ------------------
 2195|   663k|        const auto val =
 2196|   663k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   663k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   663k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 662k, False: 1.21k]
  |  |  ------------------
  ------------------
 2198|   662k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   662k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   662k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 3.57k, False: 658k]
  ------------------
 2201|  3.57k|                return it;
 2202|  3.57k|            }
 2203|   662k|        }
 2204|   660k|        it = val.iterator;
 2205|   660k|    }
 2206|       |
 2207|    192|    return it;
 2208|  3.76k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   663k|{
 1998|   663k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   663k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   663k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   663k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   663k|    auto it = range.begin();
 2002|   663k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   663k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   663k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.21k, False: 662k]
  |  |  ------------------
  ------------------
 2005|  1.21k|        ++it;
 2006|  1.21k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  1.21k|        return {it, {}};
 2008|  1.21k|    }
 2009|       |
 2010|   662k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 547k, False: 115k]
  ------------------
 2011|   547k|        ++it;
 2012|   547k|        return {it, string_type(1, *range.begin())};
 2013|   547k|    }
 2014|       |
 2015|   115k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|   115k|    return {it, string_type{range.begin(), it}};
 2017|   662k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1264|  1.21k|{
 1265|  1.21k|    auto it = input.begin();
 1266|  1.71k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 1.65k, False: 60]
  ------------------
 1267|  1.65k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 1.15k, False: 492]
  ------------------
 1268|  1.15k|            break;
 1269|  1.15k|        }
 1270|  1.65k|    }
 1271|  1.21k|    return it;
 1272|  1.21k|}
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|   115k|    {
  283|   115k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   115k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|   115k|    {
  212|   115k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 108, False: 115k]
  ------------------
  213|    108|            auto dist = bound - i;
  214|    108|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|    108|            return dist;
  216|    108|        }
  217|   115k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|   115k|        return n;
  219|   115k|    }
_ZN3scn2v46ranges6detail8advance_2fn3absIlEET_S6_:
  131|   230k|    {
  132|   230k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 230k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   230k|        return t;
  136|   230k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKccE8is_validEv:
 1988|   663k|    {
 1989|   663k|        return !codepoint.empty();
 1990|   663k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  3.76k|        : m_fptr([](storage fn,
  743|  3.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.76k|              cvref<T> obj = *get<T>(fn);
  745|  3.76k|              if constexpr (std::is_void_v<R>) {
  746|  3.76k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.76k|              }
  748|  3.76k|              else {
  749|  3.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.76k|              }
  751|  3.76k|          }),
  752|  3.76k|          m_storage(std::addressof(f))
  753|  3.76k|    {
  754|  3.76k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   662k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   662k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   662k|              else {
  749|   662k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   662k|              }
  751|   662k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   662k|    {
  684|   662k|        if constexpr (std::is_const_v<T>) {
  685|   662k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   662k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5257|   662k|            const auto cb = [&](char32_t cp) {
 5258|   662k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|   662k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  3.76k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.76k|        {
  667|  3.76k|        }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5284|  3.99k|    {
 5285|  3.99k|        if (it == range.begin()) {
  ------------------
  |  Branch (5285:13): [True: 1.20k, False: 2.79k]
  ------------------
 5286|  1.20k|            return detail::unexpected_scan_error(
 5287|  1.20k|                scan_error::invalid_scanned_value,
 5288|  1.20k|                "No characters matched in [character set]");
 5289|  1.20k|        }
 5290|       |
 5291|  2.79k|        return it;
 5292|  3.99k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|  3.51k|{
 2214|  3.51k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  3.51k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    228|        : m_fptr([](storage fn,
  743|    228|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    228|              cvref<T> obj = *get<T>(fn);
  745|    228|              if constexpr (std::is_void_v<R>) {
  746|    228|                  obj(static_cast<decltype(args)>(args)...);
  747|    228|              }
  748|    228|              else {
  749|    228|                  return obj(static_cast<decltype(args)>(args)...);
  750|    228|              }
  751|    228|          }),
  752|    228|          m_storage(std::addressof(f))
  753|    228|    {
  754|    228|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.22k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.22k|              else {
  749|  3.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.22k|              }
  751|  3.22k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.22k|    {
  684|  3.22k|        if constexpr (std::is_const_v<T>) {
  685|  3.22k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.22k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5269|  3.22k|        const auto cb = [&](SourceCharT ch) {
 5270|  3.22k|            return cb_wrapper.on_ascii_only(ch);
 5271|  3.22k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    228|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    228|        {
  667|    228|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4855|    962|{
 4856|    962|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    962|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    962|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 56, False: 906]
  ------------------
 4860|     56|        return detail::unexpected_scan_error(
 4861|     56|            scan_error::invalid_scanned_value,
 4862|     56|            "Invalid encoding in scanned string");
 4863|     56|    }
 4864|       |
 4865|    906|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    906|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 906]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    906|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    906|    static_cast<    \
  |  | 1109|    906|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    906|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4988|    154|    {
 4989|    154|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    154|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    154|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    154|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 124, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    124|    }                                                  \
  |  |  |  | 3957|    154|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4990|     30|        return read_string_impl(range, it, value);
 4991|    154|    }
_ZN3scn2v44impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 5010|    462|    {
 5011|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 5012|       |                      !std::is_same_v<SourceCharT, char>) {
 5013|       |            return detail::unexpected_scan_error(
 5014|       |                scan_error::invalid_format_string,
 5015|       |                "Regex backend doesn't support wide strings as input");
 5016|       |        }
 5017|    462|        else {
 5018|    462|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (5018:17): [True: 0, False: 462]
  ------------------
 5019|      0|                return detail::unexpected_scan_error(
 5020|      0|                    scan_error::invalid_format_string,
 5021|      0|                    "Cannot use regex with a non-contiguous source "
 5022|      0|                    "range");
 5023|      0|            }
 5024|       |
 5025|    462|            auto input = get_as_contiguous(range);
 5026|    462|            SCN_TRY(it,
  ------------------
  |  | 3958|    462|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    462|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    462|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 372, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    372|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    372|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    372|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    372|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    372|    }                                                  \
  |  |  |  | 3957|    462|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5027|     90|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 5028|     90|            return ranges::next(range.begin(),
 5029|     90|                                ranges::distance(input.begin(), it));
 5030|    462|        }
 5031|    462|    }
_ZN3scn2v44impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  959|    462|{
  960|       |    if constexpr (ranges::contiguous_range<Range> &&
  961|    462|                  ranges::sized_range<Range>) {
  962|    462|        return true;
  963|       |    }
  964|       |    else if constexpr (std::is_same_v<
  965|       |                           ranges::const_iterator_t<Range>,
  966|       |                           typename detail::basic_scan_buffer<
  967|       |                               detail::char_t<Range>>::forward_iterator>) {
  968|       |        auto beg = r.begin();
  969|       |        if (!beg.stores_parent()) {
  970|       |            return true;
  971|       |        }
  972|       |        return beg.parent()->is_contiguous();
  973|       |    }
  974|       |    else {
  975|       |        return false;
  976|       |    }
  977|    462|}
_ZN3scn2v44impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1065|    462|{
 1066|    462|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  | 1104|    462|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    462|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1067|       |
 1068|       |    if constexpr (ranges::contiguous_range<Range> &&
 1069|    462|                  ranges::sized_range<Range>) {
 1070|    462|        return r;
 1071|       |    }
 1072|       |    else if constexpr (std::is_same_v<
 1073|       |                           ranges::const_iterator_t<Range>,
 1074|       |                           typename detail::basic_scan_buffer<
 1075|       |                               detail::char_t<Range>>::forward_iterator>) {
 1076|       |        if constexpr (ranges::common_range<Range>) {
 1077|       |            return detail::make_string_view_from_pointers(
 1078|       |                r.begin().to_contiguous_segment_iterator(),
 1079|       |                r.end().to_contiguous_segment_iterator());
 1080|       |        }
 1081|       |        else {
 1082|       |            return r.begin().contiguous_segment();
 1083|       |        }
 1084|       |    }
 1085|       |    else {
 1086|       |        SCN_EXPECT(false);
 1087|       |        SCN_UNREACHABLE;
 1088|       |        // for return type deduction
 1089|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1090|       |    }
 1091|    462|}
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  981|    462|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|    462|                  ranges::sized_range<Range>) {
  984|    462|        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|       |                               detail::char_t<Range>>::forward_iterator>) {
  990|       |        auto beg = r.begin();
  991|       |        if (beg.contiguous_segment().empty()) {
  992|       |            return false;
  993|       |        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|       |        else {
  999|       |            if (beg.stores_parent()) {
 1000|       |                return beg.contiguous_segment().end() ==
 1001|       |                       beg.parent()->current_view().end();
 1002|       |            }
 1003|       |            return true;
 1004|       |        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|    462|}
_ZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4439|    462|{
 4440|    462|    static_assert(ranges::contiguous_range<Input> &&
 4441|    462|                  ranges::borrowed_range<Input> &&
 4442|    462|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4443|       |
 4444|       |#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4445|       |    std::basic_regex<CharT> re{};
 4446|       |    try {
 4447|       |        SCN_TRY(re_flags, make_regex_flags(flags));
 4448|       |        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4449|       |                                     re_flags | std::regex_constants::nosubs};
 4450|       |    }
 4451|       |    catch (const std::regex_error& err) {
 4452|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4453|       |                                             "Invalid regex");
 4454|       |    }
 4455|       |
 4456|       |    std::match_results<const CharT*> matches{};
 4457|       |    try {
 4458|       |        bool found = std::regex_search(input.data(),
 4459|       |                                       input.data() + input.size(), matches, re,
 4460|       |                                       std::regex_constants::match_continuous);
 4461|       |        if (!found || matches.prefix().matched) {
 4462|       |            return detail::unexpected_scan_error(
 4463|       |                scan_error::invalid_scanned_value,
 4464|       |                "Regular expression didn't match");
 4465|       |        }
 4466|       |    }
 4467|       |    catch (const std::regex_error& err) {
 4468|       |        return detail::unexpected_scan_error(
 4469|       |            scan_error::invalid_format_string,
 4470|       |            "Regex matching failed with an error");
 4471|       |    }
 4472|       |
 4473|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4474|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4475|       |    auto re =
 4476|       |#if SCN_REGEX_BOOST_USE_ICU
 4477|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4478|       |                             make_regex_flags(flags) |
 4479|       |                                 boost::regex_constants::no_except |
 4480|       |                                 boost::regex_constants::nosubs);
 4481|       |#else
 4482|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4483|       |                                  make_regex_flags(flags) |
 4484|       |                                      boost::regex_constants::no_except |
 4485|       |                                      boost::regex_constants::nosubs};
 4486|       |#endif
 4487|       |    if (re.status() != 0) {
 4488|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4489|       |                                             "Invalid regex");
 4490|       |    }
 4491|       |
 4492|       |    boost::match_results<const CharT*> matches{};
 4493|       |    try {
 4494|       |        bool found =
 4495|       |#if SCN_REGEX_BOOST_USE_ICU
 4496|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4497|       |                                   matches, re,
 4498|       |                                   boost::regex_constants::match_continuous);
 4499|       |#else
 4500|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4501|       |                                matches, re,
 4502|       |                                boost::regex_constants::match_continuous);
 4503|       |#endif
 4504|       |        if (!found || matches.prefix().matched) {
 4505|       |            return detail::unexpected_scan_error(
 4506|       |                scan_error::invalid_scanned_value,
 4507|       |                "Regular expression didn't match");
 4508|       |        }
 4509|       |    }
 4510|       |    catch (const std::runtime_error& err) {
 4511|       |        return detail::unexpected_scan_error(
 4512|       |            scan_error::invalid_format_string,
 4513|       |            "Regex matching failed with an error");
 4514|       |    }
 4515|       |
 4516|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4517|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4518|       |    static_assert(std::is_same_v<CharT, char>);
 4519|    462|    std::string flagged_pattern{};
 4520|    462|    auto re = [&]() {
 4521|    462|        auto [opts, flagstr] = make_regex_flags(flags);
 4522|    462|        opts.set_never_capture(true);
 4523|    462|        if (flagstr.empty()) {
 4524|    462|            return re2::RE2{pattern, opts};
 4525|    462|        }
 4526|    462|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4527|    462|        flagged_pattern.append(flagstr);
 4528|    462|        flagged_pattern.append(pattern);
 4529|    462|        return re2::RE2{flagged_pattern, opts};
 4530|    462|    }();
 4531|    462|    if (!re.ok()) {
  ------------------
  |  Branch (4531:9): [True: 192, False: 270]
  ------------------
 4532|    192|        return detail::unexpected_scan_error(
 4533|    192|            scan_error::invalid_format_string,
 4534|    192|            "Failed to parse regular expression");
 4535|    192|    }
 4536|       |
 4537|    270|    auto new_input = detail::make_string_view_from_pointers(
 4538|    270|        detail::to_address(input.begin()), detail::to_address(input.end()));
 4539|    270|    bool found = re2::RE2::Consume(&new_input, re);
 4540|    270|    if (!found) {
  ------------------
  |  Branch (4540:9): [True: 180, False: 90]
  ------------------
 4541|    180|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 4542|    180|                                             "Regular expression didn't match");
 4543|    180|    }
 4544|     90|    return input.begin() + ranges::distance(input.data(), new_input.data());
 4545|    270|#endif  // SCN_REGEX_BACKEND == ...
 4546|    270|}
_ZZN3scn2v44impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_ENKUlvE_clEv:
 4520|    462|    auto re = [&]() {
 4521|    462|        auto [opts, flagstr] = make_regex_flags(flags);
 4522|    462|        opts.set_never_capture(true);
 4523|    462|        if (flagstr.empty()) {
  ------------------
  |  Branch (4523:13): [True: 12, False: 450]
  ------------------
 4524|     12|            return re2::RE2{pattern, opts};
 4525|     12|        }
 4526|    450|        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4527|    450|        flagged_pattern.append(flagstr);
 4528|    450|        flagged_pattern.append(pattern);
 4529|    450|        return re2::RE2{flagged_pattern, opts};
 4530|    462|    }();
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5905|  3.83k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|       |                       std::is_same_v<T, std::wstring_view>) {
 5920|       |        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|  3.83k|                       std::is_same_v<T, std::wstring>) {
 5924|  3.83k|        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|  3.83k|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|    500|{
 3140|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|       |        if (source.stores_allocated_string()) {
 3142|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3143|       |        }
 3144|       |        else {
 3145|       |            dest.assign(source.view());
 3146|       |        }
 3147|       |    }
 3148|    500|    else {
 3149|    500|        return transcode_impl(source.view(), dest);
 3150|    500|    }
 3151|       |
 3152|      0|    return {};
 3153|    500|}
_ZN3scn2v44impl14transcode_implIcwEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3114|  2.11k|{
 3115|  2.11k|    dst.clear();
 3116|  2.11k|    transcode_valid_to_string(src, dst);
 3117|  2.11k|    return {};
 3118|  2.11k|}
_ZN3scn2v44impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  2.11k|{
 1502|  2.11k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  2.11k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  | 1104|  2.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|  2.11k|    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|  2.11k|        else if constexpr (sizeof(DestCharT) == 4) {
 1514|  2.11k|            return transcode_valid_to_string_impl_to32(src, dest);
 1515|  2.11k|        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|       |        if constexpr (sizeof(DestCharT) == 1) {
 1530|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|       |    }
 1536|       |
 1537|  2.11k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  2.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  2.11k|}
_ZN3scn2v44impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1375|  2.11k|{
 1376|  2.11k|    static_assert(sizeof(DestCharT) == 4);
 1377|       |
 1378|  2.11k|    auto it = src.begin();
 1379|   235k|    while (it != src.end()) {
  ------------------
  |  Branch (1379:12): [True: 233k, False: 2.11k]
  ------------------
 1380|   233k|        auto res = get_next_code_point_valid(
 1381|   233k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1382|   233k|                                                                 src.end()));
 1383|   233k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  | 1104|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1384|   233k|        dest.push_back(res.value);
 1385|   233k|        it = detail::make_string_view_iterator(src, res.iterator);
 1386|   233k|    }
 1387|  2.11k|}
_ZN3scn2v44impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1298|   233k|{
 1299|   233k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1300|       |
 1301|   233k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1302|   233k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  | 1104|   233k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   233k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1303|       |
 1304|   233k|    return {input.begin() + len,
 1305|   233k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1306|   233k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5370|  1.12k|    {
 5371|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  1.12k|        return read_impl(range, specs, value);
 5373|  1.12k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5388|  1.12k|    {
 5389|  1.12k|        SCN_CLANG_PUSH
 5390|  1.12k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  1.12k|        switch (m_type) {
 5393|    360|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 360, False: 768]
  ------------------
 5394|    360|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|    126|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 126, False: 1.00k]
  ------------------
 5397|    126|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|    126|                                                                   value);
 5399|       |
 5400|     58|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 58, False: 1.07k]
  ------------------
 5401|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    302|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 302, False: 826]
  ------------------
 5404|    302|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    302|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      2|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 2, False: 1.12k]
  ------------------
 5409|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      2|                    range, specs.charset_string<SourceCharT>(),
 5411|      2|                    specs.regexp_flags, value);
 5412|       |
 5413|    280|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 280, False: 848]
  ------------------
 5414|    280|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|    280|                    range,
 5416|    280|                    get_unescaped_regex_pattern(
 5417|    280|                        specs.charset_string<SourceCharT>()),
 5418|    280|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 1.12k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  1.12k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  1.12k|        }
 5425|       |
 5426|  1.12k|        SCN_CLANG_POP
 5427|  1.12k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4921|    360|    {
 4922|    360|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|    360|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4855|    544|{
 4856|    544|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    544|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    544|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 232, False: 312]
  ------------------
 4860|    232|        return detail::unexpected_scan_error(
 4861|    232|            scan_error::invalid_scanned_value,
 4862|    232|            "Invalid encoding in scanned string");
 4863|    232|    }
 4864|       |
 4865|    312|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    312|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 312]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    312|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    312|    static_cast<    \
  |  | 1109|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    312|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4942|    126|    {
 4943|    126|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4943:13): [True: 72, False: 54]
  ------------------
 4944|     72|            return read_string_impl(
 4945|     72|                range,
 4946|     72|                read_until_code_unit(
 4947|     72|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4948|     72|                value);
 4949|     72|        }
 4950|     54|        return read_string_impl(
 4951|     54|            range,
 4952|     54|            read_until_code_units(
 4953|     54|                range, specs.fill.template get_code_units<SourceCharT>()),
 4954|     54|            value);
 4955|    126|    }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5044|     58|    {
 5045|     58|        return read_impl(
 5046|     58|            range,
 5047|     58|            [&](const auto& rng) {
 5048|     58|                return read_string_impl(rng, read_all(rng), value);
 5049|     58|            },
 5050|     58|            detail::priority_tag<1>{});
 5051|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5071|     58|    {
 5072|     58|        return read_cb(range);
 5073|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5047|     58|            [&](const auto& rng) {
 5048|     58|                return read_string_impl(rng, read_all(rng), value);
 5049|     58|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5145|    302|    {
 5146|    302|        auto it = read_source_impl(range, {specs});
 5147|    302|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 294]
  |  |  ------------------
  ------------------
 5148|      8|            return unexpected(it.error());
 5149|      8|        }
 5150|       |
 5151|    294|        return read_string_impl(range, *it, value);
 5152|    302|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4855|    294|{
 4856|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    294|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    294|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 106, False: 188]
  ------------------
 4860|    106|        return detail::unexpected_scan_error(
 4861|    106|            scan_error::invalid_scanned_value,
 4862|    106|            "Invalid encoding in scanned string");
 4863|    106|    }
 4864|       |
 4865|    188|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    188|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 188]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    188|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    188|    static_cast<    \
  |  | 1109|    188|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    188|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4988|    282|    {
 4989|    282|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 282, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    282|    }                                                  \
  |  |  |  | 3957|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4990|      0|        return read_string_impl(range, it, value);
 4991|    282|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5370|  1.89k|    {
 5371|  1.89k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  1.89k|        return read_impl(range, specs, value);
 5373|  1.89k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5388|  1.89k|    {
 5389|  1.89k|        SCN_CLANG_PUSH
 5390|  1.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  1.89k|        switch (m_type) {
 5393|    342|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 342, False: 1.54k]
  ------------------
 5394|    342|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 62, False: 1.82k]
  ------------------
 5397|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     62|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 1.89k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  1.33k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 1.33k, False: 558]
  ------------------
 5404|  1.33k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  1.33k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|     32|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 32, False: 1.85k]
  ------------------
 5409|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|     32|                    range, specs.charset_string<SourceCharT>(),
 5411|     32|                    specs.regexp_flags, value);
 5412|       |
 5413|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 122, False: 1.76k]
  ------------------
 5414|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|    122|                    range,
 5416|    122|                    get_unescaped_regex_pattern(
 5417|    122|                        specs.charset_string<SourceCharT>()),
 5418|    122|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 1.89k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  1.89k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  1.89k|        }
 5425|       |
 5426|  1.89k|        SCN_CLANG_POP
 5427|  1.89k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4921|    976|    {
 4922|    976|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|    976|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4855|  1.03k|{
 4856|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 330, False: 708]
  ------------------
 4860|    330|        return detail::unexpected_scan_error(
 4861|    330|            scan_error::invalid_scanned_value,
 4862|    330|            "Invalid encoding in scanned string");
 4863|    330|    }
 4864|       |
 4865|    708|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    708|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 708]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    708|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    708|    static_cast<    \
  |  | 1109|    708|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    708|}
_ZN3scn2v44impl22transcode_if_necessaryIcwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|  1.61k|{
 3160|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|       |        dest.assign(source.view());
 3162|       |    }
 3163|  1.61k|    else {
 3164|  1.61k|        return transcode_impl(source.view(), dest);
 3165|  1.61k|    }
 3166|       |
 3167|      0|    return {};
 3168|  1.61k|}
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4942|     62|    {
 4943|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4943:13): [True: 30, False: 32]
  ------------------
 4944|     30|            return read_string_impl(
 4945|     30|                range,
 4946|     30|                read_until_code_unit(
 4947|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4948|     30|                value);
 4949|     30|        }
 4950|     32|        return read_string_impl(
 4951|     32|            range,
 4952|     32|            read_until_code_units(
 4953|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4954|     32|            value);
 4955|     62|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5145|  1.33k|    {
 5146|  1.33k|        auto it = read_source_impl(range, {specs});
 5147|  1.33k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 400, False: 932]
  |  |  ------------------
  ------------------
 5148|    400|            return unexpected(it.error());
 5149|    400|        }
 5150|       |
 5151|    932|        return read_string_impl(range, *it, value);
 5152|  1.33k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4855|    962|{
 4856|    962|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    962|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    962|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 56, False: 906]
  ------------------
 4860|     56|        return detail::unexpected_scan_error(
 4861|     56|            scan_error::invalid_scanned_value,
 4862|     56|            "Invalid encoding in scanned string");
 4863|     56|    }
 4864|       |
 4865|    906|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    906|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 906]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    906|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    906|    static_cast<    \
  |  | 1109|    906|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    906|}
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4988|    154|    {
 4989|    154|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    154|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    154|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    154|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 124, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    124|    }                                                  \
  |  |  |  | 3957|    154|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4990|     30|        return read_string_impl(range, it, value);
 4991|    154|    }
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5905|  3.83k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|  3.83k|                       std::is_same_v<T, std::wstring_view>) {
 5920|  3.83k|        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|       |                       std::is_same_v<T, std::wstring>) {
 5924|       |        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|  3.83k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5370|  1.12k|    {
 5371|  1.12k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.12k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  1.12k|        return read_impl(range, specs, value);
 5373|  1.12k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5388|  1.12k|    {
 5389|  1.12k|        SCN_CLANG_PUSH
 5390|  1.12k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  1.12k|        switch (m_type) {
 5393|    360|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 360, False: 768]
  ------------------
 5394|    360|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|    126|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 126, False: 1.00k]
  ------------------
 5397|    126|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|    126|                                                                   value);
 5399|       |
 5400|     58|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 58, False: 1.07k]
  ------------------
 5401|     58|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    302|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 302, False: 826]
  ------------------
 5404|    302|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    302|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      2|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 2, False: 1.12k]
  ------------------
 5409|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      2|                    range, specs.charset_string<SourceCharT>(),
 5411|      2|                    specs.regexp_flags, value);
 5412|       |
 5413|    280|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 280, False: 848]
  ------------------
 5414|    280|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|    280|                    range,
 5416|    280|                    get_unescaped_regex_pattern(
 5417|    280|                        specs.charset_string<SourceCharT>()),
 5418|    280|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 1.12k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  1.12k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  1.12k|        }
 5425|       |
 5426|  1.12k|        SCN_CLANG_POP
 5427|  1.12k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4928|    360|    {
 4929|    360|        return read_string_view_impl(range, read_until_classic_space(range),
 4930|    360|                                     value);
 4931|    360|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4874|    544|{
 4875|    544|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|    544|    auto src = [&]() {
 4878|    544|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    544|            return make_contiguous_buffer(
 4880|    544|                ranges::subrange{range.begin().base(), result.base()});
 4881|    544|        }
 4882|    544|        else {
 4883|    544|            return make_contiguous_buffer(
 4884|    544|                ranges::subrange{range.begin(), result});
 4885|    544|        }
 4886|    544|    }();
 4887|    544|    using src_type = decltype(src);
 4888|       |
 4889|    544|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|    544|    else {
 4902|    544|        const auto view = src.view();
 4903|    544|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|    544|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 232, False: 312]
  ------------------
 4906|    232|            return detail::unexpected_scan_error(
 4907|    232|                scan_error::invalid_scanned_value,
 4908|    232|                "Invalid encoding in scanned string_view");
 4909|    232|        }
 4910|       |
 4911|    312|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    312|    static_cast<    \
  |  | 1109|    312|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|    544|    }
 4913|    544|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4877|    544|    auto src = [&]() {
 4878|    544|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    544|            return make_contiguous_buffer(
 4880|    544|                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|       |        else {
 4883|       |            return make_contiguous_buffer(
 4884|       |                ranges::subrange{range.begin(), result});
 4885|       |        }
 4886|    544|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4962|    126|    {
 4963|    126|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4963:13): [True: 72, False: 54]
  ------------------
 4964|     72|            return read_string_view_impl(
 4965|     72|                range,
 4966|     72|                read_until_code_unit(
 4967|     72|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4968|     72|                value);
 4969|     72|        }
 4970|     54|        return read_string_view_impl(
 4971|     54|            range,
 4972|     54|            read_until_code_units(
 4973|     54|                range, specs.fill.template get_code_units<SourceCharT>()),
 4974|     54|            value);
 4975|    126|    }
_ZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 5056|     58|    {
 5057|     58|        return read_impl(
 5058|     58|            range,
 5059|     58|            [&](const auto& rng) {
 5060|     58|                return read_string_view_impl(rng, read_all(rng), value);
 5061|     58|            },
 5062|     58|            detail::priority_tag<1>{});
 5063|     58|    }
_ZN3scn2v44impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5071|     58|    {
 5072|     58|        return read_cb(range);
 5073|     58|    }
_ZZN3scn2v44impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5059|     58|            [&](const auto& rng) {
 5060|     58|                return read_string_view_impl(rng, read_all(rng), value);
 5061|     58|            },
_ZN3scn2v44impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5159|    302|    {
 5160|    302|        auto it = read_source_impl(range, {specs});
 5161|    302|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 294]
  |  |  ------------------
  ------------------
 5162|      8|            return unexpected(it.error());
 5163|      8|        }
 5164|       |
 5165|    294|        return read_string_view_impl(range, *it, value);
 5166|    302|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4874|    294|{
 4875|    294|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|    294|    auto src = [&]() {
 4878|    294|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    294|            return make_contiguous_buffer(
 4880|    294|                ranges::subrange{range.begin().base(), result.base()});
 4881|    294|        }
 4882|    294|        else {
 4883|    294|            return make_contiguous_buffer(
 4884|    294|                ranges::subrange{range.begin(), result});
 4885|    294|        }
 4886|    294|    }();
 4887|    294|    using src_type = decltype(src);
 4888|       |
 4889|    294|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|    294|    else {
 4902|    294|        const auto view = src.view();
 4903|    294|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|    294|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 106, False: 188]
  ------------------
 4906|    106|            return detail::unexpected_scan_error(
 4907|    106|                scan_error::invalid_scanned_value,
 4908|    106|                "Invalid encoding in scanned string_view");
 4909|    106|        }
 4910|       |
 4911|    188|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    188|    static_cast<    \
  |  | 1109|    188|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|    294|    }
 4913|    294|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4877|    294|    auto src = [&]() {
 4878|    294|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    294|            return make_contiguous_buffer(
 4880|    294|                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|       |        else {
 4883|       |            return make_contiguous_buffer(
 4884|       |                ranges::subrange{range.begin(), result});
 4885|       |        }
 4886|    294|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4999|    282|    {
 5000|    282|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 282, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    282|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    282|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    282|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    282|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    282|    }                                                  \
  |  |  |  | 3957|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5001|      0|        return read_string_view_impl(range, it, value);
 5002|    282|    }
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5370|  1.89k|    {
 5371|  1.89k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  1.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  1.89k|        return read_impl(range, specs, value);
 5373|  1.89k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5388|  1.89k|    {
 5389|  1.89k|        SCN_CLANG_PUSH
 5390|  1.89k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  1.89k|        switch (m_type) {
 5393|    342|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 342, False: 1.54k]
  ------------------
 5394|    342|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     62|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 62, False: 1.82k]
  ------------------
 5397|     62|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     62|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 1.89k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  1.33k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 1.33k, False: 558]
  ------------------
 5404|  1.33k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  1.33k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|     32|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 32, False: 1.85k]
  ------------------
 5409|     32|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|     32|                    range, specs.charset_string<SourceCharT>(),
 5411|     32|                    specs.regexp_flags, value);
 5412|       |
 5413|    122|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 122, False: 1.76k]
  ------------------
 5414|    122|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|    122|                    range,
 5416|    122|                    get_unescaped_regex_pattern(
 5417|    122|                        specs.charset_string<SourceCharT>()),
 5418|    122|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 1.89k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  1.89k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  1.89k|        }
 5425|       |
 5426|  1.89k|        SCN_CLANG_POP
 5427|  1.89k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4928|    976|    {
 4929|    976|        return read_string_view_impl(range, read_until_classic_space(range),
 4930|    976|                                     value);
 4931|    976|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4874|  1.03k|{
 4875|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|  1.03k|    auto src = [&]() {
 4878|  1.03k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|  1.03k|            return make_contiguous_buffer(
 4880|  1.03k|                ranges::subrange{range.begin().base(), result.base()});
 4881|  1.03k|        }
 4882|  1.03k|        else {
 4883|  1.03k|            return make_contiguous_buffer(
 4884|  1.03k|                ranges::subrange{range.begin(), result});
 4885|  1.03k|        }
 4886|  1.03k|    }();
 4887|  1.03k|    using src_type = decltype(src);
 4888|       |
 4889|  1.03k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|  1.03k|    else {
 4902|  1.03k|        const auto view = src.view();
 4903|  1.03k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|  1.03k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 330, False: 708]
  ------------------
 4906|    330|            return detail::unexpected_scan_error(
 4907|    330|                scan_error::invalid_scanned_value,
 4908|    330|                "Invalid encoding in scanned string_view");
 4909|    330|        }
 4910|       |
 4911|    708|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    708|    static_cast<    \
  |  | 1109|    708|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|  1.03k|    }
 4913|  1.03k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4877|  1.03k|    auto src = [&]() {
 4878|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|       |            return make_contiguous_buffer(
 4880|       |                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|  1.03k|        else {
 4883|  1.03k|            return make_contiguous_buffer(
 4884|  1.03k|                ranges::subrange{range.begin(), result});
 4885|  1.03k|        }
 4886|  1.03k|    }();
_ZN3scn2v44impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4962|     62|    {
 4963|     62|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4963:13): [True: 30, False: 32]
  ------------------
 4964|     30|            return read_string_view_impl(
 4965|     30|                range,
 4966|     30|                read_until_code_unit(
 4967|     30|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4968|     30|                value);
 4969|     30|        }
 4970|     32|        return read_string_view_impl(
 4971|     32|            range,
 4972|     32|            read_until_code_units(
 4973|     32|                range, specs.fill.template get_code_units<SourceCharT>()),
 4974|     32|            value);
 4975|     62|    }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5159|  1.33k|    {
 5160|  1.33k|        auto it = read_source_impl(range, {specs});
 5161|  1.33k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 400, False: 932]
  |  |  ------------------
  ------------------
 5162|    400|            return unexpected(it.error());
 5163|    400|        }
 5164|       |
 5165|    932|        return read_string_view_impl(range, *it, value);
 5166|  1.33k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4874|    962|{
 4875|    962|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|    962|    auto src = [&]() {
 4878|    962|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    962|            return make_contiguous_buffer(
 4880|    962|                ranges::subrange{range.begin().base(), result.base()});
 4881|    962|        }
 4882|    962|        else {
 4883|    962|            return make_contiguous_buffer(
 4884|    962|                ranges::subrange{range.begin(), result});
 4885|    962|        }
 4886|    962|    }();
 4887|    962|    using src_type = decltype(src);
 4888|       |
 4889|    962|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|    962|    else {
 4902|    962|        const auto view = src.view();
 4903|    962|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|    962|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 56, False: 906]
  ------------------
 4906|     56|            return detail::unexpected_scan_error(
 4907|     56|                scan_error::invalid_scanned_value,
 4908|     56|                "Invalid encoding in scanned string_view");
 4909|     56|        }
 4910|       |
 4911|    906|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    906|    static_cast<    \
  |  | 1109|    906|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|    962|    }
 4913|    962|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4877|    962|    auto src = [&]() {
 4878|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|       |            return make_contiguous_buffer(
 4880|       |                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|    962|        else {
 4883|    962|            return make_contiguous_buffer(
 4884|    962|                ranges::subrange{range.begin(), result});
 4885|    962|        }
 4886|    962|    }();
_ZN3scn2v44impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4999|    154|    {
 5000|    154|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3958|    154|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    154|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    154|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    154|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 124, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    124|    }                                                  \
  |  |  |  | 3957|    154|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5001|     30|        return read_string_view_impl(range, it, value);
 5002|    154|    }
_ZN3scn2v44impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5718|  1.43k|    {
 5719|  1.43k|        reader_error_handler eh{};
 5720|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5721|       |            detail::check_code_point_type_specs(specs, eh);
 5722|       |        }
 5723|  1.43k|        else {
 5724|  1.43k|            detail::check_char_type_specs(specs, eh);
 5725|  1.43k|        }
 5726|  1.43k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 732, False: 706]
  |  |  ------------------
  ------------------
 5727|    732|            return detail::unexpected_scan_error(
 5728|    732|                scan_error::invalid_format_string, eh.m_msg);
 5729|    732|        }
 5730|    706|        return {};
 5731|  1.43k|    }
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  15.3k|    {
  763|  15.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  15.3k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.13k|        : m_fptr([](storage fn,
  743|  3.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.13k|              cvref<T> obj = *get<T>(fn);
  745|  3.13k|              if constexpr (std::is_void_v<R>) {
  746|  3.13k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.13k|              }
  748|  3.13k|              else {
  749|  3.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.13k|              }
  751|  3.13k|          }),
  752|  3.13k|          m_storage(std::addressof(f))
  753|  3.13k|    {
  754|  3.13k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  7.13k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.13k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.13k|              else {
  749|  7.13k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.13k|              }
  751|  7.13k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  7.13k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  7.13k|        else if constexpr (std::is_object_v<T>) {
  688|  7.13k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.13k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.13k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.13k|        {
  662|  3.13k|        }
_ZNK3scn2v44impl16char_reader_baseIwE19skip_ws_before_readEv:
 5713|  1.90k|    {
 5714|  1.90k|        return false;
 5715|  1.90k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|    140|    {
 1879|    140|        auto stdloc = loc.get<std::locale>();
 1880|    140|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|    140|        grouping = numpunct.grouping();
 1882|    140|        thousands_sep =
 1883|    140|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 140]
  ------------------
 1884|    140|        decimal_point = numpunct.decimal_point();
 1885|    140|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|    168|{
 1816|    168|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 168, False: 0]
  ------------------
 1817|    168|        return std::use_facet<Facet>(stdloc);
 1818|    168|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|    168|}
_ZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2481|  3.67k|{
 2482|  3.67k|    size_t count{0};
 2483|  3.67k|    for_each_code_point(input, [&count](char32_t cp) {
 2484|  3.67k|        count += calculate_text_width_for_fmt_v10(cp);
 2485|  3.67k|    });
 2486|  3.67k|    return count;
 2487|  3.67k|}
_ZN3scn2v44impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1544|  3.67k|{
 1545|       |    // TODO: Could be optimized by being eager
 1546|  3.67k|    auto it = input.begin();
 1547|  15.3k|    while (it != input.end()) {
  ------------------
  |  Branch (1547:12): [True: 11.6k, False: 3.67k]
  ------------------
 1548|  11.6k|        auto res = get_next_code_point(
 1549|  11.6k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1550|  11.6k|        cb(res.value);
 1551|  11.6k|        it = detail::make_string_view_iterator(input, res.iterator);
 1552|  11.6k|    }
 1553|  3.67k|}
_ZN3scn2v44impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   488k|{
 1279|   488k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   488k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   488k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   488k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 488k]
  |  |  ------------------
  ------------------
 1283|      0|        return {get_start_for_next_code_point(input),
 1284|      0|                detail::invalid_code_point};
 1285|      0|    }
 1286|   488k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 488k]
  |  |  ------------------
  ------------------
 1287|      0|        return {input.end(), detail::invalid_code_point};
 1288|      0|    }
 1289|       |
 1290|   488k|    return {input.begin() + len,
 1291|   488k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   488k|}
_ZN3scn2v44impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  3.67k|        : m_fptr([](storage fn,
  743|  3.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.67k|              cvref<T> obj = *get<T>(fn);
  745|  3.67k|              if constexpr (std::is_void_v<R>) {
  746|  3.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.67k|              }
  748|  3.67k|              else {
  749|  3.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.67k|              }
  751|  3.67k|          }),
  752|  3.67k|          m_storage(std::addressof(f))
  753|  3.67k|    {
  754|  3.67k|    }
_ZZN3scn2v44impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  11.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.6k|              cvref<T> obj = *get<T>(fn);
  745|  11.6k|              if constexpr (std::is_void_v<R>) {
  746|  11.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  11.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  11.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.6k|        else if constexpr (std::is_object_v<T>) {
  688|  11.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.6k|    }
_ZZN3scn2v44impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2483|  11.6k|    for_each_code_point(input, [&count](char32_t cp) {
 2484|  11.6k|        count += calculate_text_width_for_fmt_v10(cp);
 2485|  11.6k|    });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  3.67k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.67k|        {
  662|  3.67k|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.71k|    {
 1681|  3.71k|        return m_view;
 1682|  3.71k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  3.62k|    ~contiguous_range_factory() = default;
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2553|  4.26k|    {
 2554|  4.26k|        return m_multibyte_left;
 2555|  4.26k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E22is_current_double_wideEv:
 2558|  3.45k|    {
 2559|  3.45k|        assert(count() != 0 || multibyte_left() != 0);
 2560|  3.45k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2561|  3.45k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2785|  50.3k|    {
 2786|  50.3k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1039|  50.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 50.3k]
  |  |  ------------------
  ------------------
 2787|      0|            return 0;
 2788|      0|        }
 2789|       |
 2790|  50.3k|        if (cplen == 1) {
  ------------------
  |  Branch (2790:13): [True: 50.3k, False: 0]
  ------------------
 2791|  50.3k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  50.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  50.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2792|  50.3k|            auto cp = static_cast<char32_t>(*m_current);
 2793|  50.3k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2794|  50.3k|        }
 2795|       |
 2796|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2797|      0|                                           cplen);
 2798|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2799|      0|            return 0;
 2800|      0|        }
 2801|       |
 2802|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2803|      0|        return static_cast<difference_type>(
 2804|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2805|      0|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  6.46k|{
 1956|  6.46k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  6.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  6.46k|    if constexpr (ranges::sized_range<Range>) {
 1959|  6.46k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  6.46k|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 186, False: 6.27k]
  ------------------
 1961|    186|            return unexpected(eof_error::eof);
 1962|    186|        }
 1963|       |
 1964|  6.27k|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  6.46k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2779|  50.3k|    {
 2780|  50.3k|        return static_cast<difference_type>(
 2781|  50.3k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2782|  50.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2564|  64.7k|    {
 2565|  64.7k|        return *m_current;
 2566|  64.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2573|  46.9k|    {
 2574|  46.9k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  46.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2575|  46.9k|        _increment_current();
 2576|  46.9k|        return *this;
 2577|  46.9k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2808|  46.9k|    {
 2809|  46.9k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2809:13): [True: 46.9k, False: 0]
  ------------------
 2810|  46.9k|            auto cplen = _get_cp_length_at_current();
 2811|  46.9k|            m_multibyte_left = cplen - 1;
 2812|  46.9k|            m_count -= _get_width_at_current_cp_start(cplen);
 2813|  46.9k|        }
 2814|      0|        else {
 2815|      0|            --m_multibyte_left;
 2816|      0|        }
 2817|       |
 2818|  46.9k|        ++m_current;
 2819|  46.9k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SE_EENS1_20incrementable_traitsISE_E15difference_typeEE4typeESE_SF_:
  107|     22|    {
  108|     22|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|     22|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISF_E15difference_typeEE4typeESF_SE_NS0_6detail12priority_tagILm0EEE:
   93|     22|    {
   94|     22|        iter_difference_t<I> counter{0};
   95|     44|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 22, False: 22]
  ------------------
   96|     22|            ++i;
   97|     22|            ++counter;
   98|     22|        }
   99|     22|        return counter;
  100|     22|    }
_ZN3scn2v44impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2669|  16.6k|    {
 2670|  16.6k|        return !(a == b);
 2671|  16.6k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2661|  18.1k|    {
 2662|  18.1k|        return a.m_current == b.m_current;
 2663|  18.1k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2568|  6.10k|    {
 2569|  6.10k|        return *m_current;
 2570|  6.10k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_NS1_20incrementable_traitsISD_E15difference_typeE:
  303|     66|    {
  304|     66|        ranges::advance(x, n);
  305|     66|        return x;
  306|     66|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|     66|    {
  268|     66|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|     66|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|     66|    {
  161|     66|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|     66|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 66, False: 0]
  ------------------
  164|    132|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 66, False: 66]
  ------------------
  165|     66|                ++i;
  166|     66|            }
  167|     66|        }
  168|      0|        else {
  169|      0|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 0]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|      0|        }
  173|     66|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1988|  16.6k|    {
 1989|  16.6k|        return !codepoint.empty();
 1990|  16.6k|    }
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1781|    960|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|    960|    else {
 1788|    960|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|    960|    }
 1790|    960|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1635|    960|    {
 1636|    960|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|    960|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|    960|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1719|    980|    {
 1720|    980|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|    980|        else {
 1753|    980|            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|    980|            if constexpr (ranges::common_range<Range>) {
 1758|    980|                std::copy(ranges::begin(range), ranges::end(range),
 1759|    980|                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|    980|            m_view = string_view_type{str};
 1768|    980|        }
 1769|    980|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2513|  17.4k|        : m_current(x), m_end(s), m_count(n)
 2514|  17.4k|    {
 2515|  17.4k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2545|  66.9k|    {
 2546|  66.9k|        return m_current;
 2547|  66.9k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2248|  10.0k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  10.0k|    else {
 2258|  10.0k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  10.0k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  10.0k|            return detail::is_cp_space(cp);
 2271|  10.0k|        });
 2272|  10.0k|    }
 2273|  10.0k|}
_ZN3scn2v44impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2213|  10.0k|{
 2214|  10.0k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  10.0k|}
_ZN3scn2v44impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2192|  10.0k|{
 2193|  10.0k|    auto it = range.begin();
 2194|  22.2k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 16.9k, False: 5.34k]
  ------------------
 2195|  16.9k|        const auto val =
 2196|  16.9k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  16.9k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  16.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 16.9k, False: 0]
  |  |  ------------------
  ------------------
 2198|  16.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  16.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  16.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 4.66k, False: 12.2k]
  ------------------
 2201|  4.66k|                return it;
 2202|  4.66k|            }
 2203|  16.9k|        }
 2204|  12.2k|        it = val.iterator;
 2205|  12.2k|    }
 2206|       |
 2207|  5.34k|    return it;
 2208|  10.0k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  87.5k|{
 1998|  87.5k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  87.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  87.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  87.5k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  87.5k|    auto it = range.begin();
 2002|  87.5k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  87.5k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 87.5k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  87.5k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 87.5k, False: 0]
  ------------------
 2011|  87.5k|        ++it;
 2012|  87.5k|        return {it, string_type(1, *range.begin())};
 2013|  87.5k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  87.5k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   110k|{
  945|   110k|    return is_range_eof(r.begin(), r.end());
  946|   110k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   588k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   588k|    {
  938|   588k|        return begin == end;
  939|   588k|    }
  940|   588k|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.06k|    {
  190|  1.06k|        i = std::move(bound);
  191|  1.06k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  87.5k|    {
 1989|  87.5k|        return !codepoint.empty();
 1990|  87.5k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  10.0k|        : m_fptr([](storage fn,
  743|  10.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.0k|              cvref<T> obj = *get<T>(fn);
  745|  10.0k|              if constexpr (std::is_void_v<R>) {
  746|  10.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.0k|              }
  748|  10.0k|              else {
  749|  10.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.0k|              }
  751|  10.0k|          }),
  752|  10.0k|          m_storage(std::addressof(f))
  753|  10.0k|    {
  754|  10.0k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  16.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.9k|              else {
  749|  16.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.9k|              }
  751|  16.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  16.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.9k|        else if constexpr (std::is_object_v<T>) {
  688|  16.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.9k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2269|  16.9k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  16.9k|            return detail::is_cp_space(cp);
 2271|  16.9k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  10.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  10.0k|        {
  662|  10.0k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  22.9k|{
  951|  22.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  22.9k|    return eof_error::good;
  955|  22.9k|}
_ZNK3scn2v44impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2974|  6.75k|    {
 2975|  6.75k|        return take_width_view{r, n};
 2976|  6.75k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2942|  6.75k|        : m_base(base), m_count(count)
 2943|  6.75k|    {
 2944|  6.75k|    }
_ZN3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2854|  6.75k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5794|    250|    {
 5795|    250|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5795:13): [True: 206, False: 44]
  ------------------
 5796|    250|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5796:13): [True: 0, False: 44]
  ------------------
 5797|    206|            return read_default(range, value, loc);
 5798|    206|        }
 5799|       |
 5800|     44|        reader_impl_for_int<CharT> reader{};
 5801|     44|        using integer_type =
 5802|     44|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5803|     44|        integer_type tmp_value{};
 5804|     44|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5805|     44|        value = static_cast<integer_type>(value);
 5806|     44|        return ret;
 5807|    250|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5778|    206|    {
 5779|    206|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    206|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5780|       |        if constexpr (std::is_same_v<CharT, char>) {
 5781|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5782|       |        }
 5783|    206|        else {
 5784|    206|            return code_unit_reader<wchar_t>{}.read(range, value);
 5785|    206|        }
 5786|    206|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5658|    206|    {
 5659|    206|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3958|    206|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5660|    206|        ch = *range.begin();
 5661|    206|        return it;
 5662|    206|    }
_ZN3scn2v44impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1944|  1.71k|{
 1945|  1.71k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  1.71k|    return ranges::next(range.begin());
 1950|  1.71k|}
_ZN3scn2v44impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  950|  1.71k|{
  951|  1.71k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.71k]
  |  |  ------------------
  ------------------
  952|      0|        return eof_error::eof;
  953|      0|    }
  954|  1.71k|    return eof_error::good;
  955|  1.71k|}
_ZN3scn2v44impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  944|  1.71k|{
  945|  1.71k|    return is_range_eof(r.begin(), r.end());
  946|  1.71k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  928|  18.4k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  18.4k|    {
  938|  18.4k|        return begin == end;
  939|  18.4k|    }
  940|  18.4k|}
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2910|  61.9k|        {
 2911|  61.9k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2911:21): [True: 818, False: 61.1k]
  |  Branch (2911:39): [True: 818, False: 0]
  ------------------
 2912|  61.9k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2912:20): [True: 546, False: 60.6k]
  ------------------
 2913|  61.9k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2913:21): [True: 3.45k, False: 57.1k]
  |  Branch (2913:39): [True: 3.45k, False: 0]
  ------------------
 2914|  60.6k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2914:21): [True: 54, False: 3.39k]
  ------------------
 2915|  61.9k|        }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2958|  35.1k|    {
 2959|  35.1k|        return sentinel<true>{m_base.get().end()};
 2960|  35.1k|    }
_ZNK3scn2v44impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2857|  70.0k|    {
 2858|  70.0k|        return view;
 2859|  70.0k|    }
_ZN3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2891|  35.1k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1108|  35.1k|    static_cast<    \
  |  | 1109|  35.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.80k|    {
  296|  1.80k|        ++x;
  297|  1.80k|        return x;
  298|  1.80k|    }
_ZNK3scn2v44impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2952|  17.4k|    {
 2953|  17.4k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2954|  17.4k|                                      m_count};
 2955|  17.4k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3629|    302|    {
 3630|    302|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    302|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    302|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 302]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|      0|            else {
 3641|      0|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 0]
  ------------------
 3642|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|      0|            }
 3648|      0|        }
 3649|       |
 3650|    302|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 12, False: 290]
  ------------------
 3651|     12|            value = T{0};
 3652|     12|            return std::next(prefix_result.iterator);
 3653|     12|        }
 3654|       |
 3655|    290|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    290|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 264, False: 26]
  |  |  ------------------
  ------------------
 3656|    264|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 248, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    248|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    248|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    248|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    248|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    248|    }                                                  \
  |  |  |  | 3957|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|     16|                    parse_integer_digits_without_thsep(
 3658|     16|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|     16|                        prefix_result.parsed_base));
 3660|       |
 3661|     16|            auto buf = make_contiguous_buffer(
 3662|     16|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|     16|            SCN_TRY(result_it,
  ------------------
  |  | 3958|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|     16|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|     16|                                        prefix_result.parsed_base));
 3666|       |
 3667|     16|            return ranges::next(
 3668|     16|                prefix_result.iterator,
 3669|     16|                ranges::distance(buf.view().begin(), result_it));
 3670|     16|        }
 3671|       |
 3672|     26|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|     26|            localized_number_formatting_options<CharT>{loc};
 3677|     26|#endif
 3678|       |
 3679|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      4|                parse_integer_digits_with_thsep(
 3681|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      4|                    prefix_result.parsed_base, locale_options));
 3683|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      4|            parse_digits_result;
 3685|       |
 3686|      4|        auto nothsep_source_view =
 3687|      4|            std::basic_string_view<CharT>{nothsep_source};
 3688|      4|        SCN_TRY(
  ------------------
  |  | 3958|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      4|            nothsep_source_it,
 3690|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      4|                                prefix_result.parsed_base));
 3692|       |
 3693|      4|        return ranges::next(
 3694|      4|            prefix_result.iterator,
 3695|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      4|                ranges::ssize(thsep_indices));
 3697|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3408|    764|{
 3409|    764|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|    764|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    764|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    764|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    764|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 764]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    764|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    764|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|    764|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|    764|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|    764|        parse_integer_base_prefix(
 3414|    764|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|    764|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 18, False: 746]
  ------------------
 3417|     18|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 6, False: 12]
  |  Branch (3417:13): [True: 18, False: 0]
  ------------------
 3418|     18|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 12, False: 0]
  ------------------
 3419|     18|            digits_begin_it = base_prefix_begin_it;
 3420|     18|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|     18|    }
 3425|    746|    else {
 3426|    746|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 746]
  |  Branch (3426:13): [True: 700, False: 46]
  ------------------
 3427|    746|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 700, False: 46]
  ------------------
 3428|    700|            digits_begin_it = base_prefix_begin_it;
 3429|    700|        }
 3430|    746|    }
 3431|       |
 3432|    764|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 764, False: 0]
  ------------------
 3433|    764|        sign = sign_type::plus_sign;
 3434|    764|    }
 3435|    764|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|    764|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|    764|}
_ZN3scn2v44impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3289|  1.01k|{
 3290|  1.01k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  1.01k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 1.01k, False: 0]
  ------------------
 3292|  1.01k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 1.01k, False: 0]
  ------------------
 3293|  1.01k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  1.01k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|  1.01k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2404|  1.01k|{
 2405|  1.01k|    auto it = read_code_unit(range);
 2406|  1.01k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|  2.02k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 2.02k, False: 1.01k]
  ------------------
 2411|  2.02k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 2.02k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  2.02k|    }
 2415|       |
 2416|  1.01k|    return unexpected(parse_error::error);
 2417|  1.01k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3375|    764|{
 3376|    764|    switch (base) {
 3377|      8|        case 2:
  ------------------
  |  Branch (3377:9): [True: 8, False: 756]
  ------------------
 3378|       |            // allow 0b/0B
 3379|      8|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|      8|                    false};
 3381|       |
 3382|     30|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 30, False: 734]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|     30|            bool zero_parsed = false;
 3385|     30|            auto it = apply_opt(
 3386|     30|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|     30|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|    226|        case 16:
  ------------------
  |  Branch (3390:9): [True: 226, False: 538]
  ------------------
 3391|       |            // allow 0x/0X
 3392|    226|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|    226|                    false};
 3394|       |
 3395|     38|        case 0:
  ------------------
  |  Branch (3395:9): [True: 38, False: 726]
  ------------------
 3396|       |            // detect base
 3397|     38|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|    462|        default:
  ------------------
  |  Branch (3399:9): [True: 462, False: 302]
  ------------------
 3400|       |            // no base prefix allowed
 3401|    462|            return {range.begin(), base, false};
 3402|    764|    }
 3403|    764|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2423|    264|{
 2424|    264|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 258, False: 6]
  ------------------
 2425|    258|        return range.begin();
 2426|    258|    }
 2427|      6|    return *result;
 2428|    264|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3326|     46|{
 3327|     46|    return read_matching_string_classic_nocase(range, "0b");
 3328|     46|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2363|  1.10k|{
 2364|  1.10k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.10k|    else {
 2377|  1.10k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.10k|            if (ch < 'A' || ch > 'Z') {
 2379|  1.10k|                return ch;
 2380|  1.10k|            }
 2381|  1.10k|            return static_cast<char_type>(ch +
 2382|  1.10k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.10k|        };
 2384|       |
 2385|  1.10k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.10k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.10k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.10k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 208, False: 896]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    208|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    208|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    208|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    208|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    208|    }                                                  \
  |  |  |  | 3957|  1.10k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    896|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|    896|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|    896|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|    896|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|    896|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 896, False: 0]
  |  |  ------------------
  ------------------
 2390|    896|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|    896|                    return ascii_tolower(a) ==
 2392|    896|                           static_cast<detail::char_t<Range>>(b);
 2393|    896|                }))) {
 2394|    896|            return unexpected(parse_error::error);
 2395|    896|        }
 2396|       |
 2397|      0|        return it;
 2398|    896|    }
 2399|  1.10k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1955|  1.10k|{
 1956|  1.10k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.10k|    else {
 1967|  1.10k|        auto it = range.begin();
 1968|  1.10k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 1.10k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  3.54k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 2.65k, False: 896]
  ------------------
 1973|  2.65k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 208, False: 2.44k]
  ------------------
 1974|    208|                return unexpected(eof_error::eof);
 1975|    208|            }
 1976|  2.65k|        }
 1977|       |
 1978|    896|        return it;
 1979|  1.10k|    }
 1980|  1.10k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1095|  1.10k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  1.10k|    else {
 1116|  1.10k|        return 0;
 1117|  1.10k|    }
 1118|  1.10k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2377|    938|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|    938|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 132, False: 806]
  |  Branch (2378:29): [True: 806, False: 0]
  ------------------
 2379|    938|                return ch;
 2380|    938|            }
 2381|      0|            return static_cast<char_type>(ch +
 2382|      0|                                          static_cast<char_type>('a' - 'A'));
 2383|    938|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3340|     68|{
 3341|     68|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 68]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|     68|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 18, False: 50]
  ------------------
 3346|     18|        zero_parsed = true;
 3347|     18|        return *r;
 3348|     18|    }
 3349|       |
 3350|     50|    return unexpected(parse_error::error);
 3351|     68|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2278|     90|{
 2279|     90|    auto it = read_code_unit(range);
 2280|     90|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8, False: 82]
  |  |  ------------------
  ------------------
 2281|      8|        return unexpected(make_eof_parse_error(it.error()));
 2282|      8|    }
 2283|       |
 2284|     82|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|     82|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 64, False: 18]
  |  |  ------------------
  ------------------
 2285|     82|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|     64|        return unexpected(parse_error::error);
 2287|     64|    }
 2288|       |
 2289|     18|    return *it;
 2290|     82|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1944|    110|{
 1945|    110|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
 1946|     14|        return unexpected(e);
 1947|     14|    }
 1948|       |
 1949|     96|    return ranges::next(range.begin());
 1950|    110|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|    110|{
  951|    110|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 96]
  |  |  ------------------
  ------------------
  952|     14|        return eof_error::eof;
  953|     14|    }
  954|     96|    return eof_error::good;
  955|    110|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  944|  16.7k|{
  945|  16.7k|    return is_range_eof(r.begin(), r.end());
  946|  16.7k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3333|    264|{
 3334|    264|    return read_matching_string_classic_nocase(range, "0x");
 3335|    264|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3356|     38|{
 3357|     38|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 38]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|     38|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 38]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|     38|    {
 3364|     38|        bool zero_parsed{false};
 3365|     38|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 12, False: 26]
  ------------------
 3366|     12|            return {*r, 8, zero_parsed};
 3367|     12|        }
 3368|     38|    }
 3369|     26|    return {range.begin(), 10, false};
 3370|     38|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3442|    694|{
 3443|    694|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|       |    if constexpr (ranges::contiguous_range<Range>) {
 3446|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3447|       |            return detail::unexpected_scan_error(
 3448|       |                scan_error::invalid_scanned_value,
 3449|       |                "Failed to parse integer: No digits found");
 3450|       |        }
 3451|       |        return range.end();
 3452|       |    }
 3453|    694|    else {
 3454|    694|        return read_while1_code_unit(range,
 3455|    694|                                     [&](char_type ch) noexcept {
 3456|    694|                                         return char_to_int(ch) < base;
 3457|    694|                                     })
 3458|    694|            .transform_error(map_parse_error_to_scan_error(
 3459|    694|                scan_error::invalid_scanned_value,
 3460|    694|                "Failed to parse integer: No digits found"));
 3461|    694|    }
 3462|    694|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 2127|    962|{
 2128|    962|    auto it = read_while_code_unit(range, pred);
 2129|    962|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 902, False: 60]
  ------------------
 2130|    902|        return unexpected(parse_error::error);
 2131|    902|    }
 2132|     60|    return it;
 2133|    962|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2107|    962|{
 2108|    962|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    962|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 2074|    962|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    962|    else {
 2079|    962|        auto first = range.begin();
 2080|  1.02k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 992, False: 30]
  ------------------
 2081|    992|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 932, False: 60]
  ------------------
 2082|    932|                return first;
 2083|    932|            }
 2084|    992|        }
 2085|     30|        return first;
 2086|    962|    }
 2087|    962|}
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2923|  31.2k|        {
 2924|  31.2k|            return !(y == x);
 2925|  31.2k|        }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    694|        : m_fptr([](storage fn,
  743|    694|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    694|              cvref<T> obj = *get<T>(fn);
  745|    694|              if constexpr (std::is_void_v<R>) {
  746|    694|                  obj(static_cast<decltype(args)>(args)...);
  747|    694|              }
  748|    694|              else {
  749|    694|                  return obj(static_cast<decltype(args)>(args)...);
  750|    694|              }
  751|    694|          }),
  752|    694|          m_storage(std::addressof(f))
  753|    694|    {
  754|    694|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    718|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    718|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    718|              else {
  749|    718|                  return obj(static_cast<decltype(args)>(args)...);
  750|    718|              }
  751|    718|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    718|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    718|        else if constexpr (std::is_object_v<T>) {
  688|    718|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    718|    }
_ZZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3455|    718|                                     [&](char_type ch) noexcept {
 3456|    718|                                         return char_to_int(ch) < base;
 3457|    718|                                     })
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    694|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    694|        {
  662|    694|        }
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3472|     52|{
 3473|     52|    std::basic_string<CharT> output;
 3474|     52|    std::string thsep_indices;
 3475|     52|    auto it = range.begin();
 3476|     52|    bool digit_matched = false;
 3477|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 56, False: 4]
  ------------------
 3478|     56|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 0, False: 56]
  ------------------
 3479|      0|            thsep_indices.push_back(
 3480|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|      0|        }
 3482|     56|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 48, False: 8]
  ------------------
 3483|     48|            break;
 3484|     48|        }
 3485|      8|        else {
 3486|      8|            output.push_back(*it);
 3487|      8|            digit_matched = true;
 3488|      8|        }
 3489|     56|    }
 3490|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44, False: 8]
  |  |  ------------------
  ------------------
 3491|     44|        return detail::unexpected_scan_error(
 3492|     44|            scan_error::invalid_scanned_value,
 3493|     44|            "Failed to parse integer: No digits found");
 3494|     44|    }
 3495|      8|    return std::tuple{it, output, thsep_indices};
 3496|     52|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2549|   127k|    {
 2550|   127k|        return m_count;
 2551|   127k|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5794|    454|    {
 5795|    454|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5795:13): [True: 402, False: 52]
  ------------------
 5796|    454|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5796:13): [True: 0, False: 52]
  ------------------
 5797|    402|            return read_default(range, value, loc);
 5798|    402|        }
 5799|       |
 5800|     52|        reader_impl_for_int<CharT> reader{};
 5801|     52|        using integer_type =
 5802|     52|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5803|     52|        integer_type tmp_value{};
 5804|     52|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5805|     52|        value = static_cast<integer_type>(value);
 5806|     52|        return ret;
 5807|    454|    }
_ZN3scn2v44impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5778|    974|    {
 5779|    974|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    974|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5780|       |        if constexpr (std::is_same_v<CharT, char>) {
 5781|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5782|       |        }
 5783|    974|        else {
 5784|    974|            return code_unit_reader<wchar_t>{}.read(range, value);
 5785|    974|        }
 5786|    974|    }
_ZN3scn2v44impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5658|    974|    {
 5659|    974|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3958|    974|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    974|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    974|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 974]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    974|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    974|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5660|    974|        ch = *range.begin();
 5661|    974|        return it;
 5662|    974|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  7.33k|{
 1945|  7.33k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  7.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.33k]
  |  |  ------------------
  ------------------
 1946|      0|        return unexpected(e);
 1947|      0|    }
 1948|       |
 1949|  7.33k|    return ranges::next(range.begin());
 1950|  7.33k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   428k|    {
  296|   428k|        ++x;
  297|   428k|        return x;
  298|   428k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|    534|    {
 3630|    534|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    534|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    534|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    534|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    534|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 534]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    534|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    534|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    534|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    534|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 534]
  ------------------
 3634|       |            if constexpr (!std::is_signed_v<T>) {
 3635|       |                return detail::unexpected_scan_error(
 3636|       |                    scan_error::invalid_scanned_value,
 3637|       |                    "Unexpected '-' sign when parsing an "
 3638|       |                    "unsigned value");
 3639|       |            }
 3640|      0|            else {
 3641|      0|                if (specs.type ==
  ------------------
  |  Branch (3641:21): [True: 0, False: 0]
  ------------------
 3642|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3643|      0|                    return detail::unexpected_scan_error(
 3644|      0|                        scan_error::invalid_scanned_value,
 3645|      0|                        "'u'-option disallows negative values");
 3646|      0|                }
 3647|      0|            }
 3648|      0|        }
 3649|       |
 3650|    534|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 18, False: 516]
  ------------------
 3651|     18|            value = T{0};
 3652|     18|            return std::next(prefix_result.iterator);
 3653|     18|        }
 3654|       |
 3655|    516|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    516|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 490, False: 26]
  |  |  ------------------
  ------------------
 3656|    490|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    490|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    490|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    490|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 490]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    490|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    490|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    490|                    parse_integer_digits_without_thsep(
 3658|    490|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    490|                        prefix_result.parsed_base));
 3660|       |
 3661|    490|            auto buf = make_contiguous_buffer(
 3662|    490|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    490|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    490|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    490|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    490|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    490|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 454, False: 36]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    454|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    454|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    454|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    454|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    454|    }                                                  \
  |  |  |  | 3957|    490|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     36|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|     36|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|     36|                                        prefix_result.parsed_base));
 3666|       |
 3667|     36|            return ranges::next(
 3668|     36|                prefix_result.iterator,
 3669|     36|                ranges::distance(buf.view().begin(), result_it));
 3670|    490|        }
 3671|       |
 3672|     26|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|     26|            localized_number_formatting_options<CharT>{loc};
 3677|     26|#endif
 3678|       |
 3679|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      4|                parse_integer_digits_with_thsep(
 3681|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      4|                    prefix_result.parsed_base, locale_options));
 3683|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      4|            parse_digits_result;
 3685|       |
 3686|      4|        auto nothsep_source_view =
 3687|      4|            std::basic_string_view<CharT>{nothsep_source};
 3688|      4|        SCN_TRY(
  ------------------
  |  | 3958|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      4|            nothsep_source_it,
 3690|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      4|                                prefix_result.parsed_base));
 3692|       |
 3693|      4|        return ranges::next(
 3694|      4|            prefix_result.iterator,
 3695|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      4|                ranges::ssize(thsep_indices));
 3697|      4|    }
_ZN3scn2v44impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3408|  3.13k|{
 3409|  3.13k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  3.13k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  3.13k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  3.13k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  3.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 3.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  3.13k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  3.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  3.13k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  3.13k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  3.13k|        parse_integer_base_prefix(
 3414|  3.13k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  3.13k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 28, False: 3.11k]
  ------------------
 3417|     28|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 28]
  ------------------
 3418|     28|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 28, False: 0]
  ------------------
 3419|     28|            digits_begin_it = base_prefix_begin_it;
 3420|     28|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|     28|    }
 3425|  3.11k|    else {
 3426|  3.11k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 3.11k]
  ------------------
 3427|  3.11k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 3.00k, False: 106]
  ------------------
 3428|  3.00k|            digits_begin_it = base_prefix_begin_it;
 3429|  3.00k|        }
 3430|  3.11k|    }
 3431|       |
 3432|  3.13k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 3.13k, False: 0]
  ------------------
 3433|  3.13k|        sign = sign_type::plus_sign;
 3434|  3.13k|    }
 3435|  3.13k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  3.13k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  3.13k|}
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|  4.22k|{
 3290|  4.22k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  4.22k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 4.22k, False: 0]
  ------------------
 3292|  4.22k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 4.22k, False: 0]
  ------------------
 3293|  4.22k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  4.22k|        }
 3295|      0|        return unexpected(eof_error::eof);
 3296|  4.22k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|  4.23k|{
 2405|  4.23k|    auto it = read_code_unit(range);
 2406|  4.23k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.23k]
  |  |  ------------------
  ------------------
 2407|      0|        return unexpected(make_eof_parse_error(it.error()));
 2408|      0|    }
 2409|       |
 2410|  8.46k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 8.46k, False: 4.23k]
  ------------------
 2411|  8.46k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 8.46k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  8.46k|    }
 2415|       |
 2416|  4.23k|    return unexpected(parse_error::error);
 2417|  4.23k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|  3.13k|{
 3376|  3.13k|    switch (base) {
 3377|     60|        case 2:
  ------------------
  |  Branch (3377:9): [True: 60, False: 3.07k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|     60|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|     60|                    false};
 3381|       |
 3382|     28|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 28, False: 3.11k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|     28|            bool zero_parsed = false;
 3385|     28|            auto it = apply_opt(
 3386|     28|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|     28|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|  1.00k|        case 16:
  ------------------
  |  Branch (3390:9): [True: 1.00k, False: 2.13k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|  1.00k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|  1.00k|                    false};
 3394|       |
 3395|     32|        case 0:
  ------------------
  |  Branch (3395:9): [True: 32, False: 3.10k]
  ------------------
 3396|       |            // detect base
 3397|     32|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  2.01k|        default:
  ------------------
  |  Branch (3399:9): [True: 2.01k, False: 1.12k]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  2.01k|            return {range.begin(), base, false};
 3402|  3.13k|    }
 3403|  3.13k|}
_ZN3scn2v44impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2423|  1.08k|{
 2424|  1.08k|    if (!result) {
  ------------------
  |  Branch (2424:9): [True: 1.07k, False: 18]
  ------------------
 2425|  1.07k|        return range.begin();
 2426|  1.07k|    }
 2427|     18|    return *result;
 2428|  1.08k|}
_ZN3scn2v44impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3326|     92|{
 3327|     92|    return read_matching_string_classic_nocase(range, "0b");
 3328|     92|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  4.42k|{
 2364|  4.42k|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  4.42k|    else {
 2377|  4.42k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  4.42k|            if (ch < 'A' || ch > 'Z') {
 2379|  4.42k|                return ch;
 2380|  4.42k|            }
 2381|  4.42k|            return static_cast<char_type>(ch +
 2382|  4.42k|                                          static_cast<char_type>('a' - 'A'));
 2383|  4.42k|        };
 2384|       |
 2385|  4.42k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  4.42k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  4.42k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  4.42k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 4, False: 4.42k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      4|    }                                                  \
  |  |  |  | 3957|  4.42k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  4.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  4.42k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  4.42k|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  4.42k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  4.42k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.42k, False: 0]
  |  |  ------------------
  ------------------
 2390|  4.42k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  4.42k|                    return ascii_tolower(a) ==
 2392|  4.42k|                           static_cast<detail::char_t<Range>>(b);
 2393|  4.42k|                }))) {
 2394|  4.42k|            return unexpected(parse_error::error);
 2395|  4.42k|        }
 2396|       |
 2397|      0|        return it;
 2398|  4.42k|    }
 2399|  4.42k|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  4.59k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  4.59k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 574, False: 4.02k]
  |  Branch (2378:29): [True: 4.02k, False: 0]
  ------------------
 2379|  4.59k|                return ch;
 2380|  4.59k|            }
 2381|      0|            return static_cast<char_type>(ch +
 2382|      0|                                          static_cast<char_type>('a' - 'A'));
 2383|  4.59k|        };
_ZN3scn2v44impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3340|     60|{
 3341|     60|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3341:14): [True: 0, False: 60]
  ------------------
 3342|      0|        return *r;
 3343|      0|    }
 3344|       |
 3345|     60|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3345:14): [True: 28, False: 32]
  ------------------
 3346|     28|        zero_parsed = true;
 3347|     28|        return *r;
 3348|     28|    }
 3349|       |
 3350|     32|    return unexpected(parse_error::error);
 3351|     60|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|  2.13k|{
 2279|  2.13k|    auto it = read_code_unit(range);
 2280|  2.13k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.13k]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|  2.13k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|  2.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.05k, False: 74]
  |  |  ------------------
  ------------------
 2285|  2.13k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|  2.05k|        return unexpected(parse_error::error);
 2287|  2.05k|    }
 2288|       |
 2289|     74|    return *it;
 2290|  2.13k|}
_ZN3scn2v44impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3333|  1.03k|{
 3334|  1.03k|    return read_matching_string_classic_nocase(range, "0x");
 3335|  1.03k|}
_ZN3scn2v44impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3356|     32|{
 3357|     32|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3357:14): [True: 0, False: 32]
  ------------------
 3358|      0|        return {*r, 16, false};
 3359|      0|    }
 3360|     32|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3360:14): [True: 0, False: 32]
  ------------------
 3361|      0|        return {*r, 2, false};
 3362|      0|    }
 3363|     32|    {
 3364|     32|        bool zero_parsed{false};
 3365|     32|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3365:18): [True: 10, False: 22]
  ------------------
 3366|     10|            return {*r, 8, zero_parsed};
 3367|     10|        }
 3368|     32|    }
 3369|     22|    return {range.begin(), 10, false};
 3370|     32|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|  3.05k|{
 3443|  3.05k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|  3.05k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|  3.05k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.05k]
  |  |  ------------------
  ------------------
 3447|      0|            return detail::unexpected_scan_error(
 3448|      0|                scan_error::invalid_scanned_value,
 3449|      0|                "Failed to parse integer: No digits found");
 3450|      0|        }
 3451|  3.05k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|  3.05k|}
_ZN3scn2v44impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3472|     52|{
 3473|     52|    std::basic_string<CharT> output;
 3474|     52|    std::string thsep_indices;
 3475|     52|    auto it = range.begin();
 3476|     52|    bool digit_matched = false;
 3477|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3477:12): [True: 60, False: 0]
  ------------------
 3478|     60|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3478:13): [True: 0, False: 60]
  ------------------
 3479|      0|            thsep_indices.push_back(
 3480|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3481|      0|        }
 3482|     60|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3482:18): [True: 52, False: 8]
  ------------------
 3483|     52|            break;
 3484|     52|        }
 3485|      8|        else {
 3486|      8|            output.push_back(*it);
 3487|      8|            digit_matched = true;
 3488|      8|        }
 3489|     60|    }
 3490|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  | 1039|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44, False: 8]
  |  |  ------------------
  ------------------
 3491|     44|        return detail::unexpected_scan_error(
 3492|     44|            scan_error::invalid_scanned_value,
 3493|     44|            "Failed to parse integer: No digits found");
 3494|     44|    }
 3495|      8|    return std::tuple{it, output, thsep_indices};
 3496|     52|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  10.9k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  10.9k|                  ranges::sized_range<Range>) {
 1785|  10.9k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  10.9k|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  10.9k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  10.9k|    {
 1589|  10.9k|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  13.0k|    {
 1602|  13.0k|        return sv;
 1603|  13.0k|    }
_ZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 6058|  1.37k|{
 6059|  1.37k|    using char_type = detail::char_t<Range>;
 6060|  1.37k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6061|       |
 6062|  1.37k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6062:9): [True: 1.37k, False: 0]
  ------------------
 6063|  1.37k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6064|  1.37k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6065|       |
 6066|  1.37k|        if (max_width == 0) {
  ------------------
  |  Branch (6066:13): [True: 1.18k, False: 198]
  ------------------
 6067|  1.18k|            auto it = read_while_code_unit(range, pred);
 6068|       |
 6069|  1.18k|            if (want_skipped_width) {
  ------------------
  |  Branch (6069:17): [True: 138, False: 1.04k]
  ------------------
 6070|    138|                auto prefix_width =
 6071|    138|                    static_cast<std::ptrdiff_t>(
 6072|    138|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6073|    138|                    ranges::distance(range.begin(), it);
 6074|    138|                return result_type{it, prefix_width};
 6075|    138|            }
 6076|  1.04k|            return result_type{it, 0};
 6077|  1.18k|        }
 6078|       |
 6079|    198|        auto max_width_view = take_width(range, max_width);
 6080|    198|        auto w_it = read_while_code_unit(max_width_view, pred);
 6081|       |
 6082|    198|        if (want_skipped_width) {
  ------------------
  |  Branch (6082:13): [True: 198, False: 0]
  ------------------
 6083|    198|            return result_type{w_it.base(), max_width - w_it.count()};
 6084|    198|        }
 6085|      0|        return result_type{w_it.base(), 0};
 6086|    198|    }
 6087|       |
 6088|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6089|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6089:9): [True: 0, False: 0]
  ------------------
 6090|      0|        auto it = read_while_code_units(range, fill_chars);
 6091|       |
 6092|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6092:13): [True: 0, False: 0]
  ------------------
 6093|      0|            auto prefix_width =
 6094|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6095|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6096|      0|            return result_type{it, prefix_width};
 6097|      0|        }
 6098|      0|        return result_type{it, 0};
 6099|      0|    }
 6100|       |
 6101|      0|    auto max_width_view = take_width(range, max_width);
 6102|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6103|       |
 6104|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6104:9): [True: 0, False: 0]
  ------------------
 6105|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6106|      0|    }
 6107|      0|    return result_type{w_it.base(), 0};
 6108|      0|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|  1.31k|{
 2108|  1.31k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  1.31k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  1.39k|{
 2075|  1.39k|    if constexpr (ranges::common_range<Range>) {
 2076|  1.39k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|  1.39k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  1.37k|        : m_fptr([](storage fn,
  743|  1.37k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.37k|              cvref<T> obj = *get<T>(fn);
  745|  1.37k|              if constexpr (std::is_void_v<R>) {
  746|  1.37k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.37k|              }
  748|  1.37k|              else {
  749|  1.37k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.37k|              }
  751|  1.37k|          }),
  752|  1.37k|          m_storage(std::addressof(f))
  753|  1.37k|    {
  754|  1.37k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  2.19k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.19k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.19k|              else {
  749|  2.19k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.19k|              }
  751|  2.19k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|  2.19k|    {
  684|  2.19k|        if constexpr (std::is_const_v<T>) {
  685|  2.19k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.19k|    }
_ZZN3scn2v44impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 6064|  2.19k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  1.37k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  1.37k|        {
  667|  1.37k|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2107|    300|{
 2108|    300|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    300|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2074|    414|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    414|    else {
 2079|    414|        auto first = range.begin();
 2080|  2.64k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 2.52k, False: 120]
  ------------------
 2081|  2.52k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 294, False: 2.22k]
  ------------------
 2082|    294|                return first;
 2083|    294|            }
 2084|  2.52k|        }
 2085|    120|        return first;
 2086|    414|    }
 2087|    414|}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 3097|    514|{
 3098|    514|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 0, False: 514]
  ------------------
 3099|      0|        auto it = read_while_classic_space(range);
 3100|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3102|      0|            return unexpected(e);
 3103|      0|        }
 3104|       |
 3105|      0|        return it;
 3106|      0|    }
 3107|       |
 3108|    514|    return read_while_classic_space(range);
 3109|    514|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2248|    514|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|    514|    else {
 2258|    514|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|    514|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|    514|            return detail::is_cp_space(cp);
 2271|    514|        });
 2272|    514|    }
 2273|    514|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2213|    688|{
 2214|    688|    return read_until_code_point(range, std::not_fn(pred));
 2215|    688|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2192|    886|{
 2193|    886|    auto it = range.begin();
 2194|  5.71k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 5.52k, False: 186]
  ------------------
 2195|  5.52k|        const auto val =
 2196|  5.52k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  5.52k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  5.52k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 5.52k, False: 0]
  |  |  ------------------
  ------------------
 2198|  5.52k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  5.52k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  5.52k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 700, False: 4.82k]
  ------------------
 2201|    700|                return it;
 2202|    700|            }
 2203|  5.52k|        }
 2204|  4.82k|        it = val.iterator;
 2205|  4.82k|    }
 2206|       |
 2207|    186|    return it;
 2208|    886|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1997|  16.6k|{
 1998|  16.6k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  16.6k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  16.6k|    auto it = range.begin();
 2002|  16.6k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  16.6k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  16.6k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 16.6k, False: 0]
  ------------------
 2011|  16.6k|        ++it;
 2012|  16.6k|        return {it, string_type(1, *range.begin())};
 2013|  16.6k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  16.6k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    514|        : m_fptr([](storage fn,
  743|    514|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    514|              cvref<T> obj = *get<T>(fn);
  745|    514|              if constexpr (std::is_void_v<R>) {
  746|    514|                  obj(static_cast<decltype(args)>(args)...);
  747|    514|              }
  748|    514|              else {
  749|    514|                  return obj(static_cast<decltype(args)>(args)...);
  750|    514|              }
  751|    514|          }),
  752|    514|          m_storage(std::addressof(f))
  753|    514|    {
  754|    514|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    916|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    916|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    916|              else {
  749|    916|                  return obj(static_cast<decltype(args)>(args)...);
  750|    916|              }
  751|    916|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    916|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    916|        else if constexpr (std::is_object_v<T>) {
  688|    916|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    916|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2269|    916|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|    916|            return detail::is_cp_space(cp);
 2271|    916|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    514|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    514|        {
  662|    514|        }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  7.77k|{
 3098|  7.77k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 7.38k, False: 392]
  ------------------
 3099|  7.38k|        auto it = read_while_classic_space(range);
 3100|  7.38k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  7.38k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  7.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.38k]
  |  |  ------------------
  ------------------
 3102|      0|            return unexpected(e);
 3103|      0|        }
 3104|       |
 3105|  7.38k|        return it;
 3106|  7.38k|    }
 3107|       |
 3108|    392|    return read_while_classic_space(range);
 3109|  7.77k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  17.7k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  17.7k|    else {
 2258|  17.7k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  17.7k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  17.7k|            return detail::is_cp_space(cp);
 2271|  17.7k|        });
 2272|  17.7k|    }
 2273|  17.7k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|  17.9k|{
 2214|  17.9k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  17.9k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  21.4k|{
 2193|  21.4k|    auto it = range.begin();
 2194|  74.1k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 70.6k, False: 3.46k]
  ------------------
 2195|  70.6k|        const auto val =
 2196|  70.6k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  70.6k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  70.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 70.6k, False: 0]
  |  |  ------------------
  ------------------
 2198|  70.6k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  70.6k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  70.6k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 17.9k, False: 52.7k]
  ------------------
 2201|  17.9k|                return it;
 2202|  17.9k|            }
 2203|  70.6k|        }
 2204|  52.7k|        it = val.iterator;
 2205|  52.7k|    }
 2206|       |
 2207|  3.46k|    return it;
 2208|  21.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  17.7k|        : m_fptr([](storage fn,
  743|  17.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.7k|              cvref<T> obj = *get<T>(fn);
  745|  17.7k|              if constexpr (std::is_void_v<R>) {
  746|  17.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.7k|              }
  748|  17.7k|              else {
  749|  17.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.7k|              }
  751|  17.7k|          }),
  752|  17.7k|          m_storage(std::addressof(f))
  753|  17.7k|    {
  754|  17.7k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  25.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  25.7k|              else {
  749|  25.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.7k|              }
  751|  25.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  25.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  25.7k|        else if constexpr (std::is_object_v<T>) {
  688|  25.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  25.7k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|  25.7k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  25.7k|            return detail::is_cp_space(cp);
 2271|  25.7k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  17.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  17.7k|        {
  662|  17.7k|        }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|  3.00k|    {
 3188|  3.00k|        reader_error_handler eh{};
 3189|  3.00k|        get_derived().check_specs_impl(specs, eh);
 3190|  3.00k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.48k, False: 1.52k]
  |  |  ------------------
  ------------------
 3191|  1.48k|            return detail::unexpected_scan_error(
 3192|  1.48k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  1.48k|        }
 3194|  1.52k|        return {};
 3195|  3.00k|    }
_ZN3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3199|  3.00k|    {
 3200|  3.00k|        return static_cast<Derived&>(*this);
 3201|  3.00k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3575|  3.00k|    {
 3576|  3.00k|        detail::check_int_type_specs(specs, eh);
 3577|  3.00k|    }
_ZNK3scn2v44impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3182|  2.80k|    {
 3183|  2.80k|        return true;
 3184|  2.80k|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3629|    258|    {
 3630|    258|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 258]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    258|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    258|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    258|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 258]
  ------------------
 3634|      0|            if constexpr (!std::is_signed_v<T>) {
 3635|      0|                return detail::unexpected_scan_error(
 3636|      0|                    scan_error::invalid_scanned_value,
 3637|      0|                    "Unexpected '-' sign when parsing an "
 3638|      0|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|      0|        }
 3649|       |
 3650|    258|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 6, False: 252]
  ------------------
 3651|      6|            value = T{0};
 3652|      6|            return std::next(prefix_result.iterator);
 3653|      6|        }
 3654|       |
 3655|    252|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    252|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 226, False: 26]
  |  |  ------------------
  ------------------
 3656|    226|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 214, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    214|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    214|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    214|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    214|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    214|    }                                                  \
  |  |  |  | 3957|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|     12|                    parse_integer_digits_without_thsep(
 3658|     12|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|     12|                        prefix_result.parsed_base));
 3660|       |
 3661|     12|            auto buf = make_contiguous_buffer(
 3662|     12|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|     12|            SCN_TRY(result_it,
  ------------------
  |  | 3958|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 12]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|     12|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|     12|                                        prefix_result.parsed_base));
 3666|       |
 3667|     12|            return ranges::next(
 3668|     12|                prefix_result.iterator,
 3669|     12|                ranges::distance(buf.view().begin(), result_it));
 3670|     12|        }
 3671|       |
 3672|     26|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|     26|            localized_number_formatting_options<CharT>{loc};
 3677|     26|#endif
 3678|       |
 3679|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      4|                parse_integer_digits_with_thsep(
 3681|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      4|                    prefix_result.parsed_base, locale_options));
 3683|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      4|            parse_digits_result;
 3685|       |
 3686|      4|        auto nothsep_source_view =
 3687|      4|            std::basic_string_view<CharT>{nothsep_source};
 3688|      4|        SCN_TRY(
  ------------------
  |  | 3958|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      4|            nothsep_source_it,
 3690|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      4|                                prefix_result.parsed_base));
 3692|       |
 3693|      4|        return ranges::next(
 3694|      4|            prefix_result.iterator,
 3695|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      4|                ranges::ssize(thsep_indices));
 3697|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|    482|    {
 3630|    482|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    482|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    482|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    482|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 482]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    482|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    482|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    482|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    482|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 482]
  ------------------
 3634|      0|            if constexpr (!std::is_signed_v<T>) {
 3635|      0|                return detail::unexpected_scan_error(
 3636|      0|                    scan_error::invalid_scanned_value,
 3637|      0|                    "Unexpected '-' sign when parsing an "
 3638|      0|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|      0|        }
 3649|       |
 3650|    482|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 10, False: 472]
  ------------------
 3651|     10|            value = T{0};
 3652|     10|            return std::next(prefix_result.iterator);
 3653|     10|        }
 3654|       |
 3655|    472|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    472|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 446, False: 26]
  |  |  ------------------
  ------------------
 3656|    446|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 446]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    446|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    446|                    parse_integer_digits_without_thsep(
 3658|    446|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    446|                        prefix_result.parsed_base));
 3660|       |
 3661|    446|            auto buf = make_contiguous_buffer(
 3662|    446|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    446|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    446|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    446|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    446|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 414, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    414|    }                                                  \
  |  |  |  | 3957|    446|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|     32|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|     32|                                        prefix_result.parsed_base));
 3666|       |
 3667|     32|            return ranges::next(
 3668|     32|                prefix_result.iterator,
 3669|     32|                ranges::distance(buf.view().begin(), result_it));
 3670|    446|        }
 3671|       |
 3672|     26|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|     26|            localized_number_formatting_options<CharT>{loc};
 3677|     26|#endif
 3678|       |
 3679|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      4|                parse_integer_digits_with_thsep(
 3681|      4|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      4|                    prefix_result.parsed_base, locale_options));
 3683|      4|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      4|            parse_digits_result;
 3685|       |
 3686|      4|        auto nothsep_source_view =
 3687|      4|            std::basic_string_view<CharT>{nothsep_source};
 3688|      4|        SCN_TRY(
  ------------------
  |  | 3958|      4|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      4|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      4|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      4|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      4|            nothsep_source_it,
 3690|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      4|                                prefix_result.parsed_base));
 3692|       |
 3693|      4|        return ranges::next(
 3694|      4|            prefix_result.iterator,
 3695|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      4|                ranges::ssize(thsep_indices));
 3697|      4|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3629|    204|    {
 3630|    204|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 204]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    204|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    204|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    204|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 204]
  ------------------
 3634|      0|            if constexpr (!std::is_signed_v<T>) {
 3635|      0|                return detail::unexpected_scan_error(
 3636|      0|                    scan_error::invalid_scanned_value,
 3637|      0|                    "Unexpected '-' sign when parsing an "
 3638|      0|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|      0|        }
 3649|       |
 3650|    204|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 204]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|    204|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    204|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 204, False: 0]
  |  |  ------------------
  ------------------
 3656|    204|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 194, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    194|    }                                                  \
  |  |  |  | 3957|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|     10|                    parse_integer_digits_without_thsep(
 3658|     10|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|     10|                        prefix_result.parsed_base));
 3660|       |
 3661|     10|            auto buf = make_contiguous_buffer(
 3662|     10|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|     10|            SCN_TRY(result_it,
  ------------------
  |  | 3958|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|     10|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|     10|                                        prefix_result.parsed_base));
 3666|       |
 3667|     10|            return ranges::next(
 3668|     10|                prefix_result.iterator,
 3669|     10|                ranges::distance(buf.view().begin(), result_it));
 3670|     10|        }
 3671|       |
 3672|      0|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|      0|            localized_number_formatting_options<CharT>{loc};
 3677|      0|#endif
 3678|       |
 3679|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3629|    978|    {
 3630|    978|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3958|    978|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    978|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    978|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    978|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 978]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    978|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    978|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3631|    978|                                   .transform_error(make_eof_scan_error));
 3632|       |
 3633|    978|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3633:13): [True: 0, False: 978]
  ------------------
 3634|      0|            if constexpr (!std::is_signed_v<T>) {
 3635|      0|                return detail::unexpected_scan_error(
 3636|      0|                    scan_error::invalid_scanned_value,
 3637|      0|                    "Unexpected '-' sign when parsing an "
 3638|      0|                    "unsigned value");
 3639|       |            }
 3640|       |            else {
 3641|       |                if (specs.type ==
 3642|       |                    detail::presentation_type::int_unsigned_decimal) {
 3643|       |                    return detail::unexpected_scan_error(
 3644|       |                        scan_error::invalid_scanned_value,
 3645|       |                        "'u'-option disallows negative values");
 3646|       |                }
 3647|       |            }
 3648|      0|        }
 3649|       |
 3650|    978|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3650:13): [True: 0, False: 978]
  ------------------
 3651|      0|            value = T{0};
 3652|      0|            return std::next(prefix_result.iterator);
 3653|      0|        }
 3654|       |
 3655|    978|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  | 1038|    978|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 978, False: 0]
  |  |  ------------------
  ------------------
 3656|    978|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    978|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    978|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    978|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    978|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 978]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    978|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    978|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3657|    978|                    parse_integer_digits_without_thsep(
 3658|    978|                        ranges::subrange{prefix_result.iterator, range.end()},
 3659|    978|                        prefix_result.parsed_base));
 3660|       |
 3661|    978|            auto buf = make_contiguous_buffer(
 3662|    978|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3663|    978|            SCN_TRY(result_it,
  ------------------
  |  | 3958|    978|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    978|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    978|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    978|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 948, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    948|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    948|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    948|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    948|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    948|    }                                                  \
  |  |  |  | 3957|    978|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3664|     30|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3665|     30|                                        prefix_result.parsed_base));
 3666|       |
 3667|     30|            return ranges::next(
 3668|     30|                prefix_result.iterator,
 3669|     30|                ranges::distance(buf.view().begin(), result_it));
 3670|    978|        }
 3671|       |
 3672|      0|        auto locale_options =
 3673|       |#if SCN_DISABLE_LOCALE
 3674|       |            localized_number_formatting_options<CharT>{};
 3675|       |#else
 3676|      0|            localized_number_formatting_options<CharT>{loc};
 3677|      0|#endif
 3678|       |
 3679|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3680|      0|                parse_integer_digits_with_thsep(
 3681|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3682|      0|                    prefix_result.parsed_base, locale_options));
 3683|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3684|      0|            parse_digits_result;
 3685|       |
 3686|      0|        auto nothsep_source_view =
 3687|      0|            std::basic_string_view<CharT>{nothsep_source};
 3688|      0|        SCN_TRY(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3689|      0|            nothsep_source_it,
 3690|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3691|      0|                                prefix_result.parsed_base));
 3692|       |
 3693|      0|        return ranges::next(
 3694|      0|            prefix_result.iterator,
 3695|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3696|      0|                ranges::ssize(thsep_indices));
 3697|      0|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|  1.50k|    {
 3188|  1.50k|        reader_error_handler eh{};
 3189|  1.50k|        get_derived().check_specs_impl(specs, eh);
 3190|  1.50k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 722, False: 782]
  |  |  ------------------
  ------------------
 3191|    722|            return detail::unexpected_scan_error(
 3192|    722|                scan_error::invalid_format_string, eh.m_msg);
 3193|    722|        }
 3194|    782|        return {};
 3195|  1.50k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3199|  1.50k|    {
 3200|  1.50k|        return static_cast<Derived&>(*this);
 3201|  1.50k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4238|  1.50k|    {
 4239|  1.50k|        detail::check_float_type_specs(specs, eh);
 4240|  1.50k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3182|  1.46k|    {
 3183|  1.46k|        return true;
 3184|  1.46k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4310|    762|    {
 4311|    762|        unsigned options{};
 4312|    762|        if (specs.localized) {
  ------------------
  |  Branch (4312:13): [True: 36, False: 726]
  ------------------
 4313|     36|            options |= float_reader_base::allow_thsep;
 4314|     36|        }
 4315|       |
 4316|    762|        SCN_GCC_COMPAT_PUSH
 4317|    762|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4318|       |
 4319|    762|        switch (specs.type) {
 4320|     20|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4320:13): [True: 20, False: 742]
  ------------------
 4321|     20|                return options | float_reader_base::allow_fixed;
 4322|       |
 4323|     10|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4323:13): [True: 10, False: 752]
  ------------------
 4324|     10|                return options | float_reader_base::allow_scientific;
 4325|       |
 4326|     94|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4326:13): [True: 94, False: 668]
  ------------------
 4327|     94|                return options | float_reader_base::allow_hex;
 4328|       |
 4329|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4329:13): [True: 6, False: 756]
  ------------------
 4330|      6|                return options | float_reader_base::allow_scientific |
 4331|      6|                       float_reader_base::allow_fixed;
 4332|       |
 4333|    632|            case detail::presentation_type::none:
  ------------------
  |  Branch (4333:13): [True: 632, False: 130]
  ------------------
 4334|    632|                return options | float_reader_base::allow_scientific |
 4335|    632|                       float_reader_base::allow_fixed |
 4336|    632|                       float_reader_base::allow_hex;
 4337|       |
 4338|      0|            default:
  ------------------
  |  Branch (4338:13): [True: 0, False: 762]
  ------------------
 4339|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4340|    762|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4341|    762|        }
 4342|       |
 4343|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4344|    762|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3741|    762|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.33k|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.66k|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4129|  1.08k|    {
 4130|  1.08k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4130:13): [True: 1.08k, False: 0]
  ------------------
 4131|  1.08k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4131:13): [True: 1.08k, False: 0]
  ------------------
 4132|  1.08k|            return;
 4133|  1.08k|        }
 4134|       |
 4135|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4136|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4137:27): [True: 0, False: 0]
  ------------------
 4138|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4138:21): [True: 0, False: 0]
  ------------------
 4139|      0|                    ch = CharT{'.'};
 4140|      0|                }
 4141|      0|            }
 4142|      0|        }
 4143|       |
 4144|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4144:13): [True: 0, False: 0]
  ------------------
 4145|      0|            return;
 4146|      0|        }
 4147|       |
 4148|      0|        auto first =
 4149|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4150|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4150:13): [True: 0, False: 0]
  ------------------
 4151|      0|            return;
 4152|      0|        }
 4153|       |
 4154|      0|        m_thsep_indices.push_back(
 4155|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4156|       |
 4157|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4157:31): [True: 0, False: 0]
  ------------------
 4158|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4158:17): [True: 0, False: 0]
  ------------------
 4159|      0|                *first++ = std::move(*it);
 4160|      0|            }
 4161|      0|            else {
 4162|      0|                m_thsep_indices.push_back(
 4163|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4164|      0|            }
 4165|      0|        }
 4166|       |
 4167|      0|        str.erase(first, str.end());
 4168|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|    894|    {
 1686|    894|        return m_storage.has_value();
 1687|    894|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|    476|    {
 1691|    476|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|    476|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    476|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|    476|        return *m_storage;
 1693|    476|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    246|    {
  763|    246|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    246|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3760|     16|    {
 3761|     16|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|     16|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|     16|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|     16|        return read_source_impl(range);
 3767|     16|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3786|    246|    {
 3787|    246|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 246]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|    246|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|    246|        auto it = sign_result.first;
 3790|    246|        m_sign = sign_result.second;
 3791|       |
 3792|    246|        auto digits_begin = it;
 3793|    246|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|       |                      ranges::sized_range<Range>) {
 3796|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3797|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|       |                SCN_TRY_ASSIGN(
 3799|       |                    it,
 3800|       |                    do_read_source_impl(
 3801|       |                        r,
 3802|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|       |            }
 3805|       |            else {
 3806|       |                auto cb = [&](const auto& rr)
 3807|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|       |                    auto res = read_all(rr);
 3809|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|       |                        return detail::unexpected_scan_error(
 3811|       |                            scan_error::invalid_scanned_value,
 3812|       |                            "Invalid float value");
 3813|       |                    }
 3814|       |                    return res;
 3815|       |                };
 3816|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3817|       |            }
 3818|       |        }
 3819|    246|        else {
 3820|    246|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 226, False: 20]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    226|    }                                                  \
  |  | 3957|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3821|     20|                it,
 3822|     20|                do_read_source_impl(
 3823|     20|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|     20|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|     20|        }
 3826|       |
 3827|    246|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|    246|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    246|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|     20|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 20, False: 0]
  |  Branch (3829:48): [True: 20, False: 0]
  ------------------
 3830|     20|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 20, False: 0]
  ------------------
 3831|     20|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 20, False: 0]
  ------------------
 3832|     20|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|     20|        }
 3834|       |
 3835|     20|        handle_separators();
 3836|       |
 3837|     20|        return it;
 3838|    246|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4072|    246|    {
 4073|    246|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|    246|        const bool allowed_nonhex =
 4075|    246|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|    246|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|    246|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 246, False: 0]
  |  Branch (4078:45): [True: 0, False: 246]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|    246|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 0, False: 246]
  ------------------
 4084|      0|            return *r;
 4085|      0|        }
 4086|       |
 4087|    246|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 246, False: 0]
  |  Branch (4087:45): [True: 0, False: 246]
  ------------------
 4088|      0|            return unexpected(r.error());
 4089|      0|        }
 4090|    246|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 0, False: 246]
  ------------------
 4091|      0|            return *r;
 4092|      0|        }
 4093|       |
 4094|    246|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 234, False: 12]
  |  Branch (4094:28): [True: 20, False: 214]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|     20|            auto it = range.begin();
 4098|       |
 4099|     20|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 0, False: 20]
  ------------------
 4100|      0|                m_kind = float_kind::hex_with_prefix;
 4101|      0|                it = *r;
 4102|      0|            }
 4103|     20|            else {
 4104|     20|                m_kind = float_kind::hex_without_prefix;
 4105|     20|            }
 4106|       |
 4107|     20|            return read_hex(ranges::subrange{it, range.end()});
 4108|     20|        }
 4109|    226|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 12, False: 214]
  |  Branch (4109:29): [True: 12, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|     12|            m_kind = float_kind::generic;
 4113|     12|            return read_regular_float(range);
 4114|     12|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|    214|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 214]
  |  |  ------------------
  ------------------
 4120|      0|            m_kind = float_kind::hex_with_prefix;
 4121|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4122|      0|        }
 4123|       |
 4124|    214|        m_kind = float_kind::generic;
 4125|    214|        return read_regular(range);
 4126|    214|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3880|    246|    {
 3881|    246|        auto it = range.begin();
 3882|    246|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 246, False: 0]
  ------------------
 3883|    246|            return unexpected(r.error());
 3884|    246|        }
 3885|      0|        else {
 3886|      0|            it = *r;
 3887|      0|        }
 3888|       |
 3889|      0|        if (auto r = read_matching_string_classic_nocase(
 3890|      0|                ranges::subrange{it, range.end()}, "inity");
 3891|      0|            !r) {
  ------------------
  |  Branch (3891:13): [True: 0, False: 0]
  ------------------
 3892|      0|            m_kind = float_kind::inf_short;
 3893|      0|            return it;
 3894|      0|        }
 3895|      0|        else {
 3896|      0|            m_kind = float_kind::inf_long;
 3897|      0|            return *r;
 3898|      0|        }
 3899|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|    246|    {
 3904|    246|        auto it = range.begin();
 3905|    246|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 246, False: 0]
  ------------------
 3906|    246|            return r.transform_error(map_parse_error_to_scan_error(
 3907|    246|                scan_error::invalid_scanned_value,
 3908|    246|                "Invalid floating-point NaN value"));
 3909|    246|        }
 3910|      0|        else {
 3911|      0|            it = *r;
 3912|      0|        }
 3913|       |
 3914|      0|        if (auto r =
 3915|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|      0|            !r) {
  ------------------
  |  Branch (3916:13): [True: 0, False: 0]
  ------------------
 3917|      0|            m_kind = float_kind::nan_simple;
 3918|      0|            return it;
 3919|      0|        }
 3920|      0|        else {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        auto payload_beg_it = it;
 3925|      0|        it = read_while_code_unit(
 3926|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|      0|                return is_ascii_char(ch) &&
 3928|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|      0|            });
 3931|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|      0|        m_kind = float_kind::nan_with_payload;
 3934|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 0, False: 0]
  ------------------
 3935|      0|                                             ')')) {
 3936|      0|            return *r;
 3937|      0|        }
 3938|      0|        return detail::unexpected_scan_error(
 3939|      0|            scan_error::invalid_scanned_value,
 3940|      0|            "Invalid floating-point NaN payload");
 3941|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3873|    234|    {
 3874|    234|        return read_matching_string_classic_nocase(range, "0x");
 3875|    234|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3974|     20|    {
 3975|     20|        auto it = range.begin();
 3976|       |
 3977|     20|        std::ptrdiff_t digits_count = 0;
 3978|     20|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3979|     20|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 6]
  |  |  ------------------
  ------------------
 3980|     14|            return r.transform_error(map_parse_error_to_scan_error(
 3981|     14|                scan_error::invalid_scanned_value,
 3982|     14|                "Invalid hexadecimal floating-point value"));
 3983|     14|        }
 3984|      6|        else {
 3985|      6|            digits_count += ranges::distance(it, *r);
 3986|      6|            it = *r;
 3987|      6|        }
 3988|       |
 3989|      6|        m_integral_part_length = digits_count;
 3990|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3990:18): [True: 0, False: 6]
  ------------------
 3991|      6|                                             m_locale_options.decimal_point)) {
 3992|      0|            it = *r;
 3993|      0|        }
 3994|       |
 3995|      6|        if (auto r =
  ------------------
  |  Branch (3995:18): [True: 0, False: 6]
  ------------------
 3996|      6|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3997|      0|            digits_count += ranges::distance(it, *r);
 3998|      0|            it = *r;
 3999|      0|        }
 4000|       |
 4001|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 4002|      0|            return detail::unexpected_scan_error(
 4003|      0|                scan_error::invalid_scanned_value,
 4004|      0|                "No significand digits in hexfloat");
 4005|      0|        }
 4006|       |
 4007|      6|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4008|       |
 4009|      6|        return it;
 4010|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3858|     26|    {
 3859|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 26]
  |  |  |  Branch (1039:45): [True: 0, False: 26]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3860|     26|                         thsep_allowed)) {
 3861|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3862|      0|                return char_to_int(ch) < 16 ||
 3863|      0|                       ch == m_locale_options.thousands_sep;
 3864|      0|            });
 3865|      0|        }
 3866|       |
 3867|     26|        return read_while1_code_unit(
 3868|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3869|     26|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|     26|        : m_fptr([](storage fn,
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
  752|     26|          m_storage(std::addressof(f))
  753|     26|    {
  754|     26|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     28|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     28|        else if constexpr (std::is_object_v<T>) {
  688|     28|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     28|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3868|     28|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|     26|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     26|        {
  662|     26|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESM_NSK_17basic_string_viewIcNSK_11char_traitsIcEEEE:
 3946|     20|    {
 3947|     20|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 0, False: 20]
  ------------------
 3948|      0|            auto beg_exp_it = range.begin();
 3949|      0|            auto it = *r;
 3950|       |
 3951|      0|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|      0|                it = r_sign->first;
 3954|      0|            }
 3955|       |
 3956|      0|            if (auto r_exp = read_while1_code_unit(
 3957|      0|                    ranges::subrange{it, range.end()},
 3958|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3960|      0|                it = beg_exp_it;
 3961|      0|            }
 3962|      0|            else {
 3963|      0|                it = *r_exp;
 3964|      0|            }
 3965|       |
 3966|      0|            return it;
 3967|      0|        }
 3968|     20|        return range.begin();
 3969|     20|    }
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2404|     20|{
 2405|     20|    auto it = read_code_unit(range);
 2406|     20|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6, False: 14]
  |  |  ------------------
  ------------------
 2407|      6|        return unexpected(make_eof_parse_error(it.error()));
 2408|      6|    }
 2409|       |
 2410|     28|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 28, False: 14]
  ------------------
 2411|     28|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 28]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|     28|    }
 2415|       |
 2416|     14|    return unexpected(parse_error::error);
 2417|     14|}
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 4015|    226|    {
 4016|    226|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|    226|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 218, False: 8]
  |  Branch (4017:50): [True: 4, False: 214]
  ------------------
 4018|       |
 4019|    226|        auto it = ranges::begin(range);
 4020|    226|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|    226|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|    226|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 210, False: 16]
  |  |  ------------------
  ------------------
 4024|    210|            return r.transform_error(
 4025|    210|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|    210|                                              "Invalid floating-point value"));
 4027|    210|        }
 4028|     16|        else {
 4029|     16|            digits_count += ranges::distance(it, *r);
 4030|     16|            it = *r;
 4031|     16|        }
 4032|       |
 4033|     16|        m_integral_part_length = digits_count;
 4034|     16|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 0, False: 16]
  ------------------
 4035|     16|                                             m_locale_options.decimal_point)) {
 4036|      0|            it = *r;
 4037|      0|        }
 4038|       |
 4039|     16|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 0, False: 16]
  ------------------
 4040|     16|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|      0|            digits_count += ranges::distance(it, *r);
 4042|      0|            it = *r;
 4043|      0|        }
 4044|       |
 4045|     16|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 16]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|     16|        auto beg_exp_it = it;
 4052|     16|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 14, False: 2]
  ------------------
 4053|     14|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|     14|        }
 4055|     16|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 2, False: 14]
  |  Branch (4055:29): [True: 2, False: 0]
  ------------------
 4056|      2|            return detail::unexpected_scan_error(
 4057|      2|                scan_error::invalid_scanned_value,
 4058|      2|                "No exponent given to scientific float");
 4059|      2|        }
 4060|       |
 4061|     14|        m_kind =
 4062|     14|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 14, False: 0]
  ------------------
 4063|       |
 4064|     14|        return it;
 4065|     16|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3843|    242|    {
 3844|    242|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 242]
  |  |  |  Branch (1039:45): [True: 0, False: 242]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|    242|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|    242|        return read_while1_code_unit(
 3853|    242|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|    242|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    242|        : m_fptr([](storage fn,
  743|    242|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    242|              cvref<T> obj = *get<T>(fn);
  745|    242|              if constexpr (std::is_void_v<R>) {
  746|    242|                  obj(static_cast<decltype(args)>(args)...);
  747|    242|              }
  748|    242|              else {
  749|    242|                  return obj(static_cast<decltype(args)>(args)...);
  750|    242|              }
  751|    242|          }),
  752|    242|          m_storage(std::addressof(f))
  753|    242|    {
  754|    242|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    246|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    246|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    246|              else {
  749|    246|                  return obj(static_cast<decltype(args)>(args)...);
  750|    246|              }
  751|    246|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    246|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    246|        else if constexpr (std::is_object_v<T>) {
  688|    246|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    246|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3853|    246|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    242|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    242|        {
  662|    242|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSH_:
 1675|     20|    {
 1676|     20|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     20|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3746|    230|    {
 3747|    230|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 230]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|    230|        return read_source_impl(range);
 3753|    230|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.08k|    {
  763|  1.08k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.08k|    }
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3760|     20|    {
 3761|     20|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3762|     20|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
 3763|      0|            m_locale_options.thousands_sep = CharT{0};
 3764|      0|        }
 3765|       |
 3766|     20|        return read_source_impl(range);
 3767|     20|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3786|  1.08k|    {
 3787|  1.08k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.08k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3788|  1.08k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3789|  1.08k|        auto it = sign_result.first;
 3790|  1.08k|        m_sign = sign_result.second;
 3791|       |
 3792|  1.08k|        auto digits_begin = it;
 3793|  1.08k|        auto r = ranges::subrange{it, range.end()};
 3794|       |        if constexpr (ranges::contiguous_range<Range> &&
 3795|  1.08k|                      ranges::sized_range<Range>) {
 3796|  1.08k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  2.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.08k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.08k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.08k]
  |  |  ------------------
  ------------------
 3797|  1.08k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3798|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3799|      0|                    it,
 3800|      0|                    do_read_source_impl(
 3801|      0|                        r,
 3802|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3803|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3804|      0|            }
 3805|  1.08k|            else {
 3806|  1.08k|                auto cb = [&](const auto& rr)
 3807|  1.08k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|  1.08k|                    auto res = read_all(rr);
 3809|  1.08k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3810|  1.08k|                        return detail::unexpected_scan_error(
 3811|  1.08k|                            scan_error::invalid_scanned_value,
 3812|  1.08k|                            "Invalid float value");
 3813|  1.08k|                    }
 3814|  1.08k|                    return res;
 3815|  1.08k|                };
 3816|  1.08k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 20, False: 1.06k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     20|    }                                                  \
  |  | 3957|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3817|  1.06k|            }
 3818|       |        }
 3819|       |        else {
 3820|       |            SCN_TRY_ASSIGN(
 3821|       |                it,
 3822|       |                do_read_source_impl(
 3823|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3824|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3825|       |        }
 3826|       |
 3827|  1.08k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3828|       |
 3829|  1.06k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3829:13): [True: 1.06k, False: 0]
  |  Branch (3829:48): [True: 1.06k, False: 0]
  ------------------
 3830|  1.06k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3830:13): [True: 1.06k, False: 0]
  ------------------
 3831|  1.06k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3831:13): [True: 1.06k, False: 0]
  ------------------
 3832|  1.06k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3833|  1.06k|        }
 3834|       |
 3835|  1.06k|        handle_separators();
 3836|       |
 3837|  1.06k|        return it;
 3838|  1.08k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3880|  1.08k|    {
 3881|  1.08k|        auto it = range.begin();
 3882|  1.08k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3882:73): [True: 1.08k, False: 0]
  ------------------
 3883|  1.08k|            return unexpected(r.error());
 3884|  1.08k|        }
 3885|      0|        else {
 3886|      0|            it = *r;
 3887|      0|        }
 3888|       |
 3889|      0|        if (auto r = read_matching_string_classic_nocase(
 3890|      0|                ranges::subrange{it, range.end()}, "inity");
 3891|      0|            !r) {
  ------------------
  |  Branch (3891:13): [True: 0, False: 0]
  ------------------
 3892|      0|            m_kind = float_kind::inf_short;
 3893|      0|            return it;
 3894|      0|        }
 3895|      0|        else {
 3896|      0|            m_kind = float_kind::inf_long;
 3897|      0|            return *r;
 3898|      0|        }
 3899|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3903|  1.08k|    {
 3904|  1.08k|        auto it = range.begin();
 3905|  1.08k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3905:73): [True: 1.08k, False: 0]
  ------------------
 3906|  1.08k|            return r.transform_error(map_parse_error_to_scan_error(
 3907|  1.08k|                scan_error::invalid_scanned_value,
 3908|  1.08k|                "Invalid floating-point NaN value"));
 3909|  1.08k|        }
 3910|      0|        else {
 3911|      0|            it = *r;
 3912|      0|        }
 3913|       |
 3914|      0|        if (auto r =
 3915|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3916|      0|            !r) {
  ------------------
  |  Branch (3916:13): [True: 0, False: 0]
  ------------------
 3917|      0|            m_kind = float_kind::nan_simple;
 3918|      0|            return it;
 3919|      0|        }
 3920|      0|        else {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        auto payload_beg_it = it;
 3925|      0|        it = read_while_code_unit(
 3926|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3927|      0|                return is_ascii_char(ch) &&
 3928|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3929|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3930|      0|            });
 3931|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3932|       |
 3933|      0|        m_kind = float_kind::nan_with_payload;
 3934|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3934:18): [True: 0, False: 0]
  ------------------
 3935|      0|                                             ')')) {
 3936|      0|            return *r;
 3937|      0|        }
 3938|      0|        return detail::unexpected_scan_error(
 3939|      0|            scan_error::invalid_scanned_value,
 3940|      0|            "Invalid floating-point NaN payload");
 3941|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3873|  1.06k|    {
 3874|  1.06k|        return read_matching_string_classic_nocase(range, "0x");
 3875|  1.06k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|     30|{
 2128|     30|    auto it = read_while_code_unit(range, pred);
 2129|     30|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 24, False: 6]
  ------------------
 2130|     24|        return unexpected(parse_error::error);
 2131|     24|    }
 2132|      6|    return it;
 2133|     30|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3946|      4|    {
 3947|      4|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3947:18): [True: 0, False: 4]
  ------------------
 3948|      0|            auto beg_exp_it = range.begin();
 3949|      0|            auto it = *r;
 3950|       |
 3951|      0|            if (auto r_sign =
  ------------------
  |  Branch (3951:22): [True: 0, False: 0]
  ------------------
 3952|      0|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3953|      0|                it = r_sign->first;
 3954|      0|            }
 3955|       |
 3956|      0|            if (auto r_exp = read_while1_code_unit(
 3957|      0|                    ranges::subrange{it, range.end()},
 3958|      0|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3959|      0|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3960|      0|                it = beg_exp_it;
 3961|      0|            }
 3962|      0|            else {
 3963|      0|                it = *r_exp;
 3964|      0|            }
 3965|       |
 3966|      0|            return it;
 3967|      0|        }
 3968|      4|        return range.begin();
 3969|      4|    }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4015|     24|    {
 4016|     24|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4017|     24|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4017:35): [True: 12, False: 12]
  |  Branch (4017:50): [True: 6, False: 6]
  ------------------
 4018|       |
 4019|     24|        auto it = ranges::begin(range);
 4020|     24|        std::ptrdiff_t digits_count = 0;
 4021|       |
 4022|     24|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4023|     24|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18, False: 6]
  |  |  ------------------
  ------------------
 4024|     18|            return r.transform_error(
 4025|     18|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4026|     18|                                              "Invalid floating-point value"));
 4027|     18|        }
 4028|      6|        else {
 4029|      6|            digits_count += ranges::distance(it, *r);
 4030|      6|            it = *r;
 4031|      6|        }
 4032|       |
 4033|      6|        m_integral_part_length = digits_count;
 4034|      6|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4034:18): [True: 0, False: 6]
  ------------------
 4035|      6|                                             m_locale_options.decimal_point)) {
 4036|      0|            it = *r;
 4037|      0|        }
 4038|       |
 4039|      6|        if (auto r =
  ------------------
  |  Branch (4039:18): [True: 0, False: 6]
  ------------------
 4040|      6|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4041|      0|            digits_count += ranges::distance(it, *r);
 4042|      0|            it = *r;
 4043|      0|        }
 4044|       |
 4045|      6|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 4046|      0|            return detail::unexpected_scan_error(
 4047|      0|                scan_error::invalid_scanned_value,
 4048|      0|                "No significand digits in float");
 4049|      0|        }
 4050|       |
 4051|      6|        auto beg_exp_it = it;
 4052|      6|        if (allowed_exp) {
  ------------------
  |  Branch (4052:13): [True: 4, False: 2]
  ------------------
 4053|      4|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4054|      4|        }
 4055|      6|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4055:13): [True: 2, False: 4]
  |  Branch (4055:29): [True: 2, False: 0]
  ------------------
 4056|      2|            return detail::unexpected_scan_error(
 4057|      2|                scan_error::invalid_scanned_value,
 4058|      2|                "No exponent given to scientific float");
 4059|      2|        }
 4060|       |
 4061|      4|        m_kind =
 4062|      4|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4062:13): [True: 4, False: 0]
  ------------------
 4063|       |
 4064|      4|        return it;
 4065|      6|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3843|     30|    {
 3844|     30|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 30]
  |  |  |  Branch (1039:45): [True: 0, False: 30]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3845|     30|                         thsep_allowed)) {
 3846|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3847|      0|                return char_to_int(ch) < 10 ||
 3848|      0|                       ch == m_locale_options.thousands_sep;
 3849|      0|            });
 3850|      0|        }
 3851|       |
 3852|     30|        return read_while1_code_unit(
 3853|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3854|     30|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|     36|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     36|        else if constexpr (std::is_object_v<T>) {
  688|     36|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     36|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3853|     36|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4072|  1.08k|    {
 4073|  1.08k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4074|  1.08k|        const bool allowed_nonhex =
 4075|  1.08k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4076|  1.08k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4077|       |
 4078|  1.08k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4078:39): [True: 1.08k, False: 0]
  |  Branch (4078:45): [True: 0, False: 1.08k]
  ------------------
 4079|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4080|      0|                scan_error::invalid_scanned_value,
 4081|      0|                "Invalid infinite floating-point value"));
 4082|      0|        }
 4083|  1.08k|        else if (r) {
  ------------------
  |  Branch (4083:18): [True: 0, False: 1.08k]
  ------------------
 4084|      0|            return *r;
 4085|      0|        }
 4086|       |
 4087|  1.08k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4087:39): [True: 1.08k, False: 0]
  |  Branch (4087:45): [True: 0, False: 1.08k]
  ------------------
 4088|      0|            return unexpected(r.error());
 4089|      0|        }
 4090|  1.08k|        else if (r) {
  ------------------
  |  Branch (4090:18): [True: 0, False: 1.08k]
  ------------------
 4091|      0|            return *r;
 4092|      0|        }
 4093|       |
 4094|  1.08k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4094:13): [True: 1.06k, False: 24]
  |  Branch (4094:28): [True: 74, False: 990]
  ------------------
 4095|       |            // only hex allowed:
 4096|       |            // prefix "0x" allowed, not required
 4097|     74|            auto it = range.begin();
 4098|       |
 4099|     74|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4099:22): [True: 0, False: 74]
  ------------------
 4100|      0|                m_kind = float_kind::hex_with_prefix;
 4101|      0|                it = *r;
 4102|      0|            }
 4103|     74|            else {
 4104|     74|                m_kind = float_kind::hex_without_prefix;
 4105|     74|            }
 4106|       |
 4107|     74|            return read_hex(ranges::subrange{it, range.end()});
 4108|     74|        }
 4109|  1.01k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4109:13): [True: 24, False: 990]
  |  Branch (4109:29): [True: 24, False: 0]
  ------------------
 4110|       |            // only nonhex allowed:
 4111|       |            // no prefix allowed
 4112|     24|            m_kind = float_kind::generic;
 4113|     24|            return read_regular_float(range);
 4114|     24|        }
 4115|       |        // both hex and nonhex allowed:
 4116|       |        // check for "0x" prefix -> hex,
 4117|       |        // regular otherwise
 4118|       |
 4119|    990|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|    990|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 990]
  |  |  ------------------
  ------------------
 4120|      0|            m_kind = float_kind::hex_with_prefix;
 4121|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4122|      0|        }
 4123|       |
 4124|    990|        m_kind = float_kind::generic;
 4125|    990|        return read_regular(range);
 4126|    990|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3807|  1.06k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3808|  1.06k|                    auto res = read_all(rr);
 3809|  1.06k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
 3810|      0|                        return detail::unexpected_scan_error(
 3811|      0|                            scan_error::invalid_scanned_value,
 3812|      0|                            "Invalid float value");
 3813|      0|                    }
 3814|  1.06k|                    return res;
 3815|  1.06k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|  1.06k|{
 1938|  1.06k|    return ranges::next(range.begin(), range.end());
 1939|  1.06k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.06k|    {
  313|  1.06k|        ranges::advance(x, bound);
  314|  1.06k|        return x;
  315|  1.06k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.06k|    {
  275|  1.06k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.06k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|  1.06k|    {
 1676|  1.06k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|  1.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|  1.06k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|  1.06k|    {
 1720|  1.06k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|  1.06k|                      ranges::sized_range<Range>) {
 1725|  1.06k|            m_storage.reset();
 1726|  1.06k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  1.06k|    }
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3746|  1.06k|    {
 3747|  1.06k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.06k]
  |  |  ------------------
  ------------------
 3748|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3749|      0|                classic_with_thsep_tag{}};
 3750|      0|        }
 3751|       |
 3752|  1.06k|        return read_source_impl(range);
 3753|  1.06k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3772|  1.08k|    {
 3773|  1.08k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3774|       |
 3775|  1.08k|        const std::ptrdiff_t sign_len =
 3776|  1.08k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3776:13): [True: 0, False: 1.08k]
  ------------------
 3777|       |
 3778|  1.08k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|  1.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 980, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    980|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    980|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    980|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    980|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    980|    }                                                  \
  |  |  |  | 3957|  1.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3779|    108|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3780|  1.08k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4263|    246|    {
 4264|    246|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|    246|#if !SCN_DISABLE_LOCALE
 4267|    246|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 16, False: 230]
  ------------------
 4268|     16|            return read_impl<Range>(
 4269|     16|                range, rd,
 4270|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4271|     16|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|     16|                },
 4273|     16|                value, loc);
 4274|     16|        }
 4275|    230|#endif
 4276|       |
 4277|    230|        return read_impl<Range>(
 4278|    230|            range, rd,
 4279|    230|            [](float_reader<CharT>& r, auto&&... args) {
 4280|    230|                return r.read_source(SCN_FWD(args)...);
 4281|    230|            },
 4282|    230|            value);
 4283|    246|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4299|    246|    {
 4300|    246|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|    246|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 226, False: 20]
  |  |  ------------------
  ------------------
 4302|    226|            return unexpected(r.error());
 4303|    226|        }
 4304|       |
 4305|     20|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|     20|        return ranges::next(range.begin(), n);
 4307|     20|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     16|        : m_fptr([](storage fn,
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|     16|              if constexpr (std::is_void_v<R>) {
  746|     16|                  obj(static_cast<decltype(args)>(args)...);
  747|     16|              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
  752|     16|          m_storage(std::addressof(f))
  753|     16|    {
  754|     16|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     16|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     16|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     16|              else {
  749|     16|                  return obj(static_cast<decltype(args)>(args)...);
  750|     16|              }
  751|     16|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     16|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     16|        else if constexpr (std::is_object_v<T>) {
  688|     16|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     16|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4270|     16|                [](float_reader<CharT>& r, auto&&... args) {
 4271|     16|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|     16|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     16|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     16|        {
  662|     16|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    230|        : m_fptr([](storage fn,
  743|    230|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    230|              cvref<T> obj = *get<T>(fn);
  745|    230|              if constexpr (std::is_void_v<R>) {
  746|    230|                  obj(static_cast<decltype(args)>(args)...);
  747|    230|              }
  748|    230|              else {
  749|    230|                  return obj(static_cast<decltype(args)>(args)...);
  750|    230|              }
  751|    230|          }),
  752|    230|          m_storage(std::addressof(f))
  753|    230|    {
  754|    230|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    230|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    230|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    230|              else {
  749|    230|                  return obj(static_cast<decltype(args)>(args)...);
  750|    230|              }
  751|    230|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    230|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    230|        else if constexpr (std::is_object_v<T>) {
  688|    230|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    230|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4279|    230|            [](float_reader<CharT>& r, auto&&... args) {
 4280|    230|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|    230|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    230|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    230|        {
  662|    230|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4263|    516|    {
 4264|    516|        float_reader<CharT> rd{get_options(specs)};
 4265|       |
 4266|    516|#if !SCN_DISABLE_LOCALE
 4267|    516|        if (specs.localized) {
  ------------------
  |  Branch (4267:13): [True: 20, False: 496]
  ------------------
 4268|     20|            return read_impl<Range>(
 4269|     20|                range, rd,
 4270|     20|                [](float_reader<CharT>& r, auto&&... args) {
 4271|     20|                    return r.read_source_localized(SCN_FWD(args)...);
 4272|     20|                },
 4273|     20|                value, loc);
 4274|     20|        }
 4275|    496|#endif
 4276|       |
 4277|    496|        return read_impl<Range>(
 4278|    496|            range, rd,
 4279|    496|            [](float_reader<CharT>& r, auto&&... args) {
 4280|    496|                return r.read_source(SCN_FWD(args)...);
 4281|    496|            },
 4282|    496|            value);
 4283|    516|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4299|  1.08k|    {
 4300|  1.08k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4301|  1.08k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  1.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20, False: 1.06k]
  |  |  ------------------
  ------------------
 4302|     20|            return unexpected(r.error());
 4303|     20|        }
 4304|       |
 4305|  1.06k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|  1.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 980, False: 88]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    980|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    980|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    980|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    980|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    980|    }                                                  \
  |  |  |  | 3957|  1.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4306|     88|        return ranges::next(range.begin(), n);
 4307|  1.06k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     20|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     20|        else if constexpr (std::is_object_v<T>) {
  688|     20|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     20|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4270|     20|                [](float_reader<CharT>& r, auto&&... args) {
 4271|     20|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4272|     20|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    496|        : m_fptr([](storage fn,
  743|    496|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    496|              cvref<T> obj = *get<T>(fn);
  745|    496|              if constexpr (std::is_void_v<R>) {
  746|    496|                  obj(static_cast<decltype(args)>(args)...);
  747|    496|              }
  748|    496|              else {
  749|    496|                  return obj(static_cast<decltype(args)>(args)...);
  750|    496|              }
  751|    496|          }),
  752|    496|          m_storage(std::addressof(f))
  753|    496|    {
  754|    496|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    496|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    496|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    496|              else {
  749|    496|                  return obj(static_cast<decltype(args)>(args)...);
  750|    496|              }
  751|    496|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    496|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    496|        else if constexpr (std::is_object_v<T>) {
  688|    496|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    496|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4279|    496|            [](float_reader<CharT>& r, auto&&... args) {
 4280|    496|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    496|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4281|    496|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    496|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    496|        {
  662|    496|        }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5905|  2.01k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|       |                       std::is_same_v<T, std::wstring_view>) {
 5920|       |        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|  2.01k|                       std::is_same_v<T, std::wstring>) {
 5924|  2.01k|        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|  2.01k|}
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5299|  6.03k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|  4.31k|    {
 3188|  4.31k|        reader_error_handler eh{};
 3189|  4.31k|        get_derived().check_specs_impl(specs, eh);
 3190|  4.31k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  4.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 726, False: 3.58k]
  |  |  ------------------
  ------------------
 3191|    726|            return detail::unexpected_scan_error(
 3192|    726|                scan_error::invalid_format_string, eh.m_msg);
 3193|    726|        }
 3194|  3.58k|        return {};
 3195|  4.31k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3199|  4.31k|    {
 3200|  4.31k|        return static_cast<Derived&>(*this);
 3201|  4.31k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5303|  4.31k|    {
 5304|  4.31k|        detail::check_string_type_specs(specs, eh);
 5305|       |
 5306|  4.31k|        SCN_GCC_PUSH
 5307|  4.31k|        SCN_GCC_IGNORE("-Wswitch")
 5308|  4.31k|        SCN_GCC_IGNORE("-Wswitch-default")
 5309|       |
 5310|  4.31k|        SCN_CLANG_PUSH
 5311|  4.31k|        SCN_CLANG_IGNORE("-Wswitch")
 5312|  4.31k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5313|       |
 5314|  4.31k|        switch (specs.type) {
  ------------------
  |  Branch (5314:17): [True: 720, False: 3.59k]
  ------------------
 5315|  1.83k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5315:13): [True: 1.83k, False: 2.48k]
  ------------------
 5316|  1.83k|                m_type = reader_type::word;
 5317|  1.83k|                break;
 5318|       |
 5319|    342|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5319:13): [True: 342, False: 3.97k]
  ------------------
 5320|    342|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5320:21): [True: 72, False: 270]
  ------------------
 5321|    342|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5321:21): [True: 174, False: 96]
  ------------------
 5322|    246|                    m_type = reader_type::custom_word;
 5323|    246|                }
 5324|     96|                else {
 5325|     96|                    m_type = reader_type::word;
 5326|     96|                }
 5327|    342|                break;
 5328|      0|            }
 5329|       |
 5330|     90|            case detail::presentation_type::character:
  ------------------
  |  Branch (5330:13): [True: 90, False: 4.22k]
  ------------------
 5331|     90|                m_type = reader_type::character;
 5332|     90|                break;
 5333|       |
 5334|  1.33k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5334:13): [True: 1.33k, False: 2.98k]
  ------------------
 5335|  1.33k|                m_type = reader_type::character_set;
 5336|  1.33k|                break;
 5337|       |
 5338|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5338:13): [True: 0, False: 4.31k]
  ------------------
 5339|      0|                m_type = reader_type::regex;
 5340|      0|                break;
 5341|       |
 5342|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5342:13): [True: 0, False: 4.31k]
  ------------------
 5343|      0|                m_type = reader_type::regex_escaped;
 5344|      0|                break;
 5345|  4.31k|        }
 5346|       |
 5347|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5348|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5349|  4.31k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5352|  7.03k|    {
 5353|  7.03k|        return m_type == reader_type::word;
 5354|  7.03k|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  6.43k|{
 1242|  6.43k|    auto it = src.begin();
 1243|  64.6k|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 59.5k, False: 5.12k]
  ------------------
 1244|  59.5k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  59.5k|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 59.5k]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  59.5k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 59.5k]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  59.5k|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  59.5k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  59.5k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 1.30k, False: 58.2k]
  ------------------
 1254|  1.30k|            return false;
 1255|  1.30k|        }
 1256|  58.2k|        it += len;
 1257|  58.2k|    }
 1258|  5.12k|    return true;
 1259|  6.43k|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|    310|{
 3140|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|       |        if (source.stores_allocated_string()) {
 3142|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 3143|       |        }
 3144|       |        else {
 3145|       |            dest.assign(source.view());
 3146|       |        }
 3147|       |    }
 3148|    310|    else {
 3149|    310|        return transcode_impl(source.view(), dest);
 3150|    310|    }
 3151|       |
 3152|      0|    return {};
 3153|    310|}
_ZN3scn2v44impl14transcode_implIwcEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEERNS5_12basic_stringIT0_NS8_ISC_EENS5_9allocatorISC_EEEE:
 3114|  1.28k|{
 3115|  1.28k|    dst.clear();
 3116|  1.28k|    transcode_valid_to_string(src, dst);
 3117|  1.28k|    return {};
 3118|  1.28k|}
_ZN3scn2v44impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1501|  1.28k|{
 1502|  1.28k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1503|       |
 1504|  1.28k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  | 1104|  1.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1505|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1506|       |        if constexpr (sizeof(DestCharT) == 2) {
 1507|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1508|       |            std::u32string tmp;
 1509|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1510|       |            return transcode_to_string_impl_32to16<true>(
 1511|       |                std::u32string_view{tmp}, dest);
 1512|       |        }
 1513|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1514|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1515|       |        }
 1516|       |    }
 1517|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1518|       |        if constexpr (sizeof(DestCharT) == 1) {
 1519|       |            std::u32string tmp;
 1520|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1521|       |            return transcode_to_string_impl_32to8<true>(
 1522|       |                std::u32string_view{tmp}, dest);
 1523|       |        }
 1524|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1525|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1526|       |        }
 1527|       |    }
 1528|  1.28k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1529|  1.28k|        if constexpr (sizeof(DestCharT) == 1) {
 1530|  1.28k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1531|       |        }
 1532|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1533|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1534|       |        }
 1535|  1.28k|    }
 1536|       |
 1537|  1.28k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  1.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1538|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1539|  1.28k|}
_ZN3scn2v44impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1392|  1.28k|{
 1393|  1.28k|    static_assert(sizeof(SourceCharT) == 4);
 1394|  1.28k|    static_assert(sizeof(DestCharT) == 1);
 1395|       |
 1396|  12.1k|    for (auto cp : src) {
  ------------------
  |  Branch (1396:18): [True: 12.1k, False: 1.28k]
  ------------------
 1397|  12.1k|        const auto u32cp = static_cast<uint32_t>(cp);
 1398|  12.1k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  | 1039|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [Folded - Ignored]
  |  |  |  Branch (1039:45): [Folded - Ignored]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1399|       |            // Replacement character
 1400|      0|            dest.push_back(static_cast<char>(0xef));
 1401|      0|            dest.push_back(static_cast<char>(0xbf));
 1402|      0|            dest.push_back(static_cast<char>(0xbd));
 1403|      0|        }
 1404|  12.1k|        else if (cp < 128) {
  ------------------
  |  Branch (1404:18): [True: 10.1k, False: 2.02k]
  ------------------
 1405|  10.1k|            dest.push_back(static_cast<char>(cp));
 1406|  10.1k|        }
 1407|  2.02k|        else if (cp < 2048) {
  ------------------
  |  Branch (1407:18): [True: 210, False: 1.81k]
  ------------------
 1408|    210|            dest.push_back(
 1409|    210|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1410|    210|            dest.push_back(
 1411|    210|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1412|    210|        }
 1413|  1.81k|        else if (cp < 65536) {
  ------------------
  |  Branch (1413:18): [True: 1.37k, False: 436]
  ------------------
 1414|  1.37k|            dest.push_back(
 1415|  1.37k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1416|  1.37k|            dest.push_back(static_cast<char>(
 1417|  1.37k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1418|  1.37k|            dest.push_back(
 1419|  1.37k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1420|  1.37k|        }
 1421|    436|        else {
 1422|    436|            dest.push_back(
 1423|    436|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1424|    436|            dest.push_back(static_cast<char>(
 1425|    436|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1426|    436|            dest.push_back(static_cast<char>(
 1427|    436|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1428|    436|            dest.push_back(
 1429|    436|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1430|    436|        }
 1431|  12.1k|    }
 1432|  1.28k|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5200|  1.33k|        {
 5201|  1.33k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5201:17): [True: 396, False: 936]
  ------------------
 5202|    396|                return {};
 5203|    396|            }
 5204|       |
 5205|    936|            auto charset_string = specs.charset_string<SourceCharT>();
 5206|    936|            auto it = detail::to_address(charset_string.begin());
 5207|    936|            auto set = detail::parse_presentation_set(
 5208|    936|                it, detail::to_address(charset_string.end()), nonascii);
 5209|    936|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3948|    936|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 936]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5210|    936|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1105|    936|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5211|    936|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1105|    936|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|    936|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5212|       |
 5213|    936|            std::sort(nonascii.extra_ranges.begin(),
 5214|    936|                      nonascii.extra_ranges.end());
 5215|    936|            return {};
 5216|    936|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5233|  11.7k|        {
 5234|  11.7k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5234:17): [True: 3.54k, False: 8.23k]
  ------------------
 5235|  3.54k|                return helper.is_char_set_in_extra_literals(cp);
 5236|  3.54k|            }
 5237|       |
 5238|  8.23k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5239|  11.7k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5183|  3.54k|        {
 5184|       |            // TODO: binary search?
 5185|  3.54k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5185:17): [True: 0, False: 3.54k]
  ------------------
 5186|      0|                return false;
 5187|      0|            }
 5188|       |
 5189|  3.54k|            const auto cp_val = static_cast<uint32_t>(cp);
 5190|  3.54k|            return std::find_if(
 5191|  3.54k|                       nonascii.extra_ranges.begin(),
 5192|  3.54k|                       nonascii.extra_ranges.end(),
 5193|  3.54k|                       [cp_val](const auto& pair) noexcept {
 5194|  3.54k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5195|  3.54k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5196|  3.54k|                       }) != nonascii.extra_ranges.end();
 5197|  3.54k|        }
_ZZNK3scn2v44impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5193|  28.2k|                       [cp_val](const auto& pair) noexcept {
 5194|  28.2k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5194:35): [True: 25.5k, False: 2.71k]
  ------------------
 5195|  28.2k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5195:35): [True: 2.66k, False: 22.9k]
  ------------------
 5196|  28.2k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5173|  12.2k|        {
 5174|  12.2k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1104|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5175|  12.2k|            const auto val =
 5176|  12.2k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5177|  12.2k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5178|  12.2k|                    (val % 8)) &
 5179|  12.2k|                   1u;
 5180|  12.2k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5224|  4.21k|        {
 5225|  4.21k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5225:17): [True: 198, False: 4.02k]
  ------------------
 5226|    198|                return false;
 5227|    198|            }
 5228|       |
 5229|  4.02k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5230|  4.21k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5170|  1.33k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5370|    472|    {
 5371|    472|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    472|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|    472|        return read_impl(range, specs, value);
 5373|    472|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5388|    472|    {
 5389|    472|        SCN_CLANG_PUSH
 5390|    472|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|    472|        switch (m_type) {
 5393|    208|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 208, False: 264]
  ------------------
 5394|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     42|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 42, False: 430]
  ------------------
 5397|     42|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     42|                                                                   value);
 5399|       |
 5400|     26|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 26, False: 446]
  ------------------
 5401|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 196, False: 276]
  ------------------
 5404|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    196|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 472]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 472]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 472]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|    472|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|    472|        }
 5425|       |
 5426|    472|        SCN_CLANG_POP
 5427|    472|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4921|    208|    {
 4922|    208|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|    208|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4855|    276|{
 4856|    276|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    276|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    276|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 142, False: 134]
  ------------------
 4860|    142|        return detail::unexpected_scan_error(
 4861|    142|            scan_error::invalid_scanned_value,
 4862|    142|            "Invalid encoding in scanned string");
 4863|    142|    }
 4864|       |
 4865|    134|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    134|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 134]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    134|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    134|    static_cast<    \
  |  | 1109|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    134|}
_ZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2219|    624|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|    624|    else {
 2229|    624|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|    624|        return read_until_code_point(
 2241|    624|            ranges::subrange{it, range.end()},
 2242|    624|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|    624|    }
 2244|    624|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2192|    624|{
 2193|    624|    auto it = range.begin();
 2194|  11.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 11.0k, False: 534]
  ------------------
 2195|  11.0k|        const auto val =
 2196|  11.0k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  11.0k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 11.0k, False: 0]
  |  |  ------------------
  ------------------
 2198|  11.0k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  11.0k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  11.0k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 90, False: 10.9k]
  ------------------
 2201|     90|                return it;
 2202|     90|            }
 2203|  11.0k|        }
 2204|  10.9k|        it = val.iterator;
 2205|  10.9k|    }
 2206|       |
 2207|    534|    return it;
 2208|    624|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    624|        : m_fptr([](storage fn,
  743|    624|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    624|              cvref<T> obj = *get<T>(fn);
  745|    624|              if constexpr (std::is_void_v<R>) {
  746|    624|                  obj(static_cast<decltype(args)>(args)...);
  747|    624|              }
  748|    624|              else {
  749|    624|                  return obj(static_cast<decltype(args)>(args)...);
  750|    624|              }
  751|    624|          }),
  752|    624|          m_storage(std::addressof(f))
  753|    624|    {
  754|    624|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  11.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.0k|              else {
  749|  11.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.0k|              }
  751|  11.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  11.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.0k|        else if constexpr (std::is_object_v<T>) {
  688|  11.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.0k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2242|  11.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    624|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    624|        {
  662|    624|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4942|     42|    {
 4943|     42|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4943:13): [True: 42, False: 0]
  ------------------
 4944|     42|            return read_string_impl(
 4945|     42|                range,
 4946|     42|                read_until_code_unit(
 4947|     42|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4948|     42|                value);
 4949|     42|        }
 4950|      0|        return read_string_impl(
 4951|      0|            range,
 4952|      0|            read_until_code_units(
 4953|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4954|      0|            value);
 4955|     42|    }
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS0_6detail11mp_identityINDTcl4implISE_EEE4typeEE4typeE:
 2055|    126|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find(range.begin(), range.end(), cu);
 2058|       |    }
 2059|    126|    else {
 2060|    126|        auto first = range.begin();
 2061|  3.32k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 3.20k, False: 120]
  ------------------
 2062|  3.20k|            if (*first == cu) {
  ------------------
  |  Branch (2062:17): [True: 6, False: 3.19k]
  ------------------
 2063|      6|                return first;
 2064|      6|            }
 2065|  3.20k|        }
 2066|    120|        return first;
 2067|    126|    }
 2068|    126|}
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5044|     26|    {
 5045|     26|        return read_impl(
 5046|     26|            range,
 5047|     26|            [&](const auto& rng) {
 5048|     26|                return read_string_impl(rng, read_all(rng), value);
 5049|     26|            },
 5050|     26|            detail::priority_tag<1>{});
 5051|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5071|     26|    {
 5072|     26|        return read_cb(range);
 5073|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5047|     26|            [&](const auto& rng) {
 5048|     26|                return read_string_impl(rng, read_all(rng), value);
 5049|     26|            },
_ZN3scn2v44impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1937|     78|{
 1938|     78|    return ranges::next(range.begin(), range.end());
 1939|     78|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     78|    {
  313|     78|        ranges::advance(x, bound);
  314|     78|        return x;
  315|     78|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     78|    {
  275|     78|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     78|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     78|    {
  203|  1.37k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.29k, False: 78]
  ------------------
  204|  1.29k|            ++i;
  205|  1.29k|        }
  206|     78|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5145|    196|    {
 5146|    196|        auto it = read_source_impl(range, {specs});
 5147|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16, False: 180]
  |  |  ------------------
  ------------------
 5148|     16|            return unexpected(it.error());
 5149|     16|        }
 5150|       |
 5151|    180|        return read_string_impl(range, *it, value);
 5152|    196|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5248|    588|    {
 5249|    588|        const bool is_inverted = helper.specs.charset_is_inverted;
 5250|    588|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5251|       |
 5252|    588|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|    588|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    588|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 588]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5253|       |
 5254|    588|        read_source_callback cb_wrapper{helper};
 5255|       |
 5256|    588|        if (accepts_nonascii) {
  ------------------
  |  Branch (5256:13): [True: 372, False: 216]
  ------------------
 5257|    372|            const auto cb = [&](char32_t cp) {
 5258|    372|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|    372|            };
 5260|       |
 5261|    372|            if (is_inverted) {
  ------------------
  |  Branch (5261:17): [True: 198, False: 174]
  ------------------
 5262|    198|                auto it = read_until_code_point(range, cb);
 5263|    198|                return check_nonempty(it, range);
 5264|    198|            }
 5265|    174|            auto it = read_while_code_point(range, cb);
 5266|    174|            return check_nonempty(it, range);
 5267|    372|        }
 5268|       |
 5269|    216|        const auto cb = [&](SourceCharT ch) {
 5270|    216|            return cb_wrapper.on_ascii_only(ch);
 5271|    216|        };
 5272|       |
 5273|    216|        if (is_inverted) {
  ------------------
  |  Branch (5273:13): [True: 114, False: 102]
  ------------------
 5274|    114|            auto it = read_until_code_unit(range, cb);
 5275|    114|            return check_nonempty(it, range);
 5276|    114|        }
 5277|    102|        auto it = read_while_code_unit(range, cb);
 5278|    102|        return check_nonempty(it, range);
 5279|    216|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    372|        : m_fptr([](storage fn,
  743|    372|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    372|              cvref<T> obj = *get<T>(fn);
  745|    372|              if constexpr (std::is_void_v<R>) {
  746|    372|                  obj(static_cast<decltype(args)>(args)...);
  747|    372|              }
  748|    372|              else {
  749|    372|                  return obj(static_cast<decltype(args)>(args)...);
  750|    372|              }
  751|    372|          }),
  752|    372|          m_storage(std::addressof(f))
  753|    372|    {
  754|    372|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  4.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.60k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.60k|              else {
  749|  4.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.60k|              }
  751|  4.60k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  4.60k|    {
  684|  4.60k|        if constexpr (std::is_const_v<T>) {
  685|  4.60k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.60k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5257|  4.60k|            const auto cb = [&](char32_t cp) {
 5258|  4.60k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|  4.60k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    372|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    372|        {
  667|    372|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5284|    588|    {
 5285|    588|        if (it == range.begin()) {
  ------------------
  |  Branch (5285:13): [True: 48, False: 540]
  ------------------
 5286|     48|            return detail::unexpected_scan_error(
 5287|     48|                scan_error::invalid_scanned_value,
 5288|     48|                "No characters matched in [character set]");
 5289|     48|        }
 5290|       |
 5291|    540|        return it;
 5292|    588|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    216|        : m_fptr([](storage fn,
  743|    216|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    216|              cvref<T> obj = *get<T>(fn);
  745|    216|              if constexpr (std::is_void_v<R>) {
  746|    216|                  obj(static_cast<decltype(args)>(args)...);
  747|    216|              }
  748|    216|              else {
  749|    216|                  return obj(static_cast<decltype(args)>(args)...);
  750|    216|              }
  751|    216|          }),
  752|    216|          m_storage(std::addressof(f))
  753|    216|    {
  754|    216|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  2.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.14k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.14k|              else {
  749|  2.14k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.14k|              }
  751|  2.14k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.14k|    {
  684|  2.14k|        if constexpr (std::is_const_v<T>) {
  685|  2.14k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.14k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5269|  2.14k|        const auto cb = [&](SourceCharT ch) {
 5270|  2.14k|            return cb_wrapper.on_ascii_only(ch);
 5271|  2.14k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    216|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    216|        {
  667|    216|        }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4855|    180|{
 4856|    180|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    180|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    180|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 4, False: 176]
  ------------------
 4860|      4|        return detail::unexpected_scan_error(
 4861|      4|            scan_error::invalid_scanned_value,
 4862|      4|            "Invalid encoding in scanned string");
 4863|      4|    }
 4864|       |
 4865|    176|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    176|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 176]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    176|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    176|    static_cast<    \
  |  | 1109|    176|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    176|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5370|    708|    {
 5371|    708|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    708|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|    708|        return read_impl(range, specs, value);
 5373|    708|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5388|    708|    {
 5389|    708|        SCN_CLANG_PUSH
 5390|    708|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|    708|        switch (m_type) {
 5393|    422|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 422, False: 286]
  ------------------
 5394|    422|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 38, False: 670]
  ------------------
 5397|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     38|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 708]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    248|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 248, False: 460]
  ------------------
 5404|    248|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    248|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 708]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 708]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 708]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|    708|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|    708|        }
 5425|       |
 5426|    708|        SCN_CLANG_POP
 5427|    708|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4921|    994|    {
 4922|    994|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|    994|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4855|  1.03k|{
 4856|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 284, False: 748]
  ------------------
 4860|    284|        return detail::unexpected_scan_error(
 4861|    284|            scan_error::invalid_scanned_value,
 4862|    284|            "Invalid encoding in scanned string");
 4863|    284|    }
 4864|       |
 4865|    748|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    748|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    748|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 748]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    748|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    748|    static_cast<    \
  |  | 1109|    748|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    748|}
_ZN3scn2v44impl22transcode_if_necessaryIwcEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|    972|{
 3160|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|       |        dest.assign(source.view());
 3162|       |    }
 3163|    972|    else {
 3164|    972|        return transcode_impl(source.view(), dest);
 3165|    972|    }
 3166|       |
 3167|      0|    return {};
 3168|    972|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2219|  2.98k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|  2.98k|    else {
 2229|  2.98k|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|  2.98k|        return read_until_code_point(
 2241|  2.98k|            ranges::subrange{it, range.end()},
 2242|  2.98k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|  2.98k|    }
 2244|  2.98k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.98k|        : m_fptr([](storage fn,
  743|  2.98k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.98k|              cvref<T> obj = *get<T>(fn);
  745|  2.98k|              if constexpr (std::is_void_v<R>) {
  746|  2.98k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.98k|              }
  748|  2.98k|              else {
  749|  2.98k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.98k|              }
  751|  2.98k|          }),
  752|  2.98k|          m_storage(std::addressof(f))
  753|  2.98k|    {
  754|  2.98k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.9k|              else {
  749|  34.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.9k|              }
  751|  34.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  34.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.9k|        else if constexpr (std::is_object_v<T>) {
  688|  34.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.9k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2242|  34.9k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.98k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.98k|        {
  662|  2.98k|        }
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4942|     38|    {
 4943|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4943:13): [True: 38, False: 0]
  ------------------
 4944|     38|            return read_string_impl(
 4945|     38|                range,
 4946|     38|                read_until_code_unit(
 4947|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4948|     38|                value);
 4949|     38|        }
 4950|      0|        return read_string_impl(
 4951|      0|            range,
 4952|      0|            read_until_code_units(
 4953|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4954|      0|            value);
 4955|     38|    }
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS0_6detail11mp_identityINDTcl4implISC_EEE4typeEE4typeE:
 2055|    114|{
 2056|    114|    if constexpr (ranges::common_range<Range>) {
 2057|    114|        return std::find(range.begin(), range.end(), cu);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (*first == cu) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|    114|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5145|    248|    {
 5146|    248|        auto it = read_source_impl(range, {specs});
 5147|    248|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18, False: 230]
  |  |  ------------------
  ------------------
 5148|     18|            return unexpected(it.error());
 5149|     18|        }
 5150|       |
 5151|    230|        return read_string_impl(range, *it, value);
 5152|    248|    }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5248|    744|    {
 5249|    744|        const bool is_inverted = helper.specs.charset_is_inverted;
 5250|    744|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5251|       |
 5252|    744|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|    744|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    744|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 744]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5253|       |
 5254|    744|        read_source_callback cb_wrapper{helper};
 5255|       |
 5256|    744|        if (accepts_nonascii) {
  ------------------
  |  Branch (5256:13): [True: 564, False: 180]
  ------------------
 5257|    564|            const auto cb = [&](char32_t cp) {
 5258|    564|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|    564|            };
 5260|       |
 5261|    564|            if (is_inverted) {
  ------------------
  |  Branch (5261:17): [True: 360, False: 204]
  ------------------
 5262|    360|                auto it = read_until_code_point(range, cb);
 5263|    360|                return check_nonempty(it, range);
 5264|    360|            }
 5265|    204|            auto it = read_while_code_point(range, cb);
 5266|    204|            return check_nonempty(it, range);
 5267|    564|        }
 5268|       |
 5269|    180|        const auto cb = [&](SourceCharT ch) {
 5270|    180|            return cb_wrapper.on_ascii_only(ch);
 5271|    180|        };
 5272|       |
 5273|    180|        if (is_inverted) {
  ------------------
  |  Branch (5273:13): [True: 78, False: 102]
  ------------------
 5274|     78|            auto it = read_until_code_unit(range, cb);
 5275|     78|            return check_nonempty(it, range);
 5276|     78|        }
 5277|    102|        auto it = read_while_code_unit(range, cb);
 5278|    102|        return check_nonempty(it, range);
 5279|    180|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    564|        : m_fptr([](storage fn,
  743|    564|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    564|              cvref<T> obj = *get<T>(fn);
  745|    564|              if constexpr (std::is_void_v<R>) {
  746|    564|                  obj(static_cast<decltype(args)>(args)...);
  747|    564|              }
  748|    564|              else {
  749|    564|                  return obj(static_cast<decltype(args)>(args)...);
  750|    564|              }
  751|    564|          }),
  752|    564|          m_storage(std::addressof(f))
  753|    564|    {
  754|    564|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  7.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.17k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.17k|              else {
  749|  7.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.17k|              }
  751|  7.17k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  7.17k|    {
  684|  7.17k|        if constexpr (std::is_const_v<T>) {
  685|  7.17k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.17k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5257|  7.17k|            const auto cb = [&](char32_t cp) {
 5258|  7.17k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|  7.17k|            };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    564|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    564|        {
  667|    564|        }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5284|    744|    {
 5285|    744|        if (it == range.begin()) {
  ------------------
  |  Branch (5285:13): [True: 54, False: 690]
  ------------------
 5286|     54|            return detail::unexpected_scan_error(
 5287|     54|                scan_error::invalid_scanned_value,
 5288|     54|                "No characters matched in [character set]");
 5289|     54|        }
 5290|       |
 5291|    690|        return it;
 5292|    744|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    180|        : m_fptr([](storage fn,
  743|    180|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    180|              cvref<T> obj = *get<T>(fn);
  745|    180|              if constexpr (std::is_void_v<R>) {
  746|    180|                  obj(static_cast<decltype(args)>(args)...);
  747|    180|              }
  748|    180|              else {
  749|    180|                  return obj(static_cast<decltype(args)>(args)...);
  750|    180|              }
  751|    180|          }),
  752|    180|          m_storage(std::addressof(f))
  753|    180|    {
  754|    180|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  2.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.07k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.07k|              else {
  749|  2.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.07k|              }
  751|  2.07k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.07k|    {
  684|  2.07k|        if constexpr (std::is_const_v<T>) {
  685|  2.07k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.07k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5269|  2.07k|        const auto cb = [&](SourceCharT ch) {
 5270|  2.07k|            return cb_wrapper.on_ascii_only(ch);
 5271|  2.07k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    180|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    180|        {
  667|    180|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4855|    230|{
 4856|    230|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    230|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    230|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 6, False: 224]
  ------------------
 4860|      6|        return detail::unexpected_scan_error(
 4861|      6|            scan_error::invalid_scanned_value,
 4862|      6|            "Invalid encoding in scanned string");
 4863|      6|    }
 4864|       |
 4865|    224|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    224|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 224]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    224|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    224|    static_cast<    \
  |  | 1109|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    224|}
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5905|  2.01k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|       |                       std::is_same_v<T, std::wstring_view>) {
 5920|       |        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|  2.01k|                       std::is_same_v<T, std::wstring>) {
 5924|  2.01k|        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|  2.01k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|    310|{
 3140|    310|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|    310|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3141:13): [True: 310, False: 0]
  ------------------
 3142|    310|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1108|    310|    static_cast<    \
  |  | 1109|    310|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3143|    310|        }
 3144|      0|        else {
 3145|      0|            dest.assign(source.view());
 3146|      0|        }
 3147|       |    }
 3148|       |    else {
 3149|       |        return transcode_impl(source.view(), dest);
 3150|       |    }
 3151|       |
 3152|    310|    return {};
 3153|    310|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5370|    472|    {
 5371|    472|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    472|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|    472|        return read_impl(range, specs, value);
 5373|    472|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5388|    472|    {
 5389|    472|        SCN_CLANG_PUSH
 5390|    472|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|    472|        switch (m_type) {
 5393|    208|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 208, False: 264]
  ------------------
 5394|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     42|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 42, False: 430]
  ------------------
 5397|     42|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     42|                                                                   value);
 5399|       |
 5400|     26|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 26, False: 446]
  ------------------
 5401|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 196, False: 276]
  ------------------
 5404|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    196|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 472]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 472]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 472]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|    472|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|    472|        }
 5425|       |
 5426|    472|        SCN_CLANG_POP
 5427|    472|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4921|    208|    {
 4922|    208|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|    208|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4855|    276|{
 4856|    276|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    276|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    276|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 142, False: 134]
  ------------------
 4860|    142|        return detail::unexpected_scan_error(
 4861|    142|            scan_error::invalid_scanned_value,
 4862|    142|            "Invalid encoding in scanned string");
 4863|    142|    }
 4864|       |
 4865|    134|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    134|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    134|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 134]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    134|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    134|    static_cast<    \
  |  | 1109|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    134|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4942|     42|    {
 4943|     42|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4943:13): [True: 42, False: 0]
  ------------------
 4944|     42|            return read_string_impl(
 4945|     42|                range,
 4946|     42|                read_until_code_unit(
 4947|     42|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4948|     42|                value);
 4949|     42|        }
 4950|      0|        return read_string_impl(
 4951|      0|            range,
 4952|      0|            read_until_code_units(
 4953|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4954|      0|            value);
 4955|     42|    }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 5044|     26|    {
 5045|     26|        return read_impl(
 5046|     26|            range,
 5047|     26|            [&](const auto& rng) {
 5048|     26|                return read_string_impl(rng, read_all(rng), value);
 5049|     26|            },
 5050|     26|            detail::priority_tag<1>{});
 5051|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 5071|     26|    {
 5072|     26|        return read_cb(range);
 5073|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 5047|     26|            [&](const auto& rng) {
 5048|     26|                return read_string_impl(rng, read_all(rng), value);
 5049|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5145|    196|    {
 5146|    196|        auto it = read_source_impl(range, {specs});
 5147|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16, False: 180]
  |  |  ------------------
  ------------------
 5148|     16|            return unexpected(it.error());
 5149|     16|        }
 5150|       |
 5151|    180|        return read_string_impl(range, *it, value);
 5152|    196|    }
_ZN3scn2v44impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4855|    180|{
 4856|    180|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    180|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    180|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 4, False: 176]
  ------------------
 4860|      4|        return detail::unexpected_scan_error(
 4861|      4|            scan_error::invalid_scanned_value,
 4862|      4|            "Invalid encoding in scanned string");
 4863|      4|    }
 4864|       |
 4865|    176|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    176|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 176]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    176|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    176|    static_cast<    \
  |  | 1109|    176|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    176|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5370|    708|    {
 5371|    708|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    708|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|    708|        return read_impl(range, specs, value);
 5373|    708|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5388|    708|    {
 5389|    708|        SCN_CLANG_PUSH
 5390|    708|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|    708|        switch (m_type) {
 5393|    422|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 422, False: 286]
  ------------------
 5394|    422|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 38, False: 670]
  ------------------
 5397|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     38|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 708]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    248|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 248, False: 460]
  ------------------
 5404|    248|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    248|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 708]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 708]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 708]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|    708|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|    708|        }
 5425|       |
 5426|    708|        SCN_CLANG_POP
 5427|    708|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4921|    994|    {
 4922|    994|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|    994|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4855|  1.03k|{
 4856|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 284, False: 748]
  ------------------
 4860|    284|        return detail::unexpected_scan_error(
 4861|    284|            scan_error::invalid_scanned_value,
 4862|    284|            "Invalid encoding in scanned string");
 4863|    284|    }
 4864|       |
 4865|    748|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    748|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    748|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 748]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    748|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    748|    static_cast<    \
  |  | 1109|    748|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    748|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|    972|{
 3160|    972|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|    972|        dest.assign(source.view());
 3162|       |    }
 3163|       |    else {
 3164|       |        return transcode_impl(source.view(), dest);
 3165|       |    }
 3166|       |
 3167|    972|    return {};
 3168|    972|}
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4942|     38|    {
 4943|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4943:13): [True: 38, False: 0]
  ------------------
 4944|     38|            return read_string_impl(
 4945|     38|                range,
 4946|     38|                read_until_code_unit(
 4947|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4948|     38|                value);
 4949|     38|        }
 4950|      0|        return read_string_impl(
 4951|      0|            range,
 4952|      0|            read_until_code_units(
 4953|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4954|      0|            value);
 4955|     38|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5145|    248|    {
 5146|    248|        auto it = read_source_impl(range, {specs});
 5147|    248|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18, False: 230]
  |  |  ------------------
  ------------------
 5148|     18|            return unexpected(it.error());
 5149|     18|        }
 5150|       |
 5151|    230|        return read_string_impl(range, *it, value);
 5152|    248|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4855|    230|{
 4856|    230|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    230|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    230|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 6, False: 224]
  ------------------
 4860|      6|        return detail::unexpected_scan_error(
 4861|      6|            scan_error::invalid_scanned_value,
 4862|      6|            "Invalid encoding in scanned string");
 4863|      6|    }
 4864|       |
 4865|    224|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    224|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    224|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 224]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    224|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    224|    static_cast<    \
  |  | 1109|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    224|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5905|  2.01k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|  2.01k|                       std::is_same_v<T, std::wstring_view>) {
 5920|  2.01k|        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|       |                       std::is_same_v<T, std::wstring>) {
 5924|       |        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|  2.01k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5370|    472|    {
 5371|    472|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    472|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|    472|        return read_impl(range, specs, value);
 5373|    472|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5388|    472|    {
 5389|    472|        SCN_CLANG_PUSH
 5390|    472|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|    472|        switch (m_type) {
 5393|    208|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 208, False: 264]
  ------------------
 5394|    208|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     42|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 42, False: 430]
  ------------------
 5397|     42|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     42|                                                                   value);
 5399|       |
 5400|     26|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 26, False: 446]
  ------------------
 5401|     26|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    196|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 196, False: 276]
  ------------------
 5404|    196|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    196|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 472]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 472]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 472]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|    472|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|    472|        }
 5425|       |
 5426|    472|        SCN_CLANG_POP
 5427|    472|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4928|    208|    {
 4929|    208|        return read_string_view_impl(range, read_until_classic_space(range),
 4930|    208|                                     value);
 4931|    208|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4874|    276|{
 4875|    276|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|    276|    auto src = [&]() {
 4878|    276|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    276|            return make_contiguous_buffer(
 4880|    276|                ranges::subrange{range.begin().base(), result.base()});
 4881|    276|        }
 4882|    276|        else {
 4883|    276|            return make_contiguous_buffer(
 4884|    276|                ranges::subrange{range.begin(), result});
 4885|    276|        }
 4886|    276|    }();
 4887|    276|    using src_type = decltype(src);
 4888|       |
 4889|    276|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|    276|    else {
 4902|    276|        const auto view = src.view();
 4903|    276|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|    276|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 142, False: 134]
  ------------------
 4906|    142|            return detail::unexpected_scan_error(
 4907|    142|                scan_error::invalid_scanned_value,
 4908|    142|                "Invalid encoding in scanned string_view");
 4909|    142|        }
 4910|       |
 4911|    134|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    134|    static_cast<    \
  |  | 1109|    134|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|    276|    }
 4913|    276|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4877|    276|    auto src = [&]() {
 4878|    276|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    276|            return make_contiguous_buffer(
 4880|    276|                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|       |        else {
 4883|       |            return make_contiguous_buffer(
 4884|       |                ranges::subrange{range.begin(), result});
 4885|       |        }
 4886|    276|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4962|     42|    {
 4963|     42|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4963:13): [True: 42, False: 0]
  ------------------
 4964|     42|            return read_string_view_impl(
 4965|     42|                range,
 4966|     42|                read_until_code_unit(
 4967|     42|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4968|     42|                value);
 4969|     42|        }
 4970|      0|        return read_string_view_impl(
 4971|      0|            range,
 4972|      0|            read_until_code_units(
 4973|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4974|      0|            value);
 4975|     42|    }
_ZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 5056|     26|    {
 5057|     26|        return read_impl(
 5058|     26|            range,
 5059|     26|            [&](const auto& rng) {
 5060|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5061|     26|            },
 5062|     26|            detail::priority_tag<1>{});
 5063|     26|    }
_ZN3scn2v44impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 5071|     26|    {
 5072|     26|        return read_cb(range);
 5073|     26|    }
_ZZN3scn2v44impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 5059|     26|            [&](const auto& rng) {
 5060|     26|                return read_string_view_impl(rng, read_all(rng), value);
 5061|     26|            },
_ZN3scn2v44impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5159|    196|    {
 5160|    196|        auto it = read_source_impl(range, {specs});
 5161|    196|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16, False: 180]
  |  |  ------------------
  ------------------
 5162|     16|            return unexpected(it.error());
 5163|     16|        }
 5164|       |
 5165|    180|        return read_string_view_impl(range, *it, value);
 5166|    196|    }
_ZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4874|    180|{
 4875|    180|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|    180|    auto src = [&]() {
 4878|    180|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    180|            return make_contiguous_buffer(
 4880|    180|                ranges::subrange{range.begin().base(), result.base()});
 4881|    180|        }
 4882|    180|        else {
 4883|    180|            return make_contiguous_buffer(
 4884|    180|                ranges::subrange{range.begin(), result});
 4885|    180|        }
 4886|    180|    }();
 4887|    180|    using src_type = decltype(src);
 4888|       |
 4889|    180|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|    180|    else {
 4902|    180|        const auto view = src.view();
 4903|    180|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|    180|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 4, False: 176]
  ------------------
 4906|      4|            return detail::unexpected_scan_error(
 4907|      4|                scan_error::invalid_scanned_value,
 4908|      4|                "Invalid encoding in scanned string_view");
 4909|      4|        }
 4910|       |
 4911|    176|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    176|    static_cast<    \
  |  | 1109|    176|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|    180|    }
 4913|    180|}
_ZZN3scn2v44impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4877|    180|    auto src = [&]() {
 4878|    180|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    180|            return make_contiguous_buffer(
 4880|    180|                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|       |        else {
 4883|       |            return make_contiguous_buffer(
 4884|       |                ranges::subrange{range.begin(), result});
 4885|       |        }
 4886|    180|    }();
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5370|    708|    {
 5371|    708|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    708|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|    708|        return read_impl(range, specs, value);
 5373|    708|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5388|    708|    {
 5389|    708|        SCN_CLANG_PUSH
 5390|    708|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|    708|        switch (m_type) {
 5393|    422|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 422, False: 286]
  ------------------
 5394|    422|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|     38|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 38, False: 670]
  ------------------
 5397|     38|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|     38|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 708]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|    248|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 248, False: 460]
  ------------------
 5404|    248|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|    248|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 708]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 708]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 708]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|    708|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|    708|        }
 5425|       |
 5426|    708|        SCN_CLANG_POP
 5427|    708|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4928|    994|    {
 4929|    994|        return read_string_view_impl(range, read_until_classic_space(range),
 4930|    994|                                     value);
 4931|    994|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4874|  1.03k|{
 4875|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|  1.03k|    auto src = [&]() {
 4878|  1.03k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|  1.03k|            return make_contiguous_buffer(
 4880|  1.03k|                ranges::subrange{range.begin().base(), result.base()});
 4881|  1.03k|        }
 4882|  1.03k|        else {
 4883|  1.03k|            return make_contiguous_buffer(
 4884|  1.03k|                ranges::subrange{range.begin(), result});
 4885|  1.03k|        }
 4886|  1.03k|    }();
 4887|  1.03k|    using src_type = decltype(src);
 4888|       |
 4889|  1.03k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|  1.03k|    else {
 4902|  1.03k|        const auto view = src.view();
 4903|  1.03k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|  1.03k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 284, False: 748]
  ------------------
 4906|    284|            return detail::unexpected_scan_error(
 4907|    284|                scan_error::invalid_scanned_value,
 4908|    284|                "Invalid encoding in scanned string_view");
 4909|    284|        }
 4910|       |
 4911|    748|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    748|    static_cast<    \
  |  | 1109|    748|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|  1.03k|    }
 4913|  1.03k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4877|  1.03k|    auto src = [&]() {
 4878|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|       |            return make_contiguous_buffer(
 4880|       |                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|  1.03k|        else {
 4883|  1.03k|            return make_contiguous_buffer(
 4884|  1.03k|                ranges::subrange{range.begin(), result});
 4885|  1.03k|        }
 4886|  1.03k|    }();
_ZN3scn2v44impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4962|     38|    {
 4963|     38|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4963:13): [True: 38, False: 0]
  ------------------
 4964|     38|            return read_string_view_impl(
 4965|     38|                range,
 4966|     38|                read_until_code_unit(
 4967|     38|                    range, specs.fill.template get_code_unit<SourceCharT>()),
 4968|     38|                value);
 4969|     38|        }
 4970|      0|        return read_string_view_impl(
 4971|      0|            range,
 4972|      0|            read_until_code_units(
 4973|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4974|      0|            value);
 4975|     38|    }
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5159|    248|    {
 5160|    248|        auto it = read_source_impl(range, {specs});
 5161|    248|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18, False: 230]
  |  |  ------------------
  ------------------
 5162|     18|            return unexpected(it.error());
 5163|     18|        }
 5164|       |
 5165|    230|        return read_string_view_impl(range, *it, value);
 5166|    248|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4874|    230|{
 4875|    230|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|    230|    auto src = [&]() {
 4878|    230|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    230|            return make_contiguous_buffer(
 4880|    230|                ranges::subrange{range.begin().base(), result.base()});
 4881|    230|        }
 4882|    230|        else {
 4883|    230|            return make_contiguous_buffer(
 4884|    230|                ranges::subrange{range.begin(), result});
 4885|    230|        }
 4886|    230|    }();
 4887|    230|    using src_type = decltype(src);
 4888|       |
 4889|    230|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|    230|    else {
 4902|    230|        const auto view = src.view();
 4903|    230|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|    230|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 6, False: 224]
  ------------------
 4906|      6|            return detail::unexpected_scan_error(
 4907|      6|                scan_error::invalid_scanned_value,
 4908|      6|                "Invalid encoding in scanned string_view");
 4909|      6|        }
 4910|       |
 4911|    224|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    224|    static_cast<    \
  |  | 1109|    224|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|    230|    }
 4913|    230|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4877|    230|    auto src = [&]() {
 4878|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|       |            return make_contiguous_buffer(
 4880|       |                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|    230|        else {
 4883|    230|            return make_contiguous_buffer(
 4884|    230|                ranges::subrange{range.begin(), result});
 4885|    230|        }
 4886|    230|    }();
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|  8.44k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  8.44k|                  ranges::sized_range<Range>) {
 1785|  8.44k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  8.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  8.44k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|  8.44k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  8.44k|    {
 1589|  8.44k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|     88|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|     88|    else {
 2229|     88|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|     88|        return read_until_code_point(
 2241|     88|            ranges::subrange{it, range.end()},
 2242|     88|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|     88|    }
 2244|     88|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|     88|        : m_fptr([](storage fn,
  743|     88|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     88|              cvref<T> obj = *get<T>(fn);
  745|     88|              if constexpr (std::is_void_v<R>) {
  746|     88|                  obj(static_cast<decltype(args)>(args)...);
  747|     88|              }
  748|     88|              else {
  749|     88|                  return obj(static_cast<decltype(args)>(args)...);
  750|     88|              }
  751|     88|          }),
  752|     88|          m_storage(std::addressof(f))
  753|     88|    {
  754|     88|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  2.81k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.81k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.81k|              else {
  749|  2.81k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.81k|              }
  751|  2.81k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  2.81k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.81k|        else if constexpr (std::is_object_v<T>) {
  688|  2.81k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.81k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2242|  2.81k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|     88|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     88|        {
  662|     88|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|     88|    {
 1676|     88|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|     88|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|     88|    {
 1720|     88|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|     88|                                          std::basic_string<CharT>>) {
 1730|     88|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|     88|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|     88|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4172|    108|    {
 4173|    108|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4173:13): [True: 0, False: 108]
  ------------------
 4174|      0|            return std::copysign(value, static_cast<T>(-1.0));
 4175|      0|        }
 4176|    108|        return std::copysign(value, static_cast<T>(1.0));
 4177|    108|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|  5.70k|{
 5892|  5.70k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  5.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.70k]
  |  |  ------------------
  ------------------
 5893|      0|        return unexpected(e);
 5894|      0|    }
 5895|       |
 5896|  5.70k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 634, False: 5.07k]
  ------------------
 5897|    634|        return range.begin();
 5898|    634|    }
 5899|       |
 5900|  5.07k|    return skip_classic_whitespace(range);
 5901|  5.70k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|    634|    {
 3619|    634|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    634|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|    634|        return read_default_with_base(range, value, 10);
 3621|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|    634|    {
 3619|    634|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    634|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|    634|        return read_default_with_base(range, value, 10);
 3621|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5843|  1.28k|    {
 5844|  1.28k|        return true;
 5845|  1.28k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5861|    904|    {
 5862|    904|        detail::format_specs specs{};
 5863|    904|        specs.type = detail::presentation_type::int_hex;
 5864|       |
 5865|    904|        std::uintptr_t intvalue{};
 5866|    904|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3958|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 904, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    904|    }                                                  \
  |  |  |  | 3957|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5867|      0|                                                                intvalue, loc));
 5868|      0|        value = reinterpret_cast<void*>(intvalue);
 5869|      0|        return result;
 5870|    904|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3182|  1.66k|    {
 3183|  1.66k|        return true;
 3184|  1.66k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5598|    634|    {
 5599|    634|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    634|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5600|       |
 5601|    634|        return bool_reader<CharT>{}.read_classic(range, value);
 5602|    634|    }
_ZN3scn2v44impl16bool_reader_baseC2Ev:
 5442|  1.20k|    constexpr bool_reader_base() = default;
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5448|  1.06k|    {
 5449|  1.06k|        scan_error err{scan_error::invalid_scanned_value,
 5450|  1.06k|                       "Failed to read boolean"};
 5451|       |
 5452|  1.06k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5452:13): [True: 922, False: 138]
  ------------------
 5453|    922|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5453:22): [True: 0, False: 922]
  ------------------
 5454|      0|                return *r;
 5455|      0|            }
 5456|    922|            else {
 5457|    922|                err = r.error();
 5458|    922|            }
 5459|    922|        }
 5460|       |
 5461|  1.06k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5461:13): [True: 1.03k, False: 22]
  ------------------
 5462|  1.03k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5462:22): [True: 0, False: 1.03k]
  ------------------
 5463|      0|                return *r;
 5464|      0|            }
 5465|  1.03k|            else {
 5466|  1.03k|                err = r.error();
 5467|  1.03k|            }
 5468|  1.03k|        }
 5469|       |
 5470|  1.06k|        return unexpected(err);
 5471|  1.06k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5477|    938|    {
 5478|    938|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 938]
  ------------------
 5479|      0|            value = false;
 5480|      0|            return *r;
 5481|      0|        }
 5482|    938|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5482:18): [True: 0, False: 938]
  ------------------
 5483|      0|            value = true;
 5484|      0|            return *r;
 5485|      0|        }
 5486|       |
 5487|    938|        return detail::unexpected_scan_error(
 5488|    938|            scan_error::invalid_scanned_value,
 5489|    938|            "Failed to read numeric boolean value: No match");
 5490|    938|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5495|  1.03k|    {
 5496|  1.03k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5496:18): [True: 0, False: 1.03k]
  ------------------
 5497|      0|            value = true;
 5498|      0|            return *r;
 5499|      0|        }
 5500|  1.03k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5500:18): [True: 0, False: 1.03k]
  ------------------
 5501|      0|            value = false;
 5502|      0|            return *r;
 5503|      0|        }
 5504|       |
 5505|  1.03k|        return detail::unexpected_scan_error(
 5506|  1.03k|            scan_error::invalid_scanned_value,
 5507|  1.03k|            "Failed to read textual boolean value: No match");
 5508|  1.03k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2326|  2.07k|{
 2327|  2.07k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  2.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 100, False: 1.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    100|    }                                                  \
  |  |  |  | 3957|  2.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2328|  1.97k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2329|  1.97k|                    .transform_error(make_eof_parse_error));
 2330|       |
 2331|  1.97k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2332|  1.97k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2333|  1.97k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.97k, False: 0]
  |  |  ------------------
  ------------------
 2334|  1.97k|            return unexpected(parse_error::error);
 2335|  1.97k|        }
 2336|      0|        return it;
 2337|       |    }
 2338|       |    else {
 2339|       |        auto range_it = range.begin();
 2340|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2341|       |            if (SCN_UNLIKELY(*range_it !=
 2342|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2343|       |                return unexpected(parse_error::error);
 2344|       |            }
 2345|       |        }
 2346|       |        return it;
 2347|       |    }
 2348|  1.97k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3739|    634|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3725|  1.20k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|    634|    {
 4246|    634|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    634|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|    634|        float_reader<CharT> rd{};
 4249|    634|        return read_impl<Range>(
 4250|    634|            range, rd,
 4251|    634|            [](float_reader<CharT>& r, auto&&... args) {
 4252|    634|                return r.read_source(SCN_FWD(args)...);
 4253|    634|            },
 4254|    634|            value);
 4255|    634|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    634|        : m_fptr([](storage fn,
  743|    634|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    634|              cvref<T> obj = *get<T>(fn);
  745|    634|              if constexpr (std::is_void_v<R>) {
  746|    634|                  obj(static_cast<decltype(args)>(args)...);
  747|    634|              }
  748|    634|              else {
  749|    634|                  return obj(static_cast<decltype(args)>(args)...);
  750|    634|              }
  751|    634|          }),
  752|    634|          m_storage(std::addressof(f))
  753|    634|    {
  754|    634|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    634|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    634|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    634|              else {
  749|    634|                  return obj(static_cast<decltype(args)>(args)...);
  750|    634|              }
  751|    634|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    634|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    634|        else if constexpr (std::is_object_v<T>) {
  688|    634|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    634|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|    634|            [](float_reader<CharT>& r, auto&&... args) {
 4252|    634|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|    634|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    634|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    634|        {
  662|    634|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5359|    634|    {
 5360|    634|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    634|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|    634|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5359|    634|    {
 5360|    634|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    634|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|    634|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|    634|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    634|                          basic_contiguous_scan_context<char_type>>) {
 5984|    634|            auto rd = make_reader<T, char_type>();
 5985|    634|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    634|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5971|    634|    {
 5972|    634|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    634|                        .transform_error(make_eof_scan_error));
 5974|    634|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    634|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5359|    634|    {
 5360|    634|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    634|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|    634|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|    634|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|  63.3k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  63.3k|    static_cast<    \
  |  | 1109|  63.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  63.3k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  63.3k|          m_current(m_range.begin())
 3020|  63.3k|    {
 3021|  63.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   201k|    {
 3030|   201k|        return m_range.end();
 3031|   201k|    }
_ZN3scn2v44impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|  76.4k|{
 1319|       |    // TODO: optimize
 1320|  76.4k|    SCN_EXPECT(!str.empty());
  ------------------
  |  | 1104|  76.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  76.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|  76.4k|    auto res = get_next_code_point(str);
 1322|  76.4k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|  76.4k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|  80.0k|    {
 3045|  80.0k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  80.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  80.0k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  80.0k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 80.0k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  80.0k|        }
 3051|  80.0k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  80.0k|    static_cast<    \
  |  | 1109|  80.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  80.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|  43.6k|    {
 3035|  43.6k|        return ranges::subrange{begin(), end()};
 3036|  43.6k|    }
_ZN3scn2v44impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2248|  8.44k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|  8.44k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|  8.44k|        auto buf = make_contiguous_buffer(range);
 2253|  8.44k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|  8.44k|        return ranges::next(range.begin(),
 2255|  8.44k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|  8.44k|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6143|  6.17k|    {
 6144|  6.17k|        const bool need_skipped_width =
 6145|  6.17k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 84, False: 6.09k]
  |  Branch (6145:33): [True: 6.09k, False: 0]
  ------------------
 6146|  6.17k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|  6.17k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 276, False: 5.90k]
  ------------------
 6150|  6.17k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 1.09k, False: 4.80k]
  ------------------
 6151|  1.37k|            return skip_fill(rng, specs.precision, specs.fill,
 6152|  1.37k|                             need_skipped_width);
 6153|  1.37k|        }
 6154|  4.80k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 4.60k, False: 202]
  |  Branch (6154:56): [True: 2.55k, False: 2.05k]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|  2.55k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 2.55k, False: 0]
  ------------------
 6158|  2.55k|                auto max_width_view = take_width(rng, specs.precision);
 6159|  2.55k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|  2.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 238, False: 2.31k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    238|    }                                                  \
  |  |  |  | 3957|  2.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  2.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  2.31k|                                  .transform_error(make_eof_scan_error));
 6161|  2.31k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|  2.55k|            }
 6163|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                            make_eof_scan_error));
 6165|       |
 6166|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 0]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|      0|            return result_type{it, 0};
 6174|      0|        }
 6175|       |
 6176|  2.25k|        return result_type{rng.begin(), 0};
 6177|  4.80k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 6058|  1.37k|{
 6059|  1.37k|    using char_type = detail::char_t<Range>;
 6060|  1.37k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6061|       |
 6062|  1.37k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6062:9): [True: 588, False: 782]
  ------------------
 6063|    588|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6064|    588|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6065|       |
 6066|    588|        if (max_width == 0) {
  ------------------
  |  Branch (6066:13): [True: 0, False: 588]
  ------------------
 6067|      0|            auto it = read_while_code_unit(range, pred);
 6068|       |
 6069|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6069:17): [True: 0, False: 0]
  ------------------
 6070|      0|                auto prefix_width =
 6071|      0|                    static_cast<std::ptrdiff_t>(
 6072|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6073|      0|                    ranges::distance(range.begin(), it);
 6074|      0|                return result_type{it, prefix_width};
 6075|      0|            }
 6076|      0|            return result_type{it, 0};
 6077|      0|        }
 6078|       |
 6079|    588|        auto max_width_view = take_width(range, max_width);
 6080|    588|        auto w_it = read_while_code_unit(max_width_view, pred);
 6081|       |
 6082|    588|        if (want_skipped_width) {
  ------------------
  |  Branch (6082:13): [True: 588, False: 0]
  ------------------
 6083|    588|            return result_type{w_it.base(), max_width - w_it.count()};
 6084|    588|        }
 6085|      0|        return result_type{w_it.base(), 0};
 6086|    588|    }
 6087|       |
 6088|    782|    const auto fill_chars = fill.template get_code_units<char_type>();
 6089|    782|    if (max_width == 0) {
  ------------------
  |  Branch (6089:9): [True: 0, False: 782]
  ------------------
 6090|      0|        auto it = read_while_code_units(range, fill_chars);
 6091|       |
 6092|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6092:13): [True: 0, False: 0]
  ------------------
 6093|      0|            auto prefix_width =
 6094|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6095|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6096|      0|            return result_type{it, prefix_width};
 6097|      0|        }
 6098|      0|        return result_type{it, 0};
 6099|      0|    }
 6100|       |
 6101|    782|    auto max_width_view = take_width(range, max_width);
 6102|    782|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6103|       |
 6104|    782|    if (want_skipped_width) {
  ------------------
  |  Branch (6104:9): [True: 782, False: 0]
  ------------------
 6105|    782|        return result_type{w_it.base(), max_width - w_it.count()};
 6106|    782|    }
 6107|      0|    return result_type{w_it.base(), 0};
 6108|    782|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    588|        : m_fptr([](storage fn,
  743|    588|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    588|              cvref<T> obj = *get<T>(fn);
  745|    588|              if constexpr (std::is_void_v<R>) {
  746|    588|                  obj(static_cast<decltype(args)>(args)...);
  747|    588|              }
  748|    588|              else {
  749|    588|                  return obj(static_cast<decltype(args)>(args)...);
  750|    588|              }
  751|    588|          }),
  752|    588|          m_storage(std::addressof(f))
  753|    588|    {
  754|    588|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    804|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    804|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    804|              else {
  749|    804|                  return obj(static_cast<decltype(args)>(args)...);
  750|    804|              }
  751|    804|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    804|    {
  684|    804|        if constexpr (std::is_const_v<T>) {
  685|    804|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    804|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 6064|    804|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    588|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    588|        {
  667|    588|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|    588|{
 2108|    588|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    588|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    588|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    588|    else {
 2079|    588|        auto first = range.begin();
 2080|    840|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 804, False: 36]
  ------------------
 2081|    804|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 552, False: 252]
  ------------------
 2082|    552|                return first;
 2083|    552|            }
 2084|    804|        }
 2085|     36|        return first;
 2086|    588|    }
 2087|    588|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2952|  6.48k|    {
 2953|  6.48k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2954|  6.48k|                                      m_count};
 2955|  6.48k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2857|  27.3k|    {
 2858|  27.3k|        return view;
 2859|  27.3k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2513|  6.48k|        : m_current(x), m_end(s), m_count(n)
 2514|  6.48k|    {
 2515|  6.48k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2923|  9.28k|        {
 2924|  9.28k|            return !(y == x);
 2925|  9.28k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2910|  19.8k|        {
 2911|  19.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2911:21): [True: 1.15k, False: 18.7k]
  |  Branch (2911:39): [True: 690, False: 468]
  ------------------
 2912|  19.8k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2912:20): [True: 34, False: 19.1k]
  ------------------
 2913|  19.8k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2913:21): [True: 2.24k, False: 16.9k]
  |  Branch (2913:39): [True: 1.60k, False: 640]
  ------------------
 2914|  19.1k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2914:21): [True: 0, False: 1.60k]
  ------------------
 2915|  19.8k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2553|  3.40k|    {
 2554|  3.40k|        return m_multibyte_left;
 2555|  3.40k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2558|  1.60k|    {
 2559|  1.60k|        assert(count() != 0 || multibyte_left() != 0);
 2560|  1.60k|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2561|  1.60k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2785|  10.8k|    {
 2786|  10.8k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1039|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 10.8k]
  |  |  ------------------
  ------------------
 2787|      0|            return 0;
 2788|      0|        }
 2789|       |
 2790|  10.8k|        if (cplen == 1) {
  ------------------
  |  Branch (2790:13): [True: 5.50k, False: 5.35k]
  ------------------
 2791|  5.50k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  5.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2792|  5.50k|            auto cp = static_cast<char32_t>(*m_current);
 2793|  5.50k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2794|  5.50k|        }
 2795|       |
 2796|  5.35k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2797|  5.35k|                                           cplen);
 2798|  5.35k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  5.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.35k]
  |  |  ------------------
  ------------------
 2799|      0|            return 0;
 2800|      0|        }
 2801|       |
 2802|  5.35k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2803|  5.35k|        return static_cast<difference_type>(
 2804|  5.35k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2805|  5.35k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2779|  10.8k|    {
 2780|  10.8k|        return static_cast<difference_type>(
 2781|  10.8k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2782|  10.8k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2958|  14.3k|    {
 2959|  14.3k|        return sentinel<true>{m_base.get().end()};
 2960|  14.3k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2891|  14.3k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1108|  14.3k|    static_cast<    \
  |  | 1109|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2564|  13.0k|    {
 2565|  13.0k|        return *m_current;
 2566|  13.0k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2573|  17.4k|    {
 2574|  17.4k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2575|  17.4k|        _increment_current();
 2576|  17.4k|        return *this;
 2577|  17.4k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2808|  17.4k|    {
 2809|  17.4k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2809:13): [True: 9.24k, False: 8.18k]
  ------------------
 2810|  9.24k|            auto cplen = _get_cp_length_at_current();
 2811|  9.24k|            m_multibyte_left = cplen - 1;
 2812|  9.24k|            m_count -= _get_width_at_current_cp_start(cplen);
 2813|  9.24k|        }
 2814|  8.18k|        else {
 2815|  8.18k|            --m_multibyte_left;
 2816|  8.18k|        }
 2817|       |
 2818|  17.4k|        ++m_current;
 2819|  17.4k|    }
_ZN3scn2v44impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2168|    782|{
 2169|    782|    static_assert(ranges::common_range<CodeUnits>);
 2170|       |
 2171|    782|    auto it = range.begin();
 2172|  1.36k|    while (it != range.end()) {
  ------------------
  |  Branch (2172:12): [True: 1.33k, False: 34]
  ------------------
 2173|  1.33k|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2174|  1.33k|                                           needle.size());
 2175|  1.33k|        if (!r) {
  ------------------
  |  Branch (2175:13): [True: 144, False: 1.18k]
  ------------------
 2176|    144|            return it;
 2177|    144|        }
 2178|  1.18k|        static_assert(
 2179|  1.18k|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2180|  1.18k|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2180:13): [True: 604, False: 582]
  ------------------
 2181|    604|            return it;
 2182|    604|        }
 2183|    582|        it = *r;
 2184|    582|    }
 2185|     34|    SCN_ENSURE(it == range.end());
  ------------------
  |  | 1105|     34|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|     34|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|     34|    return it;
 2187|     34|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1955|  1.33k|{
 1956|  1.33k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.33k|    else {
 1967|  1.33k|        auto it = range.begin();
 1968|  1.33k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 1.33k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  5.18k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.99k, False: 1.18k]
  ------------------
 1973|  3.99k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 144, False: 3.85k]
  ------------------
 1974|    144|                return unexpected(eof_error::eof);
 1975|    144|            }
 1976|  3.99k|        }
 1977|       |
 1978|  1.18k|        return it;
 1979|  1.33k|    }
 1980|  1.33k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1095|  1.33k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  1.33k|    else {
 1116|  1.33k|        return 0;
 1117|  1.33k|    }
 1118|  1.33k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.55k|    {
  268|  2.55k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.55k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.55k|    {
  161|  2.55k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.55k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.55k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.55k|        else {
  169|  2.55k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.55k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.55k|        }
  173|  2.55k|    }
_ZN3scn2v44impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2669|  10.7k|    {
 2670|  10.7k|        return !(a == b);
 2671|  10.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2661|  10.7k|    {
 2662|  10.7k|        return a.m_current == b.m_current;
 2663|  10.7k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2974|  3.92k|    {
 2975|  3.92k|        return take_width_view{r, n};
 2976|  3.92k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2942|  3.92k|        : m_base(base), m_count(count)
 2943|  3.92k|    {
 2944|  3.92k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2854|  3.92k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  2.55k|{
 3098|  2.55k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 2.55k, False: 0]
  ------------------
 3099|  2.55k|        auto it = read_while_classic_space(range);
 3100|  2.55k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  2.55k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 238, False: 2.31k]
  |  |  ------------------
  ------------------
 3102|    238|            return unexpected(e);
 3103|    238|        }
 3104|       |
 3105|  2.31k|        return it;
 3106|  2.55k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  2.55k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  2.55k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  2.55k|    else {
 2258|  2.55k|        auto it = range.begin();
 2259|       |
 2260|  2.55k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|  2.55k|            auto seg = get_contiguous_beginning(range);
 2262|  2.55k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|  2.55k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 0, False: 2.55k]
  ------------------
 2264|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|      0|            }
 2266|  2.55k|            ranges::advance(it, seg.size());
 2267|  2.55k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  2.55k|            return detail::is_cp_space(cp);
 2271|  2.55k|        });
 2272|  2.55k|    }
 2273|  2.55k|}
_ZN3scn2v44impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1039|  2.55k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|       |                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|       |        else {
 1055|       |            return r.begin().contiguous_segment();
 1056|       |        }
 1057|       |    }
 1058|  2.55k|    else {
 1059|  2.55k|        return std::basic_string_view<detail::char_t<Range>>{};
 1060|  2.55k|    }
 1061|  2.55k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|  2.55k|{
 2214|  2.55k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  2.55k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  2.55k|{
 2193|  2.55k|    auto it = range.begin();
 2194|  4.25k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 4.01k, False: 238]
  ------------------
 2195|  4.01k|        const auto val =
 2196|  4.01k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  4.01k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  4.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 4.01k, False: 0]
  |  |  ------------------
  ------------------
 2198|  4.01k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  4.01k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  4.01k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 2.31k, False: 1.70k]
  ------------------
 2201|  2.31k|                return it;
 2202|  2.31k|            }
 2203|  4.01k|        }
 2204|  1.70k|        it = val.iterator;
 2205|  1.70k|    }
 2206|       |
 2207|    238|    return it;
 2208|  2.55k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  4.01k|{
 1998|  4.01k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  4.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  4.01k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  4.01k|    auto it = range.begin();
 2002|  4.01k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  4.01k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.01k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  4.01k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.98k, False: 1.03k]
  ------------------
 2011|  2.98k|        ++it;
 2012|  2.98k|        return {it, string_type(1, *range.begin())};
 2013|  2.98k|    }
 2014|       |
 2015|  1.03k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  1.03k|    return {it, string_type{range.begin(), it}};
 2017|  4.01k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  6.57k|{
  945|  6.57k|    return is_range_eof(r.begin(), r.end());
  946|  6.57k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  6.57k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.57k|    {
  938|  6.57k|        return begin == end;
  939|  6.57k|    }
  940|  6.57k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|  1.03k|    {
  283|  1.03k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  1.03k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|  1.03k|    {
  227|  1.03k|        constexpr iter_difference_t<I> zero{0};
  228|  1.03k|        iter_difference_t<I> counter{0};
  229|       |
  230|  1.03k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 1.03k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  1.03k|        else {
  237|  3.85k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.82k, False: 1.03k]
  |  Branch (237:34): [True: 2.82k, False: 0]
  ------------------
  238|  2.82k|                ++i;
  239|  2.82k|                ++counter;
  240|  2.82k|            }
  241|  1.03k|        }
  242|       |
  243|  1.03k|        return counter;
  244|  1.03k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1988|  4.01k|    {
 1989|  4.01k|        return !codepoint.empty();
 1990|  4.01k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.55k|        : m_fptr([](storage fn,
  743|  2.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.55k|              cvref<T> obj = *get<T>(fn);
  745|  2.55k|              if constexpr (std::is_void_v<R>) {
  746|  2.55k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.55k|              }
  748|  2.55k|              else {
  749|  2.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.55k|              }
  751|  2.55k|          }),
  752|  2.55k|          m_storage(std::addressof(f))
  753|  2.55k|    {
  754|  2.55k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  4.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.01k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.01k|              else {
  749|  4.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.01k|              }
  751|  4.01k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.01k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.01k|        else if constexpr (std::is_object_v<T>) {
  688|  4.01k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.01k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|  4.01k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  4.01k|            return detail::is_cp_space(cp);
 2271|  4.01k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.55k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.55k|        {
  662|  2.55k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  2.55k|{
  951|  2.55k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 238, False: 2.31k]
  |  |  ------------------
  ------------------
  952|    238|        return eof_error::eof;
  953|    238|    }
  954|  2.31k|    return eof_error::good;
  955|  2.55k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2545|  22.8k|    {
 2546|  22.8k|        return m_current;
 2547|  22.8k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2549|  44.3k|    {
 2550|  44.3k|        return m_count;
 2551|  44.3k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|  7.58k|    {
 6144|  7.58k|        const bool need_skipped_width =
 6145|  7.58k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 2.04k, False: 5.54k]
  |  Branch (6145:33): [True: 0, False: 5.54k]
  ------------------
 6146|  7.58k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|  7.58k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 116, False: 7.46k]
  ------------------
 6150|  7.58k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 418, False: 7.05k]
  ------------------
 6151|    534|            return skip_fill(rng, specs.precision, specs.fill,
 6152|    534|                             need_skipped_width);
 6153|    534|        }
 6154|  7.05k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 6.31k, False: 740]
  |  Branch (6154:56): [True: 1.74k, False: 4.56k]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|  1.74k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 1.74k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|  3.49k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  3.49k|                            make_eof_scan_error));
 6165|       |
 6166|  3.49k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 1.11k, False: 628]
  ------------------
 6167|  1.11k|                return result_type{
 6168|  1.11k|                    it,
 6169|  1.11k|                    calculate_text_width(make_contiguous_buffer(
 6170|  1.11k|                                             ranges::subrange{rng.begin(), it})
 6171|  1.11k|                                             .view())};
 6172|  1.11k|            }
 6173|    628|            return result_type{it, 0};
 6174|  3.49k|        }
 6175|       |
 6176|  5.30k|        return result_type{rng.begin(), 0};
 6177|  7.05k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|  4.74k|    {
 6186|  4.74k|        const bool need_skipped_width =
 6187|  4.74k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 508, False: 4.23k]
  |  Branch (6187:33): [True: 1.51k, False: 2.72k]
  ------------------
 6188|  4.74k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|  4.74k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 298, False: 4.44k]
  ------------------
 6191|  4.74k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 544, False: 3.90k]
  ------------------
 6192|    842|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 424, False: 418]
  ------------------
 6193|    842|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 154, False: 270]
  ------------------
 6194|    154|                return result_type{rng.begin(), 0};
 6195|    154|            }
 6196|    688|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|    688|                             specs.fill, need_skipped_width);
 6198|    842|        }
 6199|  3.90k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 3.75k, False: 154]
  ------------------
 6200|  3.90k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 3.42k, False: 330]
  ------------------
 6201|  3.90k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 220, False: 3.20k]
  |  Branch (6201:35): [True: 166, False: 54]
  ------------------
 6202|  3.42k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 764, False: 2.49k]
  ------------------
 6203|  3.25k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 640, False: 124]
  ------------------
 6204|    806|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 640, False: 166]
  ------------------
 6205|    640|                const auto initial_width =
 6206|    640|                    specs.precision - prefix_width - value_width;
 6207|    640|                auto max_width_view = take_width(rng, initial_width);
 6208|    640|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|    640|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|    640|                                  .transform_error(make_eof_scan_error));
 6210|    640|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|    640|            }
 6212|    332|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    332|                            make_eof_scan_error));
 6214|       |
 6215|    332|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 166, False: 0]
  ------------------
 6216|    166|                return result_type{
 6217|    166|                    it,
 6218|    166|                    calculate_text_width(make_contiguous_buffer(
 6219|    166|                                             ranges::subrange{rng.begin(), it})
 6220|    166|                                             .view())};
 6221|    166|            }
 6222|      0|            return result_type{it, 0};
 6223|    332|        }
 6224|  3.09k|        return result_type{rng.begin(), 0};
 6225|  3.90k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6295|  3.24k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.24k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.24k|            auto rd = make_reader<T, char_type>();
 6301|  3.24k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.51k, False: 732]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.51k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.51k|    }
  ------------------
 6302|    732|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    732|    {
 6231|    732|        const bool need_skipped_width =
 6232|    732|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 214, False: 518]
  |  Branch (6232:33): [True: 426, False: 92]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    732|        auto it = rng.begin();
 6236|    732|        std::ptrdiff_t prefix_width = 0;
 6237|    732|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 430, False: 302]
  ------------------
 6238|    430|            auto max_width_view = take_width(rng, specs.precision);
 6239|    430|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 32, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     32|    }                                                  \
  |  |  |  | 3957|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    398|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    398|            it = prefix_result.first.base();
 6242|    398|            prefix_width = prefix_result.second;
 6243|    398|        }
 6244|    302|        else {
 6245|    302|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    302|            std::tie(it, prefix_width) = prefix_result;
 6247|    302|        }
 6248|    700|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    700|        std::ptrdiff_t value_width = 0;
 6252|    700|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 398, False: 302]
  ------------------
 6253|    398|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 6, False: 392]
  ------------------
 6254|      6|                return detail::unexpected_scan_error(
 6255|      6|                    scan_error::invalid_fill,
 6256|      6|                    "Too many fill characters before value, "
 6257|      6|                    "precision exceeded before reading value");
 6258|      6|            }
 6259|       |
 6260|    392|            const auto initial_width = specs.precision - prefix_width;
 6261|    392|            auto max_width_view =
 6262|    392|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    392|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 392, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    392|    }                                                  \
  |  |  |  | 3957|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|    302|        else {
 6268|    302|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    302|    }                                                  \
  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|      0|                                             specs, value, loc));
 6270|       |
 6271|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 0]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|      0|        }
 6277|       |
 6278|       |        // Read postfix
 6279|      0|        std::ptrdiff_t postfix_width = 0;
 6280|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 0, False: 0]
  ------------------
 6281|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6284|      0|                                 value_width));
 6285|      0|            std::tie(it, postfix_width) = postfix_result;
 6286|      0|        }
 6287|       |
 6288|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|      0|            specs, prefix_width, value_width, postfix_width));
 6290|      0|        return it;
 6291|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6295|  3.24k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.24k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.24k|            auto rd = make_reader<T, char_type>();
 6301|  3.24k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.51k, False: 732]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.51k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.51k|    }
  ------------------
 6302|    732|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_19reader_impl_for_intIcEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    732|    {
 6231|    732|        const bool need_skipped_width =
 6232|    732|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 214, False: 518]
  |  Branch (6232:33): [True: 426, False: 92]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    732|        auto it = rng.begin();
 6236|    732|        std::ptrdiff_t prefix_width = 0;
 6237|    732|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 430, False: 302]
  ------------------
 6238|    430|            auto max_width_view = take_width(rng, specs.precision);
 6239|    430|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    430|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    430|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    430|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 32, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     32|    }                                                  \
  |  |  |  | 3957|    430|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    398|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    398|            it = prefix_result.first.base();
 6242|    398|            prefix_width = prefix_result.second;
 6243|    398|        }
 6244|    302|        else {
 6245|    302|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    302|            std::tie(it, prefix_width) = prefix_result;
 6247|    302|        }
 6248|    700|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    700|        std::ptrdiff_t value_width = 0;
 6252|    700|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 398, False: 302]
  ------------------
 6253|    398|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 6, False: 392]
  ------------------
 6254|      6|                return detail::unexpected_scan_error(
 6255|      6|                    scan_error::invalid_fill,
 6256|      6|                    "Too many fill characters before value, "
 6257|      6|                    "precision exceeded before reading value");
 6258|      6|            }
 6259|       |
 6260|    392|            const auto initial_width = specs.precision - prefix_width;
 6261|    392|            auto max_width_view =
 6262|    392|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    392|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 392, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    392|    }                                                  \
  |  |  |  | 3957|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|    302|        else {
 6268|    302|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    302|    }                                                  \
  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|      0|                                             specs, value, loc));
 6270|       |
 6271|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 0]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|      0|        }
 6277|       |
 6278|       |        // Read postfix
 6279|      0|        std::ptrdiff_t postfix_width = 0;
 6280|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 0, False: 0]
  ------------------
 6281|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6284|      0|                                 value_width));
 6285|      0|            std::tie(it, postfix_width) = postfix_result;
 6286|      0|        }
 6287|       |
 6288|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|      0|            specs, prefix_width, value_width, postfix_width));
 6290|      0|        return it;
 6291|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6295|  3.20k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.20k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.20k|            auto rd = make_reader<T, char_type>();
 6301|  3.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.54k, False: 652]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.54k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.54k|    }
  ------------------
 6302|    652|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.20k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5848|  3.20k|    {
 5849|  3.20k|        reader_error_handler eh{};
 5850|  3.20k|        detail::check_pointer_type_specs(specs, eh);
 5851|  3.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.54k, False: 652]
  |  |  ------------------
  ------------------
 5852|  2.54k|            return detail::unexpected_scan_error(
 5853|  2.54k|                scan_error::invalid_format_string, eh.m_msg);
 5854|  2.54k|        }
 5855|    652|        return {};
 5856|  3.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_23reader_impl_for_voidptrIcEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6230|    652|    {
 6231|    652|        const bool need_skipped_width =
 6232|    652|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 204, False: 448]
  |  Branch (6232:33): [True: 380, False: 68]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    652|        auto it = rng.begin();
 6236|    652|        std::ptrdiff_t prefix_width = 0;
 6237|    652|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 382, False: 270]
  ------------------
 6238|    382|            auto max_width_view = take_width(rng, specs.precision);
 6239|    382|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    382|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    382|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    382|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    382|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24, False: 358]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     24|    }                                                  \
  |  |  |  | 3957|    382|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    358|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    358|            it = prefix_result.first.base();
 6242|    358|            prefix_width = prefix_result.second;
 6243|    358|        }
 6244|    270|        else {
 6245|    270|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    270|            std::tie(it, prefix_width) = prefix_result;
 6247|    270|        }
 6248|    628|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    628|        std::ptrdiff_t value_width = 0;
 6252|    628|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 358, False: 270]
  ------------------
 6253|    358|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 4, False: 354]
  ------------------
 6254|      4|                return detail::unexpected_scan_error(
 6255|      4|                    scan_error::invalid_fill,
 6256|      4|                    "Too many fill characters before value, "
 6257|      4|                    "precision exceeded before reading value");
 6258|      4|            }
 6259|       |
 6260|    354|            const auto initial_width = specs.precision - prefix_width;
 6261|    354|            auto max_width_view =
 6262|    354|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    354|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 354, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    354|    }                                                  \
  |  |  |  | 3957|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|    270|        else {
 6268|    270|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 270, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    270|    }                                                  \
  |  | 3957|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|      0|                                             specs, value, loc));
 6270|       |
 6271|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 0]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|      0|        }
 6277|       |
 6278|       |        // Read postfix
 6279|      0|        std::ptrdiff_t postfix_width = 0;
 6280|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 0, False: 0]
  ------------------
 6281|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6284|      0|                                 value_width));
 6285|      0|            std::tie(it, postfix_width) = postfix_result;
 6286|      0|        }
 6287|       |
 6288|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|      0|            specs, prefix_width, value_width, postfix_width));
 6290|      0|        return it;
 6291|      0|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5878|    354|    {
 5879|    354|        SCN_UNUSED(specs);
  ------------------
  |  | 1089|    354|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5880|    354|        return read_default(range, value, loc);
 5881|    354|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5861|    354|    {
 5862|    354|        detail::format_specs specs{};
 5863|    354|        specs.type = detail::presentation_type::int_hex;
 5864|       |
 5865|    354|        std::uintptr_t intvalue{};
 5866|    354|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3958|    354|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    354|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    354|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 354, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    354|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    354|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    354|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    354|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    354|    }                                                  \
  |  |  |  | 3957|    354|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5867|      0|                                                                intvalue, loc));
 5868|      0|        value = reinterpret_cast<void*>(intvalue);
 5869|      0|        return result;
 5870|    354|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5878|    270|    {
 5879|    270|        SCN_UNUSED(specs);
  ------------------
  |  | 1089|    270|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5880|    270|        return read_default(range, value, loc);
 5881|    270|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6295|  3.24k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.24k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.24k|            auto rd = make_reader<T, char_type>();
 6301|  3.24k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.21k, False: 1.03k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.21k|    }
  ------------------
 6302|  1.03k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.24k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|  3.24k|    {
 3188|  3.24k|        reader_error_handler eh{};
 3189|  3.24k|        get_derived().check_specs_impl(specs, eh);
 3190|  3.24k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.21k, False: 1.03k]
  |  |  ------------------
  ------------------
 3191|  2.21k|            return detail::unexpected_scan_error(
 3192|  2.21k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  2.21k|        }
 3194|  1.03k|        return {};
 3195|  3.24k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3199|  3.24k|    {
 3200|  3.24k|        return static_cast<Derived&>(*this);
 3201|  3.24k|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5591|  3.24k|    {
 5592|  3.24k|        detail::check_bool_type_specs(specs, eh);
 5593|  3.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_boolIcEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|  1.03k|    {
 6231|  1.03k|        const bool need_skipped_width =
 6232|  1.03k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 224, False: 806]
  |  Branch (6232:33): [True: 574, False: 232]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  1.03k|        auto it = rng.begin();
 6236|  1.03k|        std::ptrdiff_t prefix_width = 0;
 6237|  1.03k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 580, False: 450]
  ------------------
 6238|    580|            auto max_width_view = take_width(rng, specs.precision);
 6239|    580|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    580|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    580|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    580|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 36, False: 544]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     36|    }                                                  \
  |  |  |  | 3957|    580|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    544|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    544|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    544|            it = prefix_result.first.base();
 6242|    544|            prefix_width = prefix_result.second;
 6243|    544|        }
 6244|    450|        else {
 6245|    450|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    450|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 450]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    450|            std::tie(it, prefix_width) = prefix_result;
 6247|    450|        }
 6248|    994|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    994|        std::ptrdiff_t value_width = 0;
 6252|    994|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 544, False: 450]
  ------------------
 6253|    544|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 10, False: 534]
  ------------------
 6254|     10|                return detail::unexpected_scan_error(
 6255|     10|                    scan_error::invalid_fill,
 6256|     10|                    "Too many fill characters before value, "
 6257|     10|                    "precision exceeded before reading value");
 6258|     10|            }
 6259|       |
 6260|    534|            const auto initial_width = specs.precision - prefix_width;
 6261|    534|            auto max_width_view =
 6262|    534|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    534|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    534|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    534|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    534|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    534|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 534, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    534|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    534|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    534|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    534|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    534|    }                                                  \
  |  |  |  | 3957|    534|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|    450|        else {
 6268|    450|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    450|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    450|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 450, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    450|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    450|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    450|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    450|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    450|    }                                                  \
  |  | 3957|    450|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    450|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|      0|                                             specs, value, loc));
 6270|       |
 6271|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 0]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|      0|        }
 6277|       |
 6278|       |        // Read postfix
 6279|      0|        std::ptrdiff_t postfix_width = 0;
 6280|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 0, False: 0]
  ------------------
 6281|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6284|      0|                                 value_width));
 6285|      0|            std::tie(it, postfix_width) = postfix_result;
 6286|      0|        }
 6287|       |
 6288|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|      0|            specs, prefix_width, value_width, postfix_width));
 6290|      0|        return it;
 6291|      0|    }
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5610|    534|    {
 5611|    534|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5612|       |
 5613|    534|#if !SCN_DISABLE_LOCALE
 5614|    534|        if (specs.localized) {
  ------------------
  |  Branch (5614:13): [True: 20, False: 514]
  ------------------
 5615|     20|            return rd.read_localized(range, loc, value);
 5616|     20|        }
 5617|    514|#endif
 5618|       |
 5619|    514|        return rd.read_classic(range, value);
 5620|    534|    }
_ZN3scn2v44impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5623|    984|    {
 5624|    984|        SCN_GCC_COMPAT_PUSH
 5625|    984|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5626|       |
 5627|    984|        switch (specs.type) {
 5628|    284|            case detail::presentation_type::string:
  ------------------
  |  Branch (5628:13): [True: 284, False: 700]
  ------------------
 5629|    284|                return bool_reader_base::allow_text;
 5630|       |
 5631|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5631:13): [True: 14, False: 970]
  ------------------
 5632|     26|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5632:13): [True: 12, False: 972]
  ------------------
 5633|     32|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5633:13): [True: 6, False: 978]
  ------------------
 5634|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5634:13): [True: 10, False: 974]
  ------------------
 5635|     58|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5635:13): [True: 16, False: 968]
  ------------------
 5636|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5636:13): [True: 6, False: 978]
  ------------------
 5637|     64|                return bool_reader_base::allow_numeric;
 5638|       |
 5639|    636|            default:
  ------------------
  |  Branch (5639:13): [True: 636, False: 348]
  ------------------
 5640|    636|                return bool_reader_base::allow_text |
 5641|    636|                       bool_reader_base::allow_numeric;
 5642|    984|        }
 5643|       |
 5644|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5645|    984|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5521|     20|    {
 5522|     20|        scan_error err{scan_error::invalid_scanned_value,
 5523|     20|                       "Failed to read boolean"};
 5524|       |
 5525|     20|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5525:13): [True: 16, False: 4]
  ------------------
 5526|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5526:22): [True: 0, False: 16]
  ------------------
 5527|      0|                return *r;
 5528|      0|            }
 5529|     16|            else {
 5530|     16|                err = r.error();
 5531|     16|            }
 5532|     16|        }
 5533|       |
 5534|     20|        if (m_options & allow_text) {
  ------------------
  |  Branch (5534:13): [True: 16, False: 4]
  ------------------
 5535|     16|            auto stdloc = loc.get<std::locale>();
 5536|     16|            const auto& numpunct =
 5537|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5538|     16|            const auto truename = numpunct.truename();
 5539|     16|            const auto falsename = numpunct.falsename();
 5540|       |
 5541|     16|            if (auto r =
  ------------------
  |  Branch (5541:22): [True: 0, False: 16]
  ------------------
 5542|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5543|      0|                return *r;
 5544|      0|            }
 5545|     16|            else {
 5546|     16|                err = r.error();
 5547|     16|            }
 5548|     16|        }
 5549|       |
 5550|     20|        return unexpected(err);
 5551|     20|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5477|    396|    {
 5478|    396|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 396]
  ------------------
 5479|      0|            value = false;
 5480|      0|            return *r;
 5481|      0|        }
 5482|    396|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5482:18): [True: 0, False: 396]
  ------------------
 5483|      0|            value = true;
 5484|      0|            return *r;
 5485|      0|        }
 5486|       |
 5487|    396|        return detail::unexpected_scan_error(
 5488|    396|            scan_error::invalid_scanned_value,
 5489|    396|            "Failed to read numeric boolean value: No match");
 5490|    396|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2278|    792|{
 2279|    792|    auto it = read_code_unit(range);
 2280|    792|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    792|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 792]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|    792|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|    792|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 792, False: 0]
  |  |  ------------------
  ------------------
 2285|    792|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|    792|        return unexpected(parse_error::error);
 2287|    792|    }
 2288|       |
 2289|      0|    return *it;
 2290|    792|}
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5561|     16|    {
 5562|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5563|     16|        const auto shorter = std::pair{
 5564|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5564:13): [True: 16, False: 0]
  ------------------
 5565|     16|        const auto longer = std::pair{
 5566|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5566:13): [True: 0, False: 16]
  ------------------
 5567|       |
 5568|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5568:18): [True: 0, False: 16]
  ------------------
 5569|      0|            value = shorter.second;
 5570|      0|            return *r;
 5571|      0|        }
 5572|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5572:18): [True: 0, False: 16]
  ------------------
 5573|      0|            value = longer.second;
 5574|      0|            return *r;
 5575|      0|        }
 5576|       |
 5577|     16|        return detail::unexpected_scan_error(
 5578|     16|            scan_error::invalid_scanned_value,
 5579|     16|            "Failed to read textual boolean: No match");
 5580|     16|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2311|     32|{
 2312|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 18, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     18|    }                                                  \
  |  |  |  | 3957|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2313|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2314|     14|                    .transform_error(make_eof_parse_error));
 2315|       |
 2316|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2317|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2318|     14|        return unexpected(parse_error::error);
 2319|     14|    }
 2320|      0|    return it;
 2321|     14|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|  1.00k|{
 1956|  1.00k|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.00k|    else {
 1967|  1.00k|        auto it = range.begin();
 1968|  1.00k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 1.00k]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  5.04k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 4.22k, False: 814]
  ------------------
 1973|  4.22k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 190, False: 4.03k]
  ------------------
 1974|    190|                return unexpected(eof_error::eof);
 1975|    190|            }
 1976|  4.22k|        }
 1977|       |
 1978|    814|        return it;
 1979|  1.00k|    }
 1980|  1.00k|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1095|  1.00k|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|  1.00k|    else {
 1116|  1.00k|        return 0;
 1117|  1.00k|    }
 1118|  1.00k|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5448|    514|    {
 5449|    514|        scan_error err{scan_error::invalid_scanned_value,
 5450|    514|                       "Failed to read boolean"};
 5451|       |
 5452|    514|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5452:13): [True: 380, False: 134]
  ------------------
 5453|    380|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5453:22): [True: 0, False: 380]
  ------------------
 5454|      0|                return *r;
 5455|      0|            }
 5456|    380|            else {
 5457|    380|                err = r.error();
 5458|    380|            }
 5459|    380|        }
 5460|       |
 5461|    514|        if (m_options & allow_text) {
  ------------------
  |  Branch (5461:13): [True: 486, False: 28]
  ------------------
 5462|    486|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5462:22): [True: 0, False: 486]
  ------------------
 5463|      0|                return *r;
 5464|      0|            }
 5465|    486|            else {
 5466|    486|                err = r.error();
 5467|    486|            }
 5468|    486|        }
 5469|       |
 5470|    514|        return unexpected(err);
 5471|    514|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5495|    486|    {
 5496|    486|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5496:18): [True: 0, False: 486]
  ------------------
 5497|      0|            value = true;
 5498|      0|            return *r;
 5499|      0|        }
 5500|    486|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5500:18): [True: 0, False: 486]
  ------------------
 5501|      0|            value = false;
 5502|      0|            return *r;
 5503|      0|        }
 5504|       |
 5505|    486|        return detail::unexpected_scan_error(
 5506|    486|            scan_error::invalid_scanned_value,
 5507|    486|            "Failed to read textual boolean value: No match");
 5508|    486|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2326|    972|{
 2327|    972|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|    972|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    972|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    972|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    972|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 172, False: 800]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    172|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    172|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    172|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    172|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    172|    }                                                  \
  |  |  |  | 3957|    972|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    800|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2328|    800|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2329|    800|                    .transform_error(make_eof_parse_error));
 2330|       |
 2331|    800|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2332|    800|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2333|    800|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|    800|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 800, False: 0]
  |  |  ------------------
  ------------------
 2334|    800|            return unexpected(parse_error::error);
 2335|    800|        }
 2336|      0|        return it;
 2337|       |    }
 2338|       |    else {
 2339|       |        auto range_it = range.begin();
 2340|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2341|       |            if (SCN_UNLIKELY(*range_it !=
 2342|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2343|       |                return unexpected(parse_error::error);
 2344|       |            }
 2345|       |        }
 2346|       |        return it;
 2347|       |    }
 2348|    800|}
_ZNK3scn2v44impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5610|    450|    {
 5611|    450|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5612|       |
 5613|    450|#if !SCN_DISABLE_LOCALE
 5614|    450|        if (specs.localized) {
  ------------------
  |  Branch (5614:13): [True: 24, False: 426]
  ------------------
 5615|     24|            return rd.read_localized(range, loc, value);
 5616|     24|        }
 5617|    426|#endif
 5618|       |
 5619|    426|        return rd.read_classic(range, value);
 5620|    450|    }
_ZNK3scn2v44impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5521|     24|    {
 5522|     24|        scan_error err{scan_error::invalid_scanned_value,
 5523|     24|                       "Failed to read boolean"};
 5524|       |
 5525|     24|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5525:13): [True: 16, False: 8]
  ------------------
 5526|     16|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5526:22): [True: 0, False: 16]
  ------------------
 5527|      0|                return *r;
 5528|      0|            }
 5529|     16|            else {
 5530|     16|                err = r.error();
 5531|     16|            }
 5532|     16|        }
 5533|       |
 5534|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5534:13): [True: 14, False: 10]
  ------------------
 5535|     14|            auto stdloc = loc.get<std::locale>();
 5536|     14|            const auto& numpunct =
 5537|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5538|     14|            const auto truename = numpunct.truename();
 5539|     14|            const auto falsename = numpunct.falsename();
 5540|       |
 5541|     14|            if (auto r =
  ------------------
  |  Branch (5541:22): [True: 0, False: 14]
  ------------------
 5542|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5543|      0|                return *r;
 5544|      0|            }
 5545|     14|            else {
 5546|     14|                err = r.error();
 5547|     14|            }
 5548|     14|        }
 5549|       |
 5550|     24|        return unexpected(err);
 5551|     24|    }
_ZNK3scn2v44impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5561|     14|    {
 5562|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5563|     14|        const auto shorter = std::pair{
 5564|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5564:13): [True: 14, False: 0]
  ------------------
 5565|     14|        const auto longer = std::pair{
 5566|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5566:13): [True: 0, False: 14]
  ------------------
 5567|       |
 5568|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5568:18): [True: 0, False: 14]
  ------------------
 5569|      0|            value = shorter.second;
 5570|      0|            return *r;
 5571|      0|        }
 5572|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5572:18): [True: 0, False: 14]
  ------------------
 5573|      0|            value = longer.second;
 5574|      0|            return *r;
 5575|      0|        }
 5576|       |
 5577|     14|        return detail::unexpected_scan_error(
 5578|     14|            scan_error::invalid_scanned_value,
 5579|     14|            "Failed to read textual boolean: No match");
 5580|     14|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2311|     28|{
 2312|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      2|    }                                                  \
  |  |  |  | 3957|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2313|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2314|     26|                    .transform_error(make_eof_parse_error));
 2315|       |
 2316|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2317|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2318|     26|        return unexpected(parse_error::error);
 2319|     26|    }
 2320|      0|    return it;
 2321|     26|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIcEENS0_13scan_expectedIS9_EERT_:
 6295|  3.20k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.20k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.20k|            auto rd = make_reader<T, char_type>();
 6301|  3.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.49k, False: 706]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.49k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.49k|    }
  ------------------
 6302|    706|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_20reader_impl_for_charIcEESA_cEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    706|    {
 6231|    706|        const bool need_skipped_width =
 6232|    706|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 208, False: 498]
  |  Branch (6232:33): [True: 414, False: 84]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    706|        auto it = rng.begin();
 6236|    706|        std::ptrdiff_t prefix_width = 0;
 6237|    706|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 418, False: 288]
  ------------------
 6238|    418|            auto max_width_view = take_width(rng, specs.precision);
 6239|    418|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    418|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    418|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    418|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    418|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    418|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    418|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    418|            it = prefix_result.first.base();
 6242|    418|            prefix_width = prefix_result.second;
 6243|    418|        }
 6244|    288|        else {
 6245|    288|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    288|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 288]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    288|            std::tie(it, prefix_width) = prefix_result;
 6247|    288|        }
 6248|    706|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    706|        std::ptrdiff_t value_width = 0;
 6252|    706|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 418, False: 288]
  ------------------
 6253|    418|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 6, False: 412]
  ------------------
 6254|      6|                return detail::unexpected_scan_error(
 6255|      6|                    scan_error::invalid_fill,
 6256|      6|                    "Too many fill characters before value, "
 6257|      6|                    "precision exceeded before reading value");
 6258|      6|            }
 6259|       |
 6260|    412|            const auto initial_width = specs.precision - prefix_width;
 6261|    412|            auto max_width_view =
 6262|    412|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    412|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    412|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 36, False: 376]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     36|    }                                                  \
  |  |  |  | 3957|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    376|            it = w_it.base();
 6265|    376|            value_width = initial_width - w_it.count();
 6266|    376|        }
 6267|    288|        else {
 6268|    288|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    288|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    288|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 22, False: 266]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     22|    }                                                  \
  |  | 3957|    288|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    288|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|    266|                                             specs, value, loc));
 6270|       |
 6271|    266|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 200, False: 66]
  ------------------
 6272|    200|                value_width = calculate_text_width(
 6273|    200|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|    200|                        .view());
 6275|    200|            }
 6276|    266|        }
 6277|       |
 6278|       |        // Read postfix
 6279|    642|        std::ptrdiff_t postfix_width = 0;
 6280|    642|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 642, False: 0]
  ------------------
 6281|    642|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    642|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    642|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    642|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    642|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|    642|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|    642|                                 rd.skip_ws_before_read(), prefix_width,
 6284|    642|                                 value_width));
 6285|    642|            std::tie(it, postfix_width) = postfix_result;
 6286|    642|        }
 6287|       |
 6288|    642|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    642|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 176, False: 466]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    176|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    176|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    176|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    176|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    176|    }
  ------------------
 6289|    642|            specs, prefix_width, value_width, postfix_width));
 6290|    466|        return it;
 6291|    642|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6295|  3.24k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.24k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.24k|            auto rd = make_reader<T, char_type>();
 6301|  3.24k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.50k, False: 742]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.50k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.50k|    }
  ------------------
 6302|    742|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    742|    {
 6231|    742|        const bool need_skipped_width =
 6232|    742|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 212, False: 530]
  |  Branch (6232:33): [True: 436, False: 94]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    742|        auto it = rng.begin();
 6236|    742|        std::ptrdiff_t prefix_width = 0;
 6237|    742|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 440, False: 302]
  ------------------
 6238|    440|            auto max_width_view = take_width(rng, specs.precision);
 6239|    440|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    440|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    440|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    440|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    440|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 30, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     30|    }                                                  \
  |  |  |  | 3957|    440|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    410|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    410|            it = prefix_result.first.base();
 6242|    410|            prefix_width = prefix_result.second;
 6243|    410|        }
 6244|    302|        else {
 6245|    302|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    302|            std::tie(it, prefix_width) = prefix_result;
 6247|    302|        }
 6248|    712|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    712|        std::ptrdiff_t value_width = 0;
 6252|    712|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 410, False: 302]
  ------------------
 6253|    410|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 8, False: 402]
  ------------------
 6254|      8|                return detail::unexpected_scan_error(
 6255|      8|                    scan_error::invalid_fill,
 6256|      8|                    "Too many fill characters before value, "
 6257|      8|                    "precision exceeded before reading value");
 6258|      8|            }
 6259|       |
 6260|    402|            const auto initial_width = specs.precision - prefix_width;
 6261|    402|            auto max_width_view =
 6262|    402|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    402|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 402, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    402|    }                                                  \
  |  |  |  | 3957|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|    302|        else {
 6268|    302|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    302|    }                                                  \
  |  | 3957|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|      0|                                             specs, value, loc));
 6270|       |
 6271|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 0]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|      0|        }
 6277|       |
 6278|       |        // Read postfix
 6279|      0|        std::ptrdiff_t postfix_width = 0;
 6280|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 0, False: 0]
  ------------------
 6281|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6284|      0|                                 value_width));
 6285|      0|            std::tie(it, postfix_width) = postfix_result;
 6286|      0|        }
 6287|       |
 6288|      0|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|      0|            specs, prefix_width, value_width, postfix_width));
 6290|      0|        return it;
 6291|      0|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|  3.20k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.20k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.20k|            auto rd = make_reader<T, char_type>();
 6301|  3.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 144, False: 3.05k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    144|    }
  ------------------
 6302|  3.05k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6230|  3.05k|    {
 6231|  3.05k|        const bool need_skipped_width =
 6232|  3.05k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 284, False: 2.77k]
  |  Branch (6232:33): [True: 1.14k, False: 1.62k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  3.05k|        auto it = rng.begin();
 6236|  3.05k|        std::ptrdiff_t prefix_width = 0;
 6237|  3.05k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 1.16k, False: 1.89k]
  ------------------
 6238|  1.16k|            auto max_width_view = take_width(rng, specs.precision);
 6239|  1.16k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 28, False: 1.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     28|    }                                                  \
  |  |  |  | 3957|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|  1.13k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|  1.13k|            it = prefix_result.first.base();
 6242|  1.13k|            prefix_width = prefix_result.second;
 6243|  1.13k|        }
 6244|  1.89k|        else {
 6245|  1.89k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  1.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  1.89k|            std::tie(it, prefix_width) = prefix_result;
 6247|  1.89k|        }
 6248|  3.02k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  3.02k|        std::ptrdiff_t value_width = 0;
 6252|  3.02k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 1.13k, False: 1.89k]
  ------------------
 6253|  1.13k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 10, False: 1.12k]
  ------------------
 6254|     10|                return detail::unexpected_scan_error(
 6255|     10|                    scan_error::invalid_fill,
 6256|     10|                    "Too many fill characters before value, "
 6257|     10|                    "precision exceeded before reading value");
 6258|     10|            }
 6259|       |
 6260|  1.12k|            const auto initial_width = specs.precision - prefix_width;
 6261|  1.12k|            auto max_width_view =
 6262|  1.12k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|  1.12k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 628, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    628|    }                                                  \
  |  |  |  | 3957|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    500|            it = w_it.base();
 6265|    500|            value_width = initial_width - w_it.count();
 6266|    500|        }
 6267|  1.89k|        else {
 6268|  1.89k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 648, False: 1.24k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    648|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    648|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    648|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    648|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    648|    }                                                  \
  |  | 3957|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.24k|                                             specs, value, loc));
 6270|       |
 6271|  1.24k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 230, False: 1.01k]
  ------------------
 6272|    230|                value_width = calculate_text_width(
 6273|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|    230|                        .view());
 6275|    230|            }
 6276|  1.24k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.36k, False: 374]
  ------------------
 6281|  1.36k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.36k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.36k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.36k|                                 value_width));
 6285|  1.36k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.36k|        }
 6287|       |
 6288|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 94, False: 1.64k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     94|    }
  ------------------
 6289|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.64k|        return it;
 6291|  1.74k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|  3.20k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.20k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.20k|            auto rd = make_reader<T, char_type>();
 6301|  3.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 144, False: 3.05k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    144|    }
  ------------------
 6302|  3.05k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6230|  3.05k|    {
 6231|  3.05k|        const bool need_skipped_width =
 6232|  3.05k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 284, False: 2.77k]
  |  Branch (6232:33): [True: 1.14k, False: 1.62k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  3.05k|        auto it = rng.begin();
 6236|  3.05k|        std::ptrdiff_t prefix_width = 0;
 6237|  3.05k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 1.16k, False: 1.89k]
  ------------------
 6238|  1.16k|            auto max_width_view = take_width(rng, specs.precision);
 6239|  1.16k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 28, False: 1.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     28|    }                                                  \
  |  |  |  | 3957|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|  1.13k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|  1.13k|            it = prefix_result.first.base();
 6242|  1.13k|            prefix_width = prefix_result.second;
 6243|  1.13k|        }
 6244|  1.89k|        else {
 6245|  1.89k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  1.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  1.89k|            std::tie(it, prefix_width) = prefix_result;
 6247|  1.89k|        }
 6248|  3.02k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  3.02k|        std::ptrdiff_t value_width = 0;
 6252|  3.02k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 1.13k, False: 1.89k]
  ------------------
 6253|  1.13k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 10, False: 1.12k]
  ------------------
 6254|     10|                return detail::unexpected_scan_error(
 6255|     10|                    scan_error::invalid_fill,
 6256|     10|                    "Too many fill characters before value, "
 6257|     10|                    "precision exceeded before reading value");
 6258|     10|            }
 6259|       |
 6260|  1.12k|            const auto initial_width = specs.precision - prefix_width;
 6261|  1.12k|            auto max_width_view =
 6262|  1.12k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|  1.12k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 628, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    628|    }                                                  \
  |  |  |  | 3957|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    500|            it = w_it.base();
 6265|    500|            value_width = initial_width - w_it.count();
 6266|    500|        }
 6267|  1.89k|        else {
 6268|  1.89k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 648, False: 1.24k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    648|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    648|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    648|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    648|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    648|    }                                                  \
  |  | 3957|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.24k|                                             specs, value, loc));
 6270|       |
 6271|  1.24k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 230, False: 1.01k]
  ------------------
 6272|    230|                value_width = calculate_text_width(
 6273|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|    230|                        .view());
 6275|    230|            }
 6276|  1.24k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.36k, False: 374]
  ------------------
 6281|  1.36k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.36k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.36k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.36k|                                 value_width));
 6285|  1.36k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.36k|        }
 6287|       |
 6288|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 94, False: 1.64k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     94|    }
  ------------------
 6289|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.64k|        return it;
 6291|  1.74k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|  3.20k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  3.20k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  3.20k|            auto rd = make_reader<T, char_type>();
 6301|  3.20k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  3.20k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 144, False: 3.05k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    144|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    144|    }
  ------------------
 6302|  3.05k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  3.20k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6230|  3.05k|    {
 6231|  3.05k|        const bool need_skipped_width =
 6232|  3.05k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 284, False: 2.77k]
  |  Branch (6232:33): [True: 1.14k, False: 1.62k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  3.05k|        auto it = rng.begin();
 6236|  3.05k|        std::ptrdiff_t prefix_width = 0;
 6237|  3.05k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 1.16k, False: 1.89k]
  ------------------
 6238|  1.16k|            auto max_width_view = take_width(rng, specs.precision);
 6239|  1.16k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|  1.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 28, False: 1.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     28|    }                                                  \
  |  |  |  | 3957|  1.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|  1.13k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|  1.13k|            it = prefix_result.first.base();
 6242|  1.13k|            prefix_width = prefix_result.second;
 6243|  1.13k|        }
 6244|  1.89k|        else {
 6245|  1.89k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  1.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  1.89k|            std::tie(it, prefix_width) = prefix_result;
 6247|  1.89k|        }
 6248|  3.02k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  3.02k|        std::ptrdiff_t value_width = 0;
 6252|  3.02k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 1.13k, False: 1.89k]
  ------------------
 6253|  1.13k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 10, False: 1.12k]
  ------------------
 6254|     10|                return detail::unexpected_scan_error(
 6255|     10|                    scan_error::invalid_fill,
 6256|     10|                    "Too many fill characters before value, "
 6257|     10|                    "precision exceeded before reading value");
 6258|     10|            }
 6259|       |
 6260|  1.12k|            const auto initial_width = specs.precision - prefix_width;
 6261|  1.12k|            auto max_width_view =
 6262|  1.12k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|  1.12k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 628, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    628|    }                                                  \
  |  |  |  | 3957|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    500|            it = w_it.base();
 6265|    500|            value_width = initial_width - w_it.count();
 6266|    500|        }
 6267|  1.89k|        else {
 6268|  1.89k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  1.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  1.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  1.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 648, False: 1.24k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    648|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    648|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    648|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    648|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    648|    }                                                  \
  |  | 3957|  1.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  1.24k|                                             specs, value, loc));
 6270|       |
 6271|  1.24k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 230, False: 1.01k]
  ------------------
 6272|    230|                value_width = calculate_text_width(
 6273|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|    230|                        .view());
 6275|    230|            }
 6276|  1.24k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  1.74k|        std::ptrdiff_t postfix_width = 0;
 6280|  1.74k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 1.36k, False: 374]
  ------------------
 6281|  1.36k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 1.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  1.36k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  1.36k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  1.36k|                                 value_width));
 6285|  1.36k|            std::tie(it, postfix_width) = postfix_result;
 6286|  1.36k|        }
 6287|       |
 6288|  1.74k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  1.74k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 94, False: 1.64k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     94|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     94|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     94|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     94|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     94|    }
  ------------------
 6289|  1.74k|            specs, prefix_width, value_width, postfix_width));
 6290|  1.64k|        return it;
 6291|  1.74k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|  5.14k|{
 5892|  5.14k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.14k]
  |  |  ------------------
  ------------------
 5893|      0|        return unexpected(e);
 5894|      0|    }
 5895|       |
 5896|  5.14k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 572, False: 4.57k]
  ------------------
 5897|    572|        return range.begin();
 5898|    572|    }
 5899|       |
 5900|  4.57k|    return skip_classic_whitespace(range);
 5901|  5.14k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|    572|    {
 3619|    572|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    572|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|    572|        return read_default_with_base(range, value, 10);
 3621|    572|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|    572|    {
 3583|    572|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|    572|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|    572|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 572]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  1.14k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  1.14k|                parse_integer_digits_without_thsep(
 3602|  1.14k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  1.14k|                    prefix_result.parsed_base));
 3604|       |
 3605|  1.14k|        auto buf = make_contiguous_buffer(
 3606|  1.14k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  1.14k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 572, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    572|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    572|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    572|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    572|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    572|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|      0|                                    prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(prefix_result.iterator,
 3612|      0|                            ranges::distance(buf.view().begin(), result_it));
 3613|  1.14k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZN3scn2v44impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3618|    572|    {
 3619|    572|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    572|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3620|    572|        return read_default_with_base(range, value, 10);
 3621|    572|    }
_ZN3scn2v44impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|    572|    {
 3583|    572|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|    572|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|    572|        if constexpr (!std::is_signed_v<T>) {
 3587|    572|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 0, False: 572]
  ------------------
 3588|      0|                return detail::unexpected_scan_error(
 3589|      0|                    scan_error::invalid_scanned_value,
 3590|      0|                    "Unexpected '-' sign when parsing an "
 3591|      0|                    "unsigned value");
 3592|      0|            }
 3593|    572|        }
 3594|       |
 3595|    572|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 572]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  1.14k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  1.14k|                parse_integer_digits_without_thsep(
 3602|  1.14k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  1.14k|                    prefix_result.parsed_base));
 3604|       |
 3605|  1.14k|        auto buf = make_contiguous_buffer(
 3606|  1.14k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  1.14k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 572, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    572|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    572|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    572|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    572|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    572|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|      0|                                    prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(prefix_result.iterator,
 3612|      0|                            ranges::distance(buf.view().begin(), result_it));
 3613|  1.14k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZNK3scn2v44impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5843|  1.23k|    {
 5844|  1.23k|        return true;
 5845|  1.23k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5861|    978|    {
 5862|    978|        detail::format_specs specs{};
 5863|    978|        specs.type = detail::presentation_type::int_hex;
 5864|       |
 5865|    978|        std::uintptr_t intvalue{};
 5866|    978|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3958|    978|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    978|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    978|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    978|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 948, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    948|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    948|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    948|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    948|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    948|    }                                                  \
  |  |  |  | 3957|    978|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5867|     30|                                                                intvalue, loc));
 5868|     30|        value = reinterpret_cast<void*>(intvalue);
 5869|     30|        return result;
 5870|    978|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZNK3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3182|  1.52k|    {
 3183|  1.52k|        return true;
 3184|  1.52k|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5598|    572|    {
 5599|    572|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    572|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5600|       |
 5601|    572|        return bool_reader<CharT>{}.read_classic(range, value);
 5602|    572|    }
_ZNK3scn2v44impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5448|  1.08k|    {
 5449|  1.08k|        scan_error err{scan_error::invalid_scanned_value,
 5450|  1.08k|                       "Failed to read boolean"};
 5451|       |
 5452|  1.08k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5452:13): [True: 1.02k, False: 58]
  ------------------
 5453|  1.02k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5453:22): [True: 40, False: 986]
  ------------------
 5454|     40|                return *r;
 5455|     40|            }
 5456|    986|            else {
 5457|    986|                err = r.error();
 5458|    986|            }
 5459|  1.02k|        }
 5460|       |
 5461|  1.04k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5461:13): [True: 1.00k, False: 40]
  ------------------
 5462|  1.00k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5462:22): [True: 0, False: 1.00k]
  ------------------
 5463|      0|                return *r;
 5464|      0|            }
 5465|  1.00k|            else {
 5466|  1.00k|                err = r.error();
 5467|  1.00k|            }
 5468|  1.00k|        }
 5469|       |
 5470|  1.04k|        return unexpected(err);
 5471|  1.04k|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5477|  1.05k|    {
 5478|  1.05k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5478:18): [True: 46, False: 1.01k]
  ------------------
 5479|     46|            value = false;
 5480|     46|            return *r;
 5481|     46|        }
 5482|  1.01k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5482:18): [True: 0, False: 1.01k]
  ------------------
 5483|      0|            value = true;
 5484|      0|            return *r;
 5485|      0|        }
 5486|       |
 5487|  1.01k|        return detail::unexpected_scan_error(
 5488|  1.01k|            scan_error::invalid_scanned_value,
 5489|  1.01k|            "Failed to read numeric boolean value: No match");
 5490|  1.01k|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5495|  1.00k|    {
 5496|  1.00k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5496:18): [True: 0, False: 1.00k]
  ------------------
 5497|      0|            value = true;
 5498|      0|            return *r;
 5499|      0|        }
 5500|  1.00k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5500:18): [True: 0, False: 1.00k]
  ------------------
 5501|      0|            value = false;
 5502|      0|            return *r;
 5503|      0|        }
 5504|       |
 5505|  1.00k|        return detail::unexpected_scan_error(
 5506|  1.00k|            scan_error::invalid_scanned_value,
 5507|  1.00k|            "Failed to read textual boolean value: No match");
 5508|  1.00k|    }
_ZN3scn2v44impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2326|  2.00k|{
 2327|  2.00k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  2.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 180, False: 1.82k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    180|    }                                                  \
  |  |  |  | 3957|  2.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2328|  1.82k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2329|  1.82k|                    .transform_error(make_eof_parse_error));
 2330|       |
 2331|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2332|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2333|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2334|       |            return unexpected(parse_error::error);
 2335|       |        }
 2336|       |        return it;
 2337|       |    }
 2338|  1.82k|    else {
 2339|  1.82k|        auto range_it = range.begin();
 2340|  1.82k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2340:28): [True: 1.82k, False: 0]
  ------------------
 2341|  1.82k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  | 1039|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.82k, False: 0]
  |  |  ------------------
  ------------------
 2342|  1.82k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2343|  1.82k|                return unexpected(parse_error::error);
 2344|  1.82k|            }
 2345|  1.82k|        }
 2346|      0|        return it;
 2347|  1.82k|    }
 2348|  1.82k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3739|    572|    constexpr float_reader() = default;
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4245|    572|    {
 4246|    572|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    572|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4247|       |
 4248|    572|        float_reader<CharT> rd{};
 4249|    572|        return read_impl<Range>(
 4250|    572|            range, rd,
 4251|    572|            [](float_reader<CharT>& r, auto&&... args) {
 4252|    572|                return r.read_source(SCN_FWD(args)...);
 4253|    572|            },
 4254|    572|            value);
 4255|    572|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    572|        : m_fptr([](storage fn,
  743|    572|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    572|              cvref<T> obj = *get<T>(fn);
  745|    572|              if constexpr (std::is_void_v<R>) {
  746|    572|                  obj(static_cast<decltype(args)>(args)...);
  747|    572|              }
  748|    572|              else {
  749|    572|                  return obj(static_cast<decltype(args)>(args)...);
  750|    572|              }
  751|    572|          }),
  752|    572|          m_storage(std::addressof(f))
  753|    572|    {
  754|    572|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    572|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    572|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    572|              else {
  749|    572|                  return obj(static_cast<decltype(args)>(args)...);
  750|    572|              }
  751|    572|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    572|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    572|        else if constexpr (std::is_object_v<T>) {
  688|    572|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    572|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4251|    572|            [](float_reader<CharT>& r, auto&&... args) {
 4252|    572|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4253|    572|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    572|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    572|        {
  662|    572|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5359|    572|    {
 5360|    572|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    572|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|    572|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5359|    572|    {
 5360|    572|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    572|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|    572|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|    572|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|    572|                          basic_contiguous_scan_context<char_type>>) {
 5984|    572|            auto rd = make_reader<T, char_type>();
 5985|    572|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|    572|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5971|    572|    {
 5972|    572|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|    572|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    572|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    572|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    572|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    572|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|    572|                        .transform_error(make_eof_scan_error));
 5974|    572|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|    572|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5359|    572|    {
 5360|    572|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|    572|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|    572|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|    572|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   126k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   126k|    static_cast<    \
  |  | 1109|   126k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   126k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   126k|          m_current(m_range.begin())
 3020|   126k|    {
 3021|   126k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|   942k|    {
 3030|   942k|        return m_range.end();
 3031|   942k|    }
_ZN3scn2v44impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1318|   477k|{
 1319|       |    // TODO: optimize
 1320|   477k|    SCN_EXPECT(!str.empty());
  ------------------
  |  | 1104|   477k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   477k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1321|   477k|    auto res = get_next_code_point(str);
 1322|   477k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1323|   477k|}
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|   435k|    {
 3045|   435k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   435k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   435k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   435k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   435k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 435k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   435k|        }
 3051|   435k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   435k|    static_cast<    \
  |  | 1109|   435k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   435k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|  28.7k|    {
 3035|  28.7k|        return ranges::subrange{begin(), end()};
 3036|  28.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixINS1_15take_width_viewISA_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6143|  3.09k|    {
 6144|  3.09k|        const bool need_skipped_width =
 6145|  3.09k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 34, False: 3.06k]
  |  Branch (6145:33): [True: 3.06k, False: 0]
  ------------------
 6146|  3.09k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|  3.09k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 46, False: 3.04k]
  ------------------
 6150|  3.09k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 512, False: 2.53k]
  ------------------
 6151|    558|            return skip_fill(rng, specs.precision, specs.fill,
 6152|    558|                             need_skipped_width);
 6153|    558|        }
 6154|  2.53k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 2.49k, False: 44]
  |  Branch (6154:56): [True: 1.66k, False: 826]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|  1.66k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 1.66k, False: 0]
  ------------------
 6158|  1.66k|                auto max_width_view = take_width(rng, specs.precision);
 6159|  1.66k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|  1.66k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.66k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.66k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 116, False: 1.55k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    116|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    116|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    116|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    116|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    116|    }                                                  \
  |  |  |  | 3957|  1.66k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.55k|                                  .transform_error(make_eof_scan_error));
 6161|  1.55k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|  1.66k|            }
 6163|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                            make_eof_scan_error));
 6165|       |
 6166|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 0]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|      0|            return result_type{it, 0};
 6174|      0|        }
 6175|       |
 6176|    870|        return result_type{rng.begin(), 0};
 6177|  2.53k|    }
_ZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 6058|    558|{
 6059|    558|    using char_type = detail::char_t<Range>;
 6060|    558|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6061|       |
 6062|    558|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (6062:9): [True: 558, False: 0]
  ------------------
 6063|    558|        const auto fill_ch = fill.template get_code_unit<char_type>();
 6064|    558|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 6065|       |
 6066|    558|        if (max_width == 0) {
  ------------------
  |  Branch (6066:13): [True: 0, False: 558]
  ------------------
 6067|      0|            auto it = read_while_code_unit(range, pred);
 6068|       |
 6069|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (6069:17): [True: 0, False: 0]
  ------------------
 6070|      0|                auto prefix_width =
 6071|      0|                    static_cast<std::ptrdiff_t>(
 6072|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 6073|      0|                    ranges::distance(range.begin(), it);
 6074|      0|                return result_type{it, prefix_width};
 6075|      0|            }
 6076|      0|            return result_type{it, 0};
 6077|      0|        }
 6078|       |
 6079|    558|        auto max_width_view = take_width(range, max_width);
 6080|    558|        auto w_it = read_while_code_unit(max_width_view, pred);
 6081|       |
 6082|    558|        if (want_skipped_width) {
  ------------------
  |  Branch (6082:13): [True: 558, False: 0]
  ------------------
 6083|    558|            return result_type{w_it.base(), max_width - w_it.count()};
 6084|    558|        }
 6085|      0|        return result_type{w_it.base(), 0};
 6086|    558|    }
 6087|       |
 6088|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 6089|      0|    if (max_width == 0) {
  ------------------
  |  Branch (6089:9): [True: 0, False: 0]
  ------------------
 6090|      0|        auto it = read_while_code_units(range, fill_chars);
 6091|       |
 6092|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (6092:13): [True: 0, False: 0]
  ------------------
 6093|      0|            auto prefix_width =
 6094|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 6095|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 6096|      0|            return result_type{it, prefix_width};
 6097|      0|        }
 6098|      0|        return result_type{it, 0};
 6099|      0|    }
 6100|       |
 6101|      0|    auto max_width_view = take_width(range, max_width);
 6102|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 6103|       |
 6104|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (6104:9): [True: 0, False: 0]
  ------------------
 6105|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 6106|      0|    }
 6107|      0|    return result_type{w_it.base(), 0};
 6108|      0|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    558|        : m_fptr([](storage fn,
  743|    558|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    558|              cvref<T> obj = *get<T>(fn);
  745|    558|              if constexpr (std::is_void_v<R>) {
  746|    558|                  obj(static_cast<decltype(args)>(args)...);
  747|    558|              }
  748|    558|              else {
  749|    558|                  return obj(static_cast<decltype(args)>(args)...);
  750|    558|              }
  751|    558|          }),
  752|    558|          m_storage(std::addressof(f))
  753|    558|    {
  754|    558|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    822|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    822|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    822|              else {
  749|    822|                  return obj(static_cast<decltype(args)>(args)...);
  750|    822|              }
  751|    822|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    822|    {
  684|    822|        if constexpr (std::is_const_v<T>) {
  685|    822|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    822|    }
_ZZN3scn2v44impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 6064|    822|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    558|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    558|        {
  667|    558|        }
_ZN3scn2v44impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|    558|{
 2108|    558|    return read_until_code_unit(range, std::not_fn(pred));
 2109|    558|}
_ZN3scn2v44impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|    558|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|    558|    else {
 2079|    558|        auto first = range.begin();
 2080|    856|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 822, False: 34]
  ------------------
 2081|    822|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 524, False: 298]
  ------------------
 2082|    524|                return first;
 2083|    524|            }
 2084|    822|        }
 2085|     34|        return first;
 2086|    558|    }
 2087|    558|}
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2952|  3.89k|    {
 2953|  3.89k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2954|  3.89k|                                      m_count};
 2955|  3.89k|    }
_ZNK3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2857|  14.7k|    {
 2858|  14.7k|        return view;
 2859|  14.7k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2513|  3.89k|        : m_current(x), m_end(s), m_count(n)
 2514|  3.89k|    {
 2515|  3.89k|    }
_ZN3scn2v44implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2923|  3.15k|        {
 2924|  3.15k|            return !(y == x);
 2925|  3.15k|        }
_ZN3scn2v44impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2910|  6.99k|        {
 2911|  6.99k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2911:21): [True: 266, False: 6.73k]
  |  Branch (2911:39): [True: 266, False: 0]
  ------------------
 2912|  6.99k|                   y.base() == x.m_end ||
  ------------------
  |  Branch (2912:20): [True: 0, False: 6.73k]
  ------------------
 2913|  6.99k|                   (y.count() == 1 && y.multibyte_left() == 0 &&
  ------------------
  |  Branch (2913:21): [True: 576, False: 6.15k]
  |  Branch (2913:39): [True: 576, False: 0]
  ------------------
 2914|  6.73k|                    y.is_current_double_wide());
  ------------------
  |  Branch (2914:21): [True: 0, False: 576]
  ------------------
 2915|  6.99k|        }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2553|    842|    {
 2554|    842|        return m_multibyte_left;
 2555|    842|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE22is_current_double_wideEv:
 2558|    576|    {
 2559|    576|        assert(count() != 0 || multibyte_left() != 0);
 2560|    576|        return _get_width_at_current_cp_start(_get_cp_length_at_current()) == 2;
 2561|    576|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2785|  3.05k|    {
 2786|  3.05k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  | 1039|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.05k]
  |  |  ------------------
  ------------------
 2787|      0|            return 0;
 2788|      0|        }
 2789|       |
 2790|  3.05k|        if (cplen == 1) {
  ------------------
  |  Branch (2790:13): [True: 3.05k, False: 0]
  ------------------
 2791|  3.05k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  3.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2792|  3.05k|            auto cp = static_cast<char32_t>(*m_current);
 2793|  3.05k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2794|  3.05k|        }
 2795|       |
 2796|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2797|      0|                                           cplen);
 2798|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2799|      0|            return 0;
 2800|      0|        }
 2801|       |
 2802|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2803|      0|        return static_cast<difference_type>(
 2804|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2805|      0|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2779|  3.05k|    {
 2780|  3.05k|        return static_cast<difference_type>(
 2781|  3.05k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2782|  3.05k|    }
_ZNK3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2958|  6.99k|    {
 2959|  6.99k|        return sentinel<true>{m_base.get().end()};
 2960|  6.99k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2891|  6.99k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  | 1108|  6.99k|    static_cast<    \
  |  | 1109|  6.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2564|  5.18k|    {
 2565|  5.18k|        return *m_current;
 2566|  5.18k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2573|  2.47k|    {
 2574|  2.47k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  | 1104|  2.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2575|  2.47k|        _increment_current();
 2576|  2.47k|        return *this;
 2577|  2.47k|    }
_ZN3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2808|  2.47k|    {
 2809|  2.47k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2809:13): [True: 2.47k, False: 0]
  ------------------
 2810|  2.47k|            auto cplen = _get_cp_length_at_current();
 2811|  2.47k|            m_multibyte_left = cplen - 1;
 2812|  2.47k|            m_count -= _get_width_at_current_cp_start(cplen);
 2813|  2.47k|        }
 2814|      0|        else {
 2815|      0|            --m_multibyte_left;
 2816|      0|        }
 2817|       |
 2818|  2.47k|        ++m_current;
 2819|  2.47k|    }
_ZNK3scn2v44impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2974|  2.22k|    {
 2975|  2.22k|        return take_width_view{r, n};
 2976|  2.22k|    }
_ZN3scn2v44impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2942|  2.22k|        : m_base(base), m_count(count)
 2943|  2.22k|    {
 2944|  2.22k|    }
_ZN3scn2v44impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2854|  2.22k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v44impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  1.66k|{
 3098|  1.66k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 1.66k, False: 0]
  ------------------
 3099|  1.66k|        auto it = read_while_classic_space(range);
 3100|  1.66k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  1.66k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 116, False: 1.55k]
  |  |  ------------------
  ------------------
 3102|    116|            return unexpected(e);
 3103|    116|        }
 3104|       |
 3105|  1.55k|        return it;
 3106|  1.66k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  1.66k|}
_ZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  1.66k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  1.66k|    else {
 2258|  1.66k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  1.66k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.66k|            return detail::is_cp_space(cp);
 2271|  1.66k|        });
 2272|  1.66k|    }
 2273|  1.66k|}
_ZN3scn2v44impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|  1.66k|{
 2214|  1.66k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  1.66k|}
_ZN3scn2v44impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  1.66k|{
 2193|  1.66k|    auto it = range.begin();
 2194|  2.29k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 2.18k, False: 116]
  ------------------
 2195|  2.18k|        const auto val =
 2196|  2.18k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  2.18k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  2.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.18k, False: 0]
  |  |  ------------------
  ------------------
 2198|  2.18k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  2.18k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  2.18k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 1.55k, False: 630]
  ------------------
 2201|  1.55k|                return it;
 2202|  1.55k|            }
 2203|  2.18k|        }
 2204|    630|        it = val.iterator;
 2205|    630|    }
 2206|       |
 2207|    116|    return it;
 2208|  1.66k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1997|  2.18k|{
 1998|  2.18k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  2.18k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  2.18k|    auto it = range.begin();
 2002|  2.18k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  2.18k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.18k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  2.18k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.18k, False: 0]
  ------------------
 2011|  2.18k|        ++it;
 2012|  2.18k|        return {it, string_type(1, *range.begin())};
 2013|  2.18k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  2.18k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  944|  3.84k|{
  945|  3.84k|    return is_range_eof(r.begin(), r.end());
  946|  3.84k|}
_ZN3scn2v44impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  928|  3.84k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.84k|    {
  938|  3.84k|        return begin == end;
  939|  3.84k|    }
  940|  3.84k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1988|  2.18k|    {
 1989|  2.18k|        return !codepoint.empty();
 1990|  2.18k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.66k|        : m_fptr([](storage fn,
  743|  1.66k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.66k|              cvref<T> obj = *get<T>(fn);
  745|  1.66k|              if constexpr (std::is_void_v<R>) {
  746|  1.66k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.66k|              }
  748|  1.66k|              else {
  749|  1.66k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.66k|              }
  751|  1.66k|          }),
  752|  1.66k|          m_storage(std::addressof(f))
  753|  1.66k|    {
  754|  1.66k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.18k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.18k|              else {
  749|  2.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.18k|              }
  751|  2.18k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.18k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.18k|        else if constexpr (std::is_object_v<T>) {
  688|  2.18k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.18k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|  2.18k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  2.18k|            return detail::is_cp_space(cp);
 2271|  2.18k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.66k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.66k|        {
  662|  1.66k|        }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  950|  1.66k|{
  951|  1.66k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 116, False: 1.55k]
  |  |  ------------------
  ------------------
  952|    116|        return eof_error::eof;
  953|    116|    }
  954|  1.55k|    return eof_error::good;
  955|  1.66k|}
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2545|  8.84k|    {
 2546|  8.84k|        return m_current;
 2547|  8.84k|    }
_ZNK3scn2v44impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2549|  16.4k|    {
 2550|  16.4k|        return m_count;
 2551|  16.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|  5.00k|    {
 6144|  5.00k|        const bool need_skipped_width =
 6145|  5.00k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 2.64k, False: 2.36k]
  |  Branch (6145:33): [True: 0, False: 2.36k]
  ------------------
 6146|  5.00k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|  5.00k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 166, False: 4.84k]
  ------------------
 6150|  5.00k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 600, False: 4.24k]
  ------------------
 6151|    766|            return skip_fill(rng, specs.precision, specs.fill,
 6152|    766|                             need_skipped_width);
 6153|    766|        }
 6154|  4.24k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 3.81k, False: 424]
  |  Branch (6154:56): [True: 2.81k, False: 1.00k]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|  2.81k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 2.81k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|  5.62k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|  2.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 2.81k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  2.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  2.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  5.62k|                            make_eof_scan_error));
 6165|       |
 6166|  5.62k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 1.94k, False: 866]
  ------------------
 6167|  1.94k|                return result_type{
 6168|  1.94k|                    it,
 6169|  1.94k|                    calculate_text_width(make_contiguous_buffer(
 6170|  1.94k|                                             ranges::subrange{rng.begin(), it})
 6171|  1.94k|                                             .view())};
 6172|  1.94k|            }
 6173|    866|            return result_type{it, 0};
 6174|  5.62k|        }
 6175|       |
 6176|  1.43k|        return result_type{rng.begin(), 0};
 6177|  4.24k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|  2.71k|    {
 6186|  2.71k|        const bool need_skipped_width =
 6187|  2.71k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 730, False: 1.98k]
  |  Branch (6187:33): [True: 1.05k, False: 926]
  ------------------
 6188|  2.71k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|  2.71k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 140, False: 2.57k]
  ------------------
 6191|  2.71k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 608, False: 1.96k]
  ------------------
 6192|    748|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 244, False: 504]
  ------------------
 6193|    748|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 136, False: 108]
  ------------------
 6194|    136|                return result_type{rng.begin(), 0};
 6195|    136|            }
 6196|    612|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|    612|                             specs.fill, need_skipped_width);
 6198|    748|        }
 6199|  1.96k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 1.87k, False: 88]
  ------------------
 6200|  1.96k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 1.56k, False: 306]
  ------------------
 6201|  1.96k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 526, False: 1.04k]
  |  Branch (6201:35): [True: 392, False: 134]
  ------------------
 6202|  1.56k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 672, False: 504]
  ------------------
 6203|  1.17k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 514, False: 158]
  ------------------
 6204|    906|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 514, False: 392]
  ------------------
 6205|    514|                const auto initial_width =
 6206|    514|                    specs.precision - prefix_width - value_width;
 6207|    514|                auto max_width_view = take_width(rng, initial_width);
 6208|    514|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|    514|                                  .transform_error(make_eof_scan_error));
 6210|    514|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|    514|            }
 6212|    784|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|    784|                            make_eof_scan_error));
 6214|       |
 6215|    784|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 392, False: 0]
  ------------------
 6216|    392|                return result_type{
 6217|    392|                    it,
 6218|    392|                    calculate_text_width(make_contiguous_buffer(
 6219|    392|                                             ranges::subrange{rng.begin(), it})
 6220|    392|                                             .view())};
 6221|    392|            }
 6222|      0|            return result_type{it, 0};
 6223|    784|        }
 6224|  1.05k|        return result_type{rng.begin(), 0};
 6225|  1.96k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIiEENS0_13scan_expectedIS9_EERT_:
 6295|  1.50k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.50k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.50k|            auto rd = make_reader<T, char_type>();
 6301|  1.50k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.50k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 742, False: 762]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    742|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    742|    }
  ------------------
 6302|    762|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.50k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_iEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    762|    {
 6231|    762|        const bool need_skipped_width =
 6232|    762|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 262, False: 500]
  |  Branch (6232:33): [True: 278, False: 222]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    762|        auto it = rng.begin();
 6236|    762|        std::ptrdiff_t prefix_width = 0;
 6237|    762|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 280, False: 482]
  ------------------
 6238|    280|            auto max_width_view = take_width(rng, specs.precision);
 6239|    280|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 20, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     20|    }                                                  \
  |  |  |  | 3957|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    260|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    260|            it = prefix_result.first.base();
 6242|    260|            prefix_width = prefix_result.second;
 6243|    260|        }
 6244|    482|        else {
 6245|    482|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    482|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    482|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    482|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 482]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    482|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    482|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    482|            std::tie(it, prefix_width) = prefix_result;
 6247|    482|        }
 6248|    742|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    742|        std::ptrdiff_t value_width = 0;
 6252|    742|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 260, False: 482]
  ------------------
 6253|    260|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 2, False: 258]
  ------------------
 6254|      2|                return detail::unexpected_scan_error(
 6255|      2|                    scan_error::invalid_fill,
 6256|      2|                    "Too many fill characters before value, "
 6257|      2|                    "precision exceeded before reading value");
 6258|      2|            }
 6259|       |
 6260|    258|            const auto initial_width = specs.precision - prefix_width;
 6261|    258|            auto max_width_view =
 6262|    258|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    258|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 236, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    236|    }                                                  \
  |  |  |  | 3957|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     22|            it = w_it.base();
 6265|     22|            value_width = initial_width - w_it.count();
 6266|     22|        }
 6267|    482|        else {
 6268|    482|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    482|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    482|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 436, False: 46]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    436|    }                                                  \
  |  | 3957|    482|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    482|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|     46|                                             specs, value, loc));
 6270|       |
 6271|     46|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 8, False: 38]
  ------------------
 6272|      8|                value_width = calculate_text_width(
 6273|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      8|                        .view());
 6275|      8|            }
 6276|     46|        }
 6277|       |
 6278|       |        // Read postfix
 6279|     68|        std::ptrdiff_t postfix_width = 0;
 6280|     68|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 68, False: 0]
  ------------------
 6281|     68|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|     68|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     68|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     68|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 68]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     68|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|     68|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|     68|                                 rd.skip_ws_before_read(), prefix_width,
 6284|     68|                                 value_width));
 6285|     68|            std::tie(it, postfix_width) = postfix_result;
 6286|     68|        }
 6287|       |
 6288|     68|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|     68|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 64]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6289|     68|            specs, prefix_width, value_width, postfix_width));
 6290|     64|        return it;
 6291|     68|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIjEENS0_13scan_expectedIS9_EERT_:
 6295|  1.50k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.50k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.50k|            auto rd = make_reader<T, char_type>();
 6301|  1.50k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.50k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 742, False: 762]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    742|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    742|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    742|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    742|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    742|    }
  ------------------
 6302|    762|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.50k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_19reader_impl_for_intIwEESA_jEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    762|    {
 6231|    762|        const bool need_skipped_width =
 6232|    762|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 262, False: 500]
  |  Branch (6232:33): [True: 278, False: 222]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    762|        auto it = rng.begin();
 6236|    762|        std::ptrdiff_t prefix_width = 0;
 6237|    762|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 280, False: 482]
  ------------------
 6238|    280|            auto max_width_view = take_width(rng, specs.precision);
 6239|    280|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    280|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 20, False: 260]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     20|    }                                                  \
  |  |  |  | 3957|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    260|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    260|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    260|            it = prefix_result.first.base();
 6242|    260|            prefix_width = prefix_result.second;
 6243|    260|        }
 6244|    482|        else {
 6245|    482|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    482|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    482|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    482|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 482]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    482|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    482|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    482|            std::tie(it, prefix_width) = prefix_result;
 6247|    482|        }
 6248|    742|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    742|        std::ptrdiff_t value_width = 0;
 6252|    742|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 260, False: 482]
  ------------------
 6253|    260|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 2, False: 258]
  ------------------
 6254|      2|                return detail::unexpected_scan_error(
 6255|      2|                    scan_error::invalid_fill,
 6256|      2|                    "Too many fill characters before value, "
 6257|      2|                    "precision exceeded before reading value");
 6258|      2|            }
 6259|       |
 6260|    258|            const auto initial_width = specs.precision - prefix_width;
 6261|    258|            auto max_width_view =
 6262|    258|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    258|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 236, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    236|    }                                                  \
  |  |  |  | 3957|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     22|            it = w_it.base();
 6265|     22|            value_width = initial_width - w_it.count();
 6266|     22|        }
 6267|    482|        else {
 6268|    482|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    482|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    482|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    482|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 436, False: 46]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    436|    }                                                  \
  |  | 3957|    482|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    482|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|     46|                                             specs, value, loc));
 6270|       |
 6271|     46|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 8, False: 38]
  ------------------
 6272|      8|                value_width = calculate_text_width(
 6273|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      8|                        .view());
 6275|      8|            }
 6276|     46|        }
 6277|       |
 6278|       |        // Read postfix
 6279|     68|        std::ptrdiff_t postfix_width = 0;
 6280|     68|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 68, False: 0]
  ------------------
 6281|     68|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|     68|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     68|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     68|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 68]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     68|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|     68|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|     68|                                 rd.skip_ws_before_read(), prefix_width,
 6284|     68|                                 value_width));
 6285|     68|            std::tie(it, postfix_width) = postfix_result;
 6286|     68|        }
 6287|       |
 6288|     68|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|     68|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 64]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6289|     68|            specs, prefix_width, value_width, postfix_width));
 6290|     64|        return it;
 6291|     68|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIPvEENS0_13scan_expectedIS9_EERT_:
 6295|  1.43k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.43k|            auto rd = make_reader<T, char_type>();
 6301|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 818, False: 620]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    818|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    818|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    818|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    818|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    818|    }
  ------------------
 6302|    620|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.43k|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5848|  1.43k|    {
 5849|  1.43k|        reader_error_handler eh{};
 5850|  1.43k|        detail::check_pointer_type_specs(specs, eh);
 5851|  1.43k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 818, False: 620]
  |  |  ------------------
  ------------------
 5852|    818|            return detail::unexpected_scan_error(
 5853|    818|                scan_error::invalid_format_string, eh.m_msg);
 5854|    818|        }
 5855|    620|        return {};
 5856|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_23reader_impl_for_voidptrIwEESA_PvEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6230|    620|    {
 6231|    620|        const bool need_skipped_width =
 6232|    620|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 252, False: 368]
  |  Branch (6232:33): [True: 212, False: 156]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    620|        auto it = rng.begin();
 6236|    620|        std::ptrdiff_t prefix_width = 0;
 6237|    620|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 214, False: 406]
  ------------------
 6238|    214|            auto max_width_view = take_width(rng, specs.precision);
 6239|    214|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    214|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    214|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    214|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 8, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      8|    }                                                  \
  |  |  |  | 3957|    214|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    206|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    206|            it = prefix_result.first.base();
 6242|    206|            prefix_width = prefix_result.second;
 6243|    206|        }
 6244|    406|        else {
 6245|    406|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    406|            std::tie(it, prefix_width) = prefix_result;
 6247|    406|        }
 6248|    612|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    612|        std::ptrdiff_t value_width = 0;
 6252|    612|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 206, False: 406]
  ------------------
 6253|    206|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 2, False: 204]
  ------------------
 6254|      2|                return detail::unexpected_scan_error(
 6255|      2|                    scan_error::invalid_fill,
 6256|      2|                    "Too many fill characters before value, "
 6257|      2|                    "precision exceeded before reading value");
 6258|      2|            }
 6259|       |
 6260|    204|            const auto initial_width = specs.precision - prefix_width;
 6261|    204|            auto max_width_view =
 6262|    204|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    204|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 194, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    194|    }                                                  \
  |  |  |  | 3957|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     10|            it = w_it.base();
 6265|     10|            value_width = initial_width - w_it.count();
 6266|     10|        }
 6267|    406|        else {
 6268|    406|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 376, False: 30]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    376|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    376|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    376|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    376|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    376|    }                                                  \
  |  | 3957|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|     30|                                             specs, value, loc));
 6270|       |
 6271|     30|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 8, False: 22]
  ------------------
 6272|      8|                value_width = calculate_text_width(
 6273|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      8|                        .view());
 6275|      8|            }
 6276|     30|        }
 6277|       |
 6278|       |        // Read postfix
 6279|     40|        std::ptrdiff_t postfix_width = 0;
 6280|     40|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 40, False: 0]
  ------------------
 6281|     40|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 40]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|     40|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|     40|                                 rd.skip_ws_before_read(), prefix_width,
 6284|     40|                                 value_width));
 6285|     40|            std::tie(it, postfix_width) = postfix_result;
 6286|     40|        }
 6287|       |
 6288|     40|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|     40|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 36]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6289|     40|            specs, prefix_width, value_width, postfix_width));
 6290|     36|        return it;
 6291|     40|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5878|    204|    {
 5879|    204|        SCN_UNUSED(specs);
  ------------------
  |  | 1089|    204|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5880|    204|        return read_default(range, value, loc);
 5881|    204|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5861|    204|    {
 5862|    204|        detail::format_specs specs{};
 5863|    204|        specs.type = detail::presentation_type::int_hex;
 5864|       |
 5865|    204|        std::uintptr_t intvalue{};
 5866|    204|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3958|    204|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    204|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    204|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 194, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    194|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    194|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    194|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    194|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    194|    }                                                  \
  |  |  |  | 3957|    204|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5867|     10|                                                                intvalue, loc));
 5868|     10|        value = reinterpret_cast<void*>(intvalue);
 5869|     10|        return result;
 5870|    204|    }
_ZN3scn2v44impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5878|    406|    {
 5879|    406|        SCN_UNUSED(specs);
  ------------------
  |  | 1089|    406|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5880|    406|        return read_default(range, value, loc);
 5881|    406|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIbEENS0_13scan_expectedIS9_EERT_:
 6295|  1.50k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.50k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.50k|            auto rd = make_reader<T, char_type>();
 6301|  1.50k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.50k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 622, False: 882]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    622|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    622|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    622|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    622|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    622|    }
  ------------------
 6302|    882|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.50k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|  1.50k|    {
 3188|  1.50k|        reader_error_handler eh{};
 3189|  1.50k|        get_derived().check_specs_impl(specs, eh);
 3190|  1.50k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 622, False: 882]
  |  |  ------------------
  ------------------
 3191|    622|            return detail::unexpected_scan_error(
 3192|    622|                scan_error::invalid_format_string, eh.m_msg);
 3193|    622|        }
 3194|    882|        return {};
 3195|  1.50k|    }
_ZN3scn2v44impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3199|  1.50k|    {
 3200|  1.50k|        return static_cast<Derived&>(*this);
 3201|  1.50k|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5591|  1.50k|    {
 5592|  1.50k|        detail::check_bool_type_specs(specs, eh);
 5593|  1.50k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_20reader_impl_for_boolIwEESA_bEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    882|    {
 6231|    882|        const bool need_skipped_width =
 6232|    882|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 280, False: 602]
  |  Branch (6232:33): [True: 334, False: 268]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    882|        auto it = rng.begin();
 6236|    882|        std::ptrdiff_t prefix_width = 0;
 6237|    882|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 338, False: 544]
  ------------------
 6238|    338|            auto max_width_view = take_width(rng, specs.precision);
 6239|    338|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 22, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     22|    }                                                  \
  |  |  |  | 3957|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    316|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    316|            it = prefix_result.first.base();
 6242|    316|            prefix_width = prefix_result.second;
 6243|    316|        }
 6244|    544|        else {
 6245|    544|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    544|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 544]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    544|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    544|            std::tie(it, prefix_width) = prefix_result;
 6247|    544|        }
 6248|    860|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    860|        std::ptrdiff_t value_width = 0;
 6252|    860|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 316, False: 544]
  ------------------
 6253|    316|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 4, False: 312]
  ------------------
 6254|      4|                return detail::unexpected_scan_error(
 6255|      4|                    scan_error::invalid_fill,
 6256|      4|                    "Too many fill characters before value, "
 6257|      4|                    "precision exceeded before reading value");
 6258|      4|            }
 6259|       |
 6260|    312|            const auto initial_width = specs.precision - prefix_width;
 6261|    312|            auto max_width_view =
 6262|    312|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    312|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    312|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    312|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    312|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 290, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    290|    }                                                  \
  |  |  |  | 3957|    312|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     22|            it = w_it.base();
 6265|     22|            value_width = initial_width - w_it.count();
 6266|     22|        }
 6267|    544|        else {
 6268|    544|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    544|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    544|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    544|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 498, False: 46]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    498|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    498|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    498|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    498|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    498|    }                                                  \
  |  | 3957|    544|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    544|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|     46|                                             specs, value, loc));
 6270|       |
 6271|     46|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 8, False: 38]
  ------------------
 6272|      8|                value_width = calculate_text_width(
 6273|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      8|                        .view());
 6275|      8|            }
 6276|     46|        }
 6277|       |
 6278|       |        // Read postfix
 6279|     68|        std::ptrdiff_t postfix_width = 0;
 6280|     68|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 68, False: 0]
  ------------------
 6281|     68|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|     68|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     68|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     68|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 68]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|     68|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     68|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|     68|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|     68|                                 rd.skip_ws_before_read(), prefix_width,
 6284|     68|                                 value_width));
 6285|     68|            std::tie(it, postfix_width) = postfix_result;
 6286|     68|        }
 6287|       |
 6288|     68|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|     68|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 64]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6289|     68|            specs, prefix_width, value_width, postfix_width));
 6290|     64|        return it;
 6291|     68|    }
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5610|    312|    {
 5611|    312|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5612|       |
 5613|    312|#if !SCN_DISABLE_LOCALE
 5614|    312|        if (specs.localized) {
  ------------------
  |  Branch (5614:13): [True: 28, False: 284]
  ------------------
 5615|     28|            return rd.read_localized(range, loc, value);
 5616|     28|        }
 5617|    284|#endif
 5618|       |
 5619|    284|        return rd.read_classic(range, value);
 5620|    312|    }
_ZN3scn2v44impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5623|    856|    {
 5624|    856|        SCN_GCC_COMPAT_PUSH
 5625|    856|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5626|       |
 5627|    856|        switch (specs.type) {
 5628|    114|            case detail::presentation_type::string:
  ------------------
  |  Branch (5628:13): [True: 114, False: 742]
  ------------------
 5629|    114|                return bool_reader_base::allow_text;
 5630|       |
 5631|     24|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5631:13): [True: 24, False: 832]
  ------------------
 5632|     48|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5632:13): [True: 24, False: 832]
  ------------------
 5633|     56|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5633:13): [True: 8, False: 848]
  ------------------
 5634|     72|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5634:13): [True: 16, False: 840]
  ------------------
 5635|     92|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5635:13): [True: 20, False: 836]
  ------------------
 5636|    110|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5636:13): [True: 18, False: 838]
  ------------------
 5637|    110|                return bool_reader_base::allow_numeric;
 5638|       |
 5639|    632|            default:
  ------------------
  |  Branch (5639:13): [True: 632, False: 224]
  ------------------
 5640|    632|                return bool_reader_base::allow_text |
 5641|    632|                       bool_reader_base::allow_numeric;
 5642|    856|        }
 5643|       |
 5644|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5645|    856|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5521|     28|    {
 5522|     28|        scan_error err{scan_error::invalid_scanned_value,
 5523|     28|                       "Failed to read boolean"};
 5524|       |
 5525|     28|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5525:13): [True: 26, False: 2]
  ------------------
 5526|     26|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5526:22): [True: 4, False: 22]
  ------------------
 5527|      4|                return *r;
 5528|      4|            }
 5529|     22|            else {
 5530|     22|                err = r.error();
 5531|     22|            }
 5532|     26|        }
 5533|       |
 5534|     24|        if (m_options & allow_text) {
  ------------------
  |  Branch (5534:13): [True: 14, False: 10]
  ------------------
 5535|     14|            auto stdloc = loc.get<std::locale>();
 5536|     14|            const auto& numpunct =
 5537|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5538|     14|            const auto truename = numpunct.truename();
 5539|     14|            const auto falsename = numpunct.falsename();
 5540|       |
 5541|     14|            if (auto r =
  ------------------
  |  Branch (5541:22): [True: 0, False: 14]
  ------------------
 5542|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5543|      0|                return *r;
 5544|      0|            }
 5545|     14|            else {
 5546|     14|                err = r.error();
 5547|     14|            }
 5548|     14|        }
 5549|       |
 5550|     24|        return unexpected(err);
 5551|     24|    }
_ZNK3scn2v44impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5477|    258|    {
 5478|    258|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5478:18): [True: 22, False: 236]
  ------------------
 5479|     22|            value = false;
 5480|     22|            return *r;
 5481|     22|        }
 5482|    236|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5482:18): [True: 0, False: 236]
  ------------------
 5483|      0|            value = true;
 5484|      0|            return *r;
 5485|      0|        }
 5486|       |
 5487|    236|        return detail::unexpected_scan_error(
 5488|    236|            scan_error::invalid_scanned_value,
 5489|    236|            "Failed to read numeric boolean value: No match");
 5490|    236|    }
_ZN3scn2v44impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2278|    494|{
 2279|    494|    auto it = read_code_unit(range);
 2280|    494|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 494]
  |  |  ------------------
  ------------------
 2281|      0|        return unexpected(make_eof_parse_error(it.error()));
 2282|      0|    }
 2283|       |
 2284|    494|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|    494|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 472, False: 22]
  |  |  ------------------
  ------------------
 2285|    494|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|    472|        return unexpected(parse_error::error);
 2287|    472|    }
 2288|       |
 2289|     22|    return *it;
 2290|    494|}
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5561|     14|    {
 5562|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5563|     14|        const auto shorter = std::pair{
 5564|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5564:13): [True: 14, False: 0]
  ------------------
 5565|     14|        const auto longer = std::pair{
 5566|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5566:13): [True: 0, False: 14]
  ------------------
 5567|       |
 5568|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5568:18): [True: 0, False: 14]
  ------------------
 5569|      0|            value = shorter.second;
 5570|      0|            return *r;
 5571|      0|        }
 5572|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5572:18): [True: 0, False: 14]
  ------------------
 5573|      0|            value = longer.second;
 5574|      0|            return *r;
 5575|      0|        }
 5576|       |
 5577|     14|        return detail::unexpected_scan_error(
 5578|     14|            scan_error::invalid_scanned_value,
 5579|     14|            "Failed to read textual boolean: No match");
 5580|     14|    }
_ZN3scn2v44impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2311|     28|{
 2312|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 18, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     18|    }                                                  \
  |  |  |  | 3957|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2313|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2314|     10|                    .transform_error(make_eof_parse_error));
 2315|       |
 2316|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2317|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2318|     10|        return unexpected(parse_error::error);
 2319|     10|    }
 2320|      0|    return it;
 2321|     10|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1955|    512|{
 1956|    512|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|    512|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    512|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|    512|    else {
 1967|    512|        auto it = range.begin();
 1968|    512|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 0, False: 512]
  ------------------
 1969|      0|            return ranges::next(it, count);
 1970|      0|        }
 1971|       |
 1972|  2.51k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 2.12k, False: 394]
  ------------------
 1973|  2.12k|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 118, False: 2.00k]
  ------------------
 1974|    118|                return unexpected(eof_error::eof);
 1975|    118|            }
 1976|  2.12k|        }
 1977|       |
 1978|    394|        return it;
 1979|    512|    }
 1980|    512|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1095|    512|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|       |                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|       |        else {
 1107|       |            if (r.begin().stores_parent()) {
 1108|       |                return static_cast<size_t>(
 1109|       |                    r.begin().parent()->chars_available() -
 1110|       |                    r.begin().position());
 1111|       |            }
 1112|       |            return r.begin().contiguous_segment().size();
 1113|       |        }
 1114|       |    }
 1115|    512|    else {
 1116|    512|        return 0;
 1117|    512|    }
 1118|    512|}
_ZNK3scn2v44impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5448|    284|    {
 5449|    284|        scan_error err{scan_error::invalid_scanned_value,
 5450|    284|                       "Failed to read boolean"};
 5451|       |
 5452|    284|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5452:13): [True: 232, False: 52]
  ------------------
 5453|    232|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5453:22): [True: 18, False: 214]
  ------------------
 5454|     18|                return *r;
 5455|     18|            }
 5456|    214|            else {
 5457|    214|                err = r.error();
 5458|    214|            }
 5459|    232|        }
 5460|       |
 5461|    266|        if (m_options & allow_text) {
  ------------------
  |  Branch (5461:13): [True: 242, False: 24]
  ------------------
 5462|    242|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5462:22): [True: 0, False: 242]
  ------------------
 5463|      0|                return *r;
 5464|      0|            }
 5465|    242|            else {
 5466|    242|                err = r.error();
 5467|    242|            }
 5468|    242|        }
 5469|       |
 5470|    266|        return unexpected(err);
 5471|    266|    }
_ZNK3scn2v44impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5495|    242|    {
 5496|    242|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5496:18): [True: 0, False: 242]
  ------------------
 5497|      0|            value = true;
 5498|      0|            return *r;
 5499|      0|        }
 5500|    242|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5500:18): [True: 0, False: 242]
  ------------------
 5501|      0|            value = false;
 5502|      0|            return *r;
 5503|      0|        }
 5504|       |
 5505|    242|        return detail::unexpected_scan_error(
 5506|    242|            scan_error::invalid_scanned_value,
 5507|    242|            "Failed to read textual boolean value: No match");
 5508|    242|    }
_ZN3scn2v44impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2326|    484|{
 2327|    484|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|    484|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    484|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    484|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 100, False: 384]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    100|    }                                                  \
  |  |  |  | 3957|    484|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2328|    384|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2329|    384|                    .transform_error(make_eof_parse_error));
 2330|       |
 2331|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2332|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2333|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2334|       |            return unexpected(parse_error::error);
 2335|       |        }
 2336|       |        return it;
 2337|       |    }
 2338|    384|    else {
 2339|    384|        auto range_it = range.begin();
 2340|    384|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2340:28): [True: 384, False: 0]
  ------------------
 2341|    384|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  | 1039|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 384, False: 0]
  |  |  ------------------
  ------------------
 2342|    384|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2343|    384|                return unexpected(parse_error::error);
 2344|    384|            }
 2345|    384|        }
 2346|      0|        return it;
 2347|    384|    }
 2348|    384|}
_ZNK3scn2v44impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5610|    544|    {
 5611|    544|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5612|       |
 5613|    544|#if !SCN_DISABLE_LOCALE
 5614|    544|        if (specs.localized) {
  ------------------
  |  Branch (5614:13): [True: 32, False: 512]
  ------------------
 5615|     32|            return rd.read_localized(range, loc, value);
 5616|     32|        }
 5617|    512|#endif
 5618|       |
 5619|    512|        return rd.read_classic(range, value);
 5620|    544|    }
_ZNK3scn2v44impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5521|     32|    {
 5522|     32|        scan_error err{scan_error::invalid_scanned_value,
 5523|     32|                       "Failed to read boolean"};
 5524|       |
 5525|     32|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5525:13): [True: 30, False: 2]
  ------------------
 5526|     30|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5526:22): [True: 6, False: 24]
  ------------------
 5527|      6|                return *r;
 5528|      6|            }
 5529|     24|            else {
 5530|     24|                err = r.error();
 5531|     24|            }
 5532|     30|        }
 5533|       |
 5534|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (5534:13): [True: 14, False: 12]
  ------------------
 5535|     14|            auto stdloc = loc.get<std::locale>();
 5536|     14|            const auto& numpunct =
 5537|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5538|     14|            const auto truename = numpunct.truename();
 5539|     14|            const auto falsename = numpunct.falsename();
 5540|       |
 5541|     14|            if (auto r =
  ------------------
  |  Branch (5541:22): [True: 0, False: 14]
  ------------------
 5542|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5543|      0|                return *r;
 5544|      0|            }
 5545|     14|            else {
 5546|     14|                err = r.error();
 5547|     14|            }
 5548|     14|        }
 5549|       |
 5550|     26|        return unexpected(err);
 5551|     26|    }
_ZNK3scn2v44impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5561|     14|    {
 5562|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5563|     14|        const auto shorter = std::pair{
 5564|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5564:13): [True: 14, False: 0]
  ------------------
 5565|     14|        const auto longer = std::pair{
 5566|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5566:13): [True: 0, False: 14]
  ------------------
 5567|       |
 5568|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5568:18): [True: 0, False: 14]
  ------------------
 5569|      0|            value = shorter.second;
 5570|      0|            return *r;
 5571|      0|        }
 5572|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5572:18): [True: 0, False: 14]
  ------------------
 5573|      0|            value = longer.second;
 5574|      0|            return *r;
 5575|      0|        }
 5576|       |
 5577|     14|        return detail::unexpected_scan_error(
 5578|     14|            scan_error::invalid_scanned_value,
 5579|     14|            "Failed to read textual boolean: No match");
 5580|     14|    }
_ZN3scn2v44impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2311|     28|{
 2312|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      2|    }                                                  \
  |  |  |  | 3957|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2313|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2314|     26|                    .transform_error(make_eof_parse_error));
 2315|       |
 2316|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2317|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  | 1039|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2318|     26|        return unexpected(parse_error::error);
 2319|     26|    }
 2320|      0|    return it;
 2321|     26|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIwEENS0_13scan_expectedIS9_EERT_:
 6295|  1.43k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.43k|            auto rd = make_reader<T, char_type>();
 6301|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 732, False: 706]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    732|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    732|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    732|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    732|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    732|    }
  ------------------
 6302|    706|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_wcharIwEESA_wEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    706|    {
 6231|    706|        const bool need_skipped_width =
 6232|    706|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 258, False: 448]
  |  Branch (6232:33): [True: 250, False: 198]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    706|        auto it = rng.begin();
 6236|    706|        std::ptrdiff_t prefix_width = 0;
 6237|    706|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 252, False: 454]
  ------------------
 6238|    252|            auto max_width_view = take_width(rng, specs.precision);
 6239|    252|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    252|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    252|            it = prefix_result.first.base();
 6242|    252|            prefix_width = prefix_result.second;
 6243|    252|        }
 6244|    454|        else {
 6245|    454|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    454|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    454|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    454|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    454|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 454]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    454|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    454|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    454|            std::tie(it, prefix_width) = prefix_result;
 6247|    454|        }
 6248|    706|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    706|        std::ptrdiff_t value_width = 0;
 6252|    706|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 252, False: 454]
  ------------------
 6253|    252|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 2, False: 250]
  ------------------
 6254|      2|                return detail::unexpected_scan_error(
 6255|      2|                    scan_error::invalid_fill,
 6256|      2|                    "Too many fill characters before value, "
 6257|      2|                    "precision exceeded before reading value");
 6258|      2|            }
 6259|       |
 6260|    250|            const auto initial_width = specs.precision - prefix_width;
 6261|    250|            auto max_width_view =
 6262|    250|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    250|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 34, False: 216]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     34|    }                                                  \
  |  |  |  | 3957|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    216|            it = w_it.base();
 6265|    216|            value_width = initial_width - w_it.count();
 6266|    216|        }
 6267|    454|        else {
 6268|    454|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    454|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    454|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    454|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 40, False: 414]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     40|    }                                                  \
  |  | 3957|    454|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    454|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|    414|                                             specs, value, loc));
 6270|       |
 6271|    414|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 250, False: 164]
  ------------------
 6272|    250|                value_width = calculate_text_width(
 6273|    250|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|    250|                        .view());
 6275|    250|            }
 6276|    414|        }
 6277|       |
 6278|       |        // Read postfix
 6279|    630|        std::ptrdiff_t postfix_width = 0;
 6280|    630|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 630, False: 0]
  ------------------
 6281|    630|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    630|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    630|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    630|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 630]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    630|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    630|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|    630|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|    630|                                 rd.skip_ws_before_read(), prefix_width,
 6284|    630|                                 value_width));
 6285|    630|            std::tie(it, postfix_width) = postfix_result;
 6286|    630|        }
 6287|       |
 6288|    630|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    630|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 240, False: 390]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    240|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    240|    }
  ------------------
 6289|    630|            specs, prefix_width, value_width, postfix_width));
 6290|    390|        return it;
 6291|    630|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6295|  1.50k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.50k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.50k|            auto rd = make_reader<T, char_type>();
 6301|  1.50k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.50k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 722, False: 782]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    722|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    722|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    722|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    722|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    722|    }
  ------------------
 6302|    782|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.50k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6230|    782|    {
 6231|    782|        const bool need_skipped_width =
 6232|    782|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 266, False: 516]
  |  Branch (6232:33): [True: 262, False: 254]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|    782|        auto it = rng.begin();
 6236|    782|        std::ptrdiff_t prefix_width = 0;
 6237|    782|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 266, False: 516]
  ------------------
 6238|    266|            auto max_width_view = take_width(rng, specs.precision);
 6239|    266|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    266|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    266|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    266|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    266|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 16, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     16|    }                                                  \
  |  |  |  | 3957|    266|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    250|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    250|            it = prefix_result.first.base();
 6242|    250|            prefix_width = prefix_result.second;
 6243|    250|        }
 6244|    516|        else {
 6245|    516|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    516|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    516|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    516|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    516|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 516]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    516|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    516|            std::tie(it, prefix_width) = prefix_result;
 6247|    516|        }
 6248|    766|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|    766|        std::ptrdiff_t value_width = 0;
 6252|    766|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 250, False: 516]
  ------------------
 6253|    250|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 4, False: 246]
  ------------------
 6254|      4|                return detail::unexpected_scan_error(
 6255|      4|                    scan_error::invalid_fill,
 6256|      4|                    "Too many fill characters before value, "
 6257|      4|                    "precision exceeded before reading value");
 6258|      4|            }
 6259|       |
 6260|    246|            const auto initial_width = specs.precision - prefix_width;
 6261|    246|            auto max_width_view =
 6262|    246|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    246|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    246|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    246|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    246|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    246|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 226, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    226|    }                                                  \
  |  |  |  | 3957|    246|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|     20|            it = w_it.base();
 6265|     20|            value_width = initial_width - w_it.count();
 6266|     20|        }
 6267|    516|        else {
 6268|    516|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    516|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    516|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    516|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 428, False: 88]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|    428|    }                                                  \
  |  | 3957|    516|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    516|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|     88|                                             specs, value, loc));
 6270|       |
 6271|     88|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 8, False: 80]
  ------------------
 6272|      8|                value_width = calculate_text_width(
 6273|      8|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      8|                        .view());
 6275|      8|            }
 6276|     88|        }
 6277|       |
 6278|       |        // Read postfix
 6279|    108|        std::ptrdiff_t postfix_width = 0;
 6280|    108|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 108, False: 0]
  ------------------
 6281|    108|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|    108|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|    108|                                 rd.skip_ws_before_read(), prefix_width,
 6284|    108|                                 value_width));
 6285|    108|            std::tie(it, postfix_width) = postfix_result;
 6286|    108|        }
 6287|       |
 6288|    108|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    108|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 4, False: 104]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      4|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      4|    }
  ------------------
 6289|    108|            specs, prefix_width, value_width, postfix_width));
 6290|    104|        return it;
 6291|    108|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|  1.43k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.43k|            auto rd = make_reader<T, char_type>();
 6301|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 242, False: 1.19k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    242|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    242|    }
  ------------------
 6302|  1.19k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6230|  1.19k|    {
 6231|  1.19k|        const bool need_skipped_width =
 6232|  1.19k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 366, False: 830]
  |  Branch (6232:33): [True: 482, False: 348]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  1.19k|        auto it = rng.begin();
 6236|  1.19k|        std::ptrdiff_t prefix_width = 0;
 6237|  1.19k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 488, False: 708]
  ------------------
 6238|    488|            auto max_width_view = take_width(rng, specs.precision);
 6239|    488|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    478|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    478|            it = prefix_result.first.base();
 6242|    478|            prefix_width = prefix_result.second;
 6243|    478|        }
 6244|    708|        else {
 6245|    708|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    708|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 708]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    708|            std::tie(it, prefix_width) = prefix_result;
 6247|    708|        }
 6248|  1.18k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  1.18k|        std::ptrdiff_t value_width = 0;
 6252|  1.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 478, False: 708]
  ------------------
 6253|    478|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 6, False: 472]
  ------------------
 6254|      6|                return detail::unexpected_scan_error(
 6255|      6|                    scan_error::invalid_fill,
 6256|      6|                    "Too many fill characters before value, "
 6257|      6|                    "precision exceeded before reading value");
 6258|      6|            }
 6259|       |
 6260|    472|            const auto initial_width = specs.precision - prefix_width;
 6261|    472|            auto max_width_view =
 6262|    472|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    472|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 162, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    162|    }                                                  \
  |  |  |  | 3957|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    310|            it = w_it.base();
 6265|    310|            value_width = initial_width - w_it.count();
 6266|    310|        }
 6267|    708|        else {
 6268|    708|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 74, False: 634]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     74|    }                                                  \
  |  | 3957|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|    634|                                             specs, value, loc));
 6270|       |
 6271|    634|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 348, False: 286]
  ------------------
 6272|    348|                value_width = calculate_text_width(
 6273|    348|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|    348|                        .view());
 6275|    348|            }
 6276|    634|        }
 6277|       |
 6278|       |        // Read postfix
 6279|    944|        std::ptrdiff_t postfix_width = 0;
 6280|    944|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 576, False: 368]
  ------------------
 6281|    576|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    576|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    576|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    576|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 576]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    576|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    576|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|    576|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|    576|                                 rd.skip_ws_before_read(), prefix_width,
 6284|    576|                                 value_width));
 6285|    576|            std::tie(it, postfix_width) = postfix_result;
 6286|    576|        }
 6287|       |
 6288|    944|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    944|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 80, False: 864]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     80|    }
  ------------------
 6289|    944|            specs, prefix_width, value_width, postfix_width));
 6290|    864|        return it;
 6291|    944|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|  1.43k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.43k|            auto rd = make_reader<T, char_type>();
 6301|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 242, False: 1.19k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    242|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    242|    }
  ------------------
 6302|  1.19k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6230|  1.19k|    {
 6231|  1.19k|        const bool need_skipped_width =
 6232|  1.19k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 366, False: 830]
  |  Branch (6232:33): [True: 482, False: 348]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  1.19k|        auto it = rng.begin();
 6236|  1.19k|        std::ptrdiff_t prefix_width = 0;
 6237|  1.19k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 488, False: 708]
  ------------------
 6238|    488|            auto max_width_view = take_width(rng, specs.precision);
 6239|    488|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    478|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    478|            it = prefix_result.first.base();
 6242|    478|            prefix_width = prefix_result.second;
 6243|    478|        }
 6244|    708|        else {
 6245|    708|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    708|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 708]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    708|            std::tie(it, prefix_width) = prefix_result;
 6247|    708|        }
 6248|  1.18k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  1.18k|        std::ptrdiff_t value_width = 0;
 6252|  1.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 478, False: 708]
  ------------------
 6253|    478|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 6, False: 472]
  ------------------
 6254|      6|                return detail::unexpected_scan_error(
 6255|      6|                    scan_error::invalid_fill,
 6256|      6|                    "Too many fill characters before value, "
 6257|      6|                    "precision exceeded before reading value");
 6258|      6|            }
 6259|       |
 6260|    472|            const auto initial_width = specs.precision - prefix_width;
 6261|    472|            auto max_width_view =
 6262|    472|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    472|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 162, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    162|    }                                                  \
  |  |  |  | 3957|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    310|            it = w_it.base();
 6265|    310|            value_width = initial_width - w_it.count();
 6266|    310|        }
 6267|    708|        else {
 6268|    708|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 74, False: 634]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     74|    }                                                  \
  |  | 3957|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|    634|                                             specs, value, loc));
 6270|       |
 6271|    634|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 348, False: 286]
  ------------------
 6272|    348|                value_width = calculate_text_width(
 6273|    348|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|    348|                        .view());
 6275|    348|            }
 6276|    634|        }
 6277|       |
 6278|       |        // Read postfix
 6279|    944|        std::ptrdiff_t postfix_width = 0;
 6280|    944|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 576, False: 368]
  ------------------
 6281|    576|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    576|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    576|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    576|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 576]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    576|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    576|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|    576|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|    576|                                 rd.skip_ws_before_read(), prefix_width,
 6284|    576|                                 value_width));
 6285|    576|            std::tie(it, postfix_width) = postfix_result;
 6286|    576|        }
 6287|       |
 6288|    944|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    944|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 80, False: 864]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     80|    }
  ------------------
 6289|    944|            specs, prefix_width, value_width, postfix_width));
 6290|    864|        return it;
 6291|    944|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|  1.43k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  1.43k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  1.43k|            auto rd = make_reader<T, char_type>();
 6301|  1.43k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  1.43k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 242, False: 1.19k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    242|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    242|    }
  ------------------
 6302|  1.19k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  1.43k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6230|  1.19k|    {
 6231|  1.19k|        const bool need_skipped_width =
 6232|  1.19k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 366, False: 830]
  |  Branch (6232:33): [True: 482, False: 348]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  1.19k|        auto it = rng.begin();
 6236|  1.19k|        std::ptrdiff_t prefix_width = 0;
 6237|  1.19k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 488, False: 708]
  ------------------
 6238|    488|            auto max_width_view = take_width(rng, specs.precision);
 6239|    488|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|    488|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    488|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    488|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    488|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10, False: 478]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|     10|    }                                                  \
  |  |  |  | 3957|    488|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    478|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|    478|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|    478|            it = prefix_result.first.base();
 6242|    478|            prefix_width = prefix_result.second;
 6243|    478|        }
 6244|    708|        else {
 6245|    708|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|    708|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 708]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|    708|            std::tie(it, prefix_width) = prefix_result;
 6247|    708|        }
 6248|  1.18k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  1.18k|        std::ptrdiff_t value_width = 0;
 6252|  1.18k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 478, False: 708]
  ------------------
 6253|    478|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 6, False: 472]
  ------------------
 6254|      6|                return detail::unexpected_scan_error(
 6255|      6|                    scan_error::invalid_fill,
 6256|      6|                    "Too many fill characters before value, "
 6257|      6|                    "precision exceeded before reading value");
 6258|      6|            }
 6259|       |
 6260|    472|            const auto initial_width = specs.precision - prefix_width;
 6261|    472|            auto max_width_view =
 6262|    472|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|    472|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|    472|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    472|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    472|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 162, False: 310]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    162|    }                                                  \
  |  |  |  | 3957|    472|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|    310|            it = w_it.base();
 6265|    310|            value_width = initial_width - w_it.count();
 6266|    310|        }
 6267|    708|        else {
 6268|    708|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 74, False: 634]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|     74|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|     74|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     74|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     74|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|     74|    }                                                  \
  |  | 3957|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|    634|                                             specs, value, loc));
 6270|       |
 6271|    634|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 348, False: 286]
  ------------------
 6272|    348|                value_width = calculate_text_width(
 6273|    348|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|    348|                        .view());
 6275|    348|            }
 6276|    634|        }
 6277|       |
 6278|       |        // Read postfix
 6279|    944|        std::ptrdiff_t postfix_width = 0;
 6280|    944|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 576, False: 368]
  ------------------
 6281|    576|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|    576|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    576|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    576|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 576]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    576|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    576|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|    576|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|    576|                                 rd.skip_ws_before_read(), prefix_width,
 6284|    576|                                 value_width));
 6285|    576|            std::tie(it, postfix_width) = postfix_result;
 6286|    576|        }
 6287|       |
 6288|    944|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|    944|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    944|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 80, False: 864]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|     80|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|     80|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|     80|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|     80|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|     80|    }
  ------------------
 6289|    944|            specs, prefix_width, value_width, postfix_width));
 6290|    864|        return it;
 6291|    944|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|    634|    {
 3583|    634|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|    634|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|       |        if constexpr (!std::is_signed_v<T>) {
 3587|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3588|       |                return detail::unexpected_scan_error(
 3589|       |                    scan_error::invalid_scanned_value,
 3590|       |                    "Unexpected '-' sign when parsing an "
 3591|       |                    "unsigned value");
 3592|       |            }
 3593|       |        }
 3594|       |
 3595|    634|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 634]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  1.26k|                parse_integer_digits_without_thsep(
 3602|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  1.26k|                    prefix_result.parsed_base));
 3604|       |
 3605|  1.26k|        auto buf = make_contiguous_buffer(
 3606|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 634, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    634|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    634|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    634|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    634|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    634|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|      0|                                    prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(prefix_result.iterator,
 3612|      0|                            ranges::distance(buf.view().begin(), result_it));
 3613|  1.26k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3582|    634|    {
 3583|    634|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3584|    634|                                   .transform_error(make_eof_scan_error));
 3585|       |
 3586|    634|        if constexpr (!std::is_signed_v<T>) {
 3587|    634|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3587:17): [True: 0, False: 634]
  ------------------
 3588|      0|                return detail::unexpected_scan_error(
 3589|      0|                    scan_error::invalid_scanned_value,
 3590|      0|                    "Unexpected '-' sign when parsing an "
 3591|      0|                    "unsigned value");
 3592|      0|            }
 3593|    634|        }
 3594|       |
 3595|    634|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 634]
  ------------------
 3596|      0|            value = T{0};
 3597|      0|            return std::next(prefix_result.iterator);
 3598|      0|        }
 3599|       |
 3600|  1.26k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3601|  1.26k|                parse_integer_digits_without_thsep(
 3602|  1.26k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3603|  1.26k|                    prefix_result.parsed_base));
 3604|       |
 3605|  1.26k|        auto buf = make_contiguous_buffer(
 3606|  1.26k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3607|  1.26k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 634, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    634|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    634|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    634|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    634|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    634|    }                                                  \
  |  |  |  | 3957|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3609|      0|                                    prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(prefix_result.iterator,
 3612|      0|                            ranges::distance(buf.view().begin(), result_it));
 3613|  1.26k|    }

LLVMFuzzerTestOneInput:
   68|  3.52k|{
   69|  3.52k|    scn::fuzz::run(data, size);
   70|  3.52k|    return 0;
   71|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  3.52k|{
   52|  3.52k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 3.52k]
  |  Branch (52:35): [True: 0, False: 3.52k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  3.52k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  3.52k|    run_for_source(sv);
   59|  3.52k|    run_for_source(wsv_reinterpret);
   60|  3.52k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 3.52k, False: 0]
  ------------------
   61|  3.52k|        run_for_source(wsv_transcode);
   62|  3.52k|    }
   63|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  3.52k|{
   37|  3.52k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  3.52k|    run_for_type<char_type>(source);
   40|  3.52k|    run_for_type<int>(source);
   41|  3.52k|    run_for_type<unsigned>(source);
   42|  3.52k|    run_for_type<double>(source);
   43|  3.52k|    run_for_type<bool>(source);
   44|  3.52k|    run_for_type<void*>(source);
   45|  3.52k|    run_for_type<std::string>(source);
   46|  3.52k|    run_for_type<std::wstring>(source);
   47|  3.52k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  3.52k|{
   25|  3.52k|    {
   26|  3.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  3.52k|    }
   28|  3.52k|    {
   29|  3.52k|        auto _ =
   30|  3.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  3.52k|    }
   32|  3.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  7.04k|{
   37|  7.04k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  7.04k|    run_for_type<char_type>(source);
   40|  7.04k|    run_for_type<int>(source);
   41|  7.04k|    run_for_type<unsigned>(source);
   42|  7.04k|    run_for_type<double>(source);
   43|  7.04k|    run_for_type<bool>(source);
   44|  7.04k|    run_for_type<void*>(source);
   45|  7.04k|    run_for_type<std::string>(source);
   46|  7.04k|    run_for_type<std::wstring>(source);
   47|  7.04k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  7.04k|{
   25|  7.04k|    {
   26|  7.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  7.04k|    }
   28|  7.04k|    {
   29|  7.04k|        auto _ =
   30|  7.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  7.04k|    }
   32|  7.04k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  3.52k|{
   53|  3.52k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|  3.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  3.52k|    string_buffer.resize(size);
   57|  3.52k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  3.52k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  3.52k|    const auto wsv_reinterpret_size =
   62|  3.52k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 93, False: 3.42k]
  ------------------
   63|  3.52k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  3.52k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  3.52k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  3.52k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  3.52k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  3.52k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  3.52k|}

