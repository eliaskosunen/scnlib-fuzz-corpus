_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  5.23M|{
 3803|  5.23M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  5.23M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  5.23M|    }
 3806|  5.23M|    else if constexpr (sizeof(U) == 2) {
 3807|  5.23M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  5.23M|    }
 3809|  5.23M|    else {
 3810|       |        // utf-32
 3811|  5.23M|        static_assert(sizeof(U) == 4);
 3812|  5.23M|        SCN_UNUSED(ch);
 3813|  5.23M|        return 1;
 3814|  5.23M|    }
 3815|  5.23M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  5.23M|{
 3767|  5.23M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  5.23M|    SCN_GCC_COMPAT_PUSH
 3770|  5.23M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  5.23M|    constexpr char lengths[] =
 3772|  5.23M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  5.23M|        "\1\1\1\1\1\1\1\1"
 3774|  5.23M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  5.23M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  5.23M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  5.23M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  5.23M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  5.23M|    SCN_GCC_COMPAT_POP
 3781|  5.23M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.75M|{
 4009|  4.75M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  4.75M|        return decode_utf8_code_point_exhaustive(input);
 4011|  4.75M|    }
 4012|  4.75M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  4.75M|        return decode_utf16_code_point_exhaustive(input);
 4014|  4.75M|    }
 4015|  4.75M|    else {
 4016|  4.75M|        SCN_EXPECT(input.size() == 1);
 4017|  4.75M|        auto cp = static_cast<char32_t>(input.front());
 4018|  4.75M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  4.75M|            return invalid_code_point;
 4020|  4.75M|        }
 4021|  4.75M|        return cp;
 4022|  4.75M|    }
 4023|  4.75M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  4.75M|{
 3822|  4.75M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  4.75M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  4.75M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  4.75M|    };
 3827|       |
 3828|  4.75M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.24M, False: 514k]
  ------------------
 3829|  4.24M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 36, False: 4.24M]
  ------------------
 3830|     36|            SCN_UNLIKELY_ATTR
 3831|     36|            return invalid_code_point;
 3832|     36|        }
 3833|  4.24M|        return static_cast<char32_t>(input[0]);
 3834|  4.24M|    }
 3835|       |
 3836|   514k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 491k, False: 23.6k]
  ------------------
 3837|   491k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 12, False: 491k]
  ------------------
 3838|     12|            SCN_UNLIKELY_ATTR
 3839|     12|            return invalid_code_point;
 3840|     12|        }
 3841|   491k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 7.51k, False: 483k]
  ------------------
 3842|  7.51k|            SCN_UNLIKELY_ATTR
 3843|  7.51k|            return invalid_code_point;
 3844|  7.51k|        }
 3845|       |
 3846|   483k|        char32_t cp{};
 3847|   483k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   483k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   483k|        return cp;
 3850|   491k|    }
 3851|       |
 3852|  23.6k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 19.0k, False: 4.63k]
  ------------------
 3853|  19.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 6, False: 19.0k]
  ------------------
 3854|      6|            SCN_UNLIKELY_ATTR
 3855|      6|            return invalid_code_point;
 3856|      6|        }
 3857|  19.0k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 3.08k, False: 15.9k]
  ------------------
 3858|  19.0k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 536, False: 15.4k]
  ------------------
 3859|  3.61k|            SCN_UNLIKELY_ATTR
 3860|  3.61k|            return invalid_code_point;
 3861|  3.61k|        }
 3862|       |
 3863|  15.4k|        char32_t cp{};
 3864|  15.4k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  15.4k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  15.4k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  15.4k|        return cp;
 3868|  19.0k|    }
 3869|       |
 3870|  4.63k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 4.63k, False: 0]
  ------------------
 3871|  4.63k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 4.63k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  4.63k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 389, False: 4.24k]
  ------------------
 3876|    389|            SCN_UNLIKELY_ATTR
 3877|    389|            return invalid_code_point;
 3878|    389|        }
 3879|  4.24k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 762, False: 3.48k]
  ------------------
 3880|  4.24k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 525, False: 2.95k]
  ------------------
 3881|  4.24k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 259, False: 2.69k]
  ------------------
 3882|  1.54k|            SCN_UNLIKELY_ATTR
 3883|  1.54k|            return invalid_code_point;
 3884|  1.54k|        }
 3885|       |
 3886|  2.69k|        char32_t cp{};
 3887|  2.69k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  2.69k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  2.69k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  2.69k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  2.69k|        return cp;
 3892|  4.24k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   536k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   536k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   536k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  1.77M|{
 3695|  1.77M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  1.77M|                                          decltype(first), decltype(last)> &&
 3697|  1.77M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  1.77M|        return {first, last};
 3699|  1.77M|    }
 3700|  1.77M|    else {
 3701|  1.77M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  1.77M|                                       to_address(first), to_address(last)))};
 3703|  1.77M|    }
 3704|  1.77M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  5.35M|{
  322|  5.35M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  5.35M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  5.44M|{
  302|  5.44M|    return p;
  303|  5.44M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.01M|{
 3726|  1.01M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  1.01M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  1.01M|                      decltype(it)> &&
 3729|  1.01M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  1.01M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.01M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.01M|        return it;
 3732|  1.01M|    }
 3733|  1.01M|    else {
 3734|  1.01M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  1.01M|    }
 3736|  1.01M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5130|  8.43k|{
 5131|  8.43k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  8.43k|                  "Scan argument types must be default constructible");
 5133|  8.43k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  8.43k|                  "Scan argument types must be Destructible");
 5135|  8.43k|    static_assert(
 5136|  8.43k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  8.43k|        "Scan argument types must not be references");
 5138|  8.43k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4983|  8.43k|    {
 4984|  8.43k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4984:23): [Folded - Ignored]
  |  Branch (4984:23): [Folded - Ignored]
  ------------------
 4985|  8.43k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4985:23): [Folded - Ignored]
  ------------------
 4986|  8.43k|            return val;
 4987|  8.43k|        }
 4988|  8.43k|        else if constexpr (is_type_disabled<char_type>) {
 4989|  8.43k|            return unscannable_disabled{val};
 4990|  8.43k|        }
 4991|  8.43k|        else {
 4992|  8.43k|            SCN_UNUSED(val);
 4993|  8.43k|            return unscannable_char{};
 4994|  8.43k|        }
 4995|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5084|  8.43k|{
 5085|  8.43k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  8.43k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  8.43k|    constexpr bool scannable_char =
 5089|  8.43k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  8.43k|    static_assert(scannable_char,
 5091|  8.43k|                  "Cannot scan an argument of an unsupported character "
 5092|  8.43k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  8.43k|    constexpr bool scannable_const =
 5095|  8.43k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  8.43k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  8.43k|    constexpr bool scannable_disabled =
 5099|  8.43k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  8.43k|    static_assert(scannable_disabled,
 5101|  8.43k|                  "Cannot scan an argument that has been disabled by "
 5102|  8.43k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  8.43k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  8.43k|    static_assert(
 5106|  8.43k|        scannable,
 5107|  8.43k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  8.43k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  8.43k|    return arg_value{arg};
 5111|  8.43k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4897|  8.43k|    {
 4898|  8.43k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  37.9k|{
 8650|  37.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  37.9k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8586|  37.9k|{
 8587|  37.9k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  37.9k|    auto result = vscan_impl(buffer, format, args);
 8590|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.6k, False: 1.25k]
  |  |  ------------------
  ------------------
 8591|  36.6k|        return unexpected(result.error());
 8592|  36.6k|    }
 8593|  1.25k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  37.9k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4715|  75.9k|{
 4716|  75.9k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  75.9k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  75.9k|                  "\n"
 4720|  75.9k|                  "Unsupported range type given as input to a scanning "
 4721|  75.9k|                  "function.\n"
 4722|  75.9k|                  "A range needs to have a character type (value type) "
 4723|  75.9k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  75.9k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  75.9k|                  "to be included.\n"
 4726|  75.9k|                  "See the scnlib documentation for more details.");
 4727|  75.9k|    static_assert(
 4728|  75.9k|        !std::is_same_v<T, custom_char_traits>,
 4729|  75.9k|        "\n"
 4730|  75.9k|        "Unsupported range type given as input to a scanning "
 4731|  75.9k|        "function.\n"
 4732|  75.9k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  75.9k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  75.9k|        "not supported.");
 4735|  75.9k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  75.9k|                  "\n"
 4737|  75.9k|                  "Unsupported range type given as input to a scanning "
 4738|  75.9k|                  "function.\n"
 4739|  75.9k|                  "file_marker_found cannot be used as an "
 4740|  75.9k|                  "source range type to scn::scan.\n"
 4741|  75.9k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  75.9k|                  "and do not provide an explicit source range, "
 4743|  75.9k|                  "or use scn::scan with a FILE* directly.");
 4744|  75.9k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  75.9k|                  "\n"
 4746|  75.9k|                  "Unsupported range type given as input to a scanning "
 4747|  75.9k|                  "function.\n"
 4748|  75.9k|                  "In order to be scannable, a range needs to satisfy "
 4749|  75.9k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  75.9k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  75.9k|                  "\n"
 4752|  75.9k|                  "Unsupported range type given as input to a scanning "
 4753|  75.9k|                  "function.\n"
 4754|  75.9k|                  "A range needs to model forward_range and have a valid "
 4755|  75.9k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  75.9k|                  "Examples of scannable ranges are std::string, "
 4757|  75.9k|                  "std::string_view, "
 4758|  75.9k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  75.9k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  75.9k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  75.9k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4607|  75.9k|{
 4608|  75.9k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4608:19): [Folded - Ignored]
  ------------------
 4609|  75.9k|        return r;
 4610|       |        // return make_string_scan_buffer(r);
 4611|  75.9k|    }
 4612|  75.9k|    else {
 4613|  75.9k|        return invalid_char_type{};
 4614|  75.9k|    }
 4615|  75.9k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|   231k|    {
 1594|   231k|        return has_value();
 1595|   231k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   462k|    {
  481|   462k|        return m_has_value;
  482|   462k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|   228k|    {
 1600|   228k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   228k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   228k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   228k|        return this->get_unexpected().error();
 1602|   228k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   228k|    {
  464|   228k|        return m_unexpected;
  465|   228k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  1.35M|    {
  357|  1.35M|        return m_unexpected;
  358|  1.35M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   762k|    {
  343|   762k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   762k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   762k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  73.3k|    {
 1472|  73.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  73.3k|    {
  443|  73.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   792k|    {
  352|   792k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   792k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   792k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  75.9k|    {
 1173|  75.9k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5918|  2.51k|{
 5919|  2.51k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.51k|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.51k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.51k|    }
 5923|  2.51k|    else {
 5924|  2.51k|        auto it = ranges::begin(source);
 5925|  2.51k|        while (n > 0) {
 5926|  2.51k|            --n;
 5927|  2.51k|            ++it;
 5928|  2.51k|        }
 5929|  2.51k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.51k|    }
 5931|  2.51k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  2.51k|    {
 2720|  2.51k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  2.51k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  2.51k|    {
 2701|  2.51k|        return decay_copy(t.begin());
 2702|  2.51k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|   129k|{
 1945|   129k|    return SCN_FWD(t);
  ------------------
  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   129k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5905|  2.51k|{
 5906|  2.51k|    return ranges::end(source);
 5907|  2.51k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.51k|    {
 2777|  2.51k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.51k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.51k|    {
 2759|  2.51k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.51k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|   806k|    {
 3312|   806k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  2.76k|    {
 1649|  2.76k|        return value();
 1650|  2.76k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  2.76k|    {
 1623|  2.76k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.76k|        return this->get_value();
 1625|  2.76k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  2.76k|    {
  447|  2.76k|        return m_value;
  448|  2.76k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.51k|    {
 1426|  2.51k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.51k|    {
  433|  2.51k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|  75.9k|    {
 5474|  75.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.28k, False: 154]
  |  |  ------------------
  ------------------
 8817|  8.28k|        return unexpected(result.error());
 8818|  8.28k|    }
 8819|    154|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    154|    static_cast<    \
  |  |  929|    154|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    154|    static_cast<    \
  |  |  929|    154|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|  75.9k|    {
 1594|  75.9k|        return has_value();
 1595|  75.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   151k|    {
  481|   151k|        return m_has_value;
  482|   151k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|  73.3k|    {
 1600|  73.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  73.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  73.3k|        return this->get_unexpected().error();
 1602|  73.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  73.3k|    {
  464|  73.3k|        return m_unexpected;
  465|  73.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.28k|    {
 1472|  8.28k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.28k|    {
  443|  8.28k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  2.51k|    {
 1649|  2.51k|        return value();
 1650|  2.51k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.51k|    {
 1623|  2.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.51k|        return this->get_value();
 1625|  2.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.51k|    {
  447|  2.51k|        return m_value;
  448|  2.51k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5825|    154|    {
 5826|    154|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|  2.51k|    {
 5677|  2.51k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5611|    154|    {
 5612|    154|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|    154|    {
 1426|    154|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    154|    {
  433|    154|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|  75.9k|{
 7687|  75.9k|    return s;
 7688|  75.9k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|  75.9k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  37.9k|{
 8668|  37.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  37.9k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8602|  37.9k|{
 8603|  37.9k|#if !SCN_DISABLE_LOCALE
 8604|  37.9k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  37.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  37.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  37.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  37.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  37.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.6k, False: 1.25k]
  |  |  ------------------
  ------------------
 8611|  36.6k|        return unexpected(result.error());
 8612|  36.6k|    }
 8613|  1.25k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  37.9k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5130|  25.3k|{
 5131|  25.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.3k|                  "Scan argument types must be default constructible");
 5133|  25.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.3k|                  "Scan argument types must be Destructible");
 5135|  25.3k|    static_assert(
 5136|  25.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.3k|        "Scan argument types must not be references");
 5138|  25.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4954|  8.43k|    {                                                                        \
 4955|  8.43k|        return val;                                                          \
 4956|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5084|  25.3k|{
 5085|  25.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.3k|    constexpr bool scannable_char =
 5089|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.3k|    static_assert(scannable_char,
 5091|  25.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.3k|    constexpr bool scannable_const =
 5095|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.3k|    constexpr bool scannable_disabled =
 5099|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.3k|    static_assert(scannable_disabled,
 5101|  25.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.3k|    static_assert(
 5106|  25.3k|        scannable,
 5107|  25.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.3k|    return arg_value{arg};
 5111|  25.3k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4897|  25.3k|    {
 4898|  25.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.43k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.43k|        return unexpected(result.error());
 8818|  8.43k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.43k|    {
 1472|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.43k|    {
  443|  8.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5130|  25.3k|{
 5131|  25.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.3k|                  "Scan argument types must be default constructible");
 5133|  25.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.3k|                  "Scan argument types must be Destructible");
 5135|  25.3k|    static_assert(
 5136|  25.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.3k|        "Scan argument types must not be references");
 5138|  25.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4954|  8.43k|    {                                                                        \
 4955|  8.43k|        return val;                                                          \
 4956|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5084|  25.3k|{
 5085|  25.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.3k|    constexpr bool scannable_char =
 5089|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.3k|    static_assert(scannable_char,
 5091|  25.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.3k|    constexpr bool scannable_const =
 5095|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.3k|    constexpr bool scannable_disabled =
 5099|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.3k|    static_assert(scannable_disabled,
 5101|  25.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.3k|    static_assert(
 5106|  25.3k|        scannable,
 5107|  25.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.3k|    return arg_value{arg};
 5111|  25.3k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4897|  25.3k|    {
 4898|  25.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.43k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.43k|        return unexpected(result.error());
 8818|  8.43k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.43k|    {
 1472|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.43k|    {
  443|  8.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5130|  25.3k|{
 5131|  25.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.3k|                  "Scan argument types must be default constructible");
 5133|  25.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.3k|                  "Scan argument types must be Destructible");
 5135|  25.3k|    static_assert(
 5136|  25.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.3k|        "Scan argument types must not be references");
 5138|  25.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4954|  8.43k|    {                                                                        \
 4955|  8.43k|        return val;                                                          \
 4956|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5084|  25.3k|{
 5085|  25.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.3k|    constexpr bool scannable_char =
 5089|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.3k|    static_assert(scannable_char,
 5091|  25.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.3k|    constexpr bool scannable_const =
 5095|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.3k|    constexpr bool scannable_disabled =
 5099|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.3k|    static_assert(scannable_disabled,
 5101|  25.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.3k|    static_assert(
 5106|  25.3k|        scannable,
 5107|  25.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.3k|    return arg_value{arg};
 5111|  25.3k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4897|  25.3k|    {
 4898|  25.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.43k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.43k|        return unexpected(result.error());
 8818|  8.43k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.43k|    {
 1472|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.43k|    {
  443|  8.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5130|  25.3k|{
 5131|  25.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.3k|                  "Scan argument types must be default constructible");
 5133|  25.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.3k|                  "Scan argument types must be Destructible");
 5135|  25.3k|    static_assert(
 5136|  25.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.3k|        "Scan argument types must not be references");
 5138|  25.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4954|  8.43k|    {                                                                        \
 4955|  8.43k|        return val;                                                          \
 4956|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5084|  25.3k|{
 5085|  25.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.3k|    constexpr bool scannable_char =
 5089|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.3k|    static_assert(scannable_char,
 5091|  25.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.3k|    constexpr bool scannable_const =
 5095|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.3k|    constexpr bool scannable_disabled =
 5099|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.3k|    static_assert(scannable_disabled,
 5101|  25.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.3k|    static_assert(
 5106|  25.3k|        scannable,
 5107|  25.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.3k|    return arg_value{arg};
 5111|  25.3k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4897|  25.3k|    {
 4898|  25.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.43k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.43k|        return unexpected(result.error());
 8818|  8.43k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  8.43k|    {
 1472|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.43k|    {
  443|  8.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5130|  25.3k|{
 5131|  25.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.3k|                  "Scan argument types must be default constructible");
 5133|  25.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.3k|                  "Scan argument types must be Destructible");
 5135|  25.3k|    static_assert(
 5136|  25.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.3k|        "Scan argument types must not be references");
 5138|  25.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4954|  8.43k|    {                                                                        \
 4955|  8.43k|        return val;                                                          \
 4956|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5084|  25.3k|{
 5085|  25.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.3k|    constexpr bool scannable_char =
 5089|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.3k|    static_assert(scannable_char,
 5091|  25.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.3k|    constexpr bool scannable_const =
 5095|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.3k|    constexpr bool scannable_disabled =
 5099|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.3k|    static_assert(scannable_disabled,
 5101|  25.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.3k|    static_assert(
 5106|  25.3k|        scannable,
 5107|  25.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.3k|    return arg_value{arg};
 5111|  25.3k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4897|  25.3k|    {
 4898|  25.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.43k, False: 0]
  |  |  ------------------
  ------------------
 8817|  8.43k|        return unexpected(result.error());
 8818|  8.43k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  8.43k|    {
 1472|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  8.43k|    {
  443|  8.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5130|  25.3k|{
 5131|  25.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.3k|                  "Scan argument types must be default constructible");
 5133|  25.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.3k|                  "Scan argument types must be Destructible");
 5135|  25.3k|    static_assert(
 5136|  25.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.3k|        "Scan argument types must not be references");
 5138|  25.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4954|  8.43k|    {                                                                        \
 4955|  8.43k|        return val;                                                          \
 4956|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5084|  25.3k|{
 5085|  25.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.3k|    constexpr bool scannable_char =
 5089|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.3k|    static_assert(scannable_char,
 5091|  25.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.3k|    constexpr bool scannable_const =
 5095|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.3k|    constexpr bool scannable_disabled =
 5099|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.3k|    static_assert(scannable_disabled,
 5101|  25.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.3k|    static_assert(
 5106|  25.3k|        scannable,
 5107|  25.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.3k|    return arg_value{arg};
 5111|  25.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4897|  25.3k|    {
 4898|  25.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.64k, False: 788]
  |  |  ------------------
  ------------------
 8817|  7.64k|        return unexpected(result.error());
 8818|  7.64k|    }
 8819|    788|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    788|    static_cast<    \
  |  |  929|    788|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    788|    static_cast<    \
  |  |  929|    788|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  7.64k|    {
 1472|  7.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.64k|    {
  622|  7.64k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.64k|    {
  685|  7.64k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.64k|                                  std::forward<Args>(args)...);
  687|  7.64k|        m_has_value = false;
  688|  7.64k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  48.9k|{
  388|  48.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  48.9k|        T(std::forward<Args>(args)...);
  390|  48.9k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  15.2k|    {
  714|  15.2k|        return reinterpret_cast<unexpected<E>*>(
  715|  15.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  15.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|    788|    {
 5826|    788|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5611|    850|    {
 5612|    850|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|    788|    {
 1426|    788|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    788|    {
  612|    788|        construct(std::forward<Args>(args)...);
  613|    788|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    788|    {
  678|    788|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    788|        m_has_value = true;
  680|    788|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    788|{
  388|    788|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    788|        T(std::forward<Args>(args)...);
  390|    788|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5817|    788|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.57k|    {
  702|  1.57k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.57k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.57k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5821|  1.57k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5366|  8.43k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.43k|    {
  627|  8.43k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 788, False: 7.64k]
  ------------------
  628|    788|            destroy_value();
  629|    788|        }
  630|  7.64k|        else {
  631|  7.64k|            destroy_unexpected();
  632|  7.64k|        }
  633|  8.43k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.43k|    {
  671|  8.43k|        return m_has_value;
  672|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    788|    {
  692|    788|        scn::detail::destroy_at(value_ptr());
  693|    788|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|    788|{
  394|    788|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    788|        for (auto& elem : *p) {
  396|    788|            scn::detail::destroy_at(&elem);
  397|    788|        }
  398|    788|    }
  399|    788|    else {
  400|    788|        p->~T();
  401|    788|    }
  402|    788|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.64k|    {
  696|  7.64k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.64k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  48.9k|{
  394|  48.9k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  48.9k|        for (auto& elem : *p) {
  396|  48.9k|            scn::detail::destroy_at(&elem);
  397|  48.9k|        }
  398|  48.9k|    }
  399|  48.9k|    else {
  400|  48.9k|        p->~T();
  401|  48.9k|    }
  402|  48.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5130|  25.3k|{
 5131|  25.3k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  25.3k|                  "Scan argument types must be default constructible");
 5133|  25.3k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  25.3k|                  "Scan argument types must be Destructible");
 5135|  25.3k|    static_assert(
 5136|  25.3k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  25.3k|        "Scan argument types must not be references");
 5138|  25.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4954|  8.43k|    {                                                                        \
 4955|  8.43k|        return val;                                                          \
 4956|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5084|  25.3k|{
 5085|  25.3k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  25.3k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  25.3k|    constexpr bool scannable_char =
 5089|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  25.3k|    static_assert(scannable_char,
 5091|  25.3k|                  "Cannot scan an argument of an unsupported character "
 5092|  25.3k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  25.3k|    constexpr bool scannable_const =
 5095|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  25.3k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  25.3k|    constexpr bool scannable_disabled =
 5099|  25.3k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  25.3k|    static_assert(scannable_disabled,
 5101|  25.3k|                  "Cannot scan an argument that has been disabled by "
 5102|  25.3k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  25.3k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  25.3k|    static_assert(
 5106|  25.3k|        scannable,
 5107|  25.3k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  25.3k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  25.3k|    return arg_value{arg};
 5111|  25.3k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4897|  25.3k|    {
 4898|  25.3k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.64k, False: 788]
  |  |  ------------------
  ------------------
 8817|  7.64k|        return unexpected(result.error());
 8818|  7.64k|    }
 8819|    788|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    788|    static_cast<    \
  |  |  929|    788|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    788|    static_cast<    \
  |  |  929|    788|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  7.64k|    {
 1472|  7.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.64k|    {
  622|  7.64k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.64k|    {
  685|  7.64k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.64k|                                  std::forward<Args>(args)...);
  687|  7.64k|        m_has_value = false;
  688|  7.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  15.2k|    {
  714|  15.2k|        return reinterpret_cast<unexpected<E>*>(
  715|  15.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  15.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  15.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|    788|    {
 5826|    788|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5611|    850|    {
 5612|    850|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|    788|    {
 1426|    788|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    788|    {
  612|    788|        construct(std::forward<Args>(args)...);
  613|    788|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    788|    {
  678|    788|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    788|        m_has_value = true;
  680|    788|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    788|{
  388|    788|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    788|        T(std::forward<Args>(args)...);
  390|    788|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5817|    788|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.57k|    {
  702|  1.57k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.57k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.57k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5821|  1.57k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5366|  8.43k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.43k|    {
  627|  8.43k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 788, False: 7.64k]
  ------------------
  628|    788|            destroy_value();
  629|    788|        }
  630|  7.64k|        else {
  631|  7.64k|            destroy_unexpected();
  632|  7.64k|        }
  633|  8.43k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.43k|    {
  671|  8.43k|        return m_has_value;
  672|  8.43k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    788|    {
  692|    788|        scn::detail::destroy_at(value_ptr());
  693|    788|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|    788|{
  394|    788|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    788|        for (auto& elem : *p) {
  396|    788|            scn::detail::destroy_at(&elem);
  397|    788|        }
  398|    788|    }
  399|    788|    else {
  400|    788|        p->~T();
  401|    788|    }
  402|    788|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.64k|    {
  696|  7.64k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.64k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8862|  4.21k|{
 8863|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8864|  4.21k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5391|  8.43k|{
 5392|  8.43k|    detail::check_scan_arg_types<Args...>();
 5393|  8.43k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  8.43k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5130|  8.43k|{
 5131|  8.43k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  8.43k|                  "Scan argument types must be default constructible");
 5133|  8.43k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  8.43k|                  "Scan argument types must be Destructible");
 5135|  8.43k|    static_assert(
 5136|  8.43k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  8.43k|        "Scan argument types must not be references");
 5138|  8.43k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5344|  8.43k|    {
 5345|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  8.43k|    {
 5356|  8.43k|        return {detail::make_arg<
 5357|  8.43k|            kind, Context,
 5358|  8.43k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  8.43k|                                 typename Context::char_type>::value>(args)...};
 5360|  8.43k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5165|  8.43k|{
 5166|  8.43k|    return make_value<Context>(value).ref_value;
 5167|  8.43k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5115|  8.43k|{
 5116|  8.43k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  8.43k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  8.43k|                                  needs_context_tag>) {
 5120|  8.43k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  8.43k|    }
 5122|  8.43k|    else {
 5123|  8.43k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  8.43k|            value, context_tag<Context>{}));
 5125|  8.43k|    }
 5126|  8.43k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4954|  8.43k|    {                                                                        \
 4955|  8.43k|        return val;                                                          \
 4956|  8.43k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5084|  8.43k|{
 5085|  8.43k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  8.43k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  8.43k|    constexpr bool scannable_char =
 5089|  8.43k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  8.43k|    static_assert(scannable_char,
 5091|  8.43k|                  "Cannot scan an argument of an unsupported character "
 5092|  8.43k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  8.43k|    constexpr bool scannable_const =
 5095|  8.43k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  8.43k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  8.43k|    constexpr bool scannable_disabled =
 5099|  8.43k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  8.43k|    static_assert(scannable_disabled,
 5101|  8.43k|                  "Cannot scan an argument that has been disabled by "
 5102|  8.43k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  8.43k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  8.43k|    static_assert(
 5106|  8.43k|        scannable,
 5107|  8.43k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  8.43k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  8.43k|    return arg_value{arg};
 5111|  8.43k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4897|  8.43k|    {
 4898|  8.43k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7970|  8.43k|    {
 7971|  8.43k|        return m_str;
 7972|  8.43k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  8.43k|    {
 5422|  8.43k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5374|  8.43k|    {
 5375|  8.43k|        return m_argptrs;
 5376|  8.43k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8815|  8.43k|{
 8816|  8.43k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.64k, False: 788]
  |  |  ------------------
  ------------------
 8817|  7.64k|        return unexpected(result.error());
 8818|  7.64k|    }
 8819|    788|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    788|    static_cast<    \
  |  |  929|    788|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    788|    static_cast<    \
  |  |  929|    788|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  8.43k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  7.64k|    {
 1472|  7.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  7.64k|    {
  443|  7.64k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  8.43k|    {
 1173|  8.43k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5825|    788|    {
 5826|    788|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5611|    788|    {
 5612|    788|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|    788|    {
 1426|    788|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|    788|    {
  433|    788|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5369|  8.43k|    {
 5370|  8.43k|        return m_args;
 5371|  8.43k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|  8.43k|    {
 7967|  8.43k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8929|  4.21k|{
 8930|  4.21k|    auto args = make_scan_args<scan_context, Args...>();
 8931|  4.21k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|  4.21k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.21k|    static_cast<    \
  |  |  929|  4.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|  4.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5130|  16.8k|{
 5131|  16.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  16.8k|                  "Scan argument types must be default constructible");
 5133|  16.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  16.8k|                  "Scan argument types must be Destructible");
 5135|  16.8k|    static_assert(
 5136|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  16.8k|        "Scan argument types must not be references");
 5138|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5084|  16.8k|{
 5085|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  16.8k|    constexpr bool scannable_char =
 5089|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  16.8k|    static_assert(scannable_char,
 5091|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5092|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  16.8k|    constexpr bool scannable_const =
 5095|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  16.8k|    constexpr bool scannable_disabled =
 5099|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  16.8k|    static_assert(scannable_disabled,
 5101|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5102|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  16.8k|    static_assert(
 5106|  16.8k|        scannable,
 5107|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  16.8k|    return arg_value{arg};
 5111|  16.8k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4897|  16.8k|    {
 4898|  16.8k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8586|  75.9k|{
 8587|  75.9k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  75.9k|    auto result = vscan_impl(buffer, format, args);
 8590|  75.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.7k, False: 122]
  |  |  ------------------
  ------------------
 8591|  75.7k|        return unexpected(result.error());
 8592|  75.7k|    }
 8593|    122|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  75.9k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4715|   151k|{
 4716|   151k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   151k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   151k|                  "\n"
 4720|   151k|                  "Unsupported range type given as input to a scanning "
 4721|   151k|                  "function.\n"
 4722|   151k|                  "A range needs to have a character type (value type) "
 4723|   151k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   151k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   151k|                  "to be included.\n"
 4726|   151k|                  "See the scnlib documentation for more details.");
 4727|   151k|    static_assert(
 4728|   151k|        !std::is_same_v<T, custom_char_traits>,
 4729|   151k|        "\n"
 4730|   151k|        "Unsupported range type given as input to a scanning "
 4731|   151k|        "function.\n"
 4732|   151k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   151k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   151k|        "not supported.");
 4735|   151k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   151k|                  "\n"
 4737|   151k|                  "Unsupported range type given as input to a scanning "
 4738|   151k|                  "function.\n"
 4739|   151k|                  "file_marker_found cannot be used as an "
 4740|   151k|                  "source range type to scn::scan.\n"
 4741|   151k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   151k|                  "and do not provide an explicit source range, "
 4743|   151k|                  "or use scn::scan with a FILE* directly.");
 4744|   151k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   151k|                  "\n"
 4746|   151k|                  "Unsupported range type given as input to a scanning "
 4747|   151k|                  "function.\n"
 4748|   151k|                  "In order to be scannable, a range needs to satisfy "
 4749|   151k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   151k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   151k|                  "\n"
 4752|   151k|                  "Unsupported range type given as input to a scanning "
 4753|   151k|                  "function.\n"
 4754|   151k|                  "A range needs to model forward_range and have a valid "
 4755|   151k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   151k|                  "Examples of scannable ranges are std::string, "
 4757|   151k|                  "std::string_view, "
 4758|   151k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   151k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   151k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   151k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4607|   151k|{
 4608|   151k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4608:19): [Folded - Ignored]
  ------------------
 4609|   151k|        return r;
 4610|       |        // return make_string_scan_buffer(r);
 4611|   151k|    }
 4612|   151k|    else {
 4613|   151k|        return invalid_char_type{};
 4614|   151k|    }
 4615|   151k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   151k|    {
 1472|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   151k|    {
  443|   151k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   151k|    {
 1173|   151k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5918|    244|{
 5919|    244|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|    244|                      ranges::iterator_t<SourceRange>>) {
 5921|    244|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|    244|    }
 5923|    244|    else {
 5924|    244|        auto it = ranges::begin(source);
 5925|    244|        while (n > 0) {
 5926|    244|            --n;
 5927|    244|            ++it;
 5928|    244|        }
 5929|    244|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|    244|    }
 5931|    244|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    244|    {
 2720|    244|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    244|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    244|    {
 2701|    244|        return decay_copy(t.begin());
 2702|    244|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|  8.80k|{
 1945|  8.80k|    return SCN_FWD(t);
  ------------------
  |  |  930|  8.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  8.80k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5905|    244|{
 5906|    244|    return ranges::end(source);
 5907|    244|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|    244|    {
 2777|    244|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|    244|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|    244|    {
 2759|    244|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    244|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|    244|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|   249k|    {
 3312|   249k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    244|    {
 1426|    244|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|    244|    {
  433|    244|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|   151k|    {
 5474|   151k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 58]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|     58|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     58|    static_cast<    \
  |  |  929|     58|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     58|    static_cast<    \
  |  |  929|     58|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|   151k|    {
 1594|   151k|        return has_value();
 1595|   151k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   303k|    {
  481|   303k|        return m_has_value;
  482|   303k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|   151k|    {
 1600|   151k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   151k|        return this->get_unexpected().error();
 1602|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   151k|    {
  464|   151k|        return m_unexpected;
  465|   151k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.8k|    {
  443|  16.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|    244|    {
 1649|    244|        return value();
 1650|    244|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    244|    {
 1623|    244|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    244|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    244|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    244|        return this->get_value();
 1625|    244|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|    244|    {
  447|    244|        return m_value;
  448|    244|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5825|     58|    {
 5826|     58|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|    244|    {
 5677|    244|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5611|     58|    {
 5612|     58|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|     58|    {
 1426|     58|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|     58|    {
  433|     58|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|   151k|{
 7692|   151k|    return s;
 7693|   151k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|   151k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8602|  75.9k|{
 8603|  75.9k|#if !SCN_DISABLE_LOCALE
 8604|  75.9k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  75.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  75.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  75.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  75.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.7k, False: 122]
  |  |  ------------------
  ------------------
 8611|  75.7k|        return unexpected(result.error());
 8612|  75.7k|    }
 8613|    122|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    122|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  75.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 0]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.8k|    {
  443|  16.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 0]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.8k|    {
  443|  16.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 0]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.8k|    {
  443|  16.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 0]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.8k|    {
  443|  16.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 0]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  16.8k|    {
  443|  16.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 62]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|     62|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  16.8k|    {
  622|  16.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  16.8k|    {
  685|  16.8k|        scn::detail::construct_at(unexpected_ptr(),
  686|  16.8k|                                  std::forward<Args>(args)...);
  687|  16.8k|        m_has_value = false;
  688|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  33.6k|    {
  714|  33.6k|        return reinterpret_cast<unexpected<E>*>(
  715|  33.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  33.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  33.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|     62|    {
 5826|     62|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|     62|    {
 1426|     62|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     62|    {
  612|     62|        construct(std::forward<Args>(args)...);
  613|     62|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     62|    {
  678|     62|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     62|        m_has_value = true;
  680|     62|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     62|{
  388|     62|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     62|        T(std::forward<Args>(args)...);
  390|     62|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5817|     62|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    124|    {
  702|    124|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    124|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    124|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5821|    124|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5366|  16.8k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  16.8k|    {
  627|  16.8k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 62, False: 16.8k]
  ------------------
  628|     62|            destroy_value();
  629|     62|        }
  630|  16.8k|        else {
  631|  16.8k|            destroy_unexpected();
  632|  16.8k|        }
  633|  16.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  16.8k|    {
  671|  16.8k|        return m_has_value;
  672|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     62|    {
  692|     62|        scn::detail::destroy_at(value_ptr());
  693|     62|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|     62|{
  394|     62|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     62|        for (auto& elem : *p) {
  396|     62|            scn::detail::destroy_at(&elem);
  397|     62|        }
  398|     62|    }
  399|     62|    else {
  400|     62|        p->~T();
  401|     62|    }
  402|     62|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  16.8k|    {
  696|  16.8k|        scn::detail::destroy_at(unexpected_ptr());
  697|  16.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 62]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|     62|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  16.8k|    {
  622|  16.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  16.8k|    {
  685|  16.8k|        scn::detail::construct_at(unexpected_ptr(),
  686|  16.8k|                                  std::forward<Args>(args)...);
  687|  16.8k|        m_has_value = false;
  688|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  33.6k|    {
  714|  33.6k|        return reinterpret_cast<unexpected<E>*>(
  715|  33.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  33.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  33.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5825|     62|    {
 5826|     62|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1425|     62|    {
 1426|     62|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     62|    {
  612|     62|        construct(std::forward<Args>(args)...);
  613|     62|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     62|    {
  678|     62|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     62|        m_has_value = true;
  680|     62|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     62|{
  388|     62|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     62|        T(std::forward<Args>(args)...);
  390|     62|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5817|     62|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    124|    {
  702|    124|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    124|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    124|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5821|    124|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5366|  16.8k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  16.8k|    {
  627|  16.8k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 62, False: 16.8k]
  ------------------
  628|     62|            destroy_value();
  629|     62|        }
  630|  16.8k|        else {
  631|  16.8k|            destroy_unexpected();
  632|  16.8k|        }
  633|  16.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  16.8k|    {
  671|  16.8k|        return m_has_value;
  672|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     62|    {
  692|     62|        scn::detail::destroy_at(value_ptr());
  693|     62|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|     62|{
  394|     62|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     62|        for (auto& elem : *p) {
  396|     62|            scn::detail::destroy_at(&elem);
  397|     62|        }
  398|     62|    }
  399|     62|    else {
  400|     62|        p->~T();
  401|     62|    }
  402|     62|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  16.8k|    {
  696|  16.8k|        scn::detail::destroy_at(unexpected_ptr());
  697|  16.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5391|  16.8k|{
 5392|  16.8k|    detail::check_scan_arg_types<Args...>();
 5393|  16.8k|    return detail::scan_arg_store<Context, Args...>{};
 5394|  16.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5130|  16.8k|{
 5131|  16.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  16.8k|                  "Scan argument types must be default constructible");
 5133|  16.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  16.8k|                  "Scan argument types must be Destructible");
 5135|  16.8k|    static_assert(
 5136|  16.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  16.8k|        "Scan argument types must not be references");
 5138|  16.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5344|  16.8k|    {
 5345|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5355|  16.8k|    {
 5356|  16.8k|        return {detail::make_arg<
 5357|  16.8k|            kind, Context,
 5358|  16.8k|            mapped_type_constant<remove_cvref_t<A>,
 5359|  16.8k|                                 typename Context::char_type>::value>(args)...};
 5360|  16.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5165|  16.8k|{
 5166|  16.8k|    return make_value<Context>(value).ref_value;
 5167|  16.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5115|  16.8k|{
 5116|  16.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  16.8k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  16.8k|                                  needs_context_tag>) {
 5120|  16.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  16.8k|    }
 5122|  16.8k|    else {
 5123|  16.8k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  16.8k|            value, context_tag<Context>{}));
 5125|  16.8k|    }
 5126|  16.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4954|  16.8k|    {                                                                        \
 4955|  16.8k|        return val;                                                          \
 4956|  16.8k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5084|  16.8k|{
 5085|  16.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  16.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  16.8k|    constexpr bool scannable_char =
 5089|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  16.8k|    static_assert(scannable_char,
 5091|  16.8k|                  "Cannot scan an argument of an unsupported character "
 5092|  16.8k|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  16.8k|    constexpr bool scannable_const =
 5095|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  16.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  16.8k|    constexpr bool scannable_disabled =
 5099|  16.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  16.8k|    static_assert(scannable_disabled,
 5101|  16.8k|                  "Cannot scan an argument that has been disabled by "
 5102|  16.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  16.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  16.8k|    static_assert(
 5106|  16.8k|        scannable,
 5107|  16.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  16.8k|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  16.8k|    return arg_value{arg};
 5111|  16.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4897|  16.8k|    {
 4898|  16.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7970|  16.8k|    {
 7971|  16.8k|        return m_str;
 7972|  16.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  16.8k|    {
 5422|  16.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5374|  16.8k|    {
 5375|  16.8k|        return m_argptrs;
 5376|  16.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8815|  16.8k|{
 8816|  16.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 62]
  |  |  ------------------
  ------------------
 8817|  16.8k|        return unexpected(result.error());
 8818|  16.8k|    }
 8819|     62|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  16.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|  16.8k|    {
 1472|  16.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  16.8k|    {
  443|  16.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  16.8k|    {
 1173|  16.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5825|     62|    {
 5826|     62|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5611|     62|    {
 5612|     62|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1425|     62|    {
 1426|     62|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|     62|    {
  433|     62|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5369|  16.8k|    {
 5370|  16.8k|        return m_args;
 5371|  16.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  16.8k|    {
 7967|  16.8k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|   426k|    {
 3564|   426k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   426k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   426k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  3.07M|    {
 3570|  3.07M|        return m_code == good;
 3571|  3.07M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  58.7k|    {
 3581|  58.7k|        return m_code;
 3582|  58.7k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6176|  3.91k|    {
 6177|  3.91k|        return m_size;
 6178|  3.91k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6217|  4.65k|    {
 6218|  4.65k|        SCN_GCC_COMPAT_PUSH
 6219|  4.65k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6220|  4.65k|        switch (type) {
 6221|  2.20k|            case presentation_type::none:
  ------------------
  |  Branch (6221:13): [True: 2.20k, False: 2.44k]
  ------------------
 6222|  2.20k|                return 10;
 6223|     40|            case presentation_type::int_generic:
  ------------------
  |  Branch (6223:13): [True: 40, False: 4.61k]
  ------------------
 6224|     40|                return 0;
 6225|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6225:13): [True: 0, False: 4.65k]
  ------------------
 6226|      0|                return arbitrary_base;
 6227|       |
 6228|     20|            case presentation_type::int_binary:
  ------------------
  |  Branch (6228:13): [True: 20, False: 4.63k]
  ------------------
 6229|     20|                return 2;
 6230|     46|            case presentation_type::int_octal:
  ------------------
  |  Branch (6230:13): [True: 46, False: 4.61k]
  ------------------
 6231|     46|                return 8;
 6232|     28|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6232:13): [True: 28, False: 4.62k]
  ------------------
 6233|     54|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6233:13): [True: 26, False: 4.63k]
  ------------------
 6234|     54|                return 10;
 6235|  2.28k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6235:13): [True: 2.28k, False: 2.36k]
  ------------------
 6236|  2.28k|                return 16;
 6237|       |
 6238|      0|            default:
  ------------------
  |  Branch (6238:13): [True: 0, False: 4.65k]
  ------------------
 6239|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6240|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6241|  4.65k|        }
 6242|  4.65k|        SCN_GCC_COMPAT_POP
 6243|  4.65k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  64.6k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6258|  9.33k|    {
 6259|  9.33k|        m_specs.align = align;
 6260|  9.33k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6267|    272|    {
 6268|    272|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    272|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6268:23): [Folded - Ignored]
  ------------------
 6269|    272|            m_specs.localized = true;
 6270|    272|        }
 6271|      0|        else {
 6272|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6273|      0|        }
 6274|    272|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6277|  12.4k|    {
 6278|  12.4k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6278:13): [True: 0, False: 12.4k]
  |  Branch (6278:39): [True: 0, False: 0]
  ------------------
 6279|       |            // clang-format off
 6280|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6281|       |            // clang-format on
 6282|      0|        }
 6283|       |
 6284|  12.4k|        m_specs.width = width;
 6285|  12.4k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6287|  10.2k|    {
 6288|  10.2k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6288:13): [True: 112, False: 10.1k]
  ------------------
 6289|       |            // clang-format off
 6290|    112|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6291|       |            // clang-format on
 6292|    112|        }
 6293|       |
 6294|  10.1k|        m_specs.precision = prec;
 6295|  10.1k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  72.9k|    {
 6299|  72.9k|        m_specs.type = type;
 6300|  72.9k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6303|  1.89M|    {
 6304|  1.89M|        const auto cp_value = static_cast<unsigned>(cp);
 6305|  1.89M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.89M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.67M, False: 219k]
  |  |  ------------------
  ------------------
 6306|  1.67M|            m_specs.charset_literals[cp_value / 8] |=
 6307|  1.67M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6308|  1.67M|        }
 6309|   219k|        else {
 6310|   219k|            m_specs.charset_has_nonascii = true;
 6311|   219k|        }
 6312|  1.89M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6315|  10.4k|    {
 6316|  10.4k|        const auto begin_value = static_cast<unsigned>(begin);
 6317|  10.4k|        const auto end_value = static_cast<unsigned>(end);
 6318|  10.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  10.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6319|       |
 6320|  10.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  10.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.34k, False: 5.15k]
  |  |  ------------------
  ------------------
 6321|       |            // No need to bit-twiddle with a mask, because with the
 6322|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6323|  5.34k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  5.34k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6324|   385k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6324:40): [True: 380k, False: 5.34k]
  ------------------
 6325|   380k|                m_specs.charset_literals[v / 8] |=
 6326|   380k|                    static_cast<unsigned char>(1ul << (v % 8));
 6327|   380k|            }
 6328|  5.34k|        }
 6329|  5.15k|        else {
 6330|  5.15k|            m_specs.charset_has_nonascii = true;
 6331|  5.15k|        }
 6332|  10.4k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6335|  2.58k|    {
 6336|  2.58k|        m_specs.charset_is_inverted = true;
 6337|  2.58k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6354|  33.1k|    {
 6355|  33.1k|        m_specs.regexp_flags = flags;
 6356|  33.1k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6360|  10.5k|    {
 6361|  10.5k|        SCN_UNLIKELY_ATTR
 6362|  10.5k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6363|  10.5k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  1.97M|    {
 6372|  1.97M|        return static_cast<bool>(m_error);
 6373|  1.97M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  58.7k|{
 3605|  58.7k|    return a.code() == b;
 3606|  58.7k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  58.7k|{
 3609|  58.7k|    return !(a == b);
 3610|  58.7k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3903|   185k|{
 3904|   185k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3905|       |
 3906|   185k|    const auto is_trailing_code_unit = [](char ch) {
 3907|   185k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|   185k|    };
 3909|       |
 3910|   185k|    if (input.size() == 1) {
  ------------------
  |  Branch (3910:9): [True: 165k, False: 19.8k]
  ------------------
 3911|   165k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3912|   165k|        return static_cast<char32_t>(input[0]);
 3913|   165k|    }
 3914|       |
 3915|  19.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (3915:9): [True: 19.2k, False: 662]
  ------------------
 3916|  19.2k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|  19.2k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  19.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|  19.2k|        char32_t cp{};
 3920|  19.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3921|  19.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3922|  19.2k|        return cp;
 3923|  19.2k|    }
 3924|       |
 3925|    662|    if (input.size() == 3) {
  ------------------
  |  Branch (3925:9): [True: 554, False: 108]
  ------------------
 3926|    554|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    554|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    554|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3927|    554|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    554|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    554|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3928|    554|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    554|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    554|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3929|       |
 3930|    554|        char32_t cp{};
 3931|    554|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3932|    554|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3933|    554|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3934|    554|        return cp;
 3935|    554|    }
 3936|       |
 3937|    108|    if (input.size() == 4) {
  ------------------
  |  Branch (3937:9): [True: 108, False: 0]
  ------------------
 3938|    108|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3939|    108|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3940|    108|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3941|    108|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3942|    108|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    108|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    108|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|       |
 3944|    108|        char32_t cp{};
 3945|    108|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3946|    108|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3947|    108|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3948|    108|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3949|    108|        return cp;
 3950|    108|    }
 3951|       |
 3952|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3953|       |    // gcc 7 thinks we'll get here, even when we won't
 3954|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3955|      0|#endif
 3956|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3957|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6106|  47.6k|{
 6107|  47.6k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6108|  47.6k|                                    static_cast<unsigned>(b));
 6109|  47.6k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6111|  4.77k|{
 6112|  4.77k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6113|  4.77k|                                    static_cast<unsigned>(b));
 6114|  4.77k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6126|  4.77k|{
 6127|  4.77k|    return a = a | b;
 6128|  4.77k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|    746|{
 7059|    746|    switch (type) {
 7060|    134|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 134, False: 612]
  ------------------
 7061|    134|            return arg_type_category::none;
 7062|       |
 7063|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 0, False: 746]
  ------------------
 7064|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 746]
  ------------------
 7065|     68|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 68, False: 678]
  ------------------
 7066|     68|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 746]
  ------------------
 7067|     68|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 746]
  ------------------
 7068|     68|            return arg_type_category::integer;
 7069|       |
 7070|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 746]
  ------------------
 7071|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 746]
  ------------------
 7072|     68|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 68, False: 678]
  ------------------
 7073|     68|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 746]
  ------------------
 7074|     68|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 746]
  ------------------
 7075|     68|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|     68|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 68, False: 678]
  ------------------
 7078|     68|            return arg_type_category::pointer;
 7079|     68|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 68, False: 678]
  ------------------
 7080|     68|            return arg_type_category::boolean;
 7081|     46|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 46, False: 700]
  ------------------
 7082|     68|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 22, False: 724]
  ------------------
 7083|     68|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 746]
  ------------------
 7084|     68|            return arg_type_category::character;
 7085|       |
 7086|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 746]
  ------------------
 7087|     68|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 68, False: 678]
  ------------------
 7088|     68|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 746]
  ------------------
 7089|     68|            return arg_type_category::floating;
 7090|       |
 7091|     46|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 46, False: 700]
  ------------------
 7092|    114|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 68, False: 678]
  ------------------
 7093|    136|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 22, False: 724]
  ------------------
 7094|    204|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 68, False: 678]
  ------------------
 7095|    204|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 746]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 746]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|    746|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|    746|            SCN_CLANG_POP
 7106|    746|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|    746|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|    906|{
 3650|    906|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    906|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7144|  12.9k|{
 7145|  12.9k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 2.37k]
  |  |  ------------------
  ------------------
 7146|  10.5k|        return handler.on_error("Invalid type specifier for integer type");
 7147|  10.5k|    }
 7148|  2.37k|    if (specs.localized) {
  ------------------
  |  Branch (7148:9): [True: 68, False: 2.30k]
  ------------------
 7149|     68|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 60]
  |  |  ------------------
  ------------------
 7150|       |            // clang-format off
 7151|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7152|       |            // clang-format on
 7153|      8|            return;
 7154|      8|        }
 7155|     60|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60]
  |  |  ------------------
  ------------------
 7156|       |            // clang-format off
 7157|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7158|       |            // clang-format on
 7159|      0|        }
 7160|     60|    }
 7161|  2.37k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|     70|{
 1945|     70|    return SCN_FWD(t);
  ------------------
  |  |  930|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|     70|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.45k|{
 3650|  2.45k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.45k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  6.47k|{
 7189|  6.47k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 5.36k, False: 1.10k]
  ------------------
 7190|  6.47k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7190:10): [True: 78, False: 5.28k]
  ------------------
 7191|  5.36k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7191:10): [True: 5.17k, False: 112]
  ------------------
 7192|  5.25k|        SCN_UNLIKELY_ATTR
 7193|  5.25k|        return handler.on_error("Invalid type specifier for float type");
 7194|  5.25k|    }
 7195|  6.47k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  480|  21.4k|    {
  481|  21.4k|        return m_has_value;
  482|  21.4k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1593|  10.7k|    {
 1594|  10.7k|        return has_value();
 1595|  10.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  446|  10.7k|    {
  447|  10.7k|        return m_value;
  448|  10.7k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1622|  10.7k|    {
 1623|  10.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  10.7k|        return this->get_value();
 1625|  10.7k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1658|  10.7k|    {
 1659|  10.7k|        return std::move(value());
 1660|  10.7k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3649|  5.91k|{
 3650|  5.91k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.91k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3649|  3.03k|{
 3650|  3.03k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  3.03k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3649|    144|{
 3650|    144|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    144|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    144|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3649|    294|{
 3650|    294|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    294|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  1.22k|{
 3650|  1.22k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.22k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7200|  19.2k|{
 7201|  19.2k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7201:9): [True: 3.26k, False: 15.9k]
  ------------------
 7202|  19.2k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7202:9): [True: 672, False: 15.3k]
  ------------------
 7203|  19.2k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7203:9): [True: 3.66k, False: 11.6k]
  ------------------
 7204|  19.2k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7204:9): [True: 10.0k, False: 1.62k]
  ------------------
 7205|  19.2k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7205:9): [True: 972, False: 654]
  ------------------
 7206|  18.6k|        return;
 7207|  18.6k|    }
 7208|    654|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7208:9): [True: 132, False: 522]
  ------------------
 7209|    132|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 120]
  |  |  ------------------
  ------------------
 7210|       |            // clang-format off
 7211|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7212|       |            // clang-format on
 7213|     12|        }
 7214|    120|        return;
 7215|    132|    }
 7216|    522|    SCN_UNLIKELY_ATTR
 7217|    522|    handler.on_error("Invalid type specifier for string");
 7218|    522|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3649|  4.82k|{
 3650|  4.82k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  4.82k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3649|     32|{
 3650|     32|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     32|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7234|  6.47k|{
 7235|  6.47k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7235:9): [True: 5.36k, False: 1.10k]
  ------------------
 7236|  6.47k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7236:9): [True: 5.13k, False: 236]
  ------------------
 7237|  6.47k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7237:9): [True: 5.11k, False: 18]
  ------------------
 7238|  6.47k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7238:9): [True: 5.10k, False: 6]
  ------------------
 7239|  6.47k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7239:9): [True: 5.09k, False: 12]
  ------------------
 7240|  6.47k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7240:9): [True: 5.08k, False: 10]
  ------------------
 7241|  6.47k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7241:9): [True: 5.06k, False: 20]
  ------------------
 7242|  6.47k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7242:9): [True: 5.05k, False: 12]
  ------------------
 7243|  5.05k|        SCN_UNLIKELY_ATTR
 7244|  5.05k|        return handler.on_error("Invalid type specifier for boolean");
 7245|  5.05k|    }
 7246|  6.47k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7166|  6.41k|{
 7167|  6.41k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7167:9): [True: 5.26k, False: 1.15k]
  ------------------
 7168|  6.41k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7168:9): [True: 0, False: 1.15k]
  ------------------
 7169|  5.26k|        SCN_UNLIKELY_ATTR
 7170|  5.26k|        return handler.on_error("Invalid type specifier for character type");
 7171|  5.26k|    }
 7172|  6.41k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7223|  6.41k|{
 7224|  6.41k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7224:9): [True: 5.33k, False: 1.08k]
  ------------------
 7225|  6.41k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7225:9): [True: 5.32k, False: 8]
  ------------------
 7226|  5.32k|        SCN_UNLIKELY_ATTR
 7227|  5.32k|        return handler.on_error("Invalid type specifier for pointer");
 7228|  5.32k|    }
 7229|  6.41k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA70_KcEEEDaDpOT_:
 3649|      8|{
 3650|      8|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|      8|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   161k|{
 3711|   161k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|   161k|                                          const CharT*, const CharT*>) {
 3713|   161k|        return {first, last};
 3714|   161k|    }
 3715|   161k|    else {
 3716|   161k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   161k|    }
 3718|   161k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   298k|{
 3711|   298k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|   298k|                                          const CharT*, const CharT*>) {
 3713|   298k|        return {first, last};
 3714|   298k|    }
 3715|   298k|    else {
 3716|   298k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   298k|    }
 3718|   298k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  1.91M|    {
 3326|  1.91M|        return m_iterator;
 3327|  1.91M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  2.30M|    {
 3330|  2.30M|        return m_sentinel;
 3331|  2.30M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   392k|    {
 3326|   392k|        return m_iterator;
 3327|   392k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   763k|    {
 3330|   763k|        return m_sentinel;
 3331|   763k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|   119k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|     96|{
 1207|     96|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|     96|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  1.91k|    {
  357|  1.91k|        return m_unexpected;
  358|  1.91k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|  5.40k|{
 3650|  5.40k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.40k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  26.0k|    {
  343|  26.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  26.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|  81.7k|    {
 1472|  81.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  82.7k|    {
  443|  82.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   112k|    {
 1173|   112k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  22.3k|    {
 1426|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  22.3k|    {
  433|  22.3k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|   113k|    {
 1594|   113k|        return has_value();
 1595|   113k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|   223k|    {
  481|   223k|        return m_has_value;
  482|   223k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|  81.8k|    {
 1600|  81.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  81.8k|        return this->get_unexpected().error();
 1602|  81.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  81.8k|    {
  464|  81.8k|        return m_unexpected;
  465|  81.8k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  19.6k|    {
 1659|  19.6k|        return std::move(value());
 1660|  19.6k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  28.6k|    {
 1623|  28.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  28.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  28.6k|        return this->get_value();
 1625|  28.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  28.6k|    {
  447|  28.6k|        return m_value;
  448|  28.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|  21.1k|    {
 1472|  21.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  22.0k|    {
  443|  22.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  39.6k|    {
 1173|  39.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  16.1k|    {
 1426|  16.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  16.1k|    {
  433|  16.1k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|  40.5k|    {
 1594|  40.5k|        return has_value();
 1595|  40.5k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  78.3k|    {
  481|  78.3k|        return m_has_value;
  482|  78.3k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|  21.1k|    {
 1600|  21.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  21.1k|        return this->get_unexpected().error();
 1602|  21.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  21.1k|    {
  464|  21.1k|        return m_unexpected;
  465|  21.1k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  13.9k|    {
 1659|  13.9k|        return std::move(value());
 1660|  13.9k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  16.6k|    {
 1623|  16.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.6k|        return this->get_value();
 1625|  16.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  16.6k|    {
  447|  16.6k|        return m_value;
  448|  16.6k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  8.56k|    {
 1833|  8.56k|        return detail::transform_error_impl(std::move(*this),
 1834|  8.56k|                                            std::forward<F>(f));
 1835|  8.56k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  8.56k|{
 1319|  8.56k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  8.56k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  8.56k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  8.56k|            return result(*std::forward<Exp>(exp));
 1323|  8.56k|        }
 1324|       |
 1325|  8.56k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  8.56k|        return result(unexpect, monostate{});
 1327|  8.56k|    }
 1328|  8.56k|    else {
 1329|  8.56k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  8.56k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.56k, False: 0]
  |  |  ------------------
  ------------------
 1331|  8.56k|                   ? result(*std::forward<Exp>(exp))
 1332|  8.56k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  8.56k|    }
 1336|  8.56k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  98.6k|    {
  481|  98.6k|        return m_has_value;
  482|  98.6k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  10.4k|    {
 1659|  10.4k|        return std::move(value());
 1660|  10.4k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  46.4k|    {
 1623|  46.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  46.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  46.4k|        return this->get_value();
 1625|  46.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  46.4k|    {
  447|  46.4k|        return m_value;
  448|  46.4k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|    104|    {
 1610|    104|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    104|        return std::move(this->get_unexpected().error());
 1612|    104|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    104|    {
  464|    104|        return m_unexpected;
  465|    104|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|    948|    {
 1482|    948|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|   337k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6182|  2.89k|    {
 6183|  2.89k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6184|  2.89k|        CharT r{};
 6185|  2.89k|        std::memcpy(&r, m_data, m_size);
 6186|  2.89k|        return r;
 6187|  2.89k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|  1.05k|    {
  343|  1.05k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.05k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  1.05k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  1.14k|    {
  352|  1.14k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.14k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  1.14k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6191|    616|    {
 6192|    616|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6193|    616|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2957|     70|    {
 2958|     70|        return fn::impl(std::forward<T>(t));
 2959|     70|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2948|     70|    {
 2949|     70|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2950|     70|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|     70|    {
 2926|     70|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|     70|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2891|     70|    {
 2892|     70|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     70|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|     70|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|     96|    {
  343|     96|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|     96|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|     96|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|      8|    {
  343|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  20.0k|    {
  357|  20.0k|        return m_unexpected;
  358|  20.0k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  3.74k|    {
  352|  3.74k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.74k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  3.74k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  30.3k|    {
  343|  30.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  30.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  30.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  30.3k|    {
  357|  30.3k|        return m_unexpected;
  358|  30.3k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  30.3k|    {
  352|  30.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  30.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  30.3k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|    674|{
 1207|    674|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|    674|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  3.06k|    {
  343|  3.06k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.06k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  3.06k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1206|  1.54k|{
 1207|  1.54k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  1.54k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  95.8k|{
  322|  95.8k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  95.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  95.8k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|   157k|    {
 3342|   157k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   157k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|    312|    {
 1472|    312|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    312|    {
  443|    312|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  52.1k|    {
 1173|  52.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  51.8k|    {
 1426|  51.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  51.8k|    {
  433|  51.8k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1593|  41.5k|    {
 1594|  41.5k|        return has_value();
 1595|  41.5k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|  36.0k|    {
 1649|  36.0k|        return value();
 1650|  36.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1425|  7.04k|    {
 1426|  7.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  7.04k|    {
  433|  7.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  7.54k|    {
 1173|  7.54k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    498|    {
 1472|    498|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    498|    {
  443|    498|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1593|  2.36k|    {
 1594|  2.36k|        return has_value();
 1595|  2.36k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  12.9k|    {
  481|  12.9k|        return m_has_value;
  482|  12.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1648|    232|    {
 1649|    232|        return value();
 1650|    232|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1622|  5.08k|    {
 1623|  5.08k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  5.08k|        return this->get_value();
 1625|  5.08k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  5.08k|    {
  447|  5.08k|        return m_value;
  448|  5.08k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  3.07k|    {
 1833|  3.07k|        return detail::transform_error_impl(std::move(*this),
 1834|  3.07k|                                            std::forward<F>(f));
 1835|  3.07k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  3.07k|{
 1319|  3.07k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  3.07k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  3.07k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  3.07k|            return result(*std::forward<Exp>(exp));
 1323|  3.07k|        }
 1324|       |
 1325|  3.07k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  3.07k|        return result(unexpect, monostate{});
 1327|  3.07k|    }
 1328|  3.07k|    else {
 1329|  3.07k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  3.07k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.07k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.97k, False: 96]
  |  |  ------------------
  ------------------
 1331|  3.07k|                   ? result(*std::forward<Exp>(exp))
 1332|  3.07k|                   : result(unexpect,
 1333|     96|                            trivial_invoke(std::forward<F>(f),
 1334|     96|                                           std::forward<Exp>(exp).error()));
 1335|  3.07k|    }
 1336|  3.07k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1658|  4.85k|    {
 1659|  4.85k|        return std::move(value());
 1660|  4.85k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1425|  4.35k|    {
 1426|  4.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  4.35k|    {
  433|  4.35k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  11.4k|    {
 1173|  11.4k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1609|    330|    {
 1610|    330|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    330|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    330|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    330|        return std::move(this->get_unexpected().error());
 1612|    330|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|    330|    {
  464|    330|        return m_unexpected;
  465|    330|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|  1.72k|    {
 1482|  1.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  6.32k|    {
  443|  6.32k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|     96|    {
 1472|     96|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|     96|    {
  443|     96|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  24.2k|    {
 1173|  24.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  24.1k|    {
 1426|  24.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  24.1k|    {
  433|  24.1k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|  24.2k|    {
 1594|  24.2k|        return has_value();
 1595|  24.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  48.5k|    {
  481|  48.5k|        return m_has_value;
  482|  48.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|     96|    {
 1600|     96|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     96|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     96|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     96|        return this->get_unexpected().error();
 1602|     96|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|     96|    {
  464|     96|        return m_unexpected;
  465|     96|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  24.1k|    {
 1659|  24.1k|        return std::move(value());
 1660|  24.1k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  24.1k|    {
 1623|  24.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  24.1k|        return this->get_value();
 1625|  24.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  24.1k|    {
  447|  24.1k|        return m_value;
  448|  24.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  4.60k|    {
 1472|  4.60k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    560|    {
 1472|    560|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    794|    {
  443|    794|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  7.89k|    {
 1173|  7.89k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  5.22k|    {
 1472|  5.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  5.22k|    {
  443|  5.22k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1593|  7.24k|    {
 1594|  7.24k|        return has_value();
 1595|  7.24k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  14.2k|    {
  481|  14.2k|        return m_has_value;
  482|  14.2k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1599|  2.53k|    {
 1600|  2.53k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  2.53k|        return this->get_unexpected().error();
 1602|  2.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  3.50k|    {
  464|  3.50k|        return m_unexpected;
  465|  3.50k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1425|  1.31k|    {
 1426|  1.31k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|  1.31k|    {
  433|  1.31k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.31k|    {
 1173|  1.31k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1622|  1.87k|    {
 1623|  1.87k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.87k|        return this->get_value();
 1625|  1.87k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|  1.87k|    {
  447|  1.87k|        return m_value;
  448|  1.87k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1593|    992|    {
 1594|    992|        return has_value();
 1595|    992|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|  2.63k|    {
  481|  2.63k|        return m_has_value;
  482|  2.63k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    992|    {
 1173|    992|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1658|  1.31k|    {
 1659|  1.31k|        return std::move(value());
 1660|  1.31k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1622|  1.31k|    {
 1623|  1.31k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.31k|        return this->get_value();
 1625|  1.31k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|  1.31k|    {
  447|  1.31k|        return m_value;
  448|  1.31k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|   231k|    {
 3330|   231k|        return m_sentinel;
 3331|   231k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  2.11k|    {
 1833|  2.11k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.11k|                                            std::forward<F>(f));
 1835|  2.11k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  2.11k|{
 1319|  2.11k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.11k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.11k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.11k|            return result(*std::forward<Exp>(exp));
 1323|  2.11k|        }
 1324|       |
 1325|  2.11k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.11k|        return result(unexpect, monostate{});
 1327|  2.11k|    }
 1328|  2.11k|    else {
 1329|  2.11k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.11k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.87k, False: 234]
  |  |  ------------------
  ------------------
 1331|  2.11k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.11k|                   : result(unexpect,
 1333|    234|                            trivial_invoke(std::forward<F>(f),
 1334|    234|                                           std::forward<Exp>(exp).error()));
 1335|  2.11k|    }
 1336|  2.11k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1425|  1.87k|    {
 1426|  1.87k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  1.87k|    {
  433|  1.87k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|    234|    {
 1482|    234|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1658|  1.87k|    {
 1659|  1.87k|        return std::move(value());
 1660|  1.87k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|   422k|    {
 3326|   422k|        return m_iterator;
 3327|   422k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1425|    992|    {
 1426|    992|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    992|    {
  433|    992|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    992|    {
 1833|    992|        return detail::transform_error_impl(std::move(*this),
 1834|    992|                                            std::forward<F>(f));
 1835|    992|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|    992|{
 1319|    992|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    992|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    992|        if (SCN_LIKELY(exp.has_value())) {
 1322|    992|            return result(*std::forward<Exp>(exp));
 1323|    992|        }
 1324|       |
 1325|    992|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    992|        return result(unexpect, monostate{});
 1327|    992|    }
 1328|    992|    else {
 1329|    992|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    992|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    992|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 992, False: 0]
  |  |  ------------------
  ------------------
 1331|    992|                   ? result(*std::forward<Exp>(exp))
 1332|    992|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    992|    }
 1336|    992|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|  1.98k|    {
  481|  1.98k|        return m_has_value;
  482|  1.98k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1658|    992|    {
 1659|    992|        return std::move(value());
 1660|    992|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1622|    992|    {
 1623|    992|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    992|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    992|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    992|        return this->get_value();
 1625|    992|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|    992|    {
  447|    992|        return m_value;
  448|    992|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1425|    992|    {
 1426|    992|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    992|    {
  433|    992|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    992|    {
 1173|    992|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1593|    992|    {
 1594|    992|        return has_value();
 1595|    992|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.98k|    {
  481|  1.98k|        return m_has_value;
  482|  1.98k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1658|    992|    {
 1659|    992|        return std::move(value());
 1660|    992|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1622|    992|    {
 1623|    992|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    992|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    992|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    992|        return this->get_value();
 1625|    992|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    992|    {
  447|    992|        return m_value;
  448|    992|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|    976|    {
 1833|    976|        return detail::transform_error_impl(std::move(*this),
 1834|    976|                                            std::forward<F>(f));
 1835|    976|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1318|    976|{
 1319|    976|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    976|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    976|        if (SCN_LIKELY(exp.has_value())) {
 1322|    976|            return result(*std::forward<Exp>(exp));
 1323|    976|        }
 1324|       |
 1325|    976|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    976|        return result(unexpect, monostate{});
 1327|    976|    }
 1328|    976|    else {
 1329|    976|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    976|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    976|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 976]
  |  |  ------------------
  ------------------
 1331|    976|                   ? result(*std::forward<Exp>(exp))
 1332|    976|                   : result(unexpect,
 1333|    976|                            trivial_invoke(std::forward<F>(f),
 1334|    976|                                           std::forward<Exp>(exp).error()));
 1335|    976|    }
 1336|    976|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1609|    976|    {
 1610|    976|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    976|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    976|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    976|        return std::move(this->get_unexpected().error());
 1612|    976|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3643|  1.62k|    {
 3644|  1.62k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3311|   148k|    {
 3312|   148k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  1.97k|    {
 2720|  1.97k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  1.97k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  1.97k|    {
 2701|  1.97k|        return decay_copy(t.begin());
 2702|  1.97k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1944|  4.27k|{
 1945|  4.27k|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.27k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  4.27k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3325|  1.97k|    {
 3326|  1.97k|        return m_iterator;
 3327|  1.97k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  1.97k|    {
 2777|  1.97k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  1.97k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  1.97k|    {
 2759|  1.97k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  1.97k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3329|  1.97k|    {
 3330|  1.97k|        return m_sentinel;
 3331|  1.97k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3311|  1.97k|    {
 3312|  1.97k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|     16|    {
 1472|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  621|     16|    {
  622|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  684|     16|    {
  685|     16|        scn::detail::construct_at(unexpected_ptr(),
  686|     16|                                  std::forward<Args>(args)...);
  687|     16|        m_has_value = false;
  688|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     48|    {
  714|     48|        return reinterpret_cast<unexpected<E>*>(
  715|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     16|    {
 1173|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1593|     16|    {
 1594|     16|        return has_value();
 1595|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     48|    {
  671|     48|        return m_has_value;
  672|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1599|     16|    {
 1600|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     16|        return this->get_unexpected().error();
 1602|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     16|    {
  654|     16|        return *unexpected_ptr();
  655|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  626|     16|    {
  627|     16|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 16]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     16|        else {
  631|     16|            destroy_unexpected();
  632|     16|        }
  633|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     16|    {
  696|     16|        scn::detail::destroy_at(unexpected_ptr());
  697|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1593|  11.7k|    {
 1594|  11.7k|        return has_value();
 1595|  11.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  22.9k|    {
  481|  22.9k|        return m_has_value;
  482|  22.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1599|  6.00k|    {
 1600|  6.00k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.00k|        return this->get_unexpected().error();
 1602|  6.00k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  6.00k|    {
  464|  6.00k|        return m_unexpected;
  465|  6.00k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1658|  4.35k|    {
 1659|  4.35k|        return std::move(value());
 1660|  4.35k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1622|  5.13k|    {
 1623|  5.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  5.13k|        return this->get_value();
 1625|  5.13k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  5.13k|    {
  447|  5.13k|        return m_value;
  448|  5.13k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  1.02k|    {
 1472|  1.02k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.13k|    {
  443|  1.13k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.9k|    {
 1173|  13.9k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  10.9k|    {
 1472|  10.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  10.9k|    {
  443|  10.9k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1593|  14.9k|    {
 1594|  14.9k|        return has_value();
 1595|  14.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  23.2k|    {
  481|  23.2k|        return m_has_value;
  482|  23.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1599|  5.55k|    {
 1600|  5.55k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  5.55k|        return this->get_unexpected().error();
 1602|  5.55k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.55k|    {
  464|  5.55k|        return m_unexpected;
  465|  5.55k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  3.58k|    {
 1426|  3.58k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.58k|    {
  433|  3.58k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.58k|    {
 1173|  3.58k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  1.87k|    {
 1623|  1.87k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.87k|        return this->get_value();
 1625|  1.87k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  1.87k|    {
  447|  1.87k|        return m_value;
  448|  1.87k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  2.67k|    {
 1594|  2.67k|        return has_value();
 1595|  2.67k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.17k|    {
  481|  7.17k|        return m_has_value;
  482|  7.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.67k|    {
 1173|  2.67k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.58k|    {
 1659|  3.58k|        return std::move(value());
 1660|  3.58k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.58k|    {
 1623|  3.58k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.58k|        return this->get_value();
 1625|  3.58k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.58k|    {
  447|  3.58k|        return m_value;
  448|  3.58k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|   125k|    {
 3217|   125k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 1.65k, False: 124k]
  ------------------
 3218|   125k|                   ? nullptr
 3219|   125k|                   : std::addressof(*ranges::begin(derived()));
 3220|   125k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   125k|    {
 3001|   125k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   125k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   125k|    {
 2974|   125k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   125k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|   125k|    {
 3335|   125k|        return m_iterator == m_sentinel;
 3336|   125k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|   249k|    {
 3176|   249k|        return static_cast<D&>(*this);
 3177|   249k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   124k|    {
 2720|   124k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   124k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   124k|    {
 2701|   124k|        return decay_copy(t.begin());
 2702|   124k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  1.87k|    {
 1426|  1.87k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.87k|    {
  433|  1.87k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1425|  2.67k|    {
 1426|  2.67k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.67k|    {
  433|  2.67k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.67k|    {
 1833|  2.67k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.67k|                                            std::forward<F>(f));
 1835|  2.67k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1318|  2.67k|{
 1319|  2.67k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.67k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.67k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.67k|            return result(*std::forward<Exp>(exp));
 1323|  2.67k|        }
 1324|       |
 1325|  2.67k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.67k|        return result(unexpect, monostate{});
 1327|  2.67k|    }
 1328|  2.67k|    else {
 1329|  2.67k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.67k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.67k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.67k, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.67k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.67k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.67k|    }
 1336|  2.67k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.34k|    {
  481|  5.34k|        return m_has_value;
  482|  5.34k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.67k|    {
 1659|  2.67k|        return std::move(value());
 1660|  2.67k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.67k|    {
 1623|  2.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.67k|        return this->get_value();
 1625|  2.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.67k|    {
  447|  2.67k|        return m_value;
  448|  2.67k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  2.67k|    {
 1426|  2.67k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.67k|    {
  433|  2.67k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.67k|    {
 1173|  2.67k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1593|  2.67k|    {
 1594|  2.67k|        return has_value();
 1595|  2.67k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.34k|    {
  481|  5.34k|        return m_has_value;
  482|  5.34k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.67k|    {
 1659|  2.67k|        return std::move(value());
 1660|  2.67k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.67k|    {
 1623|  2.67k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.67k|        return this->get_value();
 1625|  2.67k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.67k|    {
  447|  2.67k|        return m_value;
  448|  2.67k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1471|     24|    {
 1472|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  621|     24|    {
  622|     24|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  684|     24|    {
  685|     24|        scn::detail::construct_at(unexpected_ptr(),
  686|     24|                                  std::forward<Args>(args)...);
  687|     24|        m_has_value = false;
  688|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     72|    {
  714|     72|        return reinterpret_cast<unexpected<E>*>(
  715|     72|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     72|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     72|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     24|    {
 1173|     24|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1593|     24|    {
 1594|     24|        return has_value();
 1595|     24|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     72|    {
  671|     72|        return m_has_value;
  672|     72|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1599|     24|    {
 1600|     24|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     24|        return this->get_unexpected().error();
 1602|     24|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     24|    {
  654|     24|        return *unexpected_ptr();
  655|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  626|     24|    {
  627|     24|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 24]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     24|        else {
  631|     24|            destroy_unexpected();
  632|     24|        }
  633|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     24|    {
  696|     24|        scn::detail::destroy_at(unexpected_ptr());
  697|     24|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   111k|    {
 2851|   111k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   111k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   111k|    {
 2832|   111k|        return t.data();
 2833|   111k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  5.18k|    {
 1426|  5.18k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.18k|    {
  433|  5.18k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|   228k|    {
 1472|   228k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|   228k|    {
  443|   228k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   231k|    {
 1173|   231k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  2.76k|    {
 1426|  2.76k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  2.76k|    {
  433|  2.76k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1206|  2.97k|{
 1207|  2.97k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  2.97k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1832|    326|    {
 1833|    326|        return detail::transform_error_impl(std::move(*this),
 1834|    326|                                            std::forward<F>(f));
 1835|    326|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1318|    326|{
 1319|    326|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    326|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    326|        if (SCN_LIKELY(exp.has_value())) {
 1322|    326|            return result(*std::forward<Exp>(exp));
 1323|    326|        }
 1324|       |
 1325|    326|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    326|        return result(unexpect, monostate{});
 1327|    326|    }
 1328|    326|    else {
 1329|    326|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    326|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    326|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 326, False: 0]
  |  |  ------------------
  ------------------
 1331|    326|                   ? result(*std::forward<Exp>(exp))
 1332|    326|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    326|    }
 1336|    326|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1425|    326|    {
 1426|    326|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    326|    {
  433|    326|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    326|    {
 1173|    326|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    326|    {
 1594|    326|        return has_value();
 1595|    326|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    652|    {
  481|    652|        return m_has_value;
  482|    652|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1658|    326|    {
 1659|    326|        return std::move(value());
 1660|    326|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1622|    326|    {
 1623|    326|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    326|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    326|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    326|        return this->get_value();
 1625|    326|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    326|    {
  447|    326|        return m_value;
  448|    326|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1818|    652|    {
 1819|    652|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    652|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1318|    652|{
 1319|    652|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    652|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    652|        if (SCN_LIKELY(exp.has_value())) {
 1322|    652|            return result(*std::forward<Exp>(exp));
 1323|    652|        }
 1324|       |
 1325|    652|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    652|        return result(unexpect, monostate{});
 1327|    652|    }
 1328|    652|    else {
 1329|    652|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    652|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    652|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 652]
  |  |  ------------------
  ------------------
 1331|    652|                   ? result(*std::forward<Exp>(exp))
 1332|    652|                   : result(unexpect,
 1333|    652|                            trivial_invoke(std::forward<F>(f),
 1334|    652|                                           std::forward<Exp>(exp).error()));
 1335|    652|    }
 1336|    652|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1648|    786|    {
 1649|    786|        return value();
 1650|    786|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    320|    {
 2720|    320|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    320|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    320|    {
 2701|    320|        return decay_copy(t.begin());
 2702|    320|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    312|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|    914|    {
 1833|    914|        return detail::transform_error_impl(std::move(*this),
 1834|    914|                                            std::forward<F>(f));
 1835|    914|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|    914|{
 1319|    914|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    914|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    914|        if (SCN_LIKELY(exp.has_value())) {
 1322|    914|            return result(*std::forward<Exp>(exp));
 1323|    914|        }
 1324|       |
 1325|    914|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    914|        return result(unexpect, monostate{});
 1327|    914|    }
 1328|    914|    else {
 1329|    914|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    914|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    914|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 914, False: 0]
  |  |  ------------------
  ------------------
 1331|    914|                   ? result(*std::forward<Exp>(exp))
 1332|    914|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    914|    }
 1336|    914|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    914|    {
 1426|    914|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    914|    {
  433|    914|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    914|    {
 1173|    914|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    914|    {
 1594|    914|        return has_value();
 1595|    914|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.82k|    {
  481|  1.82k|        return m_has_value;
  482|  1.82k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|    914|    {
 1659|    914|        return std::move(value());
 1660|    914|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    914|    {
 1623|    914|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    914|        return this->get_value();
 1625|    914|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    914|    {
  447|    914|        return m_value;
  448|    914|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1818|    948|    {
 1819|    948|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    948|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|    948|{
 1319|    948|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    948|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    948|        if (SCN_LIKELY(exp.has_value())) {
 1322|    948|            return result(*std::forward<Exp>(exp));
 1323|    948|        }
 1324|       |
 1325|    948|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    948|        return result(unexpect, monostate{});
 1327|    948|    }
 1328|    948|    else {
 1329|    948|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    948|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    948|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 948]
  |  |  ------------------
  ------------------
 1331|    948|                   ? result(*std::forward<Exp>(exp))
 1332|    948|                   : result(unexpect,
 1333|    948|                            trivial_invoke(std::forward<F>(f),
 1334|    948|                                           std::forward<Exp>(exp).error()));
 1335|    948|    }
 1336|    948|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|    948|    {
 3644|    948|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  9.07k|    {
 1649|  9.07k|        return value();
 1650|  9.07k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6692|  2.98k|{
 6693|  2.98k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  2.98k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  2.98k|    auto start = begin;
 6697|  2.98k|    ++begin;
 6698|       |
 6699|  2.98k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.98k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|      0|        return {};
 6704|      0|    }
 6705|  2.98k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 354, False: 2.62k]
  ------------------
 6706|    354|        handler.on_charset_inverted();
 6707|    354|        ++begin;
 6708|    354|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 354]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|      0|            return {};
 6713|      0|        }
 6714|    354|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 6, False: 348]
  ------------------
 6715|      6|            handler.on_charset_single(char32_t{']'});
 6716|      6|            ++begin;
 6717|      6|        }
 6718|    354|    }
 6719|  2.62k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 0, False: 2.62k]
  ------------------
 6720|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|      0|    }
 6722|       |
 6723|   633k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 633k, False: 0]
  ------------------
 6724|   633k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   633k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 633k]
  |  |  ------------------
  ------------------
 6725|      0|            break;
 6726|      0|        }
 6727|       |
 6728|   633k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 2.98k, False: 630k]
  ------------------
 6729|  2.98k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  2.98k|        }
 6731|       |
 6732|   630k|        parse_presentation_set_literal(begin, end, handler);
 6733|   630k|    }
 6734|       |
 6735|      0|    SCN_UNLIKELY_ATTR
 6736|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6737|      0|    return {};
 6738|  2.98k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6656|   630k|{
 6657|   630k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|   630k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|   630k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 630k]
  |  |  ------------------
  ------------------
 6661|      0|        return;
 6662|      0|    }
 6663|       |
 6664|   630k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 630k, False: 0]
  |  Branch (6664:25): [True: 3.22k, False: 627k]
  |  Branch (6664:49): [True: 3.22k, False: 0]
  ------------------
 6665|   630k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 3.15k, False: 72]
  ------------------
 6666|  3.15k|        ++begin;
 6667|       |
 6668|  3.15k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  3.15k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.15k]
  |  |  ------------------
  ------------------
 6670|      0|            return;
 6671|      0|        }
 6672|       |
 6673|  3.15k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  3.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.15k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|      0|            return;
 6678|      0|        }
 6679|       |
 6680|  3.15k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  3.15k|        return;
 6682|  3.15k|    }
 6683|       |
 6684|   627k|    handler.on_charset_single(cp_first);
 6685|   627k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6632|   633k|{
 6633|   633k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   633k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   633k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|   633k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|   633k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 633k]
  |  |  |  Branch (859:45): [True: 0, False: 633k]
  |  |  |  Branch (859:45): [True: 0, False: 633k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|   633k|    const auto cp =
 6642|   633k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|   633k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   633k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 633k]
  |  |  ------------------
  ------------------
 6644|      0|        handler.on_error("Invalid encoding in format string");
 6645|      0|        return invalid_code_point;
 6646|      0|    }
 6647|       |
 6648|   633k|    begin += len;
 6649|   633k|    return cp;
 6650|   633k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  10.7k|    {
 1173|  10.7k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1425|  10.7k|    {
 1426|  10.7k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  432|  10.7k|    {
  433|  10.7k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6247|  13.1k|    {
 6248|  13.1k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6249|  13.1k|                charset_string_size};
 6250|  13.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1425|    786|    {
 1426|    786|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  432|    786|    {
  433|    786|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1425|  2.03k|    {
 1426|  2.03k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  2.03k|    {
  433|  2.03k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4028|   185k|{
 4029|   185k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4029:19): [Folded - Ignored]
  ------------------
 4030|   185k|        return decode_utf8_code_point_exhaustive_valid(input);
 4031|   185k|    }
 4032|   185k|    else if constexpr (sizeof(CharT) == 2) {
 4033|   185k|        return decode_utf16_code_point_exhaustive_valid(input);
 4034|   185k|    }
 4035|   185k|    else {
 4036|   185k|        SCN_EXPECT(input.size() == 1);
 4037|   185k|        return static_cast<char32_t>(input.front());
 4038|   185k|    }
 4039|   185k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3906|  20.6k|    const auto is_trailing_code_unit = [](char ch) {
 3907|  20.6k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|  20.6k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6182|    400|    {
 6183|    400|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    400|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    400|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6184|    400|        CharT r{};
 6185|    400|        std::memcpy(&r, m_data, m_size);
 6186|    400|        return r;
 6187|    400|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   439k|{
 3803|   439k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   439k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   439k|    }
 3806|   439k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|   439k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   439k|    }
 3809|   439k|    else {
 3810|       |        // utf-32
 3811|   439k|        static_assert(sizeof(U) == 4);
 3812|   439k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   439k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   439k|        return 1;
 3814|   439k|    }
 3815|   439k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   401k|{
 4009|   401k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|   401k|        return decode_utf8_code_point_exhaustive(input);
 4011|   401k|    }
 4012|   401k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|   401k|        return decode_utf16_code_point_exhaustive(input);
 4014|   401k|    }
 4015|   401k|    else {
 4016|   401k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   401k|        auto cp = static_cast<char32_t>(input.front());
 4018|   401k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   401k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.1k, False: 325k]
  |  |  ------------------
  ------------------
 4019|  76.1k|            return invalid_code_point;
 4020|  76.1k|        }
 4021|   325k|        return cp;
 4022|   401k|    }
 4023|   401k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  39.0k|{
 3695|  39.0k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  39.0k|                                          decltype(first), decltype(last)> &&
 3697|  39.0k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  39.0k|        return {first, last};
 3699|  39.0k|    }
 3700|  39.0k|    else {
 3701|  39.0k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  39.0k|                                       to_address(first), to_address(last)))};
 3703|  39.0k|    }
 3704|  39.0k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   117k|{
  322|   117k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   117k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   118k|{
  302|   118k|    return p;
  303|   118k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  6.76k|{
 3726|  6.76k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  6.76k|                      typename std::basic_string_view<CharT>::iterator,
 3728|  6.76k|                      decltype(it)> &&
 3729|  6.76k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  6.76k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  6.76k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  6.76k|        return it;
 3732|  6.76k|    }
 3733|  6.76k|    else {
 3734|  6.76k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  6.76k|    }
 3736|  6.76k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  1.88k|{
  322|  1.88k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.88k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  16.2k|    {
 3342|  16.2k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  16.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|    126|    {
 1472|    126|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    126|    {
  443|    126|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  20.0k|    {
 1173|  20.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  19.9k|    {
 1426|  19.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  19.9k|    {
  433|  19.9k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1593|  5.58k|    {
 1594|  5.58k|        return has_value();
 1595|  5.58k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  34.5k|    {
  481|  34.5k|        return m_has_value;
  482|  34.5k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  14.3k|    {
 1623|  14.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  14.3k|        return this->get_value();
 1625|  14.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  14.3k|    {
  447|  14.3k|        return m_value;
  448|  14.3k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1425|  4.07k|    {
 1426|  4.07k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  4.07k|    {
  433|  4.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  4.28k|    {
 1173|  4.28k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    210|    {
 1472|    210|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    210|    {
  443|    210|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1593|  1.16k|    {
 1594|  1.16k|        return has_value();
 1595|  1.16k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  7.40k|    {
  481|  7.40k|        return m_has_value;
  482|  7.40k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1622|  2.90k|    {
 1623|  2.90k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.90k|        return this->get_value();
 1625|  2.90k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.90k|    {
  447|  2.90k|        return m_value;
  448|  2.90k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  1.89k|    {
 1833|  1.89k|        return detail::transform_error_impl(std::move(*this),
 1834|  1.89k|                                            std::forward<F>(f));
 1835|  1.89k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  1.89k|{
 1319|  1.89k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.89k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.89k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.89k|            return result(*std::forward<Exp>(exp));
 1323|  1.89k|        }
 1324|       |
 1325|  1.89k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.89k|        return result(unexpect, monostate{});
 1327|  1.89k|    }
 1328|  1.89k|    else {
 1329|  1.89k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.89k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.89k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.89k, False: 0]
  |  |  ------------------
  ------------------
 1331|  1.89k|                   ? result(*std::forward<Exp>(exp))
 1332|  1.89k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  1.89k|    }
 1336|  1.89k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1658|  2.90k|    {
 1659|  2.90k|        return std::move(value());
 1660|  2.90k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1425|  2.24k|    {
 1426|  2.24k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  2.24k|    {
  433|  2.24k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  5.42k|    {
 1173|  5.42k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1609|    210|    {
 1610|    210|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    210|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    210|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    210|        return std::move(this->get_unexpected().error());
 1612|    210|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|    210|    {
  464|    210|        return m_unexpected;
  465|    210|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|  1.00k|    {
 1482|  1.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  3.18k|    {
  443|  3.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  7.29k|    {
 1173|  7.29k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  7.29k|    {
 1426|  7.29k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  7.29k|    {
  433|  7.29k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  8.81k|    {
 1833|  8.81k|        return detail::transform_error_impl(std::move(*this),
 1834|  8.81k|                                            std::forward<F>(f));
 1835|  8.81k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  8.81k|{
 1319|  8.81k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  8.81k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  8.81k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  8.81k|            return result(*std::forward<Exp>(exp));
 1323|  8.81k|        }
 1324|       |
 1325|  8.81k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  8.81k|        return result(unexpect, monostate{});
 1327|  8.81k|    }
 1328|  8.81k|    else {
 1329|  8.81k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  8.81k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.81k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.81k, False: 0]
  |  |  ------------------
  ------------------
 1331|  8.81k|                   ? result(*std::forward<Exp>(exp))
 1332|  8.81k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  8.81k|    }
 1336|  8.81k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  14.3k|    {
 1659|  14.3k|        return std::move(value());
 1660|  14.3k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|    126|    {
 1610|    126|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    126|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    126|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    126|        return std::move(this->get_unexpected().error());
 1612|    126|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    126|    {
  464|    126|        return m_unexpected;
  465|    126|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|    936|    {
 1482|    936|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|  7.29k|    {
 1594|  7.29k|        return has_value();
 1595|  7.29k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  14.5k|    {
  481|  14.5k|        return m_has_value;
  482|  14.5k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  7.29k|    {
 1659|  7.29k|        return std::move(value());
 1660|  7.29k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  7.29k|    {
 1623|  7.29k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  7.29k|        return this->get_value();
 1625|  7.29k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  7.29k|    {
  447|  7.29k|        return m_value;
  448|  7.29k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  2.18k|    {
 1472|  2.18k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|    428|    {
 1472|    428|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    638|    {
  443|    638|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  4.62k|    {
 1173|  4.62k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  2.97k|    {
 1472|  2.97k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  2.97k|    {
  443|  2.97k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1593|  4.27k|    {
 1594|  4.27k|        return has_value();
 1595|  4.27k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  8.51k|    {
  481|  8.51k|        return m_has_value;
  482|  8.51k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1599|  1.65k|    {
 1600|  1.65k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.65k|        return this->get_unexpected().error();
 1602|  1.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  2.22k|    {
  464|  2.22k|        return m_unexpected;
  465|  2.22k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1425|    788|    {
 1426|    788|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    788|    {
  433|    788|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    788|    {
 1173|    788|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1622|  1.01k|    {
 1623|  1.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  1.01k|        return this->get_value();
 1625|  1.01k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|  1.01k|    {
  447|  1.01k|        return m_value;
  448|  1.01k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1593|    570|    {
 1594|    570|        return has_value();
 1595|    570|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|  1.57k|    {
  481|  1.57k|        return m_has_value;
  482|  1.57k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    570|    {
 1173|    570|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1658|    788|    {
 1659|    788|        return std::move(value());
 1660|    788|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1622|    788|    {
 1623|    788|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    788|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    788|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    788|        return this->get_value();
 1625|    788|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|    788|    {
  447|    788|        return m_value;
  448|    788|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  63.1k|    {
 3330|  63.1k|        return m_sentinel;
 3331|  63.1k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1832|  1.22k|    {
 1833|  1.22k|        return detail::transform_error_impl(std::move(*this),
 1834|  1.22k|                                            std::forward<F>(f));
 1835|  1.22k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1318|  1.22k|{
 1319|  1.22k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.22k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.22k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.22k|            return result(*std::forward<Exp>(exp));
 1323|  1.22k|        }
 1324|       |
 1325|  1.22k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.22k|        return result(unexpect, monostate{});
 1327|  1.22k|    }
 1328|  1.22k|    else {
 1329|  1.22k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.22k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.01k, False: 210]
  |  |  ------------------
  ------------------
 1331|  1.22k|                   ? result(*std::forward<Exp>(exp))
 1332|  1.22k|                   : result(unexpect,
 1333|    210|                            trivial_invoke(std::forward<F>(f),
 1334|    210|                                           std::forward<Exp>(exp).error()));
 1335|  1.22k|    }
 1336|  1.22k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1425|  1.01k|    {
 1426|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  1.01k|    {
  433|  1.01k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1481|    210|    {
 1482|    210|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1658|  1.01k|    {
 1659|  1.01k|        return std::move(value());
 1660|  1.01k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  67.9k|    {
 3326|  67.9k|        return m_iterator;
 3327|  67.9k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1425|    570|    {
 1426|    570|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    570|    {
  433|    570|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    570|    {
 1833|    570|        return detail::transform_error_impl(std::move(*this),
 1834|    570|                                            std::forward<F>(f));
 1835|    570|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|    570|{
 1319|    570|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    570|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    570|        if (SCN_LIKELY(exp.has_value())) {
 1322|    570|            return result(*std::forward<Exp>(exp));
 1323|    570|        }
 1324|       |
 1325|    570|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    570|        return result(unexpect, monostate{});
 1327|    570|    }
 1328|    570|    else {
 1329|    570|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    570|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    570|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 570, False: 0]
  |  |  ------------------
  ------------------
 1331|    570|                   ? result(*std::forward<Exp>(exp))
 1332|    570|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    570|    }
 1336|    570|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|  1.14k|    {
  481|  1.14k|        return m_has_value;
  482|  1.14k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1658|    570|    {
 1659|    570|        return std::move(value());
 1660|    570|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1622|    570|    {
 1623|    570|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    570|        return this->get_value();
 1625|    570|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|    570|    {
  447|    570|        return m_value;
  448|    570|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1425|    570|    {
 1426|    570|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    570|    {
  433|    570|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    570|    {
 1173|    570|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1593|    570|    {
 1594|    570|        return has_value();
 1595|    570|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.14k|    {
  481|  1.14k|        return m_has_value;
  482|  1.14k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1658|    570|    {
 1659|    570|        return std::move(value());
 1660|    570|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1622|    570|    {
 1623|    570|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    570|        return this->get_value();
 1625|    570|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    570|    {
  447|    570|        return m_value;
  448|    570|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1832|    570|    {
 1833|    570|        return detail::transform_error_impl(std::move(*this),
 1834|    570|                                            std::forward<F>(f));
 1835|    570|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1318|    570|{
 1319|    570|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    570|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    570|        if (SCN_LIKELY(exp.has_value())) {
 1322|    570|            return result(*std::forward<Exp>(exp));
 1323|    570|        }
 1324|       |
 1325|    570|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    570|        return result(unexpect, monostate{});
 1327|    570|    }
 1328|    570|    else {
 1329|    570|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    570|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    570|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 570]
  |  |  ------------------
  ------------------
 1331|    570|                   ? result(*std::forward<Exp>(exp))
 1332|    570|                   : result(unexpect,
 1333|    570|                            trivial_invoke(std::forward<F>(f),
 1334|    570|                                           std::forward<Exp>(exp).error()));
 1335|    570|    }
 1336|    570|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1609|    570|    {
 1610|    570|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    570|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    570|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|    570|        return std::move(this->get_unexpected().error());
 1612|    570|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3643|  1.00k|    {
 3644|  1.00k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3311|  24.1k|    {
 3312|  24.1k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    380|    {
 2720|    380|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    380|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    380|    {
 2701|    380|        return decay_copy(t.begin());
 2702|    380|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1944|    950|{
 1945|    950|    return SCN_FWD(t);
  ------------------
  |  |  930|    950|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|    950|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3325|    380|    {
 3326|    380|        return m_iterator;
 3327|    380|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|    380|    {
 2777|    380|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|    380|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|    380|    {
 2759|    380|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|    380|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3329|    380|    {
 3330|    380|        return m_sentinel;
 3331|    380|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3311|    380|    {
 3312|    380|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1593|  5.64k|    {
 1594|  5.64k|        return has_value();
 1595|  5.64k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  10.8k|    {
  481|  10.8k|        return m_has_value;
  482|  10.8k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1599|  2.96k|    {
 1600|  2.96k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  2.96k|        return this->get_unexpected().error();
 1602|  2.96k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  2.96k|    {
  464|  2.96k|        return m_unexpected;
  465|  2.96k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1658|  2.24k|    {
 1659|  2.24k|        return std::move(value());
 1660|  2.24k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1622|  2.24k|    {
 1623|  2.24k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.24k|        return this->get_value();
 1625|  2.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.24k|    {
  447|  2.24k|        return m_value;
  448|  2.24k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  1.05k|    {
 1472|  1.05k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.18k|    {
  443|  1.18k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  17.8k|    {
 1173|  17.8k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  11.1k|    {
 1472|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  11.1k|    {
  443|  11.1k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1593|  18.7k|    {
 1594|  18.7k|        return has_value();
 1595|  18.7k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  30.9k|    {
  481|  30.9k|        return m_has_value;
  482|  30.9k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1599|  5.69k|    {
 1600|  5.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  5.69k|        return this->get_unexpected().error();
 1602|  5.69k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.69k|    {
  464|  5.69k|        return m_unexpected;
  465|  5.69k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  3.70k|    {
 1426|  3.70k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.70k|    {
  433|  3.70k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.70k|    {
 1173|  3.70k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  5.53k|    {
 1623|  5.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  5.53k|        return this->get_value();
 1625|  5.53k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  5.53k|    {
  447|  5.53k|        return m_value;
  448|  5.53k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  2.77k|    {
 1594|  2.77k|        return has_value();
 1595|  2.77k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.41k|    {
  481|  7.41k|        return m_has_value;
  482|  7.41k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.77k|    {
 1173|  2.77k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.70k|    {
 1659|  3.70k|        return std::move(value());
 1660|  3.70k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.70k|    {
 1623|  3.70k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.70k|        return this->get_value();
 1625|  3.70k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.70k|    {
  447|  3.70k|        return m_value;
  448|  3.70k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  5.66k|    {
 1833|  5.66k|        return detail::transform_error_impl(std::move(*this),
 1834|  5.66k|                                            std::forward<F>(f));
 1835|  5.66k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  5.66k|{
 1319|  5.66k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  5.66k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  5.66k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  5.66k|            return result(*std::forward<Exp>(exp));
 1323|  5.66k|        }
 1324|       |
 1325|  5.66k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  5.66k|        return result(unexpect, monostate{});
 1327|  5.66k|    }
 1328|  5.66k|    else {
 1329|  5.66k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  5.66k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.66k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.53k, False: 126]
  |  |  ------------------
  ------------------
 1331|  5.66k|                   ? result(*std::forward<Exp>(exp))
 1332|  5.66k|                   : result(unexpect,
 1333|    126|                            trivial_invoke(std::forward<F>(f),
 1334|    126|                                           std::forward<Exp>(exp).error()));
 1335|  5.66k|    }
 1336|  5.66k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  5.53k|    {
 1426|  5.53k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.53k|    {
  433|  5.53k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|    126|    {
 1482|    126|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|  5.53k|    {
 1659|  5.53k|        return std::move(value());
 1660|  5.53k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1425|  2.77k|    {
 1426|  2.77k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.77k|    {
  433|  2.77k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.77k|    {
 1833|  2.77k|        return detail::transform_error_impl(std::move(*this),
 1834|  2.77k|                                            std::forward<F>(f));
 1835|  2.77k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1318|  2.77k|{
 1319|  2.77k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.77k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.77k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.77k|            return result(*std::forward<Exp>(exp));
 1323|  2.77k|        }
 1324|       |
 1325|  2.77k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.77k|        return result(unexpect, monostate{});
 1327|  2.77k|    }
 1328|  2.77k|    else {
 1329|  2.77k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.77k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.77k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.77k, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.77k|                   ? result(*std::forward<Exp>(exp))
 1332|  2.77k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.77k|    }
 1336|  2.77k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.55k|    {
  481|  5.55k|        return m_has_value;
  482|  5.55k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.77k|    {
 1659|  2.77k|        return std::move(value());
 1660|  2.77k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.77k|    {
 1623|  2.77k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.77k|        return this->get_value();
 1625|  2.77k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.77k|    {
  447|  2.77k|        return m_value;
  448|  2.77k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  2.77k|    {
 1426|  2.77k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.77k|    {
  433|  2.77k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.77k|    {
 1173|  2.77k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1593|  2.77k|    {
 1594|  2.77k|        return has_value();
 1595|  2.77k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.55k|    {
  481|  5.55k|        return m_has_value;
  482|  5.55k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  2.77k|    {
 1659|  2.77k|        return std::move(value());
 1660|  2.77k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  2.77k|    {
 1623|  2.77k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.77k|        return this->get_value();
 1625|  2.77k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.77k|    {
  447|  2.77k|        return m_value;
  448|  2.77k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1471|     20|    {
 1472|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  621|     20|    {
  622|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  684|     20|    {
  685|     20|        scn::detail::construct_at(unexpected_ptr(),
  686|     20|                                  std::forward<Args>(args)...);
  687|     20|        m_has_value = false;
  688|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     60|    {
  714|     60|        return reinterpret_cast<unexpected<E>*>(
  715|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|     20|    {
 1173|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1593|     20|    {
 1594|     20|        return has_value();
 1595|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|     60|    {
  671|     60|        return m_has_value;
  672|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1599|     20|    {
 1600|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|     20|        return this->get_unexpected().error();
 1602|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     20|    {
  654|     20|        return *unexpected_ptr();
  655|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|     20|    {
  627|     20|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 20]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     20|        else {
  631|     20|            destroy_unexpected();
  632|     20|        }
  633|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     20|    {
  696|     20|        scn::detail::destroy_at(unexpected_ptr());
  697|     20|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  10.3k|    {
 2851|  10.3k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  10.3k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  10.3k|    {
 2832|  10.3k|        return t.data();
 2833|  10.3k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|  10.8k|    {
 3217|  10.8k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 2.50k, False: 8.31k]
  ------------------
 3218|  10.8k|                   ? nullptr
 3219|  10.8k|                   : std::addressof(*ranges::begin(derived()));
 3220|  10.8k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  10.8k|    {
 3001|  10.8k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  10.8k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  10.8k|    {
 2974|  10.8k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  10.8k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|  10.8k|    {
 3335|  10.8k|        return m_iterator == m_sentinel;
 3336|  10.8k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|  19.1k|    {
 3176|  19.1k|        return static_cast<D&>(*this);
 3177|  19.1k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  8.31k|    {
 2720|  8.31k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  8.31k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  8.31k|    {
 2701|  8.31k|        return decay_copy(t.begin());
 2702|  8.31k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  1.43k|    {
 1426|  1.43k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.43k|    {
  433|  1.43k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1832|    218|    {
 1833|    218|        return detail::transform_error_impl(std::move(*this),
 1834|    218|                                            std::forward<F>(f));
 1835|    218|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1318|    218|{
 1319|    218|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    218|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    218|        if (SCN_LIKELY(exp.has_value())) {
 1322|    218|            return result(*std::forward<Exp>(exp));
 1323|    218|        }
 1324|       |
 1325|    218|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    218|        return result(unexpect, monostate{});
 1327|    218|    }
 1328|    218|    else {
 1329|    218|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    218|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    218|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 218, False: 0]
  |  |  ------------------
  ------------------
 1331|    218|                   ? result(*std::forward<Exp>(exp))
 1332|    218|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    218|    }
 1336|    218|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1425|    218|    {
 1426|    218|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    218|    {
  433|    218|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    218|    {
 1173|    218|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    218|    {
 1594|    218|        return has_value();
 1595|    218|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    436|    {
  481|    436|        return m_has_value;
  482|    436|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1658|    218|    {
 1659|    218|        return std::move(value());
 1660|    218|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1622|    218|    {
 1623|    218|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    218|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    218|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    218|        return this->get_value();
 1625|    218|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    218|    {
  447|    218|        return m_value;
  448|    218|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1818|    436|    {
 1819|    436|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    436|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1318|    436|{
 1319|    436|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    436|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    436|        if (SCN_LIKELY(exp.has_value())) {
 1322|    436|            return result(*std::forward<Exp>(exp));
 1323|    436|        }
 1324|       |
 1325|    436|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    436|        return result(unexpect, monostate{});
 1327|    436|    }
 1328|    436|    else {
 1329|    436|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    436|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    436|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 436]
  |  |  ------------------
  ------------------
 1331|    436|                   ? result(*std::forward<Exp>(exp))
 1332|    436|                   : result(unexpect,
 1333|    436|                            trivial_invoke(std::forward<F>(f),
 1334|    436|                                           std::forward<Exp>(exp).error()));
 1335|    436|    }
 1336|    436|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|     28|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|    190|    {
 2720|    190|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|    190|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|    190|    {
 2701|    190|        return decay_copy(t.begin());
 2702|    190|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|    930|    {
 1833|    930|        return detail::transform_error_impl(std::move(*this),
 1834|    930|                                            std::forward<F>(f));
 1835|    930|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|    930|{
 1319|    930|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    930|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    930|        if (SCN_LIKELY(exp.has_value())) {
 1322|    930|            return result(*std::forward<Exp>(exp));
 1323|    930|        }
 1324|       |
 1325|    930|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    930|        return result(unexpect, monostate{});
 1327|    930|    }
 1328|    930|    else {
 1329|    930|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    930|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    930|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 930, False: 0]
  |  |  ------------------
  ------------------
 1331|    930|                   ? result(*std::forward<Exp>(exp))
 1332|    930|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|    930|    }
 1336|    930|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|    930|    {
 1426|    930|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    930|    {
  433|    930|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|    930|    {
 1173|    930|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|    930|    {
 1594|    930|        return has_value();
 1595|    930|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.86k|    {
  481|  1.86k|        return m_has_value;
  482|  1.86k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|    930|    {
 1659|    930|        return std::move(value());
 1660|    930|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|    930|    {
 1623|    930|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    930|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    930|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|    930|        return this->get_value();
 1625|    930|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    930|    {
  447|    930|        return m_value;
  448|    930|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1818|    936|    {
 1819|    936|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|    936|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|    936|{
 1319|    936|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|    936|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|    936|        if (SCN_LIKELY(exp.has_value())) {
 1322|    936|            return result(*std::forward<Exp>(exp));
 1323|    936|        }
 1324|       |
 1325|    936|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|    936|        return result(unexpect, monostate{});
 1327|    936|    }
 1328|    936|    else {
 1329|    936|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|    936|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    936|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 936]
  |  |  ------------------
  ------------------
 1331|    936|                   ? result(*std::forward<Exp>(exp))
 1332|    936|                   : result(unexpect,
 1333|    936|                            trivial_invoke(std::forward<F>(f),
 1334|    936|                                           std::forward<Exp>(exp).error()));
 1335|    936|    }
 1336|    936|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|    936|    {
 3644|    936|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.73k|    {
 1649|  2.73k|        return value();
 1650|  2.73k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6247|    852|    {
 6248|    852|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6249|    852|                charset_string_size};
 6250|    852|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|  1.80k|{
 3650|  1.80k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.80k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|  75.9k|    {
 5462|  75.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.9k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  75.9k|        return static_cast<std::size_t>(m_desc &
 5467|  75.9k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  75.9k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|   134k|    {
 5487|   134k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|   134k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|  58.8k|    {
 5430|  58.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.8k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  58.8k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 58.8k]
  |  |  ------------------
  ------------------
 5438|     68|            return {};
 5439|     68|        }
 5440|       |
 5441|  58.8k|        const auto t = type(id);
 5442|  58.8k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.50k, False: 57.3k]
  |  |  ------------------
  ------------------
 5443|  1.50k|            return {};
 5444|  1.50k|        }
 5445|       |
 5446|  57.3k|        basic_scan_arg<Context> arg;
 5447|  57.3k|        arg.m_type = t;
 5448|  57.3k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 57.3k, False: 0]
  ------------------
 5449|  57.3k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  57.3k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  57.3k|        return arg;
 5455|  58.8k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|  58.8k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  75.6k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|  58.8k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  58.8k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  58.8k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  58.8k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  58.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|  57.3k|    {
 5491|  57.3k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  57.3k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|   113k|    {
 5243|   113k|        return m_type != detail::arg_type::none_type;
 5244|   113k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  5.86k|{
 8413|  5.86k|#define SCN_VISIT(Type)                                         \
 8414|  5.86k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  5.86k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  5.86k|    }                                                           \
 8417|  5.86k|    else {                                                      \
 8418|  5.86k|        return vis(monostate_val);                              \
 8419|  5.86k|    }
 8420|       |
 8421|  5.86k|    monostate monostate_val{};
 8422|       |
 8423|  5.86k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 5.86k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 5.86k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|    652|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 652, False: 5.21k]
  ------------------
 8429|    652|            SCN_VISIT(int);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.86k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 5.86k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.86k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.86k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|    652|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 652, False: 5.21k]
  ------------------
 8439|    652|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.86k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 5.86k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|    652|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 652, False: 5.21k]
  ------------------
 8445|    652|            SCN_VISIT(void*);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8446|    652|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 652, False: 5.21k]
  ------------------
 8447|    652|            SCN_VISIT(bool);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8448|    652|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 652, False: 5.21k]
  ------------------
 8449|    652|            SCN_VISIT(char);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.86k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 5.86k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.86k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|    652|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 652, False: 5.21k]
  ------------------
 8457|    652|            SCN_VISIT(double);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.86k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|    652|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 652, False: 5.21k]
  ------------------
 8461|    652|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8462|    652|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 652, False: 5.21k]
  ------------------
 8463|    652|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.86k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|    652|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 652, False: 5.21k]
  ------------------
 8467|    652|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|    652|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    652|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    652|    }                                                           \
  |  | 8417|    652|    else {                                                      \
  |  | 8418|    652|        return vis(monostate_val);                              \
  |  | 8419|    652|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.86k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 5.86k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 5.86k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 5.86k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 5.86k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  5.86k|            SCN_CLANG_POP
 8491|  5.86k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  1.97k|    {
 1833|  1.97k|        return detail::transform_error_impl(std::move(*this),
 1834|  1.97k|                                            std::forward<F>(f));
 1835|  1.97k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  1.97k|{
 1319|  1.97k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  1.97k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  1.97k|        if (SCN_LIKELY(exp.has_value())) {
 1322|  1.97k|            return result(*std::forward<Exp>(exp));
 1323|  1.97k|        }
 1324|       |
 1325|  1.97k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  1.97k|        return result(unexpect, monostate{});
 1327|  1.97k|    }
 1328|  1.97k|    else {
 1329|  1.97k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  1.97k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.87k, False: 104]
  |  |  ------------------
  ------------------
 1331|  1.97k|                   ? result(*std::forward<Exp>(exp))
 1332|  1.97k|                   : result(unexpect,
 1333|    104|                            trivial_invoke(std::forward<F>(f),
 1334|    104|                                           std::forward<Exp>(exp).error()));
 1335|  1.97k|    }
 1336|  1.97k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|    104|    {
 1482|    104|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|  1.87k|    {
 1659|  1.87k|        return std::move(value());
 1660|  1.87k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|  75.8k|    {
 5541|  75.8k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|  75.8k|    {
 8052|  75.8k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  75.8k|{
 7040|  75.8k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  75.8k|    handler.check_args_exhausted();
 7042|  75.8k|    return handler.get_error();
 7043|  75.8k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  75.8k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  75.8k|    auto begin = format.data();
 7009|  75.8k|    auto it = begin;
 7010|  75.8k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   278k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 272k, False: 6.40k]
  ------------------
 7013|   272k|        const auto ch = *it++;
 7014|   272k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 80.2k, False: 192k]
  ------------------
 7015|  80.2k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  80.2k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  80.2k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 68.1k, False: 12.0k]
  ------------------
 7019|  68.1k|                return;
 7020|  68.1k|            }
 7021|  80.2k|        }
 7022|   192k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 2.62k, False: 189k]
  ------------------
 7023|  2.62k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  4.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.29k, False: 1.33k]
  |  |  |  Branch (859:45): [True: 384, False: 2.24k]
  |  |  |  Branch (859:45): [True: 908, False: 1.33k]
  |  |  ------------------
  ------------------
 7024|  1.29k|                handler.on_error("Unmatched '}' in format string");
 7025|  1.29k|                return;
 7026|  1.29k|            }
 7027|       |
 7028|  1.33k|            handler.on_literal_text(begin, it);
 7029|  1.33k|            begin = ++it;
 7030|  1.33k|        }
 7031|   272k|    }
 7032|       |
 7033|  6.40k|    handler.on_literal_text(begin, end);
 7034|  6.40k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|  80.2k|{
 6938|  80.2k|    struct id_adapter {
 6939|  80.2k|        constexpr void operator()()
 6940|  80.2k|        {
 6941|  80.2k|            arg_id = handler.on_arg_id();
 6942|  80.2k|        }
 6943|  80.2k|        constexpr void operator()(std::size_t id)
 6944|  80.2k|        {
 6945|  80.2k|            arg_id = handler.on_arg_id(id);
 6946|  80.2k|        }
 6947|       |
 6948|  80.2k|        constexpr void on_error(const char* msg)
 6949|  80.2k|        {
 6950|  80.2k|            SCN_UNLIKELY_ATTR
 6951|  80.2k|            handler.on_error(msg);
 6952|  80.2k|        }
 6953|       |
 6954|  80.2k|        Handler& handler;
 6955|  80.2k|        std::size_t arg_id;
 6956|  80.2k|    };
 6957|       |
 6958|  80.2k|    ++begin;
 6959|  80.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 80.1k]
  |  |  ------------------
  ------------------
 6960|    100|        handler.on_error("Unexpected end of replacement field");
 6961|    100|        return begin;
 6962|    100|    }
 6963|       |
 6964|  80.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 5.92k, False: 74.1k]
  ------------------
 6965|  5.92k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|  5.92k|    }
 6967|  74.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 5.15k, False: 69.0k]
  ------------------
 6968|  5.15k|        handler.on_literal_text(begin, begin + 1);
 6969|  5.15k|    }
 6970|  69.0k|    else {
 6971|  69.0k|        auto adapter = id_adapter{handler, 0};
 6972|  69.0k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  69.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  69.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 68.9k]
  |  |  ------------------
  ------------------
 6975|    110|            handler.on_error("Missing '}' in format string");
 6976|    110|            return begin;
 6977|    110|        }
 6978|       |
 6979|  68.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 140, False: 68.7k]
  ------------------
 6980|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|    140|        }
 6982|  68.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 52.8k, False: 15.9k]
  ------------------
 6983|  52.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 52.8k]
  |  |  ------------------
  ------------------
 6984|     74|                handler.on_error("Unexpected end of replacement field");
 6985|     74|                return begin;
 6986|     74|            }
 6987|  52.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  52.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.03k, False: 49.7k]
  |  |  |  Branch (859:45): [True: 0, False: 52.8k]
  |  |  |  Branch (859:45): [True: 3.03k, False: 49.7k]
  |  |  ------------------
  ------------------
 6989|  3.03k|                handler.on_error("Unknown format specifier");
 6990|  3.03k|                return begin;
 6991|  3.03k|            }
 6992|  52.8k|        }
 6993|  15.9k|        else {
 6994|  15.9k|            SCN_UNLIKELY_ATTR
 6995|  15.9k|            handler.on_error("Missing '}' in format string");
 6996|  15.9k|            return begin;
 6997|  15.9k|        }
 6998|  68.9k|    }
 6999|  60.9k|    return begin + 1;
 7000|  80.1k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|  58.8k|    {
 8035|  58.8k|        return m_args.get(id);
 8036|  58.8k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8039|  6.06k|    {
 8040|  6.06k|        return m_args;
 8041|  6.06k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|  55.5k|    {
 8045|  55.5k|        return m_locale;
 8046|  55.5k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|  55.7k|    {
 5562|  55.7k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 55.7k]
  |  |  ------------------
  ------------------
 5563|     42|            on_error(
 5564|     42|                "Cannot switch from manual to automatic argument indexing");
 5565|     42|            return 0;
 5566|     42|        }
 5567|       |
 5568|  55.7k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  55.7k|        do_check_arg_id(id);
 5570|  55.7k|        return id;
 5571|  55.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5585|    112|    {
 5586|    112|        return detail::handle_error(
 5587|    112|            scan_error{scan_error::invalid_format_string, msg});
 5588|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|  58.8k|{
 6050|  58.8k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  58.8k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  58.8k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  69.0k|{
 6439|  69.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  69.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  69.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 69.0k, False: 0]
  |  Branch (6440:26): [True: 19.1k, False: 49.8k]
  ------------------
 6441|  19.1k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|  19.1k|    }
 6443|       |
 6444|  49.8k|    handler();
 6445|  49.8k|    return begin;
 6446|  69.0k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6408|  19.1k|{
 6409|  19.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6410|       |
 6411|  19.1k|    CharT c = *begin;
 6412|  19.1k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6412:9): [True: 15.6k, False: 3.57k]
  |  Branch (6412:27): [True: 178, False: 3.39k]
  ------------------
 6413|  15.7k|        handler.on_error("Invalid argument ID");
 6414|  15.7k|        return begin;
 6415|  15.7k|    }
 6416|       |
 6417|  3.39k|    int idx = 0;
 6418|  3.39k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6418:9): [True: 372, False: 3.02k]
  ------------------
 6419|    372|        idx = parse_simple_int(begin, end);
 6420|    372|    }
 6421|  3.02k|    else {
 6422|  3.02k|        ++begin;
 6423|  3.02k|    }
 6424|       |
 6425|  3.39k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6425:9): [True: 110, False: 3.28k]
  |  Branch (6425:26): [True: 3.14k, False: 140]
  |  Branch (6425:50): [True: 120, False: 3.02k]
  ------------------
 6426|    230|        handler.on_error("Invalid argument ID");
 6427|    230|        return begin;
 6428|    230|    }
 6429|  3.16k|    handler(idx);
 6430|       |
 6431|  3.16k|    return begin;
 6432|  3.39k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6949|  16.0k|        {
 6950|  16.0k|            SCN_UNLIKELY_ATTR
 6951|  16.0k|            handler.on_error(msg);
 6952|  16.0k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6387|  12.9k|{
 6388|  12.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6389|  12.9k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6390|       |
 6391|  12.9k|    unsigned long long value = 0;
 6392|  57.2k|    do {
 6393|  57.2k|        value *= 10;
 6394|  57.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6395|  57.2k|        if (value >
  ------------------
  |  Branch (6395:13): [True: 116, False: 57.0k]
  ------------------
 6396|  57.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6397|    116|            return -1;
 6398|    116|        }
 6399|  57.0k|        ++begin;
 6400|  57.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6400:14): [True: 56.8k, False: 276]
  |  Branch (6400:30): [True: 53.4k, False: 3.32k]
  |  Branch (6400:47): [True: 44.2k, False: 9.19k]
  ------------------
 6401|  12.7k|    return static_cast<int>(value);
 6402|  12.9k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6944|  3.16k|        {
 6945|  3.16k|            arg_id = handler.on_arg_id(id);
 6946|  3.16k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5574|  3.16k|    {
 5575|  3.16k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  3.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 3.09k]
  |  |  ------------------
  ------------------
 5576|     70|            on_error(
 5577|     70|                "Cannot switch from manual to automatic argument indexing");
 5578|     70|            return;
 5579|     70|        }
 5580|  3.09k|        m_next_arg_id = -1;
 5581|  3.09k|        do_check_arg_id(id);
 5582|  3.09k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  49.8k|        {
 6941|  49.8k|            arg_id = handler.on_arg_id();
 6942|  49.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|   105k|    {
 5248|   105k|        return m_type;
 5249|   105k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|  49.4k|    {
 5557|  49.4k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  49.4k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|   102k|    {
 5546|   102k|        return m_format.data();
 5547|   102k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  52.8k|    {
 7118|  52.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  52.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  52.8k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|  52.8k|{
 6854|  52.8k|    auto do_presentation = [&]() -> const CharT* {
 6855|  52.8k|        if (*begin == CharT{'['}) {
 6856|  52.8k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  52.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  52.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  52.8k|                return begin;
 6862|  52.8k|            }
 6863|  52.8k|            handler.on_character_set_string(set);
 6864|  52.8k|            return begin;
 6865|  52.8k|        }
 6866|  52.8k|        if (*begin == CharT{'/'}) {
 6867|  52.8k|            return parse_presentation_regex(begin, end, handler);
 6868|  52.8k|        }
 6869|  52.8k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  52.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  52.8k|            handler.on_error("Invalid type specifier in format string");
 6872|  52.8k|            return begin;
 6873|  52.8k|        }
 6874|  52.8k|        handler.on_type(type);
 6875|  52.8k|        return begin;
 6876|  52.8k|    };
 6877|       |
 6878|  52.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 51.6k, False: 1.12k]
  |  Branch (6878:28): [True: 2.19k, False: 49.4k]
  ------------------
 6879|  52.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 932, False: 1.25k]
  |  Branch (6879:36): [True: 880, False: 52]
  ------------------
 6880|    880|        return do_presentation();
 6881|    880|    }
 6882|       |
 6883|  51.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.9k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  51.9k|    begin = parse_align(begin, end, handler);
 6889|  51.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 51.8k]
  |  |  ------------------
  ------------------
 6890|    118|        handler.on_error("Unexpected end of format string");
 6891|    118|        return begin;
 6892|    118|    }
 6893|       |
 6894|  51.8k|    begin = parse_width(begin, end, handler);
 6895|  51.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 51.6k]
  |  |  ------------------
  ------------------
 6896|    120|        handler.on_error("Unexpected end of format string");
 6897|    120|        return begin;
 6898|    120|    }
 6899|       |
 6900|  51.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 8.07k, False: 43.6k]
  ------------------
 6901|  8.07k|        ++begin;
 6902|  8.07k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 8.04k]
  |  |  ------------------
  ------------------
 6903|     34|            handler.on_error("Unexpected end of format string");
 6904|     34|            return begin;
 6905|     34|        }
 6906|  8.04k|        begin = parse_precision(begin, end, handler);
 6907|  8.04k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 7.96k]
  |  |  ------------------
  ------------------
 6908|     78|            handler.on_error("Unexpected end of format string");
 6909|     78|            return begin;
 6910|     78|        }
 6911|  8.04k|    }
 6912|       |
 6913|  51.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 464, False: 51.1k]
  ------------------
 6914|    464|        handler.on_localized();
 6915|    464|        ++begin;
 6916|    464|    }
 6917|  51.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 51.5k]
  |  |  ------------------
  ------------------
 6918|     52|        handler.on_error("Unexpected end of format string");
 6919|     52|        return begin;
 6920|     52|    }
 6921|       |
 6922|  51.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 51.5k, False: 0]
  |  Branch (6922:25): [True: 46.5k, False: 4.95k]
  ------------------
 6923|  46.5k|        do_presentation();
 6924|  46.5k|    }
 6925|  51.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01k, False: 49.5k]
  |  |  ------------------
  ------------------
 6926|  2.01k|        handler.on_error("Unexpected end of format string");
 6927|  2.01k|        return begin;
 6928|  2.01k|    }
 6929|       |
 6930|  49.5k|    return begin;
 6931|  51.5k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|  2.19k|{
 6503|  2.19k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 878, False: 1.31k]
  |  Branch (6503:33): [True: 808, False: 70]
  ------------------
 6504|  2.19k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 232, False: 1.15k]
  |  Branch (6504:33): [True: 124, False: 108]
  ------------------
 6505|  2.19k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  47.4k|    auto do_presentation = [&]() -> const CharT* {
 6855|  47.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 11.8k, False: 35.5k]
  ------------------
 6856|  11.8k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  11.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 826, False: 11.0k]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|    826|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|    826|                return begin;
 6862|    826|            }
 6863|  11.0k|            handler.on_character_set_string(set);
 6864|  11.0k|            return begin;
 6865|  11.8k|        }
 6866|  35.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 30.9k, False: 4.59k]
  ------------------
 6867|  30.9k|            return parse_presentation_regex(begin, end, handler);
 6868|  30.9k|        }
 6869|  4.59k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  4.59k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.59k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 640, False: 3.95k]
  |  |  ------------------
  ------------------
 6871|    640|            handler.on_error("Invalid type specifier in format string");
 6872|    640|            return begin;
 6873|    640|        }
 6874|  3.95k|        handler.on_type(type);
 6875|  3.95k|        return begin;
 6876|  4.59k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6692|  11.8k|{
 6693|  11.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|  11.8k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|  11.8k|    auto start = begin;
 6697|  11.8k|    ++begin;
 6698|       |
 6699|  11.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 11.8k]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|     42|        return {};
 6704|     42|    }
 6705|  11.8k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 2.46k, False: 9.36k]
  ------------------
 6706|  2.46k|        handler.on_charset_inverted();
 6707|  2.46k|        ++begin;
 6708|  2.46k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.42k]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|     34|            return {};
 6713|     34|        }
 6714|  2.42k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 54, False: 2.37k]
  ------------------
 6715|     54|            handler.on_charset_single(char32_t{']'});
 6716|     54|            ++begin;
 6717|     54|        }
 6718|  2.42k|    }
 6719|  9.36k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 34, False: 9.32k]
  ------------------
 6720|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|     34|    }
 6722|       |
 6723|  1.91M|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 1.91M, False: 490]
  ------------------
 6724|  1.91M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 226, False: 1.91M]
  |  |  ------------------
  ------------------
 6725|    226|            break;
 6726|    226|        }
 6727|       |
 6728|  1.91M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 11.0k, False: 1.89M]
  ------------------
 6729|  11.0k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|  11.0k|        }
 6731|       |
 6732|  1.89M|        parse_presentation_set_literal(begin, end, handler);
 6733|  1.89M|    }
 6734|       |
 6735|    716|    SCN_UNLIKELY_ATTR
 6736|    716|    handler.on_error("Invalid [character set] specifier in format string");
 6737|    716|    return {};
 6738|  11.7k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6656|  1.89M|{
 6657|  1.89M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  1.89M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  1.89M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 1.89M]
  |  |  ------------------
  ------------------
 6661|    114|        return;
 6662|    114|    }
 6663|       |
 6664|  1.89M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 1.89M, False: 194]
  |  Branch (6664:25): [True: 10.5k, False: 1.88M]
  |  Branch (6664:49): [True: 10.5k, False: 34]
  ------------------
 6665|  1.89M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 10.3k, False: 250]
  ------------------
 6666|  10.3k|        ++begin;
 6667|       |
 6668|  10.3k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|  10.3k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  10.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 10.2k]
  |  |  ------------------
  ------------------
 6670|     70|            return;
 6671|     70|        }
 6672|       |
 6673|  10.2k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 10.2k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|     34|            return;
 6678|     34|        }
 6679|       |
 6680|  10.2k|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|  10.2k|        return;
 6682|  10.2k|    }
 6683|       |
 6684|  1.88M|    handler.on_charset_single(cp_first);
 6685|  1.88M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6632|  1.90M|{
 6633|  1.90M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  1.90M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  1.90M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  3.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 1.90M]
  |  |  |  Branch (859:45): [True: 90, False: 1.90M]
  |  |  |  Branch (859:45): [True: 26, False: 1.90M]
  |  |  ------------------
  ------------------
 6637|    116|        handler.on_error("Invalid encoding in format string");
 6638|    116|        return invalid_code_point;
 6639|    116|    }
 6640|       |
 6641|  1.90M|    const auto cp =
 6642|  1.90M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  1.90M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 1.90M]
  |  |  ------------------
  ------------------
 6644|     68|        handler.on_error("Invalid encoding in format string");
 6645|     68|        return invalid_code_point;
 6646|     68|    }
 6647|       |
 6648|  1.90M|    begin += len;
 6649|  1.90M|    return cp;
 6650|  1.90M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6341|  11.0k|    {
 6342|  11.0k|        m_specs.charset_string_data = fmt.data();
 6343|  11.0k|        m_specs.charset_string_size = fmt.size();
 6344|  11.0k|        on_type(presentation_type::string_set);
 6345|  11.0k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6744|  30.9k|{
 6745|  30.9k|#if !SCN_DISABLE_REGEX
 6746|  30.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6747|  30.9k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6748|       |
 6749|  30.9k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  61.9k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6749:19): [Folded - Ignored]
  |  Branch (6749:19): [Folded - Ignored]
  ------------------
 6750|  30.9k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6750:19): [Folded - Ignored]
  ------------------
 6751|  30.9k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6752|  30.9k|        return begin;
 6753|  30.9k|    }
 6754|       |
 6755|  30.9k|    auto start = begin;
 6756|  30.9k|    ++begin;
 6757|       |
 6758|  30.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.9k]
  |  |  ------------------
  ------------------
 6759|     34|        handler.on_error("Unexpected end of regex in format string");
 6760|     34|        return begin;
 6761|     34|    }
 6762|       |
 6763|  30.9k|    handler.on_type(presentation_type::regex);
 6764|  5.94M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 5.94M, False: 196]
  ------------------
 6765|  5.94M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6765:13): [True: 52.8k, False: 5.89M]
  ------------------
 6766|  52.8k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6766:17): [True: 30.7k, False: 22.0k]
  ------------------
 6767|  30.7k|                break;
 6768|  30.7k|            }
 6769|  22.0k|            else {
 6770|  22.0k|                handler.on_type(presentation_type::regex_escaped);
 6771|  22.0k|            }
 6772|  52.8k|        }
 6773|  5.94M|    }
 6774|  30.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196, False: 30.7k]
  |  |  ------------------
  ------------------
 6775|    196|        handler.on_error("Unexpected end of regex in format string");
 6776|    196|        return begin;
 6777|    196|    }
 6778|       |
 6779|  30.7k|    auto regex_end = begin;
 6780|  30.7k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6781|  30.7k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.7k]
  |  |  ------------------
  ------------------
 6782|     34|        handler.on_error("Invalid (empty) regex in format string");
 6783|     34|        return begin;
 6784|     34|    }
 6785|  30.7k|    handler.on_regex_pattern(regex_pattern);
 6786|  30.7k|    ++begin;
 6787|       |
 6788|  30.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 30.6k]
  |  |  ------------------
  ------------------
 6789|     34|        handler.on_error("Unexpected end of regex in format string");
 6790|     34|        return begin;
 6791|     34|    }
 6792|       |
 6793|  30.6k|    regex_flags flags{regex_flags::none};
 6794|  30.6k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6795|  30.6k|        {{'m', regex_flags::multiline},
 6796|  30.6k|         {'s', regex_flags::singleline},
 6797|  30.6k|         {'i', regex_flags::nocase},
 6798|  30.6k|         {'n', regex_flags::nocapture}}};
 6799|  35.4k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6799:12): [True: 35.3k, False: 58]
  ------------------
 6800|  35.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6800:13): [True: 30.4k, False: 4.86k]
  ------------------
 6801|  30.4k|            break;
 6802|  30.4k|        }
 6803|  4.86k|        bool found_flag = false;
 6804|  12.5k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6804:24): [True: 12.5k, False: 108]
  ------------------
 6805|  12.5k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6805:17): [True: 7.80k, False: 4.75k]
  ------------------
 6806|  7.80k|                continue;
 6807|  7.80k|            }
 6808|  4.75k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6808:17): [True: 34, False: 4.72k]
  ------------------
 6809|     34|                handler.on_error("Flag set multiple times in regex");
 6810|     34|                return begin;
 6811|     34|            }
 6812|  4.72k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6813|  4.72k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6813:17): [True: 48, False: 4.67k]
  ------------------
 6814|       |                // clang-format off
 6815|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6816|       |                // clang-format on
 6817|     48|            }
 6818|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6819|       |            if (*begin == CharT{'m'}) {
 6820|       |                // clang-format off
 6821|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6822|       |                // clang-format on
 6823|       |            }
 6824|       |#endif
 6825|  4.72k|#endif
 6826|  4.72k|            flags |= flag.second;
 6827|  4.72k|            found_flag = true;
 6828|  4.72k|            break;
 6829|  4.75k|        }
 6830|  4.82k|        if (!found_flag) {
  ------------------
  |  Branch (6830:13): [True: 108, False: 4.72k]
  ------------------
 6831|    108|            handler.on_error("Invalid flag in regex");
 6832|    108|            return begin;
 6833|    108|        }
 6834|  4.82k|    }
 6835|  30.5k|    handler.on_regex_flags(flags);
 6836|       |
 6837|  30.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 30.4k]
  |  |  ------------------
  ------------------
 6838|     58|        handler.on_error("Unexpected end of regex in format string");
 6839|     58|        return begin;
 6840|     58|    }
 6841|       |
 6842|  30.4k|    return begin;
 6843|       |#else
 6844|       |    handler.on_error("Regular expression support is disabled");
 6845|       |    return {};
 6846|       |#endif
 6847|  30.5k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6349|  30.7k|    {
 6350|  30.7k|        m_specs.charset_string_data = pattern.data();
 6351|  30.7k|        m_specs.charset_string_size = pattern.size();
 6352|  30.7k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|  4.59k|{
 6451|  4.59k|    switch (type) {
 6452|    106|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 106, False: 4.48k]
  ------------------
 6453|    158|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 52, False: 4.54k]
  ------------------
 6454|    158|            return presentation_type::int_binary;
 6455|    128|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 128, False: 4.46k]
  ------------------
 6456|    128|            return presentation_type::int_decimal;
 6457|    178|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 178, False: 4.41k]
  ------------------
 6458|    178|            return presentation_type::int_generic;
 6459|     88|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 88, False: 4.50k]
  ------------------
 6460|     88|            return presentation_type::int_unsigned_decimal;
 6461|    178|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 178, False: 4.41k]
  ------------------
 6462|    178|            return presentation_type::int_octal;
 6463|     60|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 60, False: 4.53k]
  ------------------
 6464|     94|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 34, False: 4.55k]
  ------------------
 6465|     94|            return presentation_type::int_hex;
 6466|     34|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 34, False: 4.55k]
  ------------------
 6467|     68|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 34, False: 4.55k]
  ------------------
 6468|     68|            return presentation_type::int_arbitrary_base;
 6469|    106|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 106, False: 4.48k]
  ------------------
 6470|    230|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 124, False: 4.46k]
  ------------------
 6471|    230|            return presentation_type::float_hex;
 6472|    106|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 106, False: 4.48k]
  ------------------
 6473|    158|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 52, False: 4.54k]
  ------------------
 6474|    158|            return presentation_type::float_scientific;
 6475|    232|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 232, False: 4.36k]
  ------------------
 6476|    340|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 108, False: 4.48k]
  ------------------
 6477|    340|            return presentation_type::float_fixed;
 6478|     78|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 78, False: 4.51k]
  ------------------
 6479|    136|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 58, False: 4.53k]
  ------------------
 6480|    136|            return presentation_type::float_general;
 6481|  1.67k|        case 's':
  ------------------
  |  Branch (6481:9): [True: 1.67k, False: 2.92k]
  ------------------
 6482|  1.67k|            return presentation_type::string;
 6483|    412|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 412, False: 4.18k]
  ------------------
 6484|    412|            return presentation_type::character;
 6485|     34|        case '?':
  ------------------
  |  Branch (6485:9): [True: 34, False: 4.55k]
  ------------------
 6486|     34|            return presentation_type::escaped_character;
 6487|     78|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 78, False: 4.51k]
  ------------------
 6488|     78|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 4.59k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 4.59k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|    640|        default:
  ------------------
  |  Branch (6495:9): [True: 640, False: 3.95k]
  ------------------
 6496|    640|            return presentation_type::none;
 6497|  4.59k|    }
 6498|  4.59k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|  51.9k|{
 6528|  51.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  51.9k|    auto check_align = [](wchar_t ch) {
 6531|  51.9k|        switch (ch) {
 6532|  51.9k|            case L'<':
 6533|  51.9k|                return align_type::left;
 6534|  51.9k|            case L'>':
 6535|  51.9k|                return align_type::right;
 6536|  51.9k|            case L'^':
 6537|  51.9k|                return align_type::center;
 6538|  51.9k|            default:
 6539|  51.9k|                return align_type::none;
 6540|  51.9k|        }
 6541|  51.9k|    };
 6542|       |
 6543|  51.9k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  51.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 51.8k]
  |  |  |  Branch (859:45): [True: 38, False: 51.8k]
  |  |  |  Branch (859:45): [True: 4, False: 51.8k]
  |  |  ------------------
  ------------------
 6545|  51.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|     42|        handler.on_error("Invalid encoding in fill character");
 6547|     42|        return begin;
 6548|     42|    }
 6549|       |
 6550|  51.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  51.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  51.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  51.8k|    const auto begin_before_fill = begin;
 6555|  51.8k|    begin += potential_fill_len;
 6556|       |
 6557|  51.8k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 1.08k, False: 50.8k]
  ------------------
 6558|  1.08k|        return begin_before_fill;
 6559|  1.08k|    }
 6560|       |
 6561|  50.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  50.8k|    const auto begin_after_fill = begin;
 6563|  50.8k|    ++begin;
 6564|       |
 6565|  50.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 49.9k, False: 848]
  ------------------
 6566|  49.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  49.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 49.8k]
  |  |  ------------------
  ------------------
 6567|     54|            handler.on_error("Invalid fill character '{' in format string");
 6568|     54|            return begin;
 6569|     54|        }
 6570|  49.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 8.74k, False: 41.1k]
  ------------------
 6571|  8.74k|            return begin_before_fill;
 6572|  8.74k|        }
 6573|  49.8k|    }
 6574|       |
 6575|  42.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 37.3k, False: 4.66k]
  ------------------
 6576|  37.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 3.74k, False: 33.5k]
  ------------------
 6577|  3.74k|            handler.on_align(potential_align_on_fill);
 6578|  3.74k|            return begin_after_fill;
 6579|  3.74k|        }
 6580|  33.5k|        return begin_before_fill;
 6581|  37.3k|    }
 6582|       |
 6583|  4.66k|    handler.on_fill(potential_fill);
 6584|  4.66k|    handler.on_align(potential_align_after_fill);
 6585|  4.66k|    return begin;
 6586|  42.0k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|  51.9k|{
 6510|  51.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  51.9k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  51.9k|        return 1;
 6513|  51.9k|    }
 6514|  51.9k|    else {
 6515|  51.9k|        const auto lengths =
 6516|  51.9k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  51.9k|            "\3\4";
 6518|  51.9k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  51.9k|        return len;
 6520|  51.9k|    }
 6521|  51.9k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|   102k|    auto check_align = [](wchar_t ch) {
 6531|   102k|        switch (ch) {
 6532|  1.48k|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 1.48k, False: 101k]
  ------------------
 6533|  1.48k|                return align_type::left;
 6534|  1.71k|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 1.71k, False: 100k]
  ------------------
 6535|  1.71k|                return align_type::right;
 6536|  6.44k|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 6.44k, False: 96.2k]
  ------------------
 6537|  6.44k|                return align_type::center;
 6538|  93.0k|            default:
  ------------------
  |  Branch (6538:13): [True: 93.0k, False: 9.63k]
  ------------------
 6539|  93.0k|                return align_type::none;
 6540|   102k|        }
 6541|   102k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6263|  4.66k|    {
 6264|  4.66k|        m_specs.fill = fill;
 6265|  4.66k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6144|  4.66k|    {
 6145|  4.66k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  4.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6146|  4.66k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  4.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6147|  4.66k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6147:23): [Folded - Ignored]
  ------------------
 6148|  10.8k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6148:32): [True: 6.17k, False: 4.66k]
  ------------------
 6149|  6.17k|                SCN_GCC_PUSH
 6150|  6.17k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6151|  6.17k|                m_data[i] = s[i];
 6152|  6.17k|                SCN_GCC_POP
 6153|  6.17k|            }
 6154|  4.66k|            m_size = static_cast<unsigned char>(s.size());
 6155|  4.66k|        }
 6156|  4.66k|        else if constexpr (sizeof(CharT) == 2) {
 6157|  4.66k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6158|  4.66k|            m_data[1] =
 6159|  4.66k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6160|  4.66k|            if (s.size() == 1) {
 6161|  4.66k|                return;
 6162|  4.66k|            }
 6163|  4.66k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6164|  4.66k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6165|  4.66k|        }
 6166|  4.66k|        else {
 6167|  4.66k|            const auto front = static_cast<unsigned>(s.front());
 6168|  4.66k|            m_data[0] = static_cast<char>(front);
 6169|  4.66k|            m_data[1] = static_cast<char>(front >> 8);
 6170|  4.66k|            m_data[2] = static_cast<char>(front >> 16);
 6171|  4.66k|            m_data[3] = static_cast<char>(front >> 24);
 6172|  4.66k|        }
 6173|  4.66k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|  51.8k|{
 6593|  51.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  51.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 15.6k, False: 36.1k]
  |  Branch (6595:33): [True: 4.58k, False: 11.0k]
  ------------------
 6596|  4.58k|        int width = parse_simple_int(begin, end);
 6597|  4.58k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.55k, False: 34]
  |  |  ------------------
  ------------------
 6598|  4.55k|            handler.on_width(width);
 6599|  4.55k|        }
 6600|     34|        else {
 6601|     34|            handler.on_error("Invalid field width");
 6602|     34|            return begin;
 6603|     34|        }
 6604|  4.58k|    }
 6605|  51.7k|    return begin;
 6606|  51.8k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6612|  8.04k|{
 6613|  8.04k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6614|       |
 6615|  8.04k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6615:9): [True: 8.00k, False: 36]
  |  Branch (6615:33): [True: 7.94k, False: 58]
  ------------------
 6616|  7.94k|        int prec = parse_simple_int(begin, end);
 6617|  7.94k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  7.94k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.90k, False: 48]
  |  |  ------------------
  ------------------
 6618|  7.90k|            handler.on_precision(prec);
 6619|  7.90k|        }
 6620|     48|        else {
 6621|     48|            handler.on_error("Invalid field precision");
 6622|     48|            return begin;
 6623|     48|        }
 6624|  7.94k|    }
 6625|  7.99k|    return begin;
 6626|  8.04k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|    464|    {
 7123|    464|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|    464|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 418, False: 46]
  ------------------
 7125|    464|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 372, False: 46]
  ------------------
 7126|    464|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 326, False: 46]
  ------------------
 7127|    464|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 280, False: 46]
  ------------------
 7128|    280|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|    280|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|    280|        }
 7133|       |
 7134|    184|        Handler::on_localized();
 7135|    184|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  49.2k|{
 8413|  49.2k|#define SCN_VISIT(Type)                                         \
 8414|  49.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  49.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  49.2k|    }                                                           \
 8417|  49.2k|    else {                                                      \
 8418|  49.2k|        return vis(monostate_val);                              \
 8419|  49.2k|    }
 8420|       |
 8421|  49.2k|    monostate monostate_val{};
 8422|       |
 8423|  49.2k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 49.2k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 49.2k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|  5.49k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 5.49k, False: 43.7k]
  ------------------
 8429|  5.49k|            SCN_VISIT(int);
  ------------------
  |  | 8414|  5.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.49k|    }                                                           \
  |  | 8417|  5.49k|    else {                                                      \
  |  | 8418|  5.49k|        return vis(monostate_val);                              \
  |  | 8419|  5.49k|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 49.2k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 49.2k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 49.2k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 49.2k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|  5.49k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 5.49k, False: 43.7k]
  ------------------
 8439|  5.49k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|  5.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.49k|    }                                                           \
  |  | 8417|  5.49k|    else {                                                      \
  |  | 8418|  5.49k|        return vis(monostate_val);                              \
  |  | 8419|  5.49k|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 49.2k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 49.2k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|  5.45k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 5.45k, False: 43.7k]
  ------------------
 8445|  5.45k|            SCN_VISIT(void*);
  ------------------
  |  | 8414|  5.45k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.45k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.45k|    }                                                           \
  |  | 8417|  5.45k|    else {                                                      \
  |  | 8418|  5.45k|        return vis(monostate_val);                              \
  |  | 8419|  5.45k|    }
  ------------------
 8446|  5.49k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 5.49k, False: 43.7k]
  ------------------
 8447|  5.49k|            SCN_VISIT(bool);
  ------------------
  |  | 8414|  5.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.49k|    }                                                           \
  |  | 8417|  5.49k|    else {                                                      \
  |  | 8418|  5.49k|        return vis(monostate_val);                              \
  |  | 8419|  5.49k|    }
  ------------------
 8448|  5.45k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 5.45k, False: 43.7k]
  ------------------
 8449|  5.45k|            SCN_VISIT(char);
  ------------------
  |  | 8414|  5.45k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.45k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.45k|    }                                                           \
  |  | 8417|  5.45k|    else {                                                      \
  |  | 8418|  5.45k|        return vis(monostate_val);                              \
  |  | 8419|  5.45k|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 49.2k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 49.2k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 49.2k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|  5.49k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 5.49k, False: 43.7k]
  ------------------
 8457|  5.49k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  5.49k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.49k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.49k|    }                                                           \
  |  | 8417|  5.49k|    else {                                                      \
  |  | 8418|  5.49k|        return vis(monostate_val);                              \
  |  | 8419|  5.49k|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 49.2k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|  5.45k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 5.45k, False: 43.7k]
  ------------------
 8461|  5.45k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|  5.45k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.45k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.45k|    }                                                           \
  |  | 8417|  5.45k|    else {                                                      \
  |  | 8418|  5.45k|        return vis(monostate_val);                              \
  |  | 8419|  5.45k|    }
  ------------------
 8462|  5.45k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 5.45k, False: 43.7k]
  ------------------
 8463|  5.45k|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|  5.45k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.45k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.45k|    }                                                           \
  |  | 8417|  5.45k|    else {                                                      \
  |  | 8418|  5.45k|        return vis(monostate_val);                              \
  |  | 8419|  5.45k|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 49.2k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|  5.45k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 5.45k, False: 43.7k]
  ------------------
 8467|  5.45k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|  5.45k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  5.45k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  5.45k|    }                                                           \
  |  | 8417|  5.45k|    else {                                                      \
  |  | 8418|  5.45k|        return vis(monostate_val);                              \
  |  | 8419|  5.45k|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 49.2k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 49.2k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 49.2k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 49.2k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 49.2k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  49.2k|            SCN_CLANG_POP
 8491|  49.2k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|   151k|    {
 5462|   151k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   151k|        return static_cast<std::size_t>(m_desc &
 5467|   151k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   151k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|   168k|    {
 5487|   168k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|   168k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|  16.7k|    {
 5430|  16.7k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.7k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  16.7k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 16.6k]
  |  |  ------------------
  ------------------
 5438|     76|            return {};
 5439|     76|        }
 5440|       |
 5441|  16.6k|        const auto t = type(id);
 5442|  16.6k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.33k, False: 15.3k]
  |  |  ------------------
  ------------------
 5443|  1.33k|            return {};
 5444|  1.33k|        }
 5445|       |
 5446|  15.3k|        basic_scan_arg<Context> arg;
 5447|  15.3k|        arg.m_type = t;
 5448|  15.3k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 15.3k, False: 0]
  ------------------
 5449|  15.3k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  15.3k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  15.3k|        return arg;
 5455|  16.6k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|  16.7k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|  16.6k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  16.6k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  16.6k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  16.6k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  16.6k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|  15.3k|    {
 5491|  15.3k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  15.3k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  30.1k|    {
 5243|  30.1k|        return m_type != detail::arg_type::none_type;
 5244|  30.1k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  4.73k|{
 8413|  4.73k|#define SCN_VISIT(Type)                                         \
 8414|  4.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  4.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  4.73k|    }                                                           \
 8417|  4.73k|    else {                                                      \
 8418|  4.73k|        return vis(monostate_val);                              \
 8419|  4.73k|    }
 8420|       |
 8421|  4.73k|    monostate monostate_val{};
 8422|       |
 8423|  4.73k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 4.73k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 4.73k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|    526|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 526, False: 4.20k]
  ------------------
 8429|    526|            SCN_VISIT(int);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 4.73k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 4.73k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 4.73k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 4.73k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|    526|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 526, False: 4.20k]
  ------------------
 8439|    526|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 4.73k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 4.73k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|    526|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 526, False: 4.20k]
  ------------------
 8445|    526|            SCN_VISIT(void*);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8446|    526|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 526, False: 4.20k]
  ------------------
 8447|    526|            SCN_VISIT(bool);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 4.73k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|    526|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 526, False: 4.20k]
  ------------------
 8451|    526|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 4.73k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 4.73k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|    526|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 526, False: 4.20k]
  ------------------
 8457|    526|            SCN_VISIT(double);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 4.73k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 4.73k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|    526|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 526, False: 4.20k]
  ------------------
 8463|    526|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8464|    526|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 526, False: 4.20k]
  ------------------
 8465|    526|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8466|    526|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 526, False: 4.20k]
  ------------------
 8467|    526|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|    526|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    526|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    526|    }                                                           \
  |  | 8417|    526|    else {                                                      \
  |  | 8418|    526|        return vis(monostate_val);                              \
  |  | 8419|    526|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 4.73k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 4.73k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 4.73k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 4.73k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 4.73k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  4.73k|            SCN_CLANG_POP
 8491|  4.73k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|   151k|    {
 5541|   151k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|   151k|    {
 8052|   151k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   151k|{
 7040|   151k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   151k|    handler.check_args_exhausted();
 7042|   151k|    return handler.get_error();
 7043|   151k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   151k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   151k|    auto begin = format.data();
 7009|   151k|    auto it = begin;
 7010|   151k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   313M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 313M, False: 60.7k]
  ------------------
 7013|   313M|        const auto ch = *it++;
 7014|   313M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 17.4k, False: 313M]
  ------------------
 7015|  17.4k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  17.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  17.4k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 14.6k, False: 2.84k]
  ------------------
 7019|  14.6k|                return;
 7020|  14.6k|            }
 7021|  17.4k|        }
 7022|   313M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 76.5k, False: 313M]
  ------------------
 7023|  76.5k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.3k, False: 160]
  |  |  |  Branch (859:45): [True: 214, False: 76.3k]
  |  |  |  Branch (859:45): [True: 76.1k, False: 160]
  |  |  ------------------
  ------------------
 7024|  76.3k|                handler.on_error("Unmatched '}' in format string");
 7025|  76.3k|                return;
 7026|  76.3k|            }
 7027|       |
 7028|    160|            handler.on_literal_text(begin, it);
 7029|    160|            begin = ++it;
 7030|    160|        }
 7031|   313M|    }
 7032|       |
 7033|  60.7k|    handler.on_literal_text(begin, end);
 7034|  60.7k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|  17.4k|{
 6938|  17.4k|    struct id_adapter {
 6939|  17.4k|        constexpr void operator()()
 6940|  17.4k|        {
 6941|  17.4k|            arg_id = handler.on_arg_id();
 6942|  17.4k|        }
 6943|  17.4k|        constexpr void operator()(std::size_t id)
 6944|  17.4k|        {
 6945|  17.4k|            arg_id = handler.on_arg_id(id);
 6946|  17.4k|        }
 6947|       |
 6948|  17.4k|        constexpr void on_error(const char* msg)
 6949|  17.4k|        {
 6950|  17.4k|            SCN_UNLIKELY_ATTR
 6951|  17.4k|            handler.on_error(msg);
 6952|  17.4k|        }
 6953|       |
 6954|  17.4k|        Handler& handler;
 6955|  17.4k|        std::size_t arg_id;
 6956|  17.4k|    };
 6957|       |
 6958|  17.4k|    ++begin;
 6959|  17.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 17.4k]
  |  |  ------------------
  ------------------
 6960|     70|        handler.on_error("Unexpected end of replacement field");
 6961|     70|        return begin;
 6962|     70|    }
 6963|       |
 6964|  17.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 4.68k, False: 12.7k]
  ------------------
 6965|  4.68k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|  4.68k|    }
 6967|  12.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 168, False: 12.5k]
  ------------------
 6968|    168|        handler.on_literal_text(begin, begin + 1);
 6969|    168|    }
 6970|  12.5k|    else {
 6971|  12.5k|        auto adapter = id_adapter{handler, 0};
 6972|  12.5k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  12.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 12.4k]
  |  |  ------------------
  ------------------
 6975|     92|            handler.on_error("Missing '}' in format string");
 6976|     92|            return begin;
 6977|     92|        }
 6978|       |
 6979|  12.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 184, False: 12.2k]
  ------------------
 6980|    184|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|    184|        }
 6982|  12.2k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 11.8k, False: 394]
  ------------------
 6983|  11.8k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 11.8k]
  |  |  ------------------
  ------------------
 6984|     50|                handler.on_error("Unexpected end of replacement field");
 6985|     50|                return begin;
 6986|     50|            }
 6987|  11.8k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  11.8k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.31k, False: 9.53k]
  |  |  |  Branch (859:45): [True: 0, False: 11.8k]
  |  |  |  Branch (859:45): [True: 2.31k, False: 9.53k]
  |  |  ------------------
  ------------------
 6989|  2.31k|                handler.on_error("Unknown format specifier");
 6990|  2.31k|                return begin;
 6991|  2.31k|            }
 6992|  11.8k|        }
 6993|    394|        else {
 6994|    394|            SCN_UNLIKELY_ATTR
 6995|    394|            handler.on_error("Missing '}' in format string");
 6996|    394|            return begin;
 6997|    394|        }
 6998|  12.4k|    }
 6999|  14.5k|    return begin + 1;
 7000|  17.4k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|  16.7k|    {
 8035|  16.7k|        return m_args.get(id);
 8036|  16.7k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8039|  4.87k|    {
 8040|  4.87k|        return m_args;
 8041|  4.87k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|  13.8k|    {
 8045|  13.8k|        return m_locale;
 8046|  13.8k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|  16.4k|    {
 5562|  16.4k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 16.4k]
  |  |  ------------------
  ------------------
 5563|     10|            on_error(
 5564|     10|                "Cannot switch from manual to automatic argument indexing");
 5565|     10|            return 0;
 5566|     10|        }
 5567|       |
 5568|  16.4k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  16.4k|        do_check_arg_id(id);
 5570|  16.4k|        return id;
 5571|  16.4k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5585|    196|    {
 5586|    196|        return detail::handle_error(
 5587|    196|            scan_error{scan_error::invalid_format_string, msg});
 5588|    196|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|  16.5k|{
 6050|  16.5k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  16.5k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  16.5k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  12.5k|{
 6439|  12.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  12.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 12.5k, False: 0]
  |  Branch (6440:26): [True: 834, False: 11.7k]
  ------------------
 6441|    834|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    834|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|    834|    }
 6443|       |
 6444|  11.7k|    handler();
 6445|  11.7k|    return begin;
 6446|  12.5k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6408|    834|{
 6409|    834|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    834|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    834|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6410|       |
 6411|    834|    CharT c = *begin;
 6412|    834|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6412:9): [True: 136, False: 698]
  |  Branch (6412:27): [True: 92, False: 606]
  ------------------
 6413|    228|        handler.on_error("Invalid argument ID");
 6414|    228|        return begin;
 6415|    228|    }
 6416|       |
 6417|    606|    int idx = 0;
 6418|    606|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6418:9): [True: 248, False: 358]
  ------------------
 6419|    248|        idx = parse_simple_int(begin, end);
 6420|    248|    }
 6421|    358|    else {
 6422|    358|        ++begin;
 6423|    358|    }
 6424|       |
 6425|    606|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6425:9): [True: 92, False: 514]
  |  Branch (6425:26): [True: 330, False: 184]
  |  Branch (6425:50): [True: 166, False: 164]
  ------------------
 6426|    258|        handler.on_error("Invalid argument ID");
 6427|    258|        return begin;
 6428|    258|    }
 6429|    348|    handler(idx);
 6430|       |
 6431|    348|    return begin;
 6432|    606|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6949|    486|        {
 6950|    486|            SCN_UNLIKELY_ATTR
 6951|    486|            handler.on_error(msg);
 6952|    486|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6387|  10.5k|{
 6388|  10.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6389|  10.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6390|       |
 6391|  10.5k|    unsigned long long value = 0;
 6392|  12.1k|    do {
 6393|  12.1k|        value *= 10;
 6394|  12.1k|        value += static_cast<unsigned long long>(*begin - '0');
 6395|  12.1k|        if (value >
  ------------------
  |  Branch (6395:13): [True: 0, False: 12.1k]
  ------------------
 6396|  12.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6397|      0|            return -1;
 6398|      0|        }
 6399|  12.1k|        ++begin;
 6400|  12.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6400:14): [True: 11.8k, False: 232]
  |  Branch (6400:30): [True: 6.73k, False: 5.13k]
  |  Branch (6400:47): [True: 1.57k, False: 5.16k]
  ------------------
 6401|  10.5k|    return static_cast<int>(value);
 6402|  10.5k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6944|    348|        {
 6945|    348|            arg_id = handler.on_arg_id(id);
 6946|    348|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5574|    348|    {
 5575|    348|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 186, False: 162]
  |  |  ------------------
  ------------------
 5576|    186|            on_error(
 5577|    186|                "Cannot switch from manual to automatic argument indexing");
 5578|    186|            return;
 5579|    186|        }
 5580|    162|        m_next_arg_id = -1;
 5581|    162|        do_check_arg_id(id);
 5582|    162|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  11.7k|        {
 6941|  11.7k|            arg_id = handler.on_arg_id();
 6942|  11.7k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|  23.6k|    {
 5248|  23.6k|        return m_type;
 5249|  23.6k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|  8.94k|    {
 5557|  8.94k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  8.94k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|  20.7k|    {
 5546|  20.7k|        return m_format.data();
 5547|  20.7k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  11.8k|    {
 7118|  11.8k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  11.8k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|  11.8k|{
 6854|  11.8k|    auto do_presentation = [&]() -> const CharT* {
 6855|  11.8k|        if (*begin == CharT{'['}) {
 6856|  11.8k|            auto set = parse_presentation_set(begin, end, handler);
 6857|  11.8k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  11.8k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  11.8k|                return begin;
 6862|  11.8k|            }
 6863|  11.8k|            handler.on_character_set_string(set);
 6864|  11.8k|            return begin;
 6865|  11.8k|        }
 6866|  11.8k|        if (*begin == CharT{'/'}) {
 6867|  11.8k|            return parse_presentation_regex(begin, end, handler);
 6868|  11.8k|        }
 6869|  11.8k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  11.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  11.8k|            handler.on_error("Invalid type specifier in format string");
 6872|  11.8k|            return begin;
 6873|  11.8k|        }
 6874|  11.8k|        handler.on_type(type);
 6875|  11.8k|        return begin;
 6876|  11.8k|    };
 6877|       |
 6878|  11.8k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 10.8k, False: 978]
  |  Branch (6878:28): [True: 3.44k, False: 7.42k]
  ------------------
 6879|  11.8k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 348, False: 3.10k]
  |  Branch (6879:36): [True: 274, False: 74]
  ------------------
 6880|    274|        return do_presentation();
 6881|    274|    }
 6882|       |
 6883|  11.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  11.5k|    begin = parse_align(begin, end, handler);
 6889|  11.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 11.4k]
  |  |  ------------------
  ------------------
 6890|    108|        handler.on_error("Unexpected end of format string");
 6891|    108|        return begin;
 6892|    108|    }
 6893|       |
 6894|  11.4k|    begin = parse_width(begin, end, handler);
 6895|  11.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 11.3k]
  |  |  ------------------
  ------------------
 6896|     78|        handler.on_error("Unexpected end of format string");
 6897|     78|        return begin;
 6898|     78|    }
 6899|       |
 6900|  11.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 2.50k, False: 8.88k]
  ------------------
 6901|  2.50k|        ++begin;
 6902|  2.50k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 2.46k]
  |  |  ------------------
  ------------------
 6903|     40|            handler.on_error("Unexpected end of format string");
 6904|     40|            return begin;
 6905|     40|        }
 6906|  2.46k|        begin = parse_precision(begin, end, handler);
 6907|  2.46k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 2.36k]
  |  |  ------------------
  ------------------
 6908|     96|            handler.on_error("Unexpected end of format string");
 6909|     96|            return begin;
 6910|     96|        }
 6911|  2.46k|    }
 6912|       |
 6913|  11.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 282, False: 10.9k]
  ------------------
 6914|    282|        handler.on_localized();
 6915|    282|        ++begin;
 6916|    282|    }
 6917|  11.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 11.1k]
  |  |  ------------------
  ------------------
 6918|     58|        handler.on_error("Unexpected end of format string");
 6919|     58|        return begin;
 6920|     58|    }
 6921|       |
 6922|  11.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 11.1k, False: 0]
  |  Branch (6922:25): [True: 5.85k, False: 5.34k]
  ------------------
 6923|  5.85k|        do_presentation();
 6924|  5.85k|    }
 6925|  11.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 9.60k]
  |  |  ------------------
  ------------------
 6926|  1.58k|        handler.on_error("Unexpected end of format string");
 6927|  1.58k|        return begin;
 6928|  1.58k|    }
 6929|       |
 6930|  9.60k|    return begin;
 6931|  11.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|  3.44k|{
 6503|  3.44k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 272, False: 3.17k]
  |  Branch (6503:33): [True: 238, False: 34]
  ------------------
 6504|  3.44k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 216, False: 2.99k]
  |  Branch (6504:33): [True: 110, False: 106]
  ------------------
 6505|  3.44k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  6.12k|    auto do_presentation = [&]() -> const CharT* {
 6855|  6.12k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 726, False: 5.39k]
  ------------------
 6856|    726|            auto set = parse_presentation_set(begin, end, handler);
 6857|    726|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|    726|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 614, False: 112]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|    614|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|    614|                return begin;
 6862|    614|            }
 6863|    112|            handler.on_character_set_string(set);
 6864|    112|            return begin;
 6865|    726|        }
 6866|  5.39k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 2.89k, False: 2.50k]
  ------------------
 6867|  2.89k|            return parse_presentation_regex(begin, end, handler);
 6868|  2.89k|        }
 6869|  2.50k|        presentation_type type = parse_presentation_type(*begin++);
 6870|  2.50k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 584, False: 1.92k]
  |  |  ------------------
  ------------------
 6871|    584|            handler.on_error("Invalid type specifier in format string");
 6872|    584|            return begin;
 6873|    584|        }
 6874|  1.92k|        handler.on_type(type);
 6875|  1.92k|        return begin;
 6876|  2.50k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6692|    726|{
 6693|    726|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    726|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    726|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6694|    726|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    726|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    726|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6695|       |
 6696|    726|    auto start = begin;
 6697|    726|    ++begin;
 6698|       |
 6699|    726|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    726|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 692]
  |  |  ------------------
  ------------------
 6700|       |        // clang-format off
 6701|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6702|       |        // clang-format on
 6703|     34|        return {};
 6704|     34|    }
 6705|    692|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6705:9): [True: 126, False: 566]
  ------------------
 6706|    126|        handler.on_charset_inverted();
 6707|    126|        ++begin;
 6708|    126|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 98]
  |  |  ------------------
  ------------------
 6709|       |            // clang-format off
 6710|     28|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6711|       |            // clang-format on
 6712|     28|            return {};
 6713|     28|        }
 6714|     98|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6714:13): [True: 46, False: 52]
  ------------------
 6715|     46|            handler.on_charset_single(char32_t{']'});
 6716|     46|            ++begin;
 6717|     46|        }
 6718|     98|    }
 6719|    566|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6719:14): [True: 36, False: 530]
  ------------------
 6720|     36|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6721|     36|    }
 6722|       |
 6723|  3.01k|    while (begin != end) {
  ------------------
  |  Branch (6723:12): [True: 2.74k, False: 264]
  ------------------
 6724|  2.74k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 252, False: 2.49k]
  |  |  ------------------
  ------------------
 6725|    252|            break;
 6726|    252|        }
 6727|       |
 6728|  2.49k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 112, False: 2.38k]
  ------------------
 6729|    112|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6730|    112|        }
 6731|       |
 6732|  2.38k|        parse_presentation_set_literal(begin, end, handler);
 6733|  2.38k|    }
 6734|       |
 6735|    516|    SCN_UNLIKELY_ATTR
 6736|    516|    handler.on_error("Invalid [character set] specifier in format string");
 6737|    516|    return {};
 6738|    628|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6656|  2.38k|{
 6657|  2.38k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6658|       |
 6659|  2.38k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6660|  2.38k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 216, False: 2.16k]
  |  |  ------------------
  ------------------
 6661|    216|        return;
 6662|    216|    }
 6663|       |
 6664|  2.16k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6664:9): [True: 2.02k, False: 140]
  |  Branch (6664:25): [True: 458, False: 1.56k]
  |  Branch (6664:49): [True: 420, False: 38]
  ------------------
 6665|  2.16k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6665:9): [True: 344, False: 76]
  ------------------
 6666|    344|        ++begin;
 6667|       |
 6668|    344|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6669|    344|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    344|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 316]
  |  |  ------------------
  ------------------
 6670|     28|            return;
 6671|     28|        }
 6672|       |
 6673|    316|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 282]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6676|       |            // clang-format on
 6677|     34|            return;
 6678|     34|        }
 6679|       |
 6680|    282|        handler.on_charset_range(cp_first, cp_second + 1);
 6681|    282|        return;
 6682|    316|    }
 6683|       |
 6684|  1.82k|    handler.on_charset_single(cp_first);
 6685|  1.82k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6632|  2.72k|{
 6633|  2.72k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6634|       |
 6635|  2.72k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6636|  2.72k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  5.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.72k]
  |  |  |  Branch (859:45): [True: 0, False: 2.72k]
  |  |  |  Branch (859:45): [True: 0, False: 2.72k]
  |  |  ------------------
  ------------------
 6637|      0|        handler.on_error("Invalid encoding in format string");
 6638|      0|        return invalid_code_point;
 6639|      0|    }
 6640|       |
 6641|  2.72k|    const auto cp =
 6642|  2.72k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6643|  2.72k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 244, False: 2.48k]
  |  |  ------------------
  ------------------
 6644|    244|        handler.on_error("Invalid encoding in format string");
 6645|    244|        return invalid_code_point;
 6646|    244|    }
 6647|       |
 6648|  2.48k|    begin += len;
 6649|  2.48k|    return cp;
 6650|  2.72k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6341|    112|    {
 6342|    112|        m_specs.charset_string_data = fmt.data();
 6343|    112|        m_specs.charset_string_size = fmt.size();
 6344|    112|        on_type(presentation_type::string_set);
 6345|    112|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6744|  2.89k|{
 6745|  2.89k|#if !SCN_DISABLE_REGEX
 6746|  2.89k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6747|  2.89k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6748|       |
 6749|  2.89k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  5.78k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6749:19): [Folded - Ignored]
  |  Branch (6749:19): [Folded - Ignored]
  ------------------
 6750|  2.89k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6750:19): [Folded - Ignored]
  ------------------
 6751|  2.89k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6752|  2.89k|        return begin;
 6753|  2.89k|    }
 6754|       |
 6755|  2.89k|    auto start = begin;
 6756|  2.89k|    ++begin;
 6757|       |
 6758|  2.89k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 2.84k]
  |  |  ------------------
  ------------------
 6759|     42|        handler.on_error("Unexpected end of regex in format string");
 6760|     42|        return begin;
 6761|     42|    }
 6762|       |
 6763|  2.84k|    handler.on_type(presentation_type::regex);
 6764|   297k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 297k, False: 98]
  ------------------
 6765|   297k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6765:13): [True: 2.79k, False: 294k]
  ------------------
 6766|  2.79k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6766:17): [True: 2.75k, False: 46]
  ------------------
 6767|  2.75k|                break;
 6768|  2.75k|            }
 6769|     46|            else {
 6770|     46|                handler.on_type(presentation_type::regex_escaped);
 6771|     46|            }
 6772|  2.79k|        }
 6773|   297k|    }
 6774|  2.84k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 2.75k]
  |  |  ------------------
  ------------------
 6775|     98|        handler.on_error("Unexpected end of regex in format string");
 6776|     98|        return begin;
 6777|     98|    }
 6778|       |
 6779|  2.75k|    auto regex_end = begin;
 6780|  2.75k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6781|  2.75k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 2.71k]
  |  |  ------------------
  ------------------
 6782|     40|        handler.on_error("Invalid (empty) regex in format string");
 6783|     40|        return begin;
 6784|     40|    }
 6785|  2.71k|    handler.on_regex_pattern(regex_pattern);
 6786|  2.71k|    ++begin;
 6787|       |
 6788|  2.71k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 2.68k]
  |  |  ------------------
  ------------------
 6789|     28|        handler.on_error("Unexpected end of regex in format string");
 6790|     28|        return begin;
 6791|     28|    }
 6792|       |
 6793|  2.68k|    regex_flags flags{regex_flags::none};
 6794|  2.68k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6795|  2.68k|        {{'m', regex_flags::multiline},
 6796|  2.68k|         {'s', regex_flags::singleline},
 6797|  2.68k|         {'i', regex_flags::nocase},
 6798|  2.68k|         {'n', regex_flags::nocapture}}};
 6799|  2.73k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6799:12): [True: 2.73k, False: 0]
  ------------------
 6800|  2.73k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6800:13): [True: 2.58k, False: 156]
  ------------------
 6801|  2.58k|            break;
 6802|  2.58k|        }
 6803|    156|        bool found_flag = false;
 6804|    480|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6804:24): [True: 480, False: 102]
  ------------------
 6805|    480|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6805:17): [True: 426, False: 54]
  ------------------
 6806|    426|                continue;
 6807|    426|            }
 6808|     54|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6808:17): [True: 0, False: 54]
  ------------------
 6809|      0|                handler.on_error("Flag set multiple times in regex");
 6810|      0|                return begin;
 6811|      0|            }
 6812|     54|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6813|     54|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6813:17): [True: 18, False: 36]
  ------------------
 6814|       |                // clang-format off
 6815|     18|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6816|       |                // clang-format on
 6817|     18|            }
 6818|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6819|       |            if (*begin == CharT{'m'}) {
 6820|       |                // clang-format off
 6821|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6822|       |                // clang-format on
 6823|       |            }
 6824|       |#endif
 6825|     54|#endif
 6826|     54|            flags |= flag.second;
 6827|     54|            found_flag = true;
 6828|     54|            break;
 6829|     54|        }
 6830|    156|        if (!found_flag) {
  ------------------
  |  Branch (6830:13): [True: 102, False: 54]
  ------------------
 6831|    102|            handler.on_error("Invalid flag in regex");
 6832|    102|            return begin;
 6833|    102|        }
 6834|    156|    }
 6835|  2.58k|    handler.on_regex_flags(flags);
 6836|       |
 6837|  2.58k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.58k]
  |  |  ------------------
  ------------------
 6838|      0|        handler.on_error("Unexpected end of regex in format string");
 6839|      0|        return begin;
 6840|      0|    }
 6841|       |
 6842|  2.58k|    return begin;
 6843|       |#else
 6844|       |    handler.on_error("Regular expression support is disabled");
 6845|       |    return {};
 6846|       |#endif
 6847|  2.58k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6349|  2.71k|    {
 6350|  2.71k|        m_specs.charset_string_data = pattern.data();
 6351|  2.71k|        m_specs.charset_string_size = pattern.size();
 6352|  2.71k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|  2.50k|{
 6451|  2.50k|    switch (type) {
 6452|     46|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 46, False: 2.46k]
  ------------------
 6453|     92|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 46, False: 2.46k]
  ------------------
 6454|     92|            return presentation_type::int_binary;
 6455|     70|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 70, False: 2.43k]
  ------------------
 6456|     70|            return presentation_type::int_decimal;
 6457|     60|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 60, False: 2.44k]
  ------------------
 6458|     60|            return presentation_type::int_generic;
 6459|     58|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 58, False: 2.45k]
  ------------------
 6460|     58|            return presentation_type::int_unsigned_decimal;
 6461|     94|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 94, False: 2.41k]
  ------------------
 6462|     94|            return presentation_type::int_octal;
 6463|     40|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 40, False: 2.46k]
  ------------------
 6464|     68|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 28, False: 2.48k]
  ------------------
 6465|     68|            return presentation_type::int_hex;
 6466|     34|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 34, False: 2.47k]
  ------------------
 6467|     70|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 36, False: 2.47k]
  ------------------
 6468|     70|            return presentation_type::int_arbitrary_base;
 6469|    410|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 410, False: 2.09k]
  ------------------
 6470|    450|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 40, False: 2.46k]
  ------------------
 6471|    450|            return presentation_type::float_hex;
 6472|     66|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 66, False: 2.44k]
  ------------------
 6473|    100|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 34, False: 2.47k]
  ------------------
 6474|    100|            return presentation_type::float_scientific;
 6475|     60|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 60, False: 2.44k]
  ------------------
 6476|    118|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 58, False: 2.45k]
  ------------------
 6477|    118|            return presentation_type::float_fixed;
 6478|     42|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 42, False: 2.46k]
  ------------------
 6479|     82|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 40, False: 2.46k]
  ------------------
 6480|     82|            return presentation_type::float_general;
 6481|    508|        case 's':
  ------------------
  |  Branch (6481:9): [True: 508, False: 2.00k]
  ------------------
 6482|    508|            return presentation_type::string;
 6483|     66|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 66, False: 2.44k]
  ------------------
 6484|     66|            return presentation_type::character;
 6485|     36|        case '?':
  ------------------
  |  Branch (6485:9): [True: 36, False: 2.47k]
  ------------------
 6486|     36|            return presentation_type::escaped_character;
 6487|     52|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 52, False: 2.45k]
  ------------------
 6488|     52|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.50k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 2.50k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|    584|        default:
  ------------------
  |  Branch (6495:9): [True: 584, False: 1.92k]
  ------------------
 6496|    584|            return presentation_type::none;
 6497|  2.50k|    }
 6498|  2.50k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|  11.5k|{
 6528|  11.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  11.5k|    auto check_align = [](wchar_t ch) {
 6531|  11.5k|        switch (ch) {
 6532|  11.5k|            case L'<':
 6533|  11.5k|                return align_type::left;
 6534|  11.5k|            case L'>':
 6535|  11.5k|                return align_type::right;
 6536|  11.5k|            case L'^':
 6537|  11.5k|                return align_type::center;
 6538|  11.5k|            default:
 6539|  11.5k|                return align_type::none;
 6540|  11.5k|        }
 6541|  11.5k|    };
 6542|       |
 6543|  11.5k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  11.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  |  Branch (859:45): [True: 0, False: 11.5k]
  |  |  |  Branch (859:45): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6545|  11.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  11.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  11.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  11.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  11.5k|    const auto begin_before_fill = begin;
 6555|  11.5k|    begin += potential_fill_len;
 6556|       |
 6557|  11.5k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 978, False: 10.5k]
  ------------------
 6558|    978|        return begin_before_fill;
 6559|    978|    }
 6560|       |
 6561|  10.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  10.5k|    const auto begin_after_fill = begin;
 6563|  10.5k|    ++begin;
 6564|       |
 6565|  10.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 10.5k, False: 0]
  ------------------
 6566|  10.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 10.5k]
  |  |  ------------------
  ------------------
 6567|     42|            handler.on_error("Invalid fill character '{' in format string");
 6568|     42|            return begin;
 6569|     42|        }
 6570|  10.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 692, False: 9.86k]
  ------------------
 6571|    692|            return begin_before_fill;
 6572|    692|        }
 6573|  10.5k|    }
 6574|       |
 6575|  9.86k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 9.67k, False: 192]
  ------------------
 6576|  9.67k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 724, False: 8.94k]
  ------------------
 6577|    724|            handler.on_align(potential_align_on_fill);
 6578|    724|            return begin_after_fill;
 6579|    724|        }
 6580|  8.94k|        return begin_before_fill;
 6581|  9.67k|    }
 6582|       |
 6583|    192|    handler.on_fill(potential_fill);
 6584|    192|    handler.on_align(potential_align_after_fill);
 6585|    192|    return begin;
 6586|  9.86k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|  11.5k|{
 6510|  11.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  11.5k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  11.5k|        return 1;
 6513|  11.5k|    }
 6514|  11.5k|    else {
 6515|  11.5k|        const auto lengths =
 6516|  11.5k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  11.5k|            "\3\4";
 6518|  11.5k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  11.5k|        return len;
 6520|  11.5k|    }
 6521|  11.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  22.1k|    auto check_align = [](wchar_t ch) {
 6531|  22.1k|        switch (ch) {
 6532|    530|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 530, False: 21.6k]
  ------------------
 6533|    530|                return align_type::left;
 6534|     88|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 88, False: 22.0k]
  ------------------
 6535|     88|                return align_type::right;
 6536|    478|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 478, False: 21.6k]
  ------------------
 6537|    478|                return align_type::center;
 6538|  21.0k|            default:
  ------------------
  |  Branch (6538:13): [True: 21.0k, False: 1.09k]
  ------------------
 6539|  21.0k|                return align_type::none;
 6540|  22.1k|        }
 6541|  22.1k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6263|    192|    {
 6264|    192|        m_specs.fill = fill;
 6265|    192|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6144|    192|    {
 6145|    192|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    192|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    192|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6146|    192|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    192|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    192|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6147|    192|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6147:23): [Folded - Ignored]
  ------------------
 6148|    192|            for (size_t i = 0; i < s.size(); ++i) {
 6149|    192|                SCN_GCC_PUSH
 6150|    192|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6151|    192|                m_data[i] = s[i];
 6152|    192|                SCN_GCC_POP
 6153|    192|            }
 6154|    192|            m_size = static_cast<unsigned char>(s.size());
 6155|    192|        }
 6156|    192|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6156:28): [Folded - Ignored]
  ------------------
 6157|    192|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6158|    192|            m_data[1] =
 6159|    192|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6160|    192|            if (s.size() == 1) {
 6161|    192|                return;
 6162|    192|            }
 6163|    192|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6164|    192|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6165|    192|        }
 6166|    192|        else {
 6167|    192|            const auto front = static_cast<unsigned>(s.front());
 6168|    192|            m_data[0] = static_cast<char>(front);
 6169|    192|            m_data[1] = static_cast<char>(front >> 8);
 6170|    192|            m_data[2] = static_cast<char>(front >> 16);
 6171|    192|            m_data[3] = static_cast<char>(front >> 24);
 6172|    192|        }
 6173|    192|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|  11.4k|{
 6593|  11.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  11.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 10.8k, False: 604]
  |  Branch (6595:33): [True: 7.92k, False: 2.93k]
  ------------------
 6596|  7.92k|        int width = parse_simple_int(begin, end);
 6597|  7.92k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  7.92k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.92k, False: 0]
  |  |  ------------------
  ------------------
 6598|  7.92k|            handler.on_width(width);
 6599|  7.92k|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|  7.92k|    }
 6605|  11.4k|    return begin;
 6606|  11.4k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6612|  2.46k|{
 6613|  2.46k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6614|       |
 6615|  2.46k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6615:9): [True: 2.43k, False: 34]
  |  Branch (6615:33): [True: 2.36k, False: 70]
  ------------------
 6616|  2.36k|        int prec = parse_simple_int(begin, end);
 6617|  2.36k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  2.36k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.36k, False: 0]
  |  |  ------------------
  ------------------
 6618|  2.36k|            handler.on_precision(prec);
 6619|  2.36k|        }
 6620|      0|        else {
 6621|      0|            handler.on_error("Invalid field precision");
 6622|      0|            return begin;
 6623|      0|        }
 6624|  2.36k|    }
 6625|  2.46k|    return begin;
 6626|  2.46k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|    282|    {
 7123|    282|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|    282|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 260, False: 22]
  ------------------
 7125|    282|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 238, False: 22]
  ------------------
 7126|    282|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 216, False: 22]
  ------------------
 7127|    282|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 194, False: 22]
  ------------------
 7128|    194|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|    194|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|    194|        }
 7133|       |
 7134|     88|        Handler::on_localized();
 7135|     88|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  8.73k|{
 8413|  8.73k|#define SCN_VISIT(Type)                                         \
 8414|  8.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  8.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  8.73k|    }                                                           \
 8417|  8.73k|    else {                                                      \
 8418|  8.73k|        return vis(monostate_val);                              \
 8419|  8.73k|    }
 8420|       |
 8421|  8.73k|    monostate monostate_val{};
 8422|       |
 8423|  8.73k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 8.73k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 8.73k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|    982|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 982, False: 7.75k]
  ------------------
 8429|    982|            SCN_VISIT(int);
  ------------------
  |  | 8414|    982|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    982|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    982|    }                                                           \
  |  | 8417|    982|    else {                                                      \
  |  | 8418|    982|        return vis(monostate_val);                              \
  |  | 8419|    982|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 8.73k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 8.73k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 8.73k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 8.73k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|    982|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 982, False: 7.75k]
  ------------------
 8439|    982|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|    982|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    982|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    982|    }                                                           \
  |  | 8417|    982|    else {                                                      \
  |  | 8418|    982|        return vis(monostate_val);                              \
  |  | 8419|    982|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 8.73k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 8.73k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|    962|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 962, False: 7.77k]
  ------------------
 8445|    962|            SCN_VISIT(void*);
  ------------------
  |  | 8414|    962|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    962|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    962|    }                                                           \
  |  | 8417|    962|    else {                                                      \
  |  | 8418|    962|        return vis(monostate_val);                              \
  |  | 8419|    962|    }
  ------------------
 8446|    982|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 982, False: 7.75k]
  ------------------
 8447|    982|            SCN_VISIT(bool);
  ------------------
  |  | 8414|    982|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    982|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    982|    }                                                           \
  |  | 8417|    982|    else {                                                      \
  |  | 8418|    982|        return vis(monostate_val);                              \
  |  | 8419|    982|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 8.73k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|    962|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 962, False: 7.77k]
  ------------------
 8451|    962|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|    962|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    962|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    962|    }                                                           \
  |  | 8417|    962|    else {                                                      \
  |  | 8418|    962|        return vis(monostate_val);                              \
  |  | 8419|    962|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 8.73k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 8.73k]
  ------------------
 8455|      0|            SCN_VISIT(float);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8456|    982|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 982, False: 7.75k]
  ------------------
 8457|    982|            SCN_VISIT(double);
  ------------------
  |  | 8414|    982|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    982|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    982|    }                                                           \
  |  | 8417|    982|    else {                                                      \
  |  | 8418|    982|        return vis(monostate_val);                              \
  |  | 8419|    982|    }
  ------------------
 8458|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 8.73k]
  ------------------
 8459|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 8.73k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|    962|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 962, False: 7.77k]
  ------------------
 8463|    962|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|    962|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    962|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    962|    }                                                           \
  |  | 8417|    962|    else {                                                      \
  |  | 8418|    962|        return vis(monostate_val);                              \
  |  | 8419|    962|    }
  ------------------
 8464|    962|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 962, False: 7.77k]
  ------------------
 8465|    962|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|    962|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    962|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    962|    }                                                           \
  |  | 8417|    962|    else {                                                      \
  |  | 8418|    962|        return vis(monostate_val);                              \
  |  | 8419|    962|    }
  ------------------
 8466|    962|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 962, False: 7.77k]
  ------------------
 8467|    962|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|    962|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|    962|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|    962|    }                                                           \
  |  | 8417|    962|    else {                                                      \
  |  | 8418|    962|        return vis(monostate_val);                              \
  |  | 8419|    962|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 8.73k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 8.73k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 8.73k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 8.73k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 8.73k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  8.73k|            SCN_CLANG_POP
 8491|  8.73k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  75.9k|{
   44|  75.9k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  75.9k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  75.9k|{
   60|  75.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  75.9k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.43k|{
   89|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.43k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.43k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.43k|{
  127|  8.43k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.43k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.43k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.43k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.43k|    static_cast<    \
  |  |  929|  8.43k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.43k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   113k|{
  653|   113k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   113k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    122|{
  659|    122|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    122|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 61, False: 61]
  ------------------
  661|    122|                    : std::locale{};
  662|    122|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    880|{
 1221|    880|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    880|                                  m_nan_payload_buffer, value);
 1223|    880|    value = this->setsign(value);
 1224|    880|    return n;
 1225|    880|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    924|{
 1221|    924|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    924|                                  m_nan_payload_buffer, value);
 1223|    924|    value = this->setsign(value);
 1224|    924|    return n;
 1225|    924|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     18|{
 1461|     18|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     18|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     18|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     18|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     18|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 18, False: 0]
  ------------------
 1467|     18|        SCN_UNLIKELY_ATTR
 1468|     18|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     18|                                     "Invalid integer value");
 1470|     18|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    882|{
 1461|    882|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    882|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    882|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    882|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    882|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 882, False: 0]
  ------------------
 1467|    882|        SCN_UNLIKELY_ATTR
 1468|    882|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    882|                                     "Invalid integer value");
 1470|    882|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    932|{
 1461|    932|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    932|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    932|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    932|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    932|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    932|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    932|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 932, False: 0]
  ------------------
 1467|    932|        SCN_UNLIKELY_ATTR
 1468|    932|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    932|                                     "Invalid integer value");
 1470|    932|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    882|{
 1461|    882|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    882|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    882|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    882|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    882|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    882|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    882|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 882, False: 0]
  ------------------
 1467|    882|        SCN_UNLIKELY_ATTR
 1468|    882|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    882|                                     "Invalid integer value");
 1470|    882|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    918|{
 1461|    918|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    918|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    918|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    918|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    918|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 918, False: 0]
  ------------------
 1467|    918|        SCN_UNLIKELY_ATTR
 1468|    918|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    918|                                     "Invalid integer value");
 1470|    918|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    868|{
 1461|    868|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    868|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    868|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    868|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    868|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    868|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    868|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 868, False: 0]
  ------------------
 1467|    868|        SCN_UNLIKELY_ATTR
 1468|    868|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    868|                                     "Invalid integer value");
 1470|    868|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    906|{
 1461|    906|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    906|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    906|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    906|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    906|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 906, False: 0]
  ------------------
 1467|    906|        SCN_UNLIKELY_ATTR
 1468|    906|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    906|                                     "Invalid integer value");
 1470|    906|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  37.9k|{
 2176|  37.9k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  37.9k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  75.9k|{
 2200|  75.9k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  75.9k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.70k|{
  194|  3.70k|    return find_classic_impl(
  195|  3.70k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.70k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.70k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  96.7k|{
  202|  96.7k|    return find_classic_impl(
  203|  96.7k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  96.7k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  96.7k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    308|{
  673|    308|    return e;
  674|    308|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  37.9k|{
 2133|  37.9k|    return vscan_internal(source, format, args);
 2134|  37.9k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  75.9k|{
 2153|  75.9k|    return vscan_internal(source, format, args);
 2154|  75.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.70k|{
  118|  3.70k|    auto it = source.begin();
  119|       |
  120|  15.7k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 12.8k, False: 2.94k]
  ------------------
  121|  12.8k|        auto sv =
  122|  12.8k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  12.8k|                .substr(0, 8);
  124|       |
  125|  12.8k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 4.56k, False: 8.26k]
  ------------------
  126|  4.56k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  4.56k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  4.56k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 474, False: 4.09k]
  ------------------
  129|    474|                break;
  130|    474|            }
  131|  4.09k|            continue;
  132|  4.56k|        }
  133|       |
  134|  34.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 26.6k, False: 7.97k]
  ------------------
  135|  26.6k|            auto tmp =
  136|  26.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  26.6k|            auto res = get_next_code_point(tmp);
  138|  26.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 288, False: 26.3k]
  ------------------
  139|    288|                return it;
  140|    288|            }
  141|  26.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  26.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  26.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  26.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  26.3k|        }
  145|  8.26k|    }
  146|       |
  147|  3.42k|    return detail::make_string_view_iterator(source, it);
  148|  3.70k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   108k|{
  105|   108k|    static_assert(sizeof(*source.data()) == 1);
  106|   108k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   108k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   108k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   108k|    uint64_t word{};
  108|   108k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   108k|    return has_byte_greater(word, 127) != 0;
  111|   108k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  29.7k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  26.6k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  96.7k|{
  118|  96.7k|    auto it = source.begin();
  119|       |
  120|  98.8k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 95.5k, False: 3.29k]
  ------------------
  121|  95.5k|        auto sv =
  122|  95.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  95.5k|                .substr(0, 8);
  124|       |
  125|  95.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 78.7k, False: 16.8k]
  ------------------
  126|  78.7k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  78.7k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  78.7k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 77.8k, False: 892]
  ------------------
  129|  77.8k|                break;
  130|  77.8k|            }
  131|    892|            continue;
  132|  78.7k|        }
  133|       |
  134|  20.8k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 19.5k, False: 1.28k]
  ------------------
  135|  19.5k|            auto tmp =
  136|  19.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  19.5k|            auto res = get_next_code_point(tmp);
  138|  19.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 15.5k, False: 4.05k]
  ------------------
  139|  15.5k|                return it;
  140|  15.5k|            }
  141|  4.05k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  4.05k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  4.05k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  4.05k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  4.05k|        }
  145|  16.8k|    }
  146|       |
  147|  81.1k|    return detail::make_string_view_iterator(source, it);
  148|  96.7k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  84.4k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  19.5k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    880|{
 1138|    880|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 880]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    880|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 880]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    880|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 880]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    880|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 880]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    880|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    880|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    880|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    880|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 10, False: 870]
  ------------------
 1185|     10|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 1186|     10|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     10|                                         "Invalid floating-point digit");
 1188|     10|        }
 1189|     10|    }
 1190|    870|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    870|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 870, False: 0]
  |  |  ------------------
  ------------------
 1191|    870|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    870|                                     "Invalid floating-point digit");
 1193|    870|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    924|{
 1138|    924|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 924]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    924|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 924]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    924|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 924]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    924|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 924]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    924|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    924|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    924|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    924|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 14, False: 910]
  ------------------
 1185|     14|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 1186|     14|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     14|                                         "Invalid floating-point digit");
 1188|     14|        }
 1189|     14|    }
 1190|    910|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 910, False: 0]
  |  |  ------------------
  ------------------
 1191|    910|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    910|                                     "Invalid floating-point digit");
 1193|    910|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  75.9k|{
 1625|  75.9k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 75.5k, False: 360]
  ------------------
 1626|  75.5k|        return false;
 1627|  75.5k|    }
 1628|    360|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 234]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  75.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  75.8k|    {
 1903|  75.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   227k|    {
 1722|   227k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   227k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  75.8k|    {
 1853|  75.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  75.8k|{
 2030|  75.8k|    const auto beg = handler.get_ctx().begin();
 2031|  75.8k|    detail::parse_format_string<false>(format, handler);
 2032|  75.8k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.3k, False: 2.51k]
  |  |  ------------------
  ------------------
 2033|  73.3k|        return unexpected(handler.error);
 2034|  73.3k|    }
 2035|  2.51k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  75.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   790k|    {
 2014|   790k|        return ctx.get();
 2015|   790k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   790k|    {
 1857|   790k|        return contiguous_ctx;
 1858|   790k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  93.0k|    {
 1907|   219k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 131k, False: 88.1k]
  ------------------
 1908|   131k|            auto it = get_ctx().begin();
 1909|   131k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.08k, False: 130k]
  ------------------
 1910|  1.08k|                SCN_UNLIKELY_ATTR
 1911|  1.08k|                return on_error("Unexpected end of source");
 1912|  1.08k|            }
 1913|       |
 1914|   130k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   130k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   130k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.45k, False: 127k]
  ------------------
 1917|  2.45k|                return on_error("Invalid encoding in format string");
 1918|  2.45k|            }
 1919|   127k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 86.9k, False: 41.0k]
  ------------------
 1920|  86.9k|                get_ctx().advance_to(
 1921|  86.9k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  86.9k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  86.9k|                continue;
 1924|  86.9k|            }
 1925|       |
 1926|  41.0k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 1.38k, False: 39.6k]
  ------------------
 1927|  1.38k|                SCN_UNLIKELY_ATTR
 1928|  1.38k|                return on_error("Unexpected literal character in source");
 1929|  1.38k|            }
 1930|  39.6k|            get_ctx().advance_to(ranges::next(it));
 1931|  39.6k|        }
 1932|  93.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1963|  6.06k|    {
 1964|  6.06k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  6.06k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  6.06k|        on_visit_scan_arg(
 1968|  6.06k|            impl::default_arg_reader<context_type>{
 1969|  6.06k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  6.06k|            arg);
 1971|  6.06k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  58.8k|{
 1681|  58.8k|    auto arg = ctx.arg(id);
 1682|  58.8k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.57k, False: 57.2k]
  |  |  ------------------
  ------------------
 1683|  1.57k|        handler.on_error("Failed to find argument with ID");
 1684|  1.57k|    }
 1685|  58.8k|    return arg;
 1686|  58.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  75.5k|    {
 1797|  75.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  75.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.98k, False: 72.5k]
  |  |  ------------------
  ------------------
 1798|  2.98k|            on_error("Invalid out-of-range argument ID");
 1799|  2.98k|            return;
 1800|  2.98k|        }
 1801|       |
 1802|  72.5k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 182, False: 72.4k]
  |  |  ------------------
  ------------------
 1803|    182|            return on_error("Argument with this ID has already been scanned");
 1804|    182|        }
 1805|       |
 1806|  72.4k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  72.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 72.4k, False: 0]
  |  |  ------------------
  ------------------
 1807|  72.4k|            visited_args_lower64 |= (1ull << id);
 1808|  72.4k|            return;
 1809|  72.4k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  72.5k|    {
 1782|  72.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  72.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  72.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 72.5k, False: 0]
  |  |  ------------------
  ------------------
 1788|  72.5k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  72.5k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  72.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  6.06k|    {
 1948|  6.06k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 210, False: 5.85k]
  |  Branch (1948:23): [True: 0, False: 5.85k]
  ------------------
 1949|    210|            SCN_UNLIKELY_ATTR
 1950|    210|            return;
 1951|    210|        }
 1952|       |
 1953|  5.85k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  5.85k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 1.85k]
  |  |  ------------------
  ------------------
 1955|  4.00k|            on_error(r.error());
 1956|  4.00k|        }
 1957|  1.85k|        else {
 1958|  1.85k|            get_ctx().advance_to(*r);
 1959|  1.85k|        }
 1960|  5.85k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  58.7k|    {
 1766|  58.7k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.7k, False: 0]
  |  |  ------------------
  ------------------
 1767|  58.7k|            error = err;
 1768|  58.7k|        }
 1769|  58.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  55.7k|    {
 1936|  55.7k|        return parse_ctx.next_arg_id();
 1937|  55.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1939|  3.16k|    {
 1940|  3.16k|        parse_ctx.check_arg_id(id);
 1941|  3.16k|        return id;
 1942|  3.16k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  52.8k|    {
 1977|  52.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  52.8k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  52.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 52.8k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  52.8k|        auto specs = detail::format_specs{};
 1990|  52.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  52.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  52.8k|            arg.type()};
 1993|       |
 1994|  52.8k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  52.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 2.41k, False: 50.3k]
  |  Branch (1995:29): [True: 722, False: 49.6k]
  ------------------
 1996|  3.13k|            SCN_UNLIKELY_ATTR
 1997|  3.13k|            on_error("Missing '}' in format string");
 1998|  3.13k|            return parse_ctx.begin();
 1999|  3.13k|        }
 2000|  49.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  49.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 222, False: 49.4k]
  |  |  ------------------
  ------------------
 2001|    222|            return parse_ctx.begin();
 2002|    222|        }
 2003|  49.4k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  49.4k|        on_visit_scan_arg(
 2006|  49.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  49.4k|                                           get_ctx().locale()},
 2008|  49.4k|            arg);
 2009|  49.4k|        return parse_ctx.begin();
 2010|  49.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  52.8k|    {
 1701|  52.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  49.4k|    {
 1948|  49.4k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 198, False: 49.2k]
  |  Branch (1948:23): [True: 0, False: 49.2k]
  ------------------
 1949|    198|            SCN_UNLIKELY_ATTR
 1950|    198|            return;
 1951|    198|        }
 1952|       |
 1953|  49.2k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  49.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44.0k, False: 5.18k]
  |  |  ------------------
  ------------------
 1955|  44.0k|            on_error(r.error());
 1956|  44.0k|        }
 1957|  5.18k|        else {
 1958|  5.18k|            get_ctx().advance_to(*r);
 1959|  5.18k|        }
 1960|  49.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   349k|    {
 1761|   349k|        SCN_UNLIKELY_ATTR
 1762|   349k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   349k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   227k|    {
 1729|   227k|        {
 1730|   227k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 227k]
  ------------------
 1731|   227k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 227k]
  ------------------
 1732|   227k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   227k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   227k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 155k, False: 72.4k]
  ------------------
 1736|   155k|                return on_error("Argument list not exhausted");
 1737|   155k|            }
 1738|   227k|        }
 1739|       |
 1740|  72.4k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 72.4k, False: 0]
  ------------------
 1741|  72.4k|            return;
 1742|  72.4k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   227k|    {
 1777|   227k|        return error;
 1778|   227k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   394k|    {
 1773|   394k|        return static_cast<bool>(error);
 1774|   394k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  75.9k|{
 2045|  75.9k|    const auto argcount = args.size();
 2046|  75.9k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 75.8k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|  75.8k|    auto handler = format_handler<true, CharT>{
 2052|  75.8k|        ranges::subrange<const CharT*>{source.data(),
 2053|  75.8k|                                       source.data() + source.size()},
 2054|  75.8k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  75.8k|    static_cast<    \
  |  |  929|  75.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  75.8k|    static_cast<    \
  |  |  929|  75.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  75.8k|    return vscan_parse_format_string(format, handler);
 2056|  75.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   151k|{
 2045|   151k|    const auto argcount = args.size();
 2046|   151k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 151k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|   151k|    auto handler = format_handler<true, CharT>{
 2052|   151k|        ranges::subrange<const CharT*>{source.data(),
 2053|   151k|                                       source.data() + source.size()},
 2054|   151k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   151k|    static_cast<    \
  |  |  929|   151k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   151k|    return vscan_parse_format_string(format, handler);
 2056|   151k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   151k|{
 1625|   151k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 140k, False: 10.8k]
  ------------------
 1626|   140k|        return false;
 1627|   140k|    }
 1628|  10.8k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 10.6k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   151k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   151k|    {
 1903|   151k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   151k|    {
 1853|   151k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   151k|{
 2030|   151k|    const auto beg = handler.get_ctx().begin();
 2031|   151k|    detail::parse_format_string<false>(format, handler);
 2032|   151k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151k, False: 236]
  |  |  ------------------
  ------------------
 2033|   151k|        return unexpected(handler.error);
 2034|   151k|    }
 2035|    236|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   151k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.04M|    {
 2014|  1.04M|        return ctx.get();
 2015|  1.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.04M|    {
 1857|  1.04M|        return contiguous_ctx;
 1858|  1.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  78.5k|    {
 1907|   314k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 296k, False: 17.3k]
  ------------------
 1908|   296k|            auto it = get_ctx().begin();
 1909|   296k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 792, False: 296k]
  ------------------
 1910|    792|                SCN_UNLIKELY_ATTR
 1911|    792|                return on_error("Unexpected end of source");
 1912|    792|            }
 1913|       |
 1914|   296k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   296k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   296k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 59.9k, False: 236k]
  ------------------
 1917|  59.9k|                return on_error("Invalid encoding in format string");
 1918|  59.9k|            }
 1919|   236k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 1.88k, False: 234k]
  ------------------
 1920|  1.88k|                get_ctx().advance_to(
 1921|  1.88k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  1.88k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  1.88k|                continue;
 1924|  1.88k|            }
 1925|       |
 1926|   234k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 460, False: 233k]
  ------------------
 1927|    460|                SCN_UNLIKELY_ATTR
 1928|    460|                return on_error("Unexpected literal character in source");
 1929|    460|            }
 1930|   233k|            get_ctx().advance_to(ranges::next(it));
 1931|   233k|        }
 1932|  78.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1963|  4.87k|    {
 1964|  4.87k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  4.87k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  4.87k|        on_visit_scan_arg(
 1968|  4.87k|            impl::default_arg_reader<context_type>{
 1969|  4.87k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  4.87k|            arg);
 1971|  4.87k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  16.7k|{
 1681|  16.7k|    auto arg = ctx.arg(id);
 1682|  16.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.41k, False: 15.3k]
  |  |  ------------------
  ------------------
 1683|  1.41k|        handler.on_error("Failed to find argument with ID");
 1684|  1.41k|    }
 1685|  16.7k|    return arg;
 1686|  16.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  4.87k|    {
 1948|  4.87k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 156, False: 4.71k]
  |  Branch (1948:23): [True: 0, False: 4.71k]
  ------------------
 1949|    156|            SCN_UNLIKELY_ATTR
 1950|    156|            return;
 1951|    156|        }
 1952|       |
 1953|  4.71k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  4.71k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.41k, False: 1.29k]
  |  |  ------------------
  ------------------
 1955|  3.41k|            on_error(r.error());
 1956|  3.41k|        }
 1957|  1.29k|        else {
 1958|  1.29k|            get_ctx().advance_to(*r);
 1959|  1.29k|        }
 1960|  4.71k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  16.4k|    {
 1936|  16.4k|        return parse_ctx.next_arg_id();
 1937|  16.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1939|    348|    {
 1940|    348|        parse_ctx.check_arg_id(id);
 1941|    348|        return id;
 1942|    348|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  11.8k|    {
 1977|  11.8k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  11.8k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  11.8k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 11.8k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  11.8k|        auto specs = detail::format_specs{};
 1990|  11.8k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  11.8k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  11.8k|            arg.type()};
 1993|       |
 1994|  11.8k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  11.8k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 1.96k, False: 9.88k]
  |  Branch (1995:29): [True: 792, False: 9.08k]
  ------------------
 1996|  2.76k|            SCN_UNLIKELY_ATTR
 1997|  2.76k|            on_error("Missing '}' in format string");
 1998|  2.76k|            return parse_ctx.begin();
 1999|  2.76k|        }
 2000|  9.08k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  9.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 146, False: 8.94k]
  |  |  ------------------
  ------------------
 2001|    146|            return parse_ctx.begin();
 2002|    146|        }
 2003|  8.94k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  8.94k|        on_visit_scan_arg(
 2006|  8.94k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  8.94k|                                           get_ctx().locale()},
 2008|  8.94k|            arg);
 2009|  8.94k|        return parse_ctx.begin();
 2010|  9.08k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  11.8k|    {
 1701|  11.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  8.94k|    {
 1948|  8.94k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 204, False: 8.73k]
  |  Branch (1948:23): [True: 0, False: 8.73k]
  ------------------
 1949|    204|            SCN_UNLIKELY_ATTR
 1950|    204|            return;
 1951|    204|        }
 1952|       |
 1953|  8.73k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  8.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  8.73k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  8.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.30k, False: 1.43k]
  |  |  ------------------
  ------------------
 1955|  7.30k|            on_error(r.error());
 1956|  7.30k|        }
 1957|  1.43k|        else {
 1958|  1.43k|            get_ctx().advance_to(*r);
 1959|  1.43k|        }
 1960|  8.73k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.21k|{
 1363|  4.21k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.21k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.21k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.21k|            std::u32string tmp;
 1368|  4.21k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.21k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.21k|                std::u32string_view{tmp}, dest);
 1371|  4.21k|        }
 1372|  4.21k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.21k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.21k|        }
 1375|  4.21k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.21k|{
 1256|  4.21k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.21k|    auto it = src.begin();
 1259|   590k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 586k, False: 4.21k]
  ------------------
 1260|   586k|        auto res = get_next_code_point(
 1261|   586k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   586k|                                                                 src.end()));
 1263|   586k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   586k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.86k, False: 576k]
  |  |  ------------------
  ------------------
 1264|  9.86k|            dest.push_back(DestCharT{0xfffd});
 1265|  9.86k|        }
 1266|   576k|        else {
 1267|   576k|            dest.push_back(res.value);
 1268|   576k|        }
 1269|   586k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   586k|    }
 1271|  4.21k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   807k|{
 1169|   807k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   807k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   807k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   807k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   807k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   807k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 795k]
  |  |  ------------------
  ------------------
 1173|  12.5k|        return {get_start_for_next_code_point(input),
 1174|  12.5k|                detail::invalid_code_point};
 1175|  12.5k|    }
 1176|   795k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.12k, False: 792k]
  |  |  ------------------
  ------------------
 1177|  2.12k|        return {input.end(), detail::invalid_code_point};
 1178|  2.12k|    }
 1179|       |
 1180|   792k|    return {input.begin() + len,
 1181|   792k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   795k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  12.5k|{
 1155|  12.5k|    auto it = input.begin();
 1156|  53.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 50.5k, False: 3.12k]
  ------------------
 1157|  50.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.43k, False: 41.0k]
  ------------------
 1158|  9.43k|            break;
 1159|  9.43k|        }
 1160|  50.5k|    }
 1161|  12.5k|    return it;
 1162|  12.5k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  49.4k|    {
  809|  49.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  49.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  49.4k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  18.4k|    {
  823|  18.4k|        return a.m_code == b.m_code;
  824|  18.4k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  32.0k|    {
 2931|  32.0k|        SCN_UNLIKELY_ATTR
 2932|  32.0k|        m_msg = msg;
 2933|  32.0k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  57.9k|    {
 2936|  57.9k|        return m_msg == nullptr;
 2937|  57.9k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.21k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|   627k|    {
 4990|   627k|        on_charset_range(cp, cp + 1);
 4991|   627k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|   630k|    {
 4995|   630k|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 363k, False: 267k]
  ------------------
 4996|   363k|            return;
 4997|   363k|        }
 4998|       |
 4999|  53.2M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 53.2M, False: 267k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|  53.2M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 108, False: 53.2M]
  ------------------
 5002|    108|                elem.first = begin;
 5003|    108|                return;
 5004|    108|            }
 5005|       |
 5006|  53.2M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 282, False: 53.2M]
  ------------------
 5007|    282|                elem.second = end;
 5008|    282|                return;
 5009|    282|            }
 5010|  53.2M|        }
 5011|       |
 5012|   267k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   267k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    354|    {
 5017|       |        // no-op
 5018|    354|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|   636k|    {
 5032|   636k|        return static_cast<bool>(err);
 5033|   636k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.39k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   114k|{
  458|   114k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   114k|        static_cast<unsigned char>(ch))];
  460|   114k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   557k|{
  469|   557k|    return static_cast<unsigned char>(ch) <= 127;
  470|   557k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   587k|{
  483|   587k|    return cp <= 127;
  484|   587k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   108k|{
  539|   108k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   108k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  50.3k|{
  784|  50.3k|    return e != eof_error::good;
  785|  50.3k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|     96|{
  798|     96|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|     96|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     96|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|     96|    return scan_error{scan_error::end_of_range, "EOF"};
  800|     96|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    682|{
  845|    682|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    682|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    682|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    682|    return parse_error::eof;
  847|    682|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.51k|{
  854|  4.51k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.51k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.51k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 82, False: 4.43k]
  ------------------
  859|     82|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     82|    }
  861|       |
  862|  4.43k|    return scan_error{code, msg};
  863|  4.51k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.51k|{
  868|  4.51k|    return [code, msg](parse_error err) {
  869|  4.51k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.51k|    };
  871|  4.51k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   569k|{
 1200|       |    // Pattern_White_Space property
 1201|   569k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 286k, False: 282k]
  |  Branch (1201:27): [True: 72.1k, False: 214k]
  ------------------
 1202|   569k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 18.9k, False: 478k]
  ------------------
 1203|   569k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 9.14k, False: 468k]
  ------------------
 1204|   569k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 756, False: 468k]
  ------------------
 1205|   569k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 1.71k, False: 466k]
  ------------------
 1206|   569k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 640, False: 465k]
  ------------------
 1207|   569k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 20, False: 465k]
  ------------------
 1208|   569k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.63k|{
 2220|  3.63k|    unsigned char running_diff{0};
 2221|  12.7k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.09k, False: 3.63k]
  ------------------
 2222|  9.09k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.09k|    }
 2224|  3.63k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.63k]
  |  Branch (2224:33): [True: 0, False: 3.63k]
  ------------------
 2225|  3.63k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   240k|{
 2303|   240k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 24.8k, False: 215k]
  ------------------
 2304|   240k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 794, False: 24.0k]
  ------------------
 2305|  24.8k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 84, False: 23.9k]
  ------------------
 2306|  24.8k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 48, False: 23.8k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  24.8k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 21.5k, False: 2.30k]
  |  Branch (2308:27): [True: 3.06k, False: 18.5k]
  |  Branch (2308:43): [True: 2.94k, False: 114]
  ------------------
 2309|  24.8k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 18.5k, False: 2.41k]
  |  Branch (2309:27): [True: 92, False: 18.4k]
  ------------------
 2310|  24.8k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 18.3k, False: 2.44k]
  |  Branch (2310:27): [True: 86, False: 18.3k]
  ------------------
 2311|  24.8k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 18.1k, False: 2.57k]
  |  Branch (2311:27): [True: 72, False: 18.1k]
  ------------------
 2312|  24.8k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 18.1k, False: 2.57k]
  |  Branch (2312:27): [True: 388, False: 17.7k]
  ------------------
 2313|  24.8k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 17.7k, False: 2.57k]
  |  Branch (2313:27): [True: 36, False: 17.6k]
  ------------------
 2314|  24.8k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 17.6k, False: 2.57k]
  |  Branch (2314:27): [True: 78, False: 17.6k]
  ------------------
 2315|  24.8k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 17.4k, False: 2.77k]
  |  Branch (2315:28): [True: 84, False: 17.3k]
  ------------------
 2316|  24.8k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 17.3k, False: 2.77k]
  |  Branch (2316:28): [True: 398, False: 16.9k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  24.8k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 17.0k, False: 2.64k]
  |  Branch (2318:28): [True: 114, False: 16.9k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  24.8k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 16.9k, False: 2.64k]
  |  Branch (2320:28): [True: 18, False: 16.9k]
  ------------------
 2321|  5.23k|        return 2;
 2322|  5.23k|    }
 2323|   235k|    return 1;
 2324|   240k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   189k|{
 2328|   189k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   189k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    186|{
 2343|    186|    return calculate_text_width_for_fmt_v10(cp);
 2344|    186|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  16.4k|{
 3123|  16.4k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  16.4k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  7.84k|{
 3127|  7.84k|#if WCHAR_MIN < 0
 3128|  7.84k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 7.84k, False: 0]
  |  Branch (3128:20): [True: 7.84k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  7.84k|        return char_to_int(static_cast<char>(ch));
 3133|  7.84k|    }
 3134|      0|    return 255;
 3135|  7.84k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  10.7k|{
 4271|  10.7k|    std::regex_constants::syntax_option_type result{};
 4272|  10.7k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 348, False: 10.3k]
  ------------------
 4273|    348|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|    348|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|    348|    }
 4281|  10.7k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 10.7k]
  ------------------
 4282|  10.7k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  10.7k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 1.17k, False: 9.53k]
  ------------------
 4288|  1.17k|        result |= std::regex_constants::icase;
 4289|  1.17k|    }
 4290|  10.7k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 6, False: 10.6k]
  ------------------
 4291|      6|        result |= std::regex_constants::nosubs;
 4292|      6|    }
 4293|  10.7k|    return result;
 4294|  10.7k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|    972|{
 4638|    972|    std::string result{pattern};
 4639|  8.22k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 7.25k, False: 972]
  ------------------
 4640|  7.25k|        result.replace(n, 2, "/");
 4641|  7.25k|        ++n;
 4642|  7.25k|    }
 4643|    972|    return result;
 4644|    972|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  7.41k|{
 6008|  7.41k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 1.80k, False: 5.61k]
  ------------------
 6009|  1.80k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 750, False: 1.05k]
  ------------------
 6010|    750|            return {scan_error::invalid_scanned_value,
 6011|    750|                    "Scanned value too narrow, width did not exceed what "
 6012|    750|                    "was specified in the format string"};
 6013|    750|        }
 6014|  1.80k|    }
 6015|  6.66k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 1.72k, False: 4.94k]
  ------------------
 6016|  1.72k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 44, False: 1.67k]
  ------------------
 6017|     44|            return {scan_error::invalid_scanned_value,
 6018|     44|                    "Scanned value too wide, width exceeded the specified "
 6019|     44|                    "precision"};
 6020|     44|        }
 6021|  1.72k|    }
 6022|  6.62k|    return {};
 6023|  6.66k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   136k|    {
  304|   136k|        ranges::advance(x, n);
  305|   136k|        return x;
  306|   136k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   136k|    {
  268|   136k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   136k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   190k|    {
  151|   190k|        i += n;
  152|   190k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   133k|    {
  108|   133k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   133k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   133k|    {
   87|   133k|        return s - i;
   88|   133k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.53k|    {
  304|  5.53k|        ranges::advance(x, n);
  305|  5.53k|        return x;
  306|  5.53k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.53k|    {
  268|  5.53k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.53k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.53k|    {
  151|  5.53k|        i += n;
  152|  5.53k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|    262|    {
  108|    262|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|    262|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|    262|    {
   87|    262|        return s - i;
   88|    262|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  5.45k|    {
 5624|  5.45k|        reader_error_handler eh{};
 5625|  5.45k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  5.45k|            detail::check_code_point_type_specs(specs, eh);
 5627|  5.45k|        }
 5628|  5.45k|        else {
 5629|  5.45k|            detail::check_char_type_specs(specs, eh);
 5630|  5.45k|        }
 5631|  5.45k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.88k, False: 570]
  |  |  ------------------
  ------------------
 5632|  4.88k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  4.88k|        }
 5634|    570|        return {};
 5635|  5.45k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  36.4k|    {
  763|  36.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  36.4k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  4.26k|    {
  754|  4.26k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  6.59k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.59k|              cvref<T> obj = *get<T>(fn);
  745|  6.59k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.59k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.59k|              }
  748|  6.59k|              else {
  749|  6.59k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.59k|              }
  751|  6.59k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.59k|    {
  684|  6.59k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.59k|            return static_cast<T*>(s.m_cp);
  686|  6.59k|        }
  687|  6.59k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.59k|            return static_cast<T*>(s.m_p);
  689|  6.59k|        }
  690|  6.59k|        else {
  691|  6.59k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.59k|        }
  693|  6.59k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  4.26k|        {
  662|  4.26k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.28M|    {
  763|  1.28M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.28M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  16.3k|    {
  754|  16.3k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   601k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   601k|              cvref<T> obj = *get<T>(fn);
  745|   601k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   601k|                  obj(static_cast<decltype(args)>(args)...);
  747|   601k|              }
  748|   601k|              else {
  749|   601k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   601k|              }
  751|   601k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   601k|    {
  684|   601k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   601k|            return static_cast<T*>(s.m_cp);
  686|   601k|        }
  687|   601k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   601k|            return static_cast<T*>(s.m_p);
  689|   601k|        }
  690|   601k|        else {
  691|   601k|            return reinterpret_cast<T*>(s.m_fp);
  692|   601k|        }
  693|   601k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  16.3k|        {
  662|  16.3k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  1.74k|    {
 5619|  1.74k|        return false;
 5620|  1.74k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.51k|    return [code, msg](parse_error err) {
  869|  4.51k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.51k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     62|    {
 1780|     62|        auto stdloc = loc.get<std::locale>();
 1781|     62|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     62|        grouping = numpunct.grouping();
 1783|     62|        thousands_sep =
 1784|     62|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 62]
  ------------------
 1785|     62|        decimal_point = numpunct.decimal_point();
 1786|     62|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     80|{
 1717|     80|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 80, False: 0]
  ------------------
 1718|     80|        return std::use_facet<Facet>(stdloc);
 1719|     80|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     80|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  37.7k|{
 2349|  37.7k|    size_t count{0};
 2350|  37.7k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  37.7k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  37.7k|    });
 2353|  37.7k|    return count;
 2354|  37.7k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  37.7k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  37.7k|    auto it = input.begin();
 1448|  82.0k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 44.3k, False: 37.7k]
  ------------------
 1449|  44.3k|        auto res = get_next_code_point(
 1450|  44.3k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  44.3k|        cb(res.value);
 1452|  44.3k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  44.3k|    }
 1454|  37.7k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  51.0k|    {
  763|  51.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  51.0k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  37.7k|    {
  754|  37.7k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  44.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.3k|              cvref<T> obj = *get<T>(fn);
  745|  44.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  44.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.3k|              }
  748|  44.3k|              else {
  749|  44.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.3k|              }
  751|  44.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  44.3k|    {
  684|  44.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  44.3k|            return static_cast<T*>(s.m_cp);
  686|  44.3k|        }
  687|  44.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  44.3k|            return static_cast<T*>(s.m_p);
  689|  44.3k|        }
  690|  44.3k|        else {
  691|  44.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  44.3k|        }
  693|  44.3k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  44.3k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  44.3k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  44.3k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  37.7k|        {
  662|  37.7k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  4.09k|    {
 1582|  4.09k|        return m_view;
 1583|  4.09k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.45k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  22.4k|    {
 2382|  22.4k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  1.44k|    {
 2421|  1.44k|        return m_multibyte_left;
 2422|  1.44k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   449k|    {
 2426|   449k|        return *m_current;
 2427|   449k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   366k|    {
 2435|   366k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   366k|        _increment_current();
 2437|   366k|        return *this;
 2438|   366k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   366k|    {
 2668|   366k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 188k, False: 178k]
  ------------------
 2669|   188k|            auto cplen = _get_cp_length_at_current();
 2670|   188k|            m_multibyte_left = cplen - 1;
 2671|   188k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   188k|        }
 2673|   178k|        else {
 2674|   178k|            --m_multibyte_left;
 2675|   178k|        }
 2676|       |
 2677|   366k|        ++m_current;
 2678|   366k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   188k|    {
 2639|   188k|        return static_cast<difference_type>(
 2640|   188k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   188k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   188k|    {
 2645|   188k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.03k, False: 187k]
  |  |  ------------------
  ------------------
 2646|  1.03k|            return 0;
 2647|  1.03k|        }
 2648|       |
 2649|   187k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 151k, False: 35.9k]
  ------------------
 2650|   151k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   151k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   151k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   151k|        }
 2654|       |
 2655|  35.9k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  35.9k|                                           cplen);
 2657|  35.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  35.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 202, False: 35.7k]
  |  |  ------------------
  ------------------
 2658|    202|            return 0;
 2659|    202|        }
 2660|       |
 2661|  35.7k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  35.7k|        return static_cast<difference_type>(
 2663|  35.7k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  35.9k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  38.1k|{
 1857|  38.1k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  38.1k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  38.1k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  38.1k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 312, False: 37.8k]
  ------------------
 1862|    312|            return unexpected(eof_error::eof);
 1863|    312|        }
 1864|       |
 1865|  37.8k|        return ranges::next(range.begin(), count);
 1866|  38.1k|    }
 1867|  38.1k|    else {
 1868|  38.1k|        auto it = range.begin();
 1869|  38.1k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  38.1k|            return ranges::next(it, count);
 1871|  38.1k|        }
 1872|       |
 1873|  38.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  38.1k|            if (it == range.end()) {
 1875|  38.1k|                return unexpected(eof_error::eof);
 1876|  38.1k|            }
 1877|  38.1k|        }
 1878|       |
 1879|  38.1k|        return it;
 1880|  38.1k|    }
 1881|  38.1k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  3.68k|    {
  268|  3.68k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.68k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  3.68k|    {
  161|  3.68k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  3.68k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 3.68k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  3.68k|        else {
  169|  3.68k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 3.68k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  3.68k|        }
  173|  3.68k|    }
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   196k|    {
 2531|   196k|        return !(a == b);
 2532|   196k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   199k|    {
 2523|   199k|        return a.m_current == b.m_current;
 2524|   199k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   137k|    {
 1890|   137k|        return !codepoint.empty();
 1891|   137k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  8.27k|    {
 2832|  8.27k|        return take_width_view{r, n};
 2833|  8.27k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  8.27k|    {
 2801|  8.27k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  8.27k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    338|    {
 5663|    338|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 308, False: 30]
  ------------------
 5664|    338|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 30]
  ------------------
 5665|    308|            return read_default(range, value, loc);
 5666|    308|        }
 5667|       |
 5668|     30|        reader_impl_for_int<CharT> reader{};
 5669|     30|        signed char tmp_value{};
 5670|     30|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     30|        value = static_cast<signed char>(value);
 5672|     30|        return ret;
 5673|    338|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    308|    {
 5645|    308|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    308|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    308|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    308|            return code_unit_reader<char>{}.read(range, value);
 5648|    308|        }
 5649|    308|        else {
 5650|    308|            SCN_UNUSED(range);
 5651|    308|            SCN_EXPECT(false);
 5652|    308|            SCN_UNREACHABLE;
 5653|    308|        }
 5654|    308|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    308|    {
 5564|    308|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    308|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    308|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    308|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    308|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    308|        ch = *range.begin();
 5566|    308|        return it;
 5567|    308|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  2.28k|{
 1846|  2.28k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.28k|    return ranges::next(range.begin());
 1851|  2.28k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.28k|{
  950|  2.28k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.28k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.28k|    return eof_error::good;
  954|  2.28k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.28k|{
  944|  2.28k|    return is_range_eof(r.begin(), r.end());
  945|  2.28k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   141k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   141k|    {
  937|   141k|        return begin == end;
  938|   141k|    }
  939|   141k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   358k|        {
 2770|   358k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 1.44k, False: 356k]
  |  Branch (2770:39): [True: 922, False: 526]
  ------------------
 2771|   358k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 1.13k, False: 356k]
  ------------------
 2772|   358k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   257k|    {
 2816|   257k|        return sentinel<true>{m_base.get().end()};
 2817|   257k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   302k|    {
 2717|   302k|        return view;
 2718|   302k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   257k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.31k|    {
  296|  2.31k|        ++x;
  297|  2.31k|        return x;
  298|  2.31k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  22.4k|    {
 2810|  22.4k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  22.4k|                                      m_count};
 2812|  22.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     30|    {
 3539|     30|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     30|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     30|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     30|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 30]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     30|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 30]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     30|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     30|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 3565|     30|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    992|{
 3326|    992|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    992|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    992|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    992|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    992|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 992]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    992|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    992|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    992|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    992|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    992|        parse_integer_base_prefix(
 3331|    992|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    992|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 992]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    992|    else {
 3343|    992|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 992]
  |  Branch (3343:13): [True: 992, False: 0]
  ------------------
 3344|    992|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 992, False: 0]
  ------------------
 3345|    992|            digits_begin_it = base_prefix_begin_it;
 3346|    992|        }
 3347|    992|    }
 3348|       |
 3349|    992|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 992, False: 0]
  ------------------
 3350|    992|        sign = sign_type::plus_sign;
 3351|    992|    }
 3352|    992|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    992|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    992|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.31k|{
 3141|  1.31k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.31k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.31k, False: 0]
  ------------------
 3143|  1.31k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.31k, False: 0]
  ------------------
 3144|  1.31k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.31k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.31k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.31k|{
 2272|  1.31k|    auto it = read_code_unit(range);
 2273|  1.31k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.31k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.63k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.63k, False: 1.31k]
  ------------------
 2278|  2.63k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.63k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.63k|    }
 2282|       |
 2283|  1.31k|    return unexpected(parse_error::error);
 2284|  1.31k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    992|{
 3293|    992|    switch (base) {
 3294|      8|        case 2:
  ------------------
  |  Branch (3294:9): [True: 8, False: 984]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      8|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      8|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 982]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    312|        case 16:
  ------------------
  |  Branch (3307:9): [True: 312, False: 680]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    312|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    312|                    false};
 3311|       |
 3312|     22|        case 0:
  ------------------
  |  Branch (3312:9): [True: 22, False: 970]
  ------------------
 3313|       |            // detect base
 3314|     22|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    640|        default:
  ------------------
  |  Branch (3316:9): [True: 640, False: 352]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    640|            return {range.begin(), base, false};
 3319|    992|    }
 3320|    992|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    330|{
 2291|    330|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 330, False: 0]
  ------------------
 2292|    330|        return range.begin();
 2293|    330|    }
 2294|      0|    return *result;
 2295|    330|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     30|{
 3244|     30|    return read_matching_string_classic_nocase(range, "0b");
 3245|     30|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.36k|{
 2231|  1.36k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.36k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.36k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.36k|        if (range.size() < str.size()) {
 2236|  1.36k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.36k|        }
 2238|  1.36k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.36k|            return unexpected(parse_error::error);
 2240|  1.36k|        }
 2241|  1.36k|        return ranges::next(range.begin(), str.size());
 2242|  1.36k|    }
 2243|  1.36k|    else {
 2244|  1.36k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.36k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.36k|                return ch;
 2247|  1.36k|            }
 2248|  1.36k|            return static_cast<char_type>(ch +
 2249|  1.36k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.36k|        };
 2251|       |
 2252|  1.36k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 140, False: 1.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    140|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    140|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    140|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    140|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    140|    }                                                  \
  |  |  |  | 3667|  1.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.22k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.22k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.22k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.22k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.22k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.22k|                    return ascii_tolower(a) ==
 2259|  1.22k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.22k|                }))) {
 2261|  1.22k|            return unexpected(parse_error::error);
 2262|  1.22k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.22k|    }
 2266|  1.36k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  1.71k|{
 1857|  1.71k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.71k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.71k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.71k|        if (sz < count) {
 1862|  1.71k|            return unexpected(eof_error::eof);
 1863|  1.71k|        }
 1864|       |
 1865|  1.71k|        return ranges::next(range.begin(), count);
 1866|  1.71k|    }
 1867|  1.71k|    else {
 1868|  1.71k|        auto it = range.begin();
 1869|  1.71k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.71k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  5.70k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 4.29k, False: 1.41k]
  ------------------
 1874|  4.29k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 308, False: 3.98k]
  ------------------
 1875|    308|                return unexpected(eof_error::eof);
 1876|    308|            }
 1877|  4.29k|        }
 1878|       |
 1879|  1.41k|        return it;
 1880|  1.71k|    }
 1881|  1.71k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  1.71k|{
 1095|  1.71k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.71k|        return r.size();
 1097|  1.71k|    }
 1098|  1.71k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.71k|                           ranges::const_iterator_t<Range>,
 1100|  1.71k|                           typename detail::basic_scan_buffer<
 1101|  1.71k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.71k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.71k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.71k|        }
 1105|  1.71k|        else {
 1106|  1.71k|            if (r.begin().stores_parent()) {
 1107|  1.71k|                return static_cast<size_t>(
 1108|  1.71k|                    r.begin().parent()->chars_available() -
 1109|  1.71k|                    r.begin().position());
 1110|  1.71k|            }
 1111|  1.71k|            return r.begin().contiguous_segment().size();
 1112|  1.71k|        }
 1113|  1.71k|    }
 1114|  1.71k|    else {
 1115|  1.71k|        return 0;
 1116|  1.71k|    }
 1117|  1.71k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.22k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.22k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 44, False: 1.18k]
  |  Branch (2245:29): [True: 1.18k, False: 0]
  ------------------
 2246|  1.22k|                return ch;
 2247|  1.22k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.22k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     32|{
 3258|     32|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 32]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     32|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 32]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     32|    return unexpected(parse_error::error);
 3268|     32|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     32|{
 2146|     32|    auto it = read_code_unit(range);
 2147|     32|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     32|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 2152|     32|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     32|        return unexpected(parse_error::error);
 2154|     32|    }
 2155|       |
 2156|      0|    return *it;
 2157|     32|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     32|{
 1846|     32|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     32|    return ranges::next(range.begin());
 1851|     32|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.40k|{
  950|  2.40k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 2.31k]
  |  |  ------------------
  ------------------
  951|     96|        return eof_error::eof;
  952|     96|    }
  953|  2.31k|    return eof_error::good;
  954|  2.40k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   139k|{
  944|   139k|    return is_range_eof(r.begin(), r.end());
  945|   139k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    334|{
 3251|    334|    return read_matching_string_classic_nocase(range, "0x");
 3252|    334|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     22|{
 3274|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 22]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 22]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     22|    {
 3281|     22|        bool zero_parsed{false};
 3282|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 22]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     22|    }
 3286|     22|    return {range.begin(), 10, false};
 3287|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    976|{
 3360|    976|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    976|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    976|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    976|            return unexpected_scan_error(
 3365|    976|                scan_error::invalid_scanned_value,
 3366|    976|                "Failed to parse integer: No digits found");
 3367|    976|        }
 3368|    976|        return range.end();
 3369|    976|    }
 3370|    976|    else {
 3371|    976|        return read_while1_code_unit(range,
 3372|    976|                                     [&](char_type ch) noexcept {
 3373|    976|                                         return char_to_int(ch) < base;
 3374|    976|                                     })
 3375|    976|            .transform_error(map_parse_error_to_scan_error(
 3376|    976|                scan_error::invalid_scanned_value,
 3377|    976|                "Failed to parse integer: No digits found"));
 3378|    976|    }
 3379|    976|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.30k|{
 1996|  1.30k|    auto it = read_while_code_unit(range, pred);
 1997|  1.30k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.30k, False: 0]
  ------------------
 1998|  1.30k|        return unexpected(parse_error::error);
 1999|  1.30k|    }
 2000|      0|    return it;
 2001|  1.30k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.30k|{
 1976|  1.30k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.30k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.30k|{
 1957|  1.30k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.30k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.30k|    }
 1960|  1.30k|    else {
 1961|  1.30k|        auto first = range.begin();
 1962|  1.30k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.30k, False: 0]
  ------------------
 1963|  1.30k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.30k, False: 0]
  ------------------
 1964|  1.30k|                return first;
 1965|  1.30k|            }
 1966|  1.30k|        }
 1967|      0|        return first;
 1968|  1.30k|    }
 1969|  1.30k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   207k|        {
 2781|   207k|            return !(y == x);
 2782|   207k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    976|    {
  754|    976|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    976|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    976|              cvref<T> obj = *get<T>(fn);
  745|    976|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    976|                  obj(static_cast<decltype(args)>(args)...);
  747|    976|              }
  748|    976|              else {
  749|    976|                  return obj(static_cast<decltype(args)>(args)...);
  750|    976|              }
  751|    976|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    976|    {
  684|    976|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    976|            return static_cast<T*>(s.m_cp);
  686|    976|        }
  687|    976|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    976|            return static_cast<T*>(s.m_p);
  689|    976|        }
  690|    976|        else {
  691|    976|            return reinterpret_cast<T*>(s.m_fp);
  692|    976|        }
  693|    976|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|    976|                                     [&](char_type ch) noexcept {
 3373|    976|                                         return char_to_int(ch) < base;
 3374|    976|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    976|        {
  662|    976|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.97k|{
 1683|  1.97k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.97k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.97k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.97k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.97k|    }
 1688|  1.97k|    else {
 1689|  1.97k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.97k|    }
 1691|  1.97k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.97k|    {
 1537|  1.97k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.97k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.97k|    {
 1621|  1.97k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.97k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.97k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.97k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.97k|            m_storage.reset();
 1627|  1.97k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.97k|        }
 1629|  1.97k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.97k|                                          std::basic_string<CharT>>) {
 1631|  1.97k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.97k|            m_view = string_view_type{*m_storage};
 1633|  1.97k|        }
 1634|  1.97k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.97k|                                          typename detail::basic_scan_buffer<
 1636|  1.97k|                                              value_t>::forward_iterator> &&
 1637|  1.97k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.97k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.97k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.97k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.97k|                             detail::to_address(end_seg.end()))) {
 1642|  1.97k|                auto& str = m_storage.emplace();
 1643|  1.97k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.97k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.97k|                m_view = string_view_type{str};
 1646|  1.97k|                return;
 1647|  1.97k|            }
 1648|       |
 1649|  1.97k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.97k|                                                            end_seg.data());
 1651|  1.97k|            m_storage.reset();
 1652|  1.97k|        }
 1653|  1.97k|        else {
 1654|  1.97k|            auto& str = m_storage.emplace();
 1655|  1.97k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.97k|                str.reserve(range.size());
 1657|  1.97k|            }
 1658|  1.97k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.97k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.97k|                          std::back_inserter(str));
 1661|  1.97k|            }
 1662|  1.97k|            else {
 1663|  1.97k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.97k|                     ++it) {
 1665|  1.97k|                    str.push_back(*it);
 1666|  1.97k|                }
 1667|  1.97k|            }
 1668|  1.97k|            m_view = string_view_type{str};
 1669|  1.97k|        }
 1670|  1.97k|    }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   363k|    {
 2413|   363k|        return m_current;
 2414|   363k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   363k|    {
 2417|   363k|        return m_count;
 2418|   363k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    230|    {
 5663|    230|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 212, False: 18]
  ------------------
 5664|    230|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 18]
  ------------------
 5665|    212|            return read_default(range, value, loc);
 5666|    212|        }
 5667|       |
 5668|     18|        reader_impl_for_int<CharT> reader{};
 5669|     18|        signed char tmp_value{};
 5670|     18|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     18|        value = static_cast<signed char>(value);
 5672|     18|        return ret;
 5673|    230|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    864|    {
 5645|    864|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    864|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    864|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    864|            return code_unit_reader<char>{}.read(range, value);
 5648|    864|        }
 5649|    864|        else {
 5650|    864|            SCN_UNUSED(range);
 5651|    864|            SCN_EXPECT(false);
 5652|    864|            SCN_UNREACHABLE;
 5653|    864|        }
 5654|    864|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    864|    {
 5564|    864|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    864|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    864|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    864|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    864|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 864]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    864|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    864|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    864|        ch = *range.begin();
 5566|    864|        return it;
 5567|    864|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.27k|{
 1846|  6.27k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.27k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.27k|    return ranges::next(range.begin());
 1851|  6.27k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  21.6k|{
  950|  21.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.6k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.6k|    return eof_error::good;
  954|  21.6k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   511k|{
  944|   511k|    return is_range_eof(r.begin(), r.end());
  945|   511k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   643k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   643k|    {
  937|   643k|        return begin == end;
  938|   643k|    }
  939|   643k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  45.9k|    {
  296|  45.9k|        ++x;
  297|  45.9k|        return x;
  298|  45.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     18|    {
 3539|     18|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     18|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     18|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 18]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     18|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 18]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     18|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3565|     18|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     18|                    parse_integer_digits_without_thsep(
 3567|     18|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     18|                        prefix_result.parsed_base));
 3569|       |
 3570|     18|            auto buf = make_contiguous_buffer(
 3571|     18|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     18|            SCN_TRY(result_it,
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     18|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.67k|{
 3326|  2.67k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.67k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.67k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.67k|        parse_integer_base_prefix(
 3331|  2.67k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.67k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.67k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.67k|    else {
 3343|  2.67k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.67k]
  ------------------
 3344|  2.67k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.67k, False: 0]
  ------------------
 3345|  2.67k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.67k|        }
 3347|  2.67k|    }
 3348|       |
 3349|  2.67k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.67k, False: 0]
  ------------------
 3350|  2.67k|        sign = sign_type::plus_sign;
 3351|  2.67k|    }
 3352|  2.67k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.67k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.67k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.58k|{
 3141|  3.58k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.58k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.58k, False: 0]
  ------------------
 3143|  3.58k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.58k, False: 0]
  ------------------
 3144|  3.58k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.58k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.58k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.58k|{
 2272|  3.58k|    auto it = read_code_unit(range);
 2273|  3.58k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.58k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.17k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.17k, False: 3.58k]
  ------------------
 2278|  7.17k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.17k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.17k|    }
 2282|       |
 2283|  3.58k|    return unexpected(parse_error::error);
 2284|  3.58k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.67k|{
 3293|  2.67k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.66k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     22|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 22, False: 2.65k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     22|            bool zero_parsed = false;
 3302|     22|            auto it = apply_opt(
 3303|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     22|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    874|        case 16:
  ------------------
  |  Branch (3307:9): [True: 874, False: 1.80k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    874|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    874|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.66k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.76k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.76k, False: 914]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.76k|            return {range.begin(), base, false};
 3319|  2.67k|    }
 3320|  2.67k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    902|{
 2291|    902|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 902, False: 0]
  ------------------
 2292|    902|        return range.begin();
 2293|    902|    }
 2294|      0|    return *result;
 2295|    902|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.64k|{
 2231|  3.64k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.64k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.64k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.64k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.63k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.63k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.63k, False: 0]
  ------------------
 2239|  3.63k|            return unexpected(parse_error::error);
 2240|  3.63k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.63k|    }
 2243|  3.64k|    else {
 2244|  3.64k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.64k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.64k|                return ch;
 2247|  3.64k|            }
 2248|  3.64k|            return static_cast<char_type>(ch +
 2249|  3.64k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.64k|        };
 2251|       |
 2252|  3.64k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.64k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.64k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.64k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.64k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.64k|                    return ascii_tolower(a) ==
 2259|  3.64k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.64k|                }))) {
 2261|  3.64k|            return unexpected(parse_error::error);
 2262|  3.64k|        }
 2263|       |
 2264|  3.64k|        return it;
 2265|  3.64k|    }
 2266|  3.64k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.82k|{
 2146|  1.82k|    auto it = read_code_unit(range);
 2147|  1.82k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.82k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.82k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.82k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.82k|        return unexpected(parse_error::error);
 2154|  1.82k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.82k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    886|{
 3251|    886|    return read_matching_string_classic_nocase(range, "0x");
 3252|    886|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.65k|{
 3360|  2.65k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.65k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.65k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.65k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.65k|        return range.end();
 3369|  2.65k|    }
 3370|  2.65k|    else {
 3371|  2.65k|        return read_while1_code_unit(range,
 3372|  2.65k|                                     [&](char_type ch) noexcept {
 3373|  2.65k|                                         return char_to_int(ch) < base;
 3374|  2.65k|                                     })
 3375|  2.65k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.65k|                scan_error::invalid_scanned_value,
 3377|  2.65k|                "Failed to parse integer: No digits found"));
 3378|  2.65k|    }
 3379|  2.65k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     24|{
 3390|     24|    std::basic_string<CharT> output;
 3391|     24|    std::string thsep_indices;
 3392|     24|    auto it = range.begin();
 3393|     24|    bool digit_matched = false;
 3394|     24|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 24, False: 0]
  ------------------
 3395|     24|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 24]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     24|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 24, False: 0]
  ------------------
 3400|     24|            break;
 3401|     24|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     24|    }
 3407|     24|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     24|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 0]
  |  |  ------------------
  ------------------
 3408|     24|        return unexpected_scan_error(
 3409|     24|            scan_error::invalid_scanned_value,
 3410|     24|            "Failed to parse integer: No digits found");
 3411|     24|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     24|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  13.7k|{
 1683|  13.7k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  13.7k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  13.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  13.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  13.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  13.7k|    }
 1688|  13.7k|    else {
 1689|  13.7k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  13.7k|    }
 1691|  13.7k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  13.7k|    {
 1490|  13.7k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   210k|    {
 1503|   210k|        return sv;
 1504|   210k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  3.19k|{
 5951|  3.19k|    using char_type = detail::char_t<Range>;
 5952|  3.19k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  3.19k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 2.68k, False: 508]
  ------------------
 5955|  2.68k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  2.68k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  2.68k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 1.83k, False: 854]
  ------------------
 5959|  1.83k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  1.83k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 168, False: 1.66k]
  ------------------
 5962|    168|                auto prefix_width =
 5963|    168|                    static_cast<std::ptrdiff_t>(
 5964|    168|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    168|                    ranges::distance(range.begin(), it);
 5966|    168|                return result_type{it, prefix_width};
 5967|    168|            }
 5968|  1.66k|            return result_type{it, 0};
 5969|  1.83k|        }
 5970|       |
 5971|    854|        auto max_width_view = take_width(range, max_width);
 5972|    854|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    854|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 854, False: 0]
  ------------------
 5975|    854|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    854|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    854|    }
 5979|       |
 5980|    508|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    508|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 174, False: 334]
  ------------------
 5982|    174|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    174|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 70, False: 104]
  ------------------
 5985|     70|            auto prefix_width =
 5986|     70|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     70|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     70|            return result_type{it, prefix_width};
 5989|     70|        }
 5990|    104|        return result_type{it, 0};
 5991|    174|    }
 5992|       |
 5993|    334|    auto max_width_view = take_width(range, max_width);
 5994|    334|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    334|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 334, False: 0]
  ------------------
 5997|    334|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    334|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    334|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  2.06k|{
 1976|  2.06k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.06k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  2.30k|{
 1957|  2.30k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.30k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.30k|    }
 1960|  2.30k|    else {
 1961|  2.30k|        auto first = range.begin();
 1962|  2.30k|        for (; first != range.end(); ++first) {
 1963|  2.30k|            if (pred(*first)) {
 1964|  2.30k|                return first;
 1965|  2.30k|            }
 1966|  2.30k|        }
 1967|  2.30k|        return first;
 1968|  2.30k|    }
 1969|  2.30k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  2.68k|    {
  754|  2.68k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  3.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.12k|              cvref<T> obj = *get<T>(fn);
  745|  3.12k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.12k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.12k|              }
  748|  3.12k|              else {
  749|  3.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.12k|              }
  751|  3.12k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  3.12k|    {
  684|  3.12k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.12k|            return static_cast<T*>(s.m_cp);
  686|  3.12k|        }
  687|  3.12k|        else if constexpr (std::is_object_v<T>) {
  688|  3.12k|            return static_cast<T*>(s.m_p);
  689|  3.12k|        }
  690|  3.12k|        else {
  691|  3.12k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.12k|        }
  693|  3.12k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  3.12k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  2.68k|        {
  667|  2.68k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    902|{
 1976|    902|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    902|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|  1.31k|{
 1957|  1.31k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.31k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.31k|    }
 1960|  1.31k|    else {
 1961|  1.31k|        auto first = range.begin();
 1962|  20.7k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 20.3k, False: 370]
  ------------------
 1963|  20.3k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 940, False: 19.4k]
  ------------------
 1964|    940|                return first;
 1965|    940|            }
 1966|  20.3k|        }
 1967|    370|        return first;
 1968|  1.31k|    }
 1969|  1.31k|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    174|{
 2037|    174|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    174|    auto it = range.begin();
 2040|    240|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 240, False: 0]
  ------------------
 2041|    240|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    240|                                           needle.size());
 2043|    240|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 234]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    234|        static_assert(
 2047|    234|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    234|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 168, False: 66]
  ------------------
 2049|    168|            return it;
 2050|    168|        }
 2051|     66|        it = *r;
 2052|     66|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    334|{
 2037|    334|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    334|    auto it = range.begin();
 2040|    382|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 352, False: 30]
  ------------------
 2041|    352|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    352|                                           needle.size());
 2043|    352|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 168, False: 184]
  ------------------
 2044|    168|            return it;
 2045|    168|        }
 2046|    184|        static_assert(
 2047|    184|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    184|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 136, False: 48]
  ------------------
 2049|    136|            return it;
 2050|    136|        }
 2051|     48|        it = *r;
 2052|     48|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  2.76k|{
 2951|  2.76k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.37k, False: 388]
  ------------------
 2952|  2.37k|        auto it = read_while_classic_space(range);
 2953|  2.37k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.37k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 2.28k]
  |  |  ------------------
  ------------------
 2955|     96|            return unexpected(e);
 2956|     96|        }
 2957|       |
 2958|  2.28k|        return it;
 2959|  2.37k|    }
 2960|       |
 2961|    388|    return read_while_classic_space(range);
 2962|  2.76k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  2.76k|{
 2117|  2.76k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.76k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.76k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.76k|        auto buf = make_contiguous_buffer(range);
 2121|  2.76k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.76k|        return ranges::next(range.begin(),
 2123|  2.76k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.76k|    }
 2125|  2.76k|    else {
 2126|  2.76k|        auto it = range.begin();
 2127|       |
 2128|  2.76k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.76k|            auto seg = get_contiguous_beginning(range);
 2130|  2.76k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.76k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 2.76k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  2.76k|            ranges::advance(it, seg.size());
 2135|  2.76k|        }
 2136|       |
 2137|  2.76k|        return read_while_code_point(
 2138|  2.76k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.76k|    }
 2140|  2.76k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  3.68k|{
 1039|  3.68k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  3.68k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  3.68k|        return r;
 1042|  3.68k|    }
 1043|  3.68k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  3.68k|                           ranges::const_iterator_t<Range>,
 1045|  3.68k|                           typename detail::basic_scan_buffer<
 1046|  3.68k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  3.68k|        if constexpr (ranges::common_range<Range>) {
 1048|  3.68k|            auto seg = r.begin().contiguous_segment();
 1049|  3.68k|            auto dist =
 1050|  3.68k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  3.68k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  3.68k|        }
 1053|  3.68k|        else {
 1054|  3.68k|            return r.begin().contiguous_segment();
 1055|  3.68k|        }
 1056|  3.68k|    }
 1057|  3.68k|    else {
 1058|  3.68k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  3.68k|    }
 1060|  3.68k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  3.14k|{
 2082|  3.14k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.14k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  3.23k|{
 2061|  3.23k|    auto it = range.begin();
 2062|   111k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 111k, False: 276]
  ------------------
 2063|   111k|        const auto val =
 2064|   111k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   111k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   111k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 110k, False: 1.43k]
  |  |  ------------------
  ------------------
 2066|   110k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   110k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   110k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.96k, False: 107k]
  ------------------
 2069|  2.96k|                return it;
 2070|  2.96k|            }
 2071|   110k|        }
 2072|   108k|        it = val.iterator;
 2073|   108k|    }
 2074|       |
 2075|    276|    return it;
 2076|  3.23k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   137k|{
 1899|   137k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   137k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   137k|    auto it = range.begin();
 1903|   137k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   137k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 132k]
  |  |  ------------------
  ------------------
 1906|  4.54k|        ++it;
 1907|  4.54k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  4.54k|        return {it, {}};
 1909|  4.54k|    }
 1910|       |
 1911|   132k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 120k, False: 11.7k]
  ------------------
 1912|   120k|        ++it;
 1913|   120k|        return {it, string_type(1, *range.begin())};
 1914|   120k|    }
 1915|       |
 1916|  11.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  11.7k|    return {it, string_type{range.begin(), it}};
 1918|   132k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  4.54k|{
 1155|  4.54k|    auto it = input.begin();
 1156|  18.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 18.0k, False: 120]
  ------------------
 1157|  18.0k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.42k, False: 13.6k]
  ------------------
 1158|  4.42k|            break;
 1159|  4.42k|        }
 1160|  18.0k|    }
 1161|  4.54k|    return it;
 1162|  4.54k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  11.7k|    {
  283|  11.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  11.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  11.7k|    {
  227|  11.7k|        constexpr iter_difference_t<I> zero{0};
  228|  11.7k|        iter_difference_t<I> counter{0};
  229|       |
  230|  11.7k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 11.7k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  11.7k|        else {
  237|  36.8k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 25.1k, False: 11.7k]
  |  Branch (237:34): [True: 25.1k, False: 30]
  ------------------
  238|  25.1k|                ++i;
  239|  25.1k|                ++counter;
  240|  25.1k|            }
  241|  11.7k|        }
  242|       |
  243|  11.7k|        return counter;
  244|  11.7k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  2.76k|    {
  754|  2.76k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  9.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.99k|              cvref<T> obj = *get<T>(fn);
  745|  9.99k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.99k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.99k|              }
  748|  9.99k|              else {
  749|  9.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.99k|              }
  751|  9.99k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  9.99k|    {
  684|  9.99k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.99k|            return static_cast<T*>(s.m_cp);
  686|  9.99k|        }
  687|  9.99k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.99k|            return static_cast<T*>(s.m_p);
  689|  9.99k|        }
  690|  9.99k|        else {
  691|  9.99k|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.99k|        }
  693|  9.99k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  9.99k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  2.76k|        {
  662|  2.76k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.04k|{
 2951|  7.04k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 6.84k, False: 196]
  ------------------
 2952|  6.84k|        auto it = read_while_classic_space(range);
 2953|  6.84k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  6.84k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.84k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  6.84k|        return it;
 2959|  6.84k|    }
 2960|       |
 2961|    196|    return read_while_classic_space(range);
 2962|  7.04k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  93.9k|{
 2117|  93.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  93.9k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  93.9k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  93.9k|        auto buf = make_contiguous_buffer(range);
 2121|  93.9k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  93.9k|        return ranges::next(range.begin(),
 2123|  93.9k|                            ranges::distance(buf.view().begin(), it));
 2124|  93.9k|    }
 2125|  93.9k|    else {
 2126|  93.9k|        auto it = range.begin();
 2127|       |
 2128|  93.9k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  93.9k|            auto seg = get_contiguous_beginning(range);
 2130|  93.9k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  93.9k|                seg_it != seg.end()) {
 2132|  93.9k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  93.9k|            }
 2134|  93.9k|            ranges::advance(it, seg.size());
 2135|  93.9k|        }
 2136|       |
 2137|  93.9k|        return read_while_code_point(
 2138|  93.9k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  93.9k|    }
 2140|  93.9k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  96.7k|{
 1683|  96.7k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  96.7k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  96.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  96.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  96.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  96.7k|    }
 1688|  96.7k|    else {
 1689|  96.7k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  96.7k|    }
 1691|  96.7k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  96.7k|    {
 1490|  96.7k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.9k|    {
 3040|  10.9k|        reader_error_handler eh{};
 3041|  10.9k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.9k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.80k, False: 1.18k]
  |  |  ------------------
  ------------------
 3043|  9.80k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.80k|        }
 3045|  1.18k|        return {};
 3046|  10.9k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  10.9k|    {
 3051|  10.9k|        return static_cast<Derived&>(*this);
 3052|  10.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  10.9k|    {
 3485|  10.9k|        detail::check_int_type_specs(specs, eh);
 3486|  10.9k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.48k|    {
 3035|  2.48k|        return true;
 3036|  2.48k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    328|    {
 3539|    328|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    328|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    328|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 328]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    328|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 328]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    328|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    328|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 320, False: 8]
  |  |  ------------------
  ------------------
 3565|    320|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    320|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    320|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    320|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    320|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    320|    }                                                  \
  |  |  |  | 3667|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    242|    {
 3539|    242|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    242|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    242|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 242]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    242|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 242]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    242|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    242|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 230, False: 12]
  |  |  ------------------
  ------------------
 3565|    230|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    230|                    parse_integer_digits_without_thsep(
 3567|    230|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    230|                        prefix_result.parsed_base));
 3569|       |
 3570|    230|            auto buf = make_contiguous_buffer(
 3571|    230|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    230|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 230, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    230|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    230|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    230|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    230|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    230|    }                                                  \
  |  |  |  | 3667|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    230|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    328|    {
 3539|    328|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    328|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    328|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 328]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    328|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 328]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    328|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    328|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 320, False: 8]
  |  |  ------------------
  ------------------
 3565|    320|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    320|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    320|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    320|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    320|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    320|    }                                                  \
  |  |  |  | 3667|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    242|    {
 3539|    242|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    242|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    242|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    242|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 242]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    242|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 242]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    242|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    242|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 230, False: 12]
  |  |  ------------------
  ------------------
 3565|    230|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    230|                    parse_integer_digits_without_thsep(
 3567|    230|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    230|                        prefix_result.parsed_base));
 3569|       |
 3570|    230|            auto buf = make_contiguous_buffer(
 3571|    230|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    230|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 230, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    230|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    230|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    230|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    230|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    230|    }                                                  \
  |  |  |  | 3667|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    230|        }
 3580|       |
 3581|     12|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     12|            localized_number_formatting_options<CharT>{loc};
 3586|     12|#endif
 3587|       |
 3588|     12|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     12|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     12|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     12|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     12|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    306|    {
 3539|    306|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    306|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    306|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 306]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    306|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 306]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    306|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    306|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 306, False: 0]
  |  |  ------------------
  ------------------
 3565|    306|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 306, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    306|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    868|    {
 3539|    868|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    868|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    868|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    868|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 868]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    868|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    868|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    868|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    868|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 868]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    868|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 868]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    868|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    868|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 868, False: 0]
  |  |  ------------------
  ------------------
 3565|    868|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    868|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    868|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    868|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 868]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    868|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    868|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    868|                    parse_integer_digits_without_thsep(
 3567|    868|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    868|                        prefix_result.parsed_base));
 3569|       |
 3570|    868|            auto buf = make_contiguous_buffer(
 3571|    868|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    868|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    868|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    868|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    868|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 868, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    868|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    868|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    868|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    868|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    868|    }                                                  \
  |  |  |  | 3667|    868|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    868|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.49k|    {
 3040|  5.49k|        reader_error_handler eh{};
 3041|  5.49k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.49k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.89k, False: 598]
  |  |  ------------------
  ------------------
 3043|  4.89k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.89k|        }
 3045|    598|        return {};
 3046|  5.49k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  5.49k|    {
 3051|  5.49k|        return static_cast<Derived&>(*this);
 3052|  5.49k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  5.49k|    {
 4145|  5.49k|        detail::check_float_type_specs(specs, eh);
 4146|  5.49k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.25k|    {
 3035|  1.25k|        return true;
 3036|  1.25k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    588|    {
 4217|    588|        unsigned options{};
 4218|    588|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 22, False: 566]
  ------------------
 4219|     22|            options |= float_reader_base::allow_thsep;
 4220|     22|        }
 4221|       |
 4222|    588|        SCN_GCC_COMPAT_PUSH
 4223|    588|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    588|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 558]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|     10|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 10, False: 578]
  ------------------
 4230|     10|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     16|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 16, False: 572]
  ------------------
 4233|     16|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 2, False: 586]
  ------------------
 4236|      2|                return options | float_reader_base::allow_scientific |
 4237|      2|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    530|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 530, False: 58]
  ------------------
 4240|    530|                return options | float_reader_base::allow_scientific |
 4241|    530|                       float_reader_base::allow_fixed |
 4242|    530|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 588]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    588|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    588|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    588|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    588|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.24k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.48k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    880|    {
 4057|    880|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 880, False: 0]
  ------------------
 4058|    880|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 880, False: 0]
  ------------------
 4059|    880|            return;
 4060|    880|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    712|    {
 1587|    712|        return m_storage.has_value();
 1588|    712|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    356|    {
 1592|    356|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    356|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    356|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    356|        return *m_storage;
 1594|    356|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    326|    {
  763|    326|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    326|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    326|    {
 3705|    326|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 326]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    326|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    326|        auto it = sign_result.first;
 3708|    326|        m_sign = sign_result.second;
 3709|       |
 3710|    326|        auto digits_begin = it;
 3711|    326|        auto r = ranges::subrange{it, range.end()};
 3712|    326|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    326|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    326|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    326|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    326|                SCN_TRY_ASSIGN(
 3717|    326|                    it,
 3718|    326|                    do_read_source_impl(
 3719|    326|                        r,
 3720|    326|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    326|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    326|            }
 3723|    326|            else {
 3724|    326|                auto cb = [&](const auto& rr)
 3725|    326|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    326|                    auto res = read_all(rr);
 3727|    326|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    326|                        return unexpected_scan_error(
 3729|    326|                            scan_error::invalid_scanned_value,
 3730|    326|                            "Invalid float value");
 3731|    326|                    }
 3732|    326|                    return res;
 3733|    326|                };
 3734|    326|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    326|            }
 3736|    326|        }
 3737|    326|        else {
 3738|    326|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 326, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    326|    }                                                  \
  |  | 3667|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    326|    {
 4000|    326|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    326|        const bool allowed_nonhex =
 4002|    326|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    326|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    326|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 326, False: 0]
  |  Branch (4005:45): [True: 0, False: 326]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    326|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 326]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    326|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 326, False: 0]
  |  Branch (4014:45): [True: 0, False: 326]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    326|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 326]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    326|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 318, False: 8]
  |  Branch (4021:28): [True: 6, False: 312]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    320|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 8, False: 312]
  |  Branch (4036:29): [True: 8, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      8|            m_kind = float_kind::generic;
 4040|      8|            return read_regular_float(range);
 4041|      8|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    312|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    312|        m_kind = float_kind::generic;
 4052|    312|        return read_regular(range);
 4053|    312|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    326|    {
 3811|    326|        auto it = range.begin();
 3812|    326|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 326, False: 0]
  ------------------
 3813|    326|            return unexpected(r.error());
 3814|    326|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    326|    {
 3834|    326|        auto it = range.begin();
 3835|    326|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 326, False: 0]
  ------------------
 3836|    326|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    326|                scan_error::invalid_scanned_value,
 3838|    326|                "Invalid floating-point NaN value"));
 3839|    326|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    318|    {
 3804|    318|        return read_matching_string_classic_nocase(range, "0x");
 3805|    318|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    320|    {
 3944|    320|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    320|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 312, False: 8]
  |  Branch (3945:50): [True: 0, False: 312]
  ------------------
 3946|       |
 3947|    320|        auto it = ranges::begin(range);
 3948|    320|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    320|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    320|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  ------------------
  ------------------
 3952|    320|            return r.transform_error(
 3953|    320|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    320|                                              "Invalid floating-point value"));
 3955|    320|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    320|    {
 3774|    320|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 320]
  |  |  |  Branch (859:45): [True: 0, False: 320]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    320|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    320|        return read_while1_code_unit(
 3783|    320|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    320|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    320|    {
  754|    320|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    320|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    320|              cvref<T> obj = *get<T>(fn);
  745|    320|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    320|                  obj(static_cast<decltype(args)>(args)...);
  747|    320|              }
  748|    320|              else {
  749|    320|                  return obj(static_cast<decltype(args)>(args)...);
  750|    320|              }
  751|    320|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    320|    {
  684|    320|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    320|            return static_cast<T*>(s.m_cp);
  686|    320|        }
  687|    320|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    320|            return static_cast<T*>(s.m_p);
  689|    320|        }
  690|    320|        else {
  691|    320|            return reinterpret_cast<T*>(s.m_fp);
  692|    320|        }
  693|    320|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    320|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    320|        {
  662|    320|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    318|    {
 3665|    318|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    318|        return read_source_impl(range);
 3671|    318|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    914|    {
  763|    914|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    914|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     14|    {
 3679|     14|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     14|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     14|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 14]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     14|        return read_source_impl(range);
 3685|     14|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    914|    {
 3705|    914|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 914]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    914|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    914|        auto it = sign_result.first;
 3708|    914|        m_sign = sign_result.second;
 3709|       |
 3710|    914|        auto digits_begin = it;
 3711|    914|        auto r = ranges::subrange{it, range.end()};
 3712|    914|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    914|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    914|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 914]
  |  |  |  Branch (859:45): [True: 0, False: 914]
  |  |  |  Branch (859:45): [True: 0, False: 914]
  |  |  ------------------
  ------------------
 3715|    914|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    914|            else {
 3724|    914|                auto cb = [&](const auto& rr)
 3725|    914|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    914|                    auto res = read_all(rr);
 3727|    914|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    914|                        return unexpected_scan_error(
 3729|    914|                            scan_error::invalid_scanned_value,
 3730|    914|                            "Invalid float value");
 3731|    914|                    }
 3732|    914|                    return res;
 3733|    914|                };
 3734|    914|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 34, False: 880]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     34|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     34|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     34|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     34|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     34|    }                                                  \
  |  | 3667|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    914|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    880|            }
 3736|    914|        }
 3737|    880|        else {
 3738|    880|            SCN_TRY_ASSIGN(
 3739|    880|                it,
 3740|    880|                do_read_source_impl(
 3741|    880|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    880|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    880|        }
 3744|       |
 3745|    880|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    880|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    880|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    880|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 880, False: 0]
  |  Branch (3747:48): [True: 880, False: 0]
  ------------------
 3748|    880|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 880, False: 0]
  ------------------
 3749|    880|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 880, False: 0]
  ------------------
 3750|    880|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    880|        }
 3752|       |
 3753|    880|        handle_separators();
 3754|       |
 3755|    880|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 880]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    880|        return it;
 3768|    880|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    914|    {
 3811|    914|        auto it = range.begin();
 3812|    914|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 914, False: 0]
  ------------------
 3813|    914|            return unexpected(r.error());
 3814|    914|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    914|    {
 3834|    914|        auto it = range.begin();
 3835|    914|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 914, False: 0]
  ------------------
 3836|    914|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    914|                scan_error::invalid_scanned_value,
 3838|    914|                "Invalid floating-point NaN value"));
 3839|    914|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    880|    {
 3804|    880|        return read_matching_string_classic_nocase(range, "0x");
 3805|    880|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     34|{
 1996|     34|    auto it = read_while_code_unit(range, pred);
 1997|     34|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 34, False: 0]
  ------------------
 1998|     34|        return unexpected(parse_error::error);
 1999|     34|    }
 2000|      0|    return it;
 2001|     34|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     34|    {
 3944|     34|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     34|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 12, False: 22]
  |  Branch (3945:50): [True: 10, False: 2]
  ------------------
 3946|       |
 3947|     34|        auto it = ranges::begin(range);
 3948|     34|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     34|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     34|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 3952|     34|            return r.transform_error(
 3953|     34|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     34|                                              "Invalid floating-point value"));
 3955|     34|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     34|    {
 3774|     34|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  |  Branch (859:45): [True: 0, False: 34]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     34|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     34|        return read_while1_code_unit(
 3783|     34|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     34|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     34|    {
  684|     34|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     34|            return static_cast<T*>(s.m_cp);
  686|     34|        }
  687|     34|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     34|            return static_cast<T*>(s.m_p);
  689|     34|        }
  690|     34|        else {
  691|     34|            return reinterpret_cast<T*>(s.m_fp);
  692|     34|        }
  693|     34|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     34|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    914|    {
 4000|    914|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    914|        const bool allowed_nonhex =
 4002|    914|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    914|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    914|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 914, False: 0]
  |  Branch (4005:45): [True: 0, False: 914]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    914|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 914]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    914|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 914, False: 0]
  |  Branch (4014:45): [True: 0, False: 914]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    914|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 914]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    914|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 880, False: 34]
  |  Branch (4021:28): [True: 10, False: 870]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     10|            auto it = range.begin();
 4025|       |
 4026|     10|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 10]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     10|            else {
 4031|     10|                m_kind = float_kind::hex_without_prefix;
 4032|     10|            }
 4033|       |
 4034|     10|            return read_hex(ranges::subrange{it, range.end()});
 4035|     10|        }
 4036|    904|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 34, False: 870]
  |  Branch (4036:29): [True: 34, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     34|            m_kind = float_kind::generic;
 4040|     34|            return read_regular_float(range);
 4041|     34|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    870|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    870|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 870]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    870|        m_kind = float_kind::generic;
 4052|    870|        return read_regular(range);
 4053|    870|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    880|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    880|                    auto res = read_all(rr);
 3727|    880|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    880|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 880]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    880|                    return res;
 3733|    880|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    880|{
 1839|    880|    return ranges::next(range.begin(), range.end());
 1840|    880|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    880|    {
  313|    880|        ranges::advance(x, bound);
  314|    880|        return x;
  315|    880|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    880|    {
  275|    880|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    880|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    922|    {
  190|    922|        i = std::move(bound);
  191|    922|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    880|    {
 1577|    880|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    880|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    880|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    880|    {
 1621|    880|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    880|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    880|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    880|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    880|            m_storage.reset();
 1627|    880|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    880|        }
 1629|    880|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    880|                                          std::basic_string<CharT>>) {
 1631|    880|            m_storage.emplace(SCN_FWD(range));
 1632|    880|            m_view = string_view_type{*m_storage};
 1633|    880|        }
 1634|    880|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    880|                                          typename detail::basic_scan_buffer<
 1636|    880|                                              value_t>::forward_iterator> &&
 1637|    880|                           ranges::common_range<Range>) {
 1638|    880|            auto beg_seg = range.begin().contiguous_segment();
 1639|    880|            auto end_seg = range.end().contiguous_segment();
 1640|    880|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    880|                             detail::to_address(end_seg.end()))) {
 1642|    880|                auto& str = m_storage.emplace();
 1643|    880|                str.reserve(range.end().position() - range.begin().position());
 1644|    880|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    880|                m_view = string_view_type{str};
 1646|    880|                return;
 1647|    880|            }
 1648|       |
 1649|    880|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    880|                                                            end_seg.data());
 1651|    880|            m_storage.reset();
 1652|    880|        }
 1653|    880|        else {
 1654|    880|            auto& str = m_storage.emplace();
 1655|    880|            if constexpr (ranges::sized_range<Range>) {
 1656|    880|                str.reserve(range.size());
 1657|    880|            }
 1658|    880|            if constexpr (ranges::common_range<Range>) {
 1659|    880|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    880|                          std::back_inserter(str));
 1661|    880|            }
 1662|    880|            else {
 1663|    880|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    880|                     ++it) {
 1665|    880|                    str.push_back(*it);
 1666|    880|                }
 1667|    880|            }
 1668|    880|            m_view = string_view_type{str};
 1669|    880|        }
 1670|    880|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    900|    {
 3665|    900|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 900]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    900|        return read_source_impl(range);
 3671|    900|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    880|    {
 3691|    880|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    880|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    880|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    880|        const std::ptrdiff_t sign_len =
 3694|    880|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 880]
  ------------------
 3695|       |
 3696|    880|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    880|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    880|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    880|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    880|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 880, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    880|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    880|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    880|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    880|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    880|    }                                                  \
  |  |  |  | 3667|    880|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    880|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    326|    {
 4170|    326|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    326|#if !SCN_DISABLE_LOCALE
 4173|    326|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 318]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    318|#endif
 4182|       |
 4183|    318|        return read_impl<Range>(
 4184|    318|            range, rd,
 4185|    318|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    318|                return r.read_source(SCN_FWD(args)...);
 4187|    318|            },
 4188|    318|            value);
 4189|    326|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    326|    {
 4206|    326|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    326|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 326, False: 0]
  |  |  ------------------
  ------------------
 4208|    326|            return unexpected(r.error());
 4209|    326|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    318|    {
  754|    318|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    318|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    318|              cvref<T> obj = *get<T>(fn);
  745|    318|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    318|                  obj(static_cast<decltype(args)>(args)...);
  747|    318|              }
  748|    318|              else {
  749|    318|                  return obj(static_cast<decltype(args)>(args)...);
  750|    318|              }
  751|    318|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    318|    {
  684|    318|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    318|            return static_cast<T*>(s.m_cp);
  686|    318|        }
  687|    318|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    318|            return static_cast<T*>(s.m_p);
  689|    318|        }
  690|    318|        else {
  691|    318|            return reinterpret_cast<T*>(s.m_fp);
  692|    318|        }
  693|    318|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    318|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    318|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    318|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    318|        {
  662|    318|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    262|    {
 4170|    262|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    262|#if !SCN_DISABLE_LOCALE
 4173|    262|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 14, False: 248]
  ------------------
 4174|     14|            return read_impl<Range>(
 4175|     14|                range, rd,
 4176|     14|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     14|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     14|                },
 4179|     14|                value, loc);
 4180|     14|        }
 4181|    248|#endif
 4182|       |
 4183|    248|        return read_impl<Range>(
 4184|    248|            range, rd,
 4185|    248|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    248|                return r.read_source(SCN_FWD(args)...);
 4187|    248|            },
 4188|    248|            value);
 4189|    262|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    914|    {
 4206|    914|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    914|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 880]
  |  |  ------------------
  ------------------
 4208|     34|            return unexpected(r.error());
 4209|     34|        }
 4210|       |
 4211|    880|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    880|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    880|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    880|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    880|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 880, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    880|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    880|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    880|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    880|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    880|    }                                                  \
  |  |  |  | 3667|    880|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    880|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     14|    {
  754|     14|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     14|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     14|              cvref<T> obj = *get<T>(fn);
  745|     14|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     14|                  obj(static_cast<decltype(args)>(args)...);
  747|     14|              }
  748|     14|              else {
  749|     14|                  return obj(static_cast<decltype(args)>(args)...);
  750|     14|              }
  751|     14|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     14|    {
  684|     14|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     14|            return static_cast<T*>(s.m_cp);
  686|     14|        }
  687|     14|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     14|            return static_cast<T*>(s.m_p);
  689|     14|        }
  690|     14|        else {
  691|     14|            return reinterpret_cast<T*>(s.m_fp);
  692|     14|        }
  693|     14|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     14|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     14|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     14|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     14|        {
  662|     14|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    248|    {
  754|    248|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    248|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    248|              cvref<T> obj = *get<T>(fn);
  745|    248|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    248|                  obj(static_cast<decltype(args)>(args)...);
  747|    248|              }
  748|    248|              else {
  749|    248|                  return obj(static_cast<decltype(args)>(args)...);
  750|    248|              }
  751|    248|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    248|    {
  684|    248|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    248|            return static_cast<T*>(s.m_cp);
  686|    248|        }
  687|    248|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    248|            return static_cast<T*>(s.m_p);
  689|    248|        }
  690|    248|        else {
  691|    248|            return reinterpret_cast<T*>(s.m_fp);
  692|    248|        }
  693|    248|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    248|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    248|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    248|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    248|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    248|        {
  662|    248|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  6.10k|{
 5809|  6.10k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.10k|        return reader_impl_for_bool<CharT>{};
 5811|  6.10k|    }
 5812|  6.10k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.10k|        return reader_impl_for_char<CharT>{};
 5814|  6.10k|    }
 5815|  6.10k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.10k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.10k|    }
 5818|  6.10k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.10k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.10k|    }
 5821|  6.10k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.10k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.10k|        return reader_impl_for_string<CharT>{};
 5824|  6.10k|    }
 5825|  6.10k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  6.10k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.10k|        return reader_impl_for_string<CharT>{};
 5828|  6.10k|    }
 5829|  6.10k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.10k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.10k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.10k|    }
 5833|  6.10k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.10k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.10k|    }
 5836|  6.10k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.10k|        return reader_impl_for_float<CharT>{};
 5838|  6.10k|    }
 5839|  6.10k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.10k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.10k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.10k|                       !std::is_same_v<T, bool>) {
 5843|  6.10k|        return reader_impl_for_int<CharT>{};
 5844|  6.10k|    }
 5845|  6.10k|    else {
 5846|  6.10k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.10k|    }
 5848|  6.10k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  18.3k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  16.3k|    {
 3040|  16.3k|        reader_error_handler eh{};
 3041|  16.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  16.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 16.0k]
  |  |  ------------------
  ------------------
 3043|    342|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    342|        }
 3045|  16.0k|        return {};
 3046|  16.3k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  16.3k|    {
 3051|  16.3k|        return static_cast<Derived&>(*this);
 3052|  16.3k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  16.3k|    {
 5210|  16.3k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  16.3k|        SCN_GCC_PUSH
 5213|  16.3k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  16.3k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  16.3k|        SCN_CLANG_PUSH
 5217|  16.3k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  16.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  16.3k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 336, False: 16.0k]
  ------------------
 5221|  1.56k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.56k, False: 14.8k]
  ------------------
 5222|  1.56k|                m_type = reader_type::word;
 5223|  1.56k|                break;
 5224|       |
 5225|    534|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 534, False: 15.8k]
  ------------------
 5226|    534|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 90, False: 444]
  ------------------
 5227|    534|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 228, False: 216]
  ------------------
 5228|    318|                    m_type = reader_type::custom_word;
 5229|    318|                }
 5230|    216|                else {
 5231|    216|                    m_type = reader_type::word;
 5232|    216|                }
 5233|    534|                break;
 5234|      0|            }
 5235|       |
 5236|    126|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 126, False: 16.2k]
  ------------------
 5237|    126|                m_type = reader_type::character;
 5238|    126|                break;
 5239|       |
 5240|  3.66k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 3.66k, False: 12.7k]
  ------------------
 5241|  3.66k|                m_type = reader_type::character_set;
 5242|  3.66k|                break;
 5243|       |
 5244|  9.17k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 9.17k, False: 7.19k]
  ------------------
 5245|  9.17k|                m_type = reader_type::regex;
 5246|  9.17k|                break;
 5247|       |
 5248|    972|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 972, False: 15.3k]
  ------------------
 5249|    972|                m_type = reader_type::regex_escaped;
 5250|    972|                break;
 5251|  16.3k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  16.3k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  22.0k|    {
 5259|  22.0k|        return m_type == reader_type::word;
 5260|  22.0k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  10.6k|{
 1132|  10.6k|    auto it = src.begin();
 1133|   812k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 803k, False: 8.44k]
  ------------------
 1134|   803k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   803k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.42k, False: 802k]
  ------------------
 1136|  1.42k|            return false;
 1137|  1.42k|        }
 1138|   802k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 240, False: 802k]
  ------------------
 1139|    240|            return false;
 1140|    240|        }
 1141|   802k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   802k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   802k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 576, False: 801k]
  ------------------
 1144|    576|            return false;
 1145|    576|        }
 1146|   801k|        it += len;
 1147|   801k|    }
 1148|  8.44k|    return true;
 1149|  10.6k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    356|{
 2993|    356|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    356|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 356, False: 0]
  ------------------
 2995|    356|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    356|    static_cast<    \
  |  |  929|    356|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    356|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    356|    }
 3001|    356|    else {
 3002|    356|        return transcode_impl(source.view(), dest);
 3003|    356|    }
 3004|       |
 3005|    356|    return {};
 3006|    356|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  3.66k|        {
 5103|  3.66k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 684, False: 2.98k]
  ------------------
 5104|    684|                return {};
 5105|    684|            }
 5106|       |
 5107|  2.98k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  2.98k|            auto it = detail::to_address(charset_string.begin());
 5109|  2.98k|            auto set = detail::parse_presentation_set(
 5110|  2.98k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  2.98k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.98k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  2.98k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  2.98k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  2.98k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  2.98k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  2.98k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  2.98k|                      nonascii.extra_ranges.end());
 5119|  2.98k|            return {};
 5120|  2.98k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|   587k|        {
 5138|   587k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 64.2k, False: 523k]
  ------------------
 5139|  64.2k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  64.2k|            }
 5141|       |
 5142|   523k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|   587k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  64.2k|        {
 5086|       |            // TODO: binary search?
 5087|  64.2k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 64.2k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  64.2k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  64.2k|            return std::find_if(
 5093|  64.2k|                       nonascii.extra_ranges.begin(),
 5094|  64.2k|                       nonascii.extra_ranges.end(),
 5095|  64.2k|                       [cp_val](const auto& pair) noexcept {
 5096|  64.2k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  64.2k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  64.2k|                       }) != nonascii.extra_ranges.end();
 5099|  64.2k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  16.7M|                       [cp_val](const auto& pair) noexcept {
 5096|  16.7M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 16.7M, False: 4.87k]
  ------------------
 5097|  16.7M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 63.3k, False: 16.6M]
  ------------------
 5098|  16.7M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|   538k|        {
 5076|   538k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   538k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   538k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|   538k|            const auto val =
 5078|   538k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|   538k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|   538k|                    (val % 8)) &
 5081|   538k|                   1u;
 5082|   538k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  19.5k|        {
 5129|  19.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 5.05k, False: 14.5k]
  ------------------
 5130|  5.05k|                return false;
 5131|  5.05k|            }
 5132|       |
 5133|  14.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  19.5k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  3.66k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    770|    {
 5277|    770|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    770|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    770|        return read_impl(range, specs, value);
 5279|    770|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    770|    {
 5295|    770|        SCN_CLANG_PUSH
 5296|    770|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    770|        switch (m_type) {
 5299|    308|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 308, False: 462]
  ------------------
 5300|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 716]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     40|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 40, False: 730]
  ------------------
 5307|     40|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    270|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 270, False: 500]
  ------------------
 5310|    270|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    270|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 768]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     96|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 96, False: 674]
  ------------------
 5320|     96|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     96|                    range,
 5322|     96|                    get_unescaped_regex_pattern(
 5323|     96|                        specs.charset_string<SourceCharT>()),
 5324|     96|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 770]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    770|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    770|        }
 5331|       |
 5332|    770|        SCN_CLANG_POP
 5333|    770|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    308|    {
 4820|    308|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    308|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    402|{
 4752|    402|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    402|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    402|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 186, False: 216]
  ------------------
 4756|    186|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    186|                                     "Invalid encoding in scanned string");
 4758|    186|    }
 4759|    216|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    216|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    216|    return SCN_MOVE(result);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    216|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    924|{
 2088|    924|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    924|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    924|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    924|        auto buf = make_contiguous_buffer(range);
 2092|    924|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    924|        return ranges::next(range.begin(),
 2094|    924|                            ranges::distance(buf.view().begin(), it));
 2095|    924|    }
 2096|    924|    else {
 2097|    924|        auto it = range.begin();
 2098|       |
 2099|    924|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    924|            auto seg = get_contiguous_beginning(range);
 2101|    924|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    924|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 924]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    924|            ranges::advance(it, seg.size());
 2106|    924|        }
 2107|       |
 2108|    924|        return read_until_code_point(
 2109|    924|            ranges::subrange{it, range.end()},
 2110|    924|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    924|    }
 2112|    924|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    924|{
 2061|    924|    auto it = range.begin();
 2062|  26.1k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 25.5k, False: 570]
  ------------------
 2063|  25.5k|        const auto val =
 2064|  25.5k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  25.5k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  25.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.4k, False: 3.11k]
  |  |  ------------------
  ------------------
 2066|  22.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  22.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  22.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 354, False: 22.1k]
  ------------------
 2069|    354|                return it;
 2070|    354|            }
 2071|  22.4k|        }
 2072|  25.2k|        it = val.iterator;
 2073|  25.2k|    }
 2074|       |
 2075|    570|    return it;
 2076|    924|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    924|    {
  754|    924|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  22.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.4k|              cvref<T> obj = *get<T>(fn);
  745|  22.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.4k|              }
  748|  22.4k|              else {
  749|  22.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.4k|              }
  751|  22.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  22.4k|    {
  684|  22.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.4k|            return static_cast<T*>(s.m_cp);
  686|  22.4k|        }
  687|  22.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.4k|            return static_cast<T*>(s.m_p);
  689|  22.4k|        }
  690|  22.4k|        else {
  691|  22.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.4k|        }
  693|  22.4k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  22.4k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    924|        {
  662|    924|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     54|    {
 4841|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 40, False: 14]
  ------------------
 4842|     40|            return read_string_impl(
 4843|     40|                range,
 4844|     40|                read_until_code_unit(
 4845|     40|                    range,
 4846|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     40|                        SourceCharT ch) { return ch == until; }),
 4848|     40|                value);
 4849|     40|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     40|    {
  754|     40|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|  1.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.24k|              cvref<T> obj = *get<T>(fn);
  745|  1.24k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.24k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.24k|              }
  748|  1.24k|              else {
  749|  1.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.24k|              }
  751|  1.24k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.24k|    {
  684|  1.24k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.24k|            return static_cast<T*>(s.m_cp);
  686|  1.24k|        }
  687|  1.24k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.24k|            return static_cast<T*>(s.m_p);
  689|  1.24k|        }
  690|  1.24k|        else {
  691|  1.24k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.24k|        }
  693|  1.24k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|  1.24k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     40|        {
  662|     40|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|    132|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    132|            auto it = first;
 2017|    246|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    246|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 30, False: 216]
  ------------------
 2019|     30|                    return first;
 2020|     30|                }
 2021|    216|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 12, False: 204]
  ------------------
 2022|     12|                    return it;
 2023|     12|                }
 2024|    204|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 90, False: 114]
  ------------------
 2025|     90|                    break;
 2026|     90|                }
 2027|    204|            }
 2028|     90|            ++first;
 2029|     90|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     40|    {
 4947|     40|        return read_impl(
 4948|     40|            range,
 4949|     40|            [&](const auto& rng) {
 4950|     40|                return read_string_impl(rng, read_all(rng), value);
 4951|     40|            },
 4952|     40|            detail::priority_tag<1>{});
 4953|     40|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     40|    {
 4974|     40|        return read_cb(range);
 4975|     40|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     40|            [&](const auto& rng) {
 4950|     40|                return read_string_impl(rng, read_all(rng), value);
 4951|     40|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    120|{
 1839|    120|    return ranges::next(range.begin(), range.end());
 1840|    120|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    120|    {
  313|    120|        ranges::advance(x, bound);
  314|    120|        return x;
  315|    120|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    120|    {
  275|    120|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    120|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    120|    {
  203|  3.69k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 3.57k, False: 120]
  ------------------
  204|  3.57k|            ++i;
  205|  3.57k|        }
  206|    120|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    270|    {
 5048|    270|        auto it = read_source_impl(range, {specs});
 5049|    270|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 262]
  |  |  ------------------
  ------------------
 5050|      8|            return unexpected(it.error());
 5051|      8|        }
 5052|       |
 5053|    262|        return read_string_impl(range, *it, value);
 5054|    270|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|    810|    {
 5153|    810|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|    810|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|    810|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    810|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 810]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|    810|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|    810|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 474, False: 336]
  ------------------
 5163|    474|            const auto cb = [&](char32_t cp) {
 5164|    474|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    474|            };
 5166|       |
 5167|    474|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 90, False: 384]
  ------------------
 5168|     90|                auto it = read_until_code_point(range, cb);
 5169|     90|                return check_nonempty(it, range);
 5170|     90|            }
 5171|    384|            auto it = read_while_code_point(range, cb);
 5172|    384|            return check_nonempty(it, range);
 5173|    474|        }
 5174|       |
 5175|    336|        const auto cb = [&](SourceCharT ch) {
 5176|    336|            return cb_wrapper.on_ascii_only(ch);
 5177|    336|        };
 5178|       |
 5179|    336|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 288, False: 48]
  ------------------
 5180|    288|            auto it = read_until_code_unit(range, cb);
 5181|    288|            return check_nonempty(it, range);
 5182|    288|        }
 5183|     48|        auto it = read_while_code_unit(range, cb);
 5184|     48|        return check_nonempty(it, range);
 5185|    336|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    474|    {
  754|    474|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   100k|    {
  684|   100k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   100k|            return static_cast<T*>(s.m_cp);
  686|   100k|        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|   100k|        }
  690|   100k|        else {
  691|   100k|            return reinterpret_cast<T*>(s.m_fp);
  692|   100k|        }
  693|   100k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   100k|            const auto cb = [&](char32_t cp) {
 5164|   100k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   100k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    474|        {
  667|    474|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|    810|    {
 5191|    810|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 24, False: 786]
  ------------------
 5192|     24|            return unexpected_scan_error(
 5193|     24|                scan_error::invalid_scanned_value,
 5194|     24|                "No characters matched in [character set]");
 5195|     24|        }
 5196|       |
 5197|    786|        return it;
 5198|    810|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    336|    {
  754|    336|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  15.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.5k|              cvref<T> obj = *get<T>(fn);
  745|  15.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.5k|              }
  748|  15.5k|              else {
  749|  15.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.5k|              }
  751|  15.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  15.5k|    {
  684|  15.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.5k|            return static_cast<T*>(s.m_cp);
  686|  15.5k|        }
  687|  15.5k|        else if constexpr (std::is_object_v<T>) {
  688|  15.5k|            return static_cast<T*>(s.m_p);
  689|  15.5k|        }
  690|  15.5k|        else {
  691|  15.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.5k|        }
  693|  15.5k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  15.5k|        const auto cb = [&](SourceCharT ch) {
 5176|  15.5k|            return cb_wrapper.on_ascii_only(ch);
 5177|  15.5k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    336|        {
  667|    336|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    262|{
 4752|    262|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    262|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    262|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 122, False: 140]
  ------------------
 4756|    122|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    122|                                     "Invalid encoding in scanned string");
 4758|    122|    }
 4759|    140|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    140|    static_cast<    \
  |  |  929|    140|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    140|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    140|    return SCN_MOVE(result);
  ------------------
  |  |  928|    140|    static_cast<    \
  |  |  929|    140|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    140|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     98|    {
 4891|     98|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 98, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     98|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     98|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     98|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     98|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     98|    }                                                  \
  |  |  |  | 3667|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     98|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|    294|    {
 4913|    294|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    588|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|    294|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    294|            return unexpected_scan_error(
 4916|    294|                scan_error::invalid_scanned_value,
 4917|    294|                "Regex backend doesn't support wide strings as input");
 4918|    294|        }
 4919|    294|        else {
 4920|    294|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 294, False: 0]
  ------------------
 4921|    294|                return unexpected_scan_error(
 4922|    294|                    scan_error::invalid_scanned_value,
 4923|    294|                    "Cannot use regex with a non-contiguous source "
 4924|    294|                    "range");
 4925|    294|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|    294|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    294|{
  959|    294|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    294|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    294|        return true;
  962|    294|    }
  963|    294|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|    294|                           ranges::const_iterator_t<Range>,
  965|    294|                           typename detail::basic_scan_buffer<
  966|    294|                               detail::char_t<Range>>::forward_iterator>) {
  967|    294|        auto beg = r.begin();
  968|    294|        if (!beg.stores_parent()) {
  969|    294|            return true;
  970|    294|        }
  971|    294|        return beg.parent()->is_contiguous();
  972|    294|    }
  973|    294|    else {
  974|    294|        return false;
  975|    294|    }
  976|    294|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.56k|    {
 5277|  4.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.56k|        return read_impl(range, specs, value);
 5279|  4.56k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.56k|    {
 5295|  4.56k|        SCN_CLANG_PUSH
 5296|  4.56k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.56k|        switch (m_type) {
 5299|    276|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 276, False: 4.28k]
  ------------------
 5300|    276|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 4.51k]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.56k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    952|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 952, False: 3.61k]
  ------------------
 5310|    952|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    952|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.05k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.05k, False: 1.50k]
  ------------------
 5315|  3.05k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.05k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.05k|                    specs.regexp_flags, value);
 5318|       |
 5319|    228|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 228, False: 4.33k]
  ------------------
 5320|    228|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    228|                    range,
 5322|    228|                    get_unescaped_regex_pattern(
 5323|    228|                        specs.charset_string<SourceCharT>()),
 5324|    228|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.56k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.56k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.56k|        }
 5331|       |
 5332|  4.56k|        SCN_CLANG_POP
 5333|  4.56k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    928|    {
 4820|    928|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    928|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    980|{
 4752|    980|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    980|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    980|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 318, False: 662]
  ------------------
 4756|    318|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    318|                                     "Invalid encoding in scanned string");
 4758|    318|    }
 4759|    662|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    662|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    662|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 662]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    662|    return SCN_MOVE(result);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    662|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.75k|{
 3012|  1.75k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.75k|        dest.assign(source.view());
 3014|  1.75k|    }
 3015|  1.75k|    else {
 3016|  1.75k|        return transcode_impl(source.view(), dest);
 3017|  1.75k|    }
 3018|       |
 3019|  1.75k|    return {};
 3020|  1.75k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.78k|{
 2088|  2.78k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.78k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.78k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.78k|        auto buf = make_contiguous_buffer(range);
 2092|  2.78k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.78k|        return ranges::next(range.begin(),
 2094|  2.78k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.78k|    }
 2096|  2.78k|    else {
 2097|  2.78k|        auto it = range.begin();
 2098|       |
 2099|  2.78k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.78k|            auto seg = get_contiguous_beginning(range);
 2101|  2.78k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.78k|                seg_it != seg.end()) {
 2103|  2.78k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.78k|            }
 2105|  2.78k|            ranges::advance(it, seg.size());
 2106|  2.78k|        }
 2107|       |
 2108|  2.78k|        return read_until_code_point(
 2109|  2.78k|            ranges::subrange{it, range.end()},
 2110|  2.78k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.78k|    }
 2112|  2.78k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     52|    {
 4841|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 22]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    708|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    708|              cvref<T> obj = *get<T>(fn);
  745|    708|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    708|                  obj(static_cast<decltype(args)>(args)...);
  747|    708|              }
  748|    708|              else {
  749|    708|                  return obj(static_cast<decltype(args)>(args)...);
  750|    708|              }
  751|    708|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    708|    {
  684|    708|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    708|            return static_cast<T*>(s.m_cp);
  686|    708|        }
  687|    708|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    708|            return static_cast<T*>(s.m_p);
  689|    708|        }
  690|    708|        else {
  691|    708|            return reinterpret_cast<T*>(s.m_fp);
  692|    708|        }
  693|    708|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    708|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     66|{
 2007|     66|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     66|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     66|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     66|                           needle.end());
 2012|     66|    }
 2013|     66|    else {
 2014|     66|        auto first = range.begin();
 2015|     66|        while (true) {
 2016|     66|            auto it = first;
 2017|     66|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     66|                if (needle_it == needle.end()) {
 2019|     66|                    return first;
 2020|     66|                }
 2021|     66|                if (it == range.end()) {
 2022|     66|                    return it;
 2023|     66|                }
 2024|     66|                if (*it != *needle_it) {
 2025|     66|                    break;
 2026|     66|                }
 2027|     66|            }
 2028|     66|            ++first;
 2029|     66|        }
 2030|     66|    }
 2031|     66|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    952|    {
 5048|    952|        auto it = read_source_impl(range, {specs});
 5049|    952|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 274, False: 678]
  |  |  ------------------
  ------------------
 5050|    274|            return unexpected(it.error());
 5051|    274|        }
 5052|       |
 5053|    678|        return read_string_impl(range, *it, value);
 5054|    952|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  2.85k|    {
 5153|  2.85k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.85k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.85k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.85k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.85k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.85k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 2.50k, False: 348]
  ------------------
 5163|  2.50k|            const auto cb = [&](char32_t cp) {
 5164|  2.50k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  2.50k|            };
 5166|       |
 5167|  2.50k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 264, False: 2.24k]
  ------------------
 5168|    264|                auto it = read_until_code_point(range, cb);
 5169|    264|                return check_nonempty(it, range);
 5170|    264|            }
 5171|  2.24k|            auto it = read_while_code_point(range, cb);
 5172|  2.24k|            return check_nonempty(it, range);
 5173|  2.50k|        }
 5174|       |
 5175|    348|        const auto cb = [&](SourceCharT ch) {
 5176|    348|            return cb_wrapper.on_ascii_only(ch);
 5177|    348|        };
 5178|       |
 5179|    348|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 198]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    198|        auto it = read_while_code_unit(range, cb);
 5184|    198|        return check_nonempty(it, range);
 5185|    348|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.50k|{
 2061|  2.50k|    auto it = range.begin();
 2062|   490k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 489k, False: 222]
  ------------------
 2063|   489k|        const auto val =
 2064|   489k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   489k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   489k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 487k, False: 2.17k]
  |  |  ------------------
  ------------------
 2066|   487k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   487k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   487k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.28k, False: 485k]
  ------------------
 2069|  2.28k|                return it;
 2070|  2.28k|            }
 2071|   487k|        }
 2072|   487k|        it = val.iterator;
 2073|   487k|    }
 2074|       |
 2075|    222|    return it;
 2076|  2.50k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   489k|{
 1899|   489k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   489k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   489k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   489k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   489k|    auto it = range.begin();
 1903|   489k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   489k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.17k, False: 487k]
  |  |  ------------------
  ------------------
 1906|  2.17k|        ++it;
 1907|  2.17k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  2.17k|        return {it, {}};
 1909|  2.17k|    }
 1910|       |
 1911|   487k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 432k, False: 54.7k]
  ------------------
 1912|   432k|        ++it;
 1913|   432k|        return {it, string_type(1, *range.begin())};
 1914|   432k|    }
 1915|       |
 1916|  54.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  54.7k|    return {it, string_type{range.begin(), it}};
 1918|   487k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  2.17k|{
 1155|  2.17k|    auto it = input.begin();
 1156|  8.41k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 8.33k, False: 84]
  ------------------
 1157|  8.33k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.08k, False: 6.24k]
  ------------------
 1158|  2.08k|            break;
 1159|  2.08k|        }
 1160|  8.33k|    }
 1161|  2.17k|    return it;
 1162|  2.17k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  54.7k|    {
  283|  54.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  54.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  54.7k|    {
  212|  54.7k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 42, False: 54.7k]
  ------------------
  213|     42|            auto dist = bound - i;
  214|     42|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     42|            return dist;
  216|     42|        }
  217|  54.7k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  54.7k|        return n;
  219|  54.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   109k|    {
  132|   109k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 109k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   109k|        return t;
  136|   109k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   489k|    {
 1890|   489k|        return !codepoint.empty();
 1891|   489k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.50k|    {
  754|  2.50k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   487k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   487k|              cvref<T> obj = *get<T>(fn);
  745|   487k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   487k|                  obj(static_cast<decltype(args)>(args)...);
  747|   487k|              }
  748|   487k|              else {
  749|   487k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   487k|              }
  751|   487k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   487k|    {
  684|   487k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   487k|            return static_cast<T*>(s.m_cp);
  686|   487k|        }
  687|   487k|        else if constexpr (std::is_object_v<T>) {
  688|   487k|            return static_cast<T*>(s.m_p);
  689|   487k|        }
  690|   487k|        else {
  691|   487k|            return reinterpret_cast<T*>(s.m_fp);
  692|   487k|        }
  693|   487k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   487k|            const auto cb = [&](char32_t cp) {
 5164|   487k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   487k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.50k|        {
  667|  2.50k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  2.85k|    {
 5191|  2.85k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 822, False: 2.03k]
  ------------------
 5192|    822|            return unexpected_scan_error(
 5193|    822|                scan_error::invalid_scanned_value,
 5194|    822|                "No characters matched in [character set]");
 5195|    822|        }
 5196|       |
 5197|  2.03k|        return it;
 5198|  2.85k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.24k|{
 2082|  2.24k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.24k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    348|    {
  754|    348|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.00k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.00k|              cvref<T> obj = *get<T>(fn);
  745|  4.00k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.00k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.00k|              }
  748|  4.00k|              else {
  749|  4.00k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.00k|              }
  751|  4.00k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.00k|    {
  684|  4.00k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.00k|            return static_cast<T*>(s.m_cp);
  686|  4.00k|        }
  687|  4.00k|        else if constexpr (std::is_object_v<T>) {
  688|  4.00k|            return static_cast<T*>(s.m_p);
  689|  4.00k|        }
  690|  4.00k|        else {
  691|  4.00k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.00k|        }
  693|  4.00k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.00k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.00k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.00k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    348|        {
  667|    348|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.21k|{
 4752|  1.21k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.21k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.21k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 122, False: 1.09k]
  ------------------
 4756|    122|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    122|                                     "Invalid encoding in scanned string");
 4758|    122|    }
 4759|  1.09k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.09k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.09k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.09k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.28k|    {
 4891|  3.28k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.74k, False: 538]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.74k|    }                                                  \
  |  |  |  | 3667|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    538|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    538|        return read_string_impl(range, it, value);
 4893|  3.28k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  9.85k|    {
 4913|  9.85k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  19.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  9.85k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  9.85k|            return unexpected_scan_error(
 4916|  9.85k|                scan_error::invalid_scanned_value,
 4917|  9.85k|                "Regex backend doesn't support wide strings as input");
 4918|  9.85k|        }
 4919|  9.85k|        else {
 4920|  9.85k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 9.85k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  9.85k|            auto input = get_as_contiguous(range);
 4928|  9.85k|            SCN_TRY(it,
  ------------------
  |  | 3668|  9.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.23k, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  8.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  8.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  8.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  8.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  8.23k|    }                                                  \
  |  |  |  | 3667|  9.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  1.61k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  1.61k|            return ranges::next(range.begin(),
 4931|  1.61k|                                ranges::distance(input.begin(), it));
 4932|  9.85k|        }
 4933|  9.85k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  9.85k|{
  959|  9.85k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  9.85k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  9.85k|        return true;
  962|  9.85k|    }
  963|  9.85k|    else if constexpr (std::is_same_v<
  964|  9.85k|                           ranges::const_iterator_t<Range>,
  965|  9.85k|                           typename detail::basic_scan_buffer<
  966|  9.85k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  9.85k|        auto beg = r.begin();
  968|  9.85k|        if (!beg.stores_parent()) {
  969|  9.85k|            return true;
  970|  9.85k|        }
  971|  9.85k|        return beg.parent()->is_contiguous();
  972|  9.85k|    }
  973|  9.85k|    else {
  974|  9.85k|        return false;
  975|  9.85k|    }
  976|  9.85k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  9.85k|{
 1065|  9.85k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  9.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  9.85k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  9.85k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  9.85k|        return r;
 1070|  9.85k|    }
 1071|  9.85k|    else if constexpr (std::is_same_v<
 1072|  9.85k|                           ranges::const_iterator_t<Range>,
 1073|  9.85k|                           typename detail::basic_scan_buffer<
 1074|  9.85k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  9.85k|        if constexpr (ranges::common_range<Range>) {
 1076|  9.85k|            return detail::make_string_view_from_pointers(
 1077|  9.85k|                r.begin().to_contiguous_segment_iterator(),
 1078|  9.85k|                r.end().to_contiguous_segment_iterator());
 1079|  9.85k|        }
 1080|  9.85k|        else {
 1081|  9.85k|            return r.begin().contiguous_segment();
 1082|  9.85k|        }
 1083|  9.85k|    }
 1084|  9.85k|    else {
 1085|  9.85k|        SCN_EXPECT(false);
 1086|  9.85k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  9.85k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  9.85k|    }
 1090|  9.85k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  9.85k|{
  981|  9.85k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  9.85k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  9.85k|        return true;
  984|  9.85k|    }
  985|  9.85k|    else if constexpr (std::is_same_v<
  986|  9.85k|                           ranges::const_iterator_t<Range>,
  987|  9.85k|                           typename detail::basic_scan_buffer<
  988|  9.85k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  9.85k|        auto beg = r.begin();
  990|  9.85k|        if (beg.contiguous_segment().empty()) {
  991|  9.85k|            return false;
  992|  9.85k|        }
  993|  9.85k|        if constexpr (ranges::common_range<Range>) {
  994|  9.85k|            return beg.contiguous_segment().end() ==
  995|  9.85k|                   ranges::end(r).contiguous_segment().end();
  996|  9.85k|        }
  997|  9.85k|        else {
  998|  9.85k|            if (beg.stores_parent()) {
  999|  9.85k|                return beg.contiguous_segment().end() ==
 1000|  9.85k|                       beg.parent()->current_view().end();
 1001|  9.85k|            }
 1002|  9.85k|            return true;
 1003|  9.85k|        }
 1004|  9.85k|    }
 1005|  9.85k|    else {
 1006|  9.85k|        return false;
 1007|  9.85k|    }
 1008|  9.85k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  9.85k|{
 4346|  9.85k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  9.85k|                  ranges::borrowed_range<Input> &&
 4348|  9.85k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  9.85k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  9.85k|    std::basic_regex<CharT> re{};
 4352|  9.85k|    try {
 4353|  9.85k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  9.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  9.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  9.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  9.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  9.85k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  9.85k|                                     re_flags | std::regex_constants::nosubs};
 4356|  9.85k|    }
 4357|  9.85k|    catch (const std::regex_error& err) {
 4358|  5.30k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  5.30k|                                     "Invalid regex");
 4360|  5.30k|    }
 4361|       |
 4362|  4.54k|    std::match_results<const CharT*> matches{};
 4363|  4.54k|    try {
 4364|  4.54k|        bool found = std::regex_search(input.data(),
 4365|  4.54k|                                       input.data() + input.size(), matches, re,
 4366|  4.54k|                                       std::regex_constants::match_continuous);
 4367|  4.54k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 2.93k, False: 1.61k]
  |  Branch (4367:23): [True: 0, False: 1.61k]
  ------------------
 4368|  2.79k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  2.79k|                                         "Regular expression didn't match");
 4370|  2.79k|        }
 4371|  4.54k|    }
 4372|  4.54k|    catch (const std::regex_error& err) {
 4373|    144|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    144|                                     "Regex matching failed with an error");
 4375|    144|    }
 4376|       |
 4377|  1.61k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  4.54k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  6.10k|{
 5809|  6.10k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.10k|        return reader_impl_for_bool<CharT>{};
 5811|  6.10k|    }
 5812|  6.10k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.10k|        return reader_impl_for_char<CharT>{};
 5814|  6.10k|    }
 5815|  6.10k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.10k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.10k|    }
 5818|  6.10k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.10k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.10k|    }
 5821|  6.10k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.10k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.10k|        return reader_impl_for_string<CharT>{};
 5824|  6.10k|    }
 5825|  6.10k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  6.10k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.10k|        return reader_impl_for_string<CharT>{};
 5828|  6.10k|    }
 5829|  6.10k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.10k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.10k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.10k|    }
 5833|  6.10k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.10k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.10k|    }
 5836|  6.10k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.10k|        return reader_impl_for_float<CharT>{};
 5838|  6.10k|    }
 5839|  6.10k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.10k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.10k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.10k|                       !std::is_same_v<T, bool>) {
 5843|  6.10k|        return reader_impl_for_int<CharT>{};
 5844|  6.10k|    }
 5845|  6.10k|    else {
 5846|  6.10k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.10k|    }
 5848|  6.10k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    356|{
 2993|    356|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    356|        if (source.stores_allocated_string()) {
 2995|    356|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    356|        }
 2997|    356|        else {
 2998|    356|            dest.assign(source.view());
 2999|    356|        }
 3000|    356|    }
 3001|    356|    else {
 3002|    356|        return transcode_impl(source.view(), dest);
 3003|    356|    }
 3004|       |
 3005|      0|    return {};
 3006|    356|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.11k|{
 2968|  2.11k|    dst.clear();
 2969|  2.11k|    transcode_valid_to_string(src, dst);
 2970|  2.11k|    return {};
 2971|  2.11k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.11k|{
 1403|  2.11k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.11k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.11k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.11k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.11k|            std::u32string tmp;
 1410|  2.11k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.11k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.11k|                std::u32string_view{tmp}, dest);
 1413|  2.11k|        }
 1414|  2.11k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.11k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.11k|        }
 1417|  2.11k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.11k|{
 1277|  2.11k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.11k|    auto it = src.begin();
 1280|   187k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 185k, False: 2.11k]
  ------------------
 1281|   185k|        auto res = get_next_code_point_valid(
 1282|   185k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   185k|                                                                 src.end()));
 1284|   185k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   185k|        dest.push_back(res.value);
 1286|   185k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   185k|    }
 1288|  2.11k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   185k|{
 1189|   185k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   185k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   185k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   185k|    return {input.begin() + len,
 1195|   185k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   185k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    770|    {
 5277|    770|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    770|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    770|        return read_impl(range, specs, value);
 5279|    770|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    770|    {
 5295|    770|        SCN_CLANG_PUSH
 5296|    770|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    770|        switch (m_type) {
 5299|    308|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 308, False: 462]
  ------------------
 5300|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 716]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     40|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 40, False: 730]
  ------------------
 5307|     40|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    270|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 270, False: 500]
  ------------------
 5310|    270|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    270|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 768]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     96|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 96, False: 674]
  ------------------
 5320|     96|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     96|                    range,
 5322|     96|                    get_unescaped_regex_pattern(
 5323|     96|                        specs.charset_string<SourceCharT>()),
 5324|     96|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 770]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    770|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    770|        }
 5331|       |
 5332|    770|        SCN_CLANG_POP
 5333|    770|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    308|    {
 4820|    308|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    308|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    402|{
 4752|    402|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    402|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    402|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 186, False: 216]
  ------------------
 4756|    186|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    186|                                     "Invalid encoding in scanned string");
 4758|    186|    }
 4759|    216|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    216|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    216|    return SCN_MOVE(result);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    216|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     54|    {
 4841|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 40, False: 14]
  ------------------
 4842|     40|            return read_string_impl(
 4843|     40|                range,
 4844|     40|                read_until_code_unit(
 4845|     40|                    range,
 4846|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     40|                        SourceCharT ch) { return ch == until; }),
 4848|     40|                value);
 4849|     40|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     40|    {
  754|     40|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|  1.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.24k|              cvref<T> obj = *get<T>(fn);
  745|  1.24k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.24k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.24k|              }
  748|  1.24k|              else {
  749|  1.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.24k|              }
  751|  1.24k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.24k|    {
  684|  1.24k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.24k|            return static_cast<T*>(s.m_cp);
  686|  1.24k|        }
  687|  1.24k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.24k|            return static_cast<T*>(s.m_p);
  689|  1.24k|        }
  690|  1.24k|        else {
  691|  1.24k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.24k|        }
  693|  1.24k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|  1.24k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     40|        {
  662|     40|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     40|    {
 4947|     40|        return read_impl(
 4948|     40|            range,
 4949|     40|            [&](const auto& rng) {
 4950|     40|                return read_string_impl(rng, read_all(rng), value);
 4951|     40|            },
 4952|     40|            detail::priority_tag<1>{});
 4953|     40|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     40|    {
 4974|     40|        return read_cb(range);
 4975|     40|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     40|            [&](const auto& rng) {
 4950|     40|                return read_string_impl(rng, read_all(rng), value);
 4951|     40|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    270|    {
 5048|    270|        auto it = read_source_impl(range, {specs});
 5049|    270|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 262]
  |  |  ------------------
  ------------------
 5050|      8|            return unexpected(it.error());
 5051|      8|        }
 5052|       |
 5053|    262|        return read_string_impl(range, *it, value);
 5054|    270|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    262|{
 4752|    262|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    262|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    262|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 122, False: 140]
  ------------------
 4756|    122|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    122|                                     "Invalid encoding in scanned string");
 4758|    122|    }
 4759|    140|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    140|    static_cast<    \
  |  |  929|    140|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    140|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    140|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    140|    return SCN_MOVE(result);
  ------------------
  |  |  928|    140|    static_cast<    \
  |  |  929|    140|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    140|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     98|    {
 4891|     98|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 98, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     98|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     98|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     98|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     98|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     98|    }                                                  \
  |  |  |  | 3667|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     98|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  4.56k|    {
 5277|  4.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.56k|        return read_impl(range, specs, value);
 5279|  4.56k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  4.56k|    {
 5295|  4.56k|        SCN_CLANG_PUSH
 5296|  4.56k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.56k|        switch (m_type) {
 5299|    276|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 276, False: 4.28k]
  ------------------
 5300|    276|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 4.51k]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.56k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    952|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 952, False: 3.61k]
  ------------------
 5310|    952|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    952|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.05k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.05k, False: 1.50k]
  ------------------
 5315|  3.05k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.05k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.05k|                    specs.regexp_flags, value);
 5318|       |
 5319|    228|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 228, False: 4.33k]
  ------------------
 5320|    228|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    228|                    range,
 5322|    228|                    get_unescaped_regex_pattern(
 5323|    228|                        specs.charset_string<SourceCharT>()),
 5324|    228|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.56k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.56k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.56k|        }
 5331|       |
 5332|  4.56k|        SCN_CLANG_POP
 5333|  4.56k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    928|    {
 4820|    928|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    928|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    980|{
 4752|    980|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    980|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    980|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 318, False: 662]
  ------------------
 4756|    318|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    318|                                     "Invalid encoding in scanned string");
 4758|    318|    }
 4759|    662|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    662|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    662|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 662]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    662|    return SCN_MOVE(result);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    662|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.75k|{
 3012|  1.75k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.75k|        dest.assign(source.view());
 3014|  1.75k|    }
 3015|  1.75k|    else {
 3016|  1.75k|        return transcode_impl(source.view(), dest);
 3017|  1.75k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.75k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     52|    {
 4841|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 30, False: 22]
  ------------------
 4842|     30|            return read_string_impl(
 4843|     30|                range,
 4844|     30|                read_until_code_unit(
 4845|     30|                    range,
 4846|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     30|                        SourceCharT ch) { return ch == until; }),
 4848|     30|                value);
 4849|     30|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    708|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    708|              cvref<T> obj = *get<T>(fn);
  745|    708|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    708|                  obj(static_cast<decltype(args)>(args)...);
  747|    708|              }
  748|    708|              else {
  749|    708|                  return obj(static_cast<decltype(args)>(args)...);
  750|    708|              }
  751|    708|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    708|    {
  684|    708|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    708|            return static_cast<T*>(s.m_cp);
  686|    708|        }
  687|    708|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    708|            return static_cast<T*>(s.m_p);
  689|    708|        }
  690|    708|        else {
  691|    708|            return reinterpret_cast<T*>(s.m_fp);
  692|    708|        }
  693|    708|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    708|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    952|    {
 5048|    952|        auto it = read_source_impl(range, {specs});
 5049|    952|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 274, False: 678]
  |  |  ------------------
  ------------------
 5050|    274|            return unexpected(it.error());
 5051|    274|        }
 5052|       |
 5053|    678|        return read_string_impl(range, *it, value);
 5054|    952|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.21k|{
 4752|  1.21k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.21k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.21k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 122, False: 1.09k]
  ------------------
 4756|    122|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    122|                                     "Invalid encoding in scanned string");
 4758|    122|    }
 4759|  1.09k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.09k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.09k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.09k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  3.28k|    {
 4891|  3.28k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.74k, False: 538]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.74k|    }                                                  \
  |  |  |  | 3667|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    538|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    538|        return read_string_impl(range, it, value);
 4893|  3.28k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  6.10k|{
 5809|  6.10k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  6.10k|        return reader_impl_for_bool<CharT>{};
 5811|  6.10k|    }
 5812|  6.10k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  6.10k|        return reader_impl_for_char<CharT>{};
 5814|  6.10k|    }
 5815|  6.10k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  6.10k|        return reader_impl_for_wchar<CharT>{};
 5817|  6.10k|    }
 5818|  6.10k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  6.10k|        return reader_impl_for_code_point<CharT>{};
 5820|  6.10k|    }
 5821|  6.10k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  6.10k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.10k|        return reader_impl_for_string<CharT>{};
 5824|  6.10k|    }
 5825|  6.10k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  6.10k|                       std::is_same_v<T, std::wstring>) {
 5827|  6.10k|        return reader_impl_for_string<CharT>{};
 5828|  6.10k|    }
 5829|  6.10k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  6.10k|                       std::is_same_v<T, wregex_matches>) {
 5831|  6.10k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  6.10k|    }
 5833|  6.10k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  6.10k|        return reader_impl_for_voidptr<CharT>{};
 5835|  6.10k|    }
 5836|  6.10k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  6.10k|        return reader_impl_for_float<CharT>{};
 5838|  6.10k|    }
 5839|  6.10k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  6.10k|                       !std::is_same_v<T, wchar_t> &&
 5841|  6.10k|                       !std::is_same_v<T, char32_t> &&
 5842|  6.10k|                       !std::is_same_v<T, bool>) {
 5843|  6.10k|        return reader_impl_for_int<CharT>{};
 5844|  6.10k|    }
 5845|  6.10k|    else {
 5846|  6.10k|        return reader_impl_for_monostate<CharT>{};
 5847|  6.10k|    }
 5848|  6.10k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    770|    {
 5277|    770|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    770|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    770|        return read_impl(range, specs, value);
 5279|    770|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    770|    {
 5295|    770|        SCN_CLANG_PUSH
 5296|    770|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    770|        switch (m_type) {
 5299|    308|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 308, False: 462]
  ------------------
 5300|    308|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     54|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 54, False: 716]
  ------------------
 5303|     54|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     54|                                                                   value);
 5305|       |
 5306|     40|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 40, False: 730]
  ------------------
 5307|     40|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    270|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 270, False: 500]
  ------------------
 5310|    270|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    270|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 768]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|     96|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 96, False: 674]
  ------------------
 5320|     96|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     96|                    range,
 5322|     96|                    get_unescaped_regex_pattern(
 5323|     96|                        specs.charset_string<SourceCharT>()),
 5324|     96|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 770]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    770|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    770|        }
 5331|       |
 5332|    770|        SCN_CLANG_POP
 5333|    770|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    308|    {
 4827|    308|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    308|                                     value);
 4829|    308|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    402|{
 4773|    402|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    402|    auto src = [&]() {
 4776|    402|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    402|            return make_contiguous_buffer(
 4778|    402|                ranges::subrange{range.begin().base(), result.base()});
 4779|    402|        }
 4780|    402|        else {
 4781|    402|            return make_contiguous_buffer(
 4782|    402|                ranges::subrange{range.begin(), result});
 4783|    402|        }
 4784|    402|    }();
 4785|    402|    using src_type = decltype(src);
 4786|       |
 4787|    402|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    402|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    402|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    402|                                     "Cannot read a string_view from "
 4796|    402|                                     "this source range (would require "
 4797|    402|                                     "transcoding)");
 4798|    402|    }
 4799|    402|    else {
 4800|    402|        const auto view = src.view();
 4801|    402|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    402|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 186, False: 216]
  ------------------
 4804|    186|            return unexpected_scan_error(
 4805|    186|                scan_error::invalid_scanned_value,
 4806|    186|                "Invalid encoding in scanned string_view");
 4807|    186|        }
 4808|       |
 4809|    216|        return SCN_MOVE(result);
  ------------------
  |  |  928|    216|    static_cast<    \
  |  |  929|    216|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    402|    }
 4811|    402|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    402|    auto src = [&]() {
 4776|    402|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    402|            return make_contiguous_buffer(
 4778|    402|                ranges::subrange{range.begin().base(), result.base()});
 4779|    402|        }
 4780|    402|        else {
 4781|    402|            return make_contiguous_buffer(
 4782|    402|                ranges::subrange{range.begin(), result});
 4783|    402|        }
 4784|    402|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     54|    {
 4863|     54|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 40, False: 14]
  ------------------
 4864|     40|            return read_string_view_impl(
 4865|     40|                range,
 4866|     40|                read_until_code_unit(
 4867|     40|                    range,
 4868|     40|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     40|                        SourceCharT ch) { return ch == until; }),
 4870|     40|                value);
 4871|     40|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     54|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     40|    {
  754|     40|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  1.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.24k|              cvref<T> obj = *get<T>(fn);
  745|  1.24k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.24k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.24k|              }
  748|  1.24k|              else {
  749|  1.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.24k|              }
  751|  1.24k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|  1.24k|    {
  684|  1.24k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.24k|            return static_cast<T*>(s.m_cp);
  686|  1.24k|        }
  687|  1.24k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.24k|            return static_cast<T*>(s.m_p);
  689|  1.24k|        }
  690|  1.24k|        else {
  691|  1.24k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.24k|        }
  693|  1.24k|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|  1.24k|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     40|        {
  662|     40|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     40|    {
 4959|     40|        return read_impl(
 4960|     40|            range,
 4961|     40|            [&](const auto& rng) {
 4962|     40|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     40|            },
 4964|     40|            detail::priority_tag<1>{});
 4965|     40|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     40|    {
 4974|     40|        return read_cb(range);
 4975|     40|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     40|            [&](const auto& rng) {
 4962|     40|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     40|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    270|    {
 5062|    270|        auto it = read_source_impl(range, {specs});
 5063|    270|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 262]
  |  |  ------------------
  ------------------
 5064|      8|            return unexpected(it.error());
 5065|      8|        }
 5066|       |
 5067|    262|        return read_string_view_impl(range, *it, value);
 5068|    270|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    262|{
 4773|    262|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    262|    auto src = [&]() {
 4776|    262|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    262|            return make_contiguous_buffer(
 4778|    262|                ranges::subrange{range.begin().base(), result.base()});
 4779|    262|        }
 4780|    262|        else {
 4781|    262|            return make_contiguous_buffer(
 4782|    262|                ranges::subrange{range.begin(), result});
 4783|    262|        }
 4784|    262|    }();
 4785|    262|    using src_type = decltype(src);
 4786|       |
 4787|    262|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    262|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    262|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    262|                                     "Cannot read a string_view from "
 4796|    262|                                     "this source range (would require "
 4797|    262|                                     "transcoding)");
 4798|    262|    }
 4799|    262|    else {
 4800|    262|        const auto view = src.view();
 4801|    262|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    262|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 122, False: 140]
  ------------------
 4804|    122|            return unexpected_scan_error(
 4805|    122|                scan_error::invalid_scanned_value,
 4806|    122|                "Invalid encoding in scanned string_view");
 4807|    122|        }
 4808|       |
 4809|    140|        return SCN_MOVE(result);
  ------------------
  |  |  928|    140|    static_cast<    \
  |  |  929|    140|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    262|    }
 4811|    262|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    262|    auto src = [&]() {
 4776|    262|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    262|            return make_contiguous_buffer(
 4778|    262|                ranges::subrange{range.begin().base(), result.base()});
 4779|    262|        }
 4780|    262|        else {
 4781|    262|            return make_contiguous_buffer(
 4782|    262|                ranges::subrange{range.begin(), result});
 4783|    262|        }
 4784|    262|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     98|    {
 4902|     98|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 98, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     98|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     98|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     98|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     98|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     98|    }                                                  \
  |  |  |  | 3667|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     98|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  4.56k|    {
 5277|  4.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  4.56k|        return read_impl(range, specs, value);
 5279|  4.56k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  4.56k|    {
 5295|  4.56k|        SCN_CLANG_PUSH
 5296|  4.56k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  4.56k|        switch (m_type) {
 5299|    276|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 276, False: 4.28k]
  ------------------
 5300|    276|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     52|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 52, False: 4.51k]
  ------------------
 5303|     52|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     52|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 4.56k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    952|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 952, False: 3.61k]
  ------------------
 5310|    952|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    952|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  3.05k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 3.05k, False: 1.50k]
  ------------------
 5315|  3.05k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  3.05k|                    range, specs.charset_string<SourceCharT>(),
 5317|  3.05k|                    specs.regexp_flags, value);
 5318|       |
 5319|    228|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 228, False: 4.33k]
  ------------------
 5320|    228|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    228|                    range,
 5322|    228|                    get_unescaped_regex_pattern(
 5323|    228|                        specs.charset_string<SourceCharT>()),
 5324|    228|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 4.56k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  4.56k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  4.56k|        }
 5331|       |
 5332|  4.56k|        SCN_CLANG_POP
 5333|  4.56k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    928|    {
 4827|    928|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    928|                                     value);
 4829|    928|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    980|{
 4773|    980|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    980|    auto src = [&]() {
 4776|    980|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    980|            return make_contiguous_buffer(
 4778|    980|                ranges::subrange{range.begin().base(), result.base()});
 4779|    980|        }
 4780|    980|        else {
 4781|    980|            return make_contiguous_buffer(
 4782|    980|                ranges::subrange{range.begin(), result});
 4783|    980|        }
 4784|    980|    }();
 4785|    980|    using src_type = decltype(src);
 4786|       |
 4787|    980|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    980|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    980|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    980|                                     "Cannot read a string_view from "
 4796|    980|                                     "this source range (would require "
 4797|    980|                                     "transcoding)");
 4798|    980|    }
 4799|    980|    else {
 4800|    980|        const auto view = src.view();
 4801|    980|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    980|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 318, False: 662]
  ------------------
 4804|    318|            return unexpected_scan_error(
 4805|    318|                scan_error::invalid_scanned_value,
 4806|    318|                "Invalid encoding in scanned string_view");
 4807|    318|        }
 4808|       |
 4809|    662|        return SCN_MOVE(result);
  ------------------
  |  |  928|    662|    static_cast<    \
  |  |  929|    662|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    980|    }
 4811|    980|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    980|    auto src = [&]() {
 4776|    980|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    980|            return make_contiguous_buffer(
 4778|    980|                ranges::subrange{range.begin().base(), result.base()});
 4779|    980|        }
 4780|    980|        else {
 4781|    980|            return make_contiguous_buffer(
 4782|    980|                ranges::subrange{range.begin(), result});
 4783|    980|        }
 4784|    980|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     52|    {
 4863|     52|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 30, False: 22]
  ------------------
 4864|     30|            return read_string_view_impl(
 4865|     30|                range,
 4866|     30|                read_until_code_unit(
 4867|     30|                    range,
 4868|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     30|                        SourceCharT ch) { return ch == until; }),
 4870|     30|                value);
 4871|     30|        }
 4872|     22|        return read_string_view_impl(
 4873|     22|            range,
 4874|     22|            read_until_code_units(
 4875|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     22|            value);
 4877|     52|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    708|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    708|              cvref<T> obj = *get<T>(fn);
  745|    708|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    708|                  obj(static_cast<decltype(args)>(args)...);
  747|    708|              }
  748|    708|              else {
  749|    708|                  return obj(static_cast<decltype(args)>(args)...);
  750|    708|              }
  751|    708|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    708|    {
  684|    708|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    708|            return static_cast<T*>(s.m_cp);
  686|    708|        }
  687|    708|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    708|            return static_cast<T*>(s.m_p);
  689|    708|        }
  690|    708|        else {
  691|    708|            return reinterpret_cast<T*>(s.m_fp);
  692|    708|        }
  693|    708|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    708|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    952|    {
 5062|    952|        auto it = read_source_impl(range, {specs});
 5063|    952|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 274, False: 678]
  |  |  ------------------
  ------------------
 5064|    274|            return unexpected(it.error());
 5065|    274|        }
 5066|       |
 5067|    678|        return read_string_view_impl(range, *it, value);
 5068|    952|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.21k|{
 4773|  1.21k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.21k|    auto src = [&]() {
 4776|  1.21k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.21k|            return make_contiguous_buffer(
 4778|  1.21k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.21k|        }
 4780|  1.21k|        else {
 4781|  1.21k|            return make_contiguous_buffer(
 4782|  1.21k|                ranges::subrange{range.begin(), result});
 4783|  1.21k|        }
 4784|  1.21k|    }();
 4785|  1.21k|    using src_type = decltype(src);
 4786|       |
 4787|  1.21k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.21k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.21k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.21k|                                     "Cannot read a string_view from "
 4796|  1.21k|                                     "this source range (would require "
 4797|  1.21k|                                     "transcoding)");
 4798|  1.21k|    }
 4799|  1.21k|    else {
 4800|  1.21k|        const auto view = src.view();
 4801|  1.21k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.21k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 122, False: 1.09k]
  ------------------
 4804|    122|            return unexpected_scan_error(
 4805|    122|                scan_error::invalid_scanned_value,
 4806|    122|                "Invalid encoding in scanned string_view");
 4807|    122|        }
 4808|       |
 4809|  1.09k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.09k|    static_cast<    \
  |  |  929|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.21k|    }
 4811|  1.21k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.21k|    auto src = [&]() {
 4776|  1.21k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.21k|            return make_contiguous_buffer(
 4778|  1.21k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.21k|        }
 4780|  1.21k|        else {
 4781|  1.21k|            return make_contiguous_buffer(
 4782|  1.21k|                ranges::subrange{range.begin(), result});
 4783|  1.21k|        }
 4784|  1.21k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  3.28k|    {
 4902|  3.28k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.74k, False: 538]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.74k|    }                                                  \
  |  |  |  | 3667|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    538|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    538|        return read_string_view_impl(range, it, value);
 4904|  3.28k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|    962|    {
 5624|    962|        reader_error_handler eh{};
 5625|    962|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|    962|            detail::check_code_point_type_specs(specs, eh);
 5627|    962|        }
 5628|    962|        else {
 5629|    962|            detail::check_char_type_specs(specs, eh);
 5630|    962|        }
 5631|    962|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 380, False: 582]
  |  |  ------------------
  ------------------
 5632|    380|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|    380|        }
 5634|    582|        return {};
 5635|    962|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  4.00k|    {
  763|  4.00k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  4.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.00k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.09k|    {
  754|  1.09k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.14k|              cvref<T> obj = *get<T>(fn);
  745|  1.14k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.14k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.14k|              }
  748|  1.14k|              else {
  749|  1.14k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.14k|              }
  751|  1.14k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.14k|    {
  684|  1.14k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.14k|            return static_cast<T*>(s.m_cp);
  686|  1.14k|        }
  687|  1.14k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.14k|            return static_cast<T*>(s.m_p);
  689|  1.14k|        }
  690|  1.14k|        else {
  691|  1.14k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.14k|        }
  693|  1.14k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.09k|        {
  662|  1.09k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.67k|    {
 5619|  1.67k|        return false;
 5620|  1.67k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     28|    {
 1780|     28|        auto stdloc = loc.get<std::locale>();
 1781|     28|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     28|        grouping = numpunct.grouping();
 1783|     28|        thousands_sep =
 1784|     28|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 28]
  ------------------
 1785|     28|        decimal_point = numpunct.decimal_point();
 1786|     28|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     42|{
 1717|     42|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 42, False: 0]
  ------------------
 1718|     42|        return std::use_facet<Facet>(stdloc);
 1719|     42|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     42|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.57k|{
 2349|  3.57k|    size_t count{0};
 2350|  3.57k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.57k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.57k|    });
 2353|  3.57k|    return count;
 2354|  3.57k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.57k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.57k|    auto it = input.begin();
 1448|  10.3k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 6.76k, False: 3.57k]
  ------------------
 1449|  6.76k|        auto res = get_next_code_point(
 1450|  6.76k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  6.76k|        cb(res.value);
 1452|  6.76k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  6.76k|    }
 1454|  3.57k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   302k|{
 1169|   302k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   302k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   302k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   302k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 302k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   302k|    return {input.begin() + len,
 1181|   302k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   302k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.57k|    {
  754|  3.57k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  6.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.76k|              cvref<T> obj = *get<T>(fn);
  745|  6.76k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.76k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.76k|              }
  748|  6.76k|              else {
  749|  6.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.76k|              }
  751|  6.76k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  6.76k|    {
  684|  6.76k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.76k|            return static_cast<T*>(s.m_cp);
  686|  6.76k|        }
  687|  6.76k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.76k|            return static_cast<T*>(s.m_p);
  689|  6.76k|        }
  690|  6.76k|        else {
  691|  6.76k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.76k|        }
  693|  6.76k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  6.76k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  6.76k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  6.76k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.57k|        {
  662|  3.57k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.28k|    {
 1582|  2.28k|        return m_view;
 1583|  2.28k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.67k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  10.9k|    {
 2382|  10.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    432|    {
 2421|    432|        return m_multibyte_left;
 2422|    432|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  57.9k|    {
 2426|  57.9k|        return *m_current;
 2427|  57.9k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  37.7k|    {
 2435|  37.7k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  37.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  37.7k|        _increment_current();
 2437|  37.7k|        return *this;
 2438|  37.7k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  37.7k|    {
 2668|  37.7k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 37.7k, False: 0]
  ------------------
 2669|  37.7k|            auto cplen = _get_cp_length_at_current();
 2670|  37.7k|            m_multibyte_left = cplen - 1;
 2671|  37.7k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  37.7k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  37.7k|        ++m_current;
 2678|  37.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  37.7k|    {
 2639|  37.7k|        return static_cast<difference_type>(
 2640|  37.7k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  37.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  37.7k|    {
 2645|  37.7k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.7k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  37.7k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 37.7k, False: 0]
  ------------------
 2650|  37.7k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  37.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  37.7k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  37.7k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  37.7k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.66k|{
 1857|  5.66k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.66k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.66k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.66k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 126, False: 5.53k]
  ------------------
 1862|    126|            return unexpected(eof_error::eof);
 1863|    126|        }
 1864|       |
 1865|  5.53k|        return ranges::next(range.begin(), count);
 1866|  5.66k|    }
 1867|  5.66k|    else {
 1868|  5.66k|        auto it = range.begin();
 1869|  5.66k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.66k|            return ranges::next(it, count);
 1871|  5.66k|        }
 1872|       |
 1873|  5.66k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.66k|            if (it == range.end()) {
 1875|  5.66k|                return unexpected(eof_error::eof);
 1876|  5.66k|            }
 1877|  5.66k|        }
 1878|       |
 1879|  5.66k|        return it;
 1880|  5.66k|    }
 1881|  5.66k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  13.5k|    {
 2531|  13.5k|        return !(a == b);
 2532|  13.5k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  14.3k|    {
 2523|  14.3k|        return a.m_current == b.m_current;
 2524|  14.3k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  20.4k|    {
 1890|  20.4k|        return !codepoint.empty();
 1891|  20.4k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  43.4k|{
 1899|  43.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  43.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  43.4k|    auto it = range.begin();
 1903|  43.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  43.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 43.4k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  43.4k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 43.4k, False: 0]
  ------------------
 1912|  43.4k|        ++it;
 1913|  43.4k|        return {it, string_type(1, *range.begin())};
 1914|  43.4k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  43.4k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  64.5k|{
  944|  64.5k|    return is_range_eof(r.begin(), r.end());
  945|  64.5k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   361k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   361k|    {
  937|   361k|        return begin == end;
  938|   361k|    }
  939|   361k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    924|    {
  190|    924|        i = std::move(bound);
  191|    924|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  43.4k|    {
 1890|  43.4k|        return !codepoint.empty();
 1891|  43.4k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  21.0k|{
  950|  21.0k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.0k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  21.0k|    return eof_error::good;
  954|  21.0k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  3.46k|    {
 2832|  3.46k|        return take_width_view{r, n};
 2833|  3.46k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  3.46k|    {
 2801|  3.46k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  3.46k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    190|    {
 5699|    190|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 190, False: 0]
  ------------------
 5700|    190|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 0]
  ------------------
 5701|    190|            return read_default(range, value, loc);
 5702|    190|        }
 5703|       |
 5704|      0|        reader_impl_for_int<CharT> reader{};
 5705|      0|        using integer_type =
 5706|      0|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|      0|        integer_type tmp_value{};
 5708|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|      0|        value = static_cast<integer_type>(value);
 5710|      0|        return ret;
 5711|    190|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    190|    {
 5683|    190|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    190|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    190|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    190|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    190|        }
 5687|    190|        else {
 5688|    190|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    190|        }
 5690|    190|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    190|    {
 5564|    190|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    190|        ch = *range.begin();
 5566|    190|        return it;
 5567|    190|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.35k|{
 1846|  1.35k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.35k|    return ranges::next(range.begin());
 1851|  1.35k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.35k|{
  950|  1.35k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.35k|    return eof_error::good;
  954|  1.35k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.35k|{
  944|  1.35k|    return is_range_eof(r.begin(), r.end());
  945|  1.35k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  23.3k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  23.3k|    {
  937|  23.3k|        return begin == end;
  938|  23.3k|    }
  939|  23.3k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  49.3k|        {
 2770|  49.3k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 432, False: 48.9k]
  |  Branch (2770:39): [True: 432, False: 0]
  ------------------
 2771|  49.3k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 270, False: 48.6k]
  ------------------
 2772|  49.3k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  10.4k|    {
 2816|  10.4k|        return sentinel<true>{m_base.get().end()};
 2817|  10.4k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  32.2k|    {
 2717|  32.2k|        return view;
 2718|  32.2k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  10.4k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.35k|    {
  296|  1.35k|        ++x;
  297|  1.35k|        return x;
  298|  1.35k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  10.9k|    {
 2810|  10.9k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  10.9k|                                      m_count};
 2812|  10.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    190|    {
 3539|    190|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    190|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    190|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 190]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    190|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 190]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    190|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    190|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 190, False: 0]
  |  |  ------------------
  ------------------
 3565|    190|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    570|{
 3326|    570|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    570|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    570|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    570|        parse_integer_base_prefix(
 3331|    570|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    570|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 570]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    570|    else {
 3343|    570|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 570]
  |  Branch (3343:13): [True: 570, False: 0]
  ------------------
 3344|    570|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 570, False: 0]
  ------------------
 3345|    570|            digits_begin_it = base_prefix_begin_it;
 3346|    570|        }
 3347|    570|    }
 3348|       |
 3349|    570|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 570, False: 0]
  ------------------
 3350|    570|        sign = sign_type::plus_sign;
 3351|    570|    }
 3352|    570|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    570|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    570|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    788|{
 3141|    788|    auto r = read_one_of_code_unit(range, "+-");
 3142|    788|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 788, False: 0]
  ------------------
 3143|    788|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 788, False: 0]
  ------------------
 3144|    788|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    788|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    788|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    788|{
 2272|    788|    auto it = read_code_unit(range);
 2273|    788|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    788|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 788]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.57k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.57k, False: 788]
  ------------------
 2278|  1.57k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.57k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.57k|    }
 2282|       |
 2283|    788|    return unexpected(parse_error::error);
 2284|    788|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    570|{
 3293|    570|    switch (base) {
 3294|      0|        case 2:
  ------------------
  |  Branch (3294:9): [True: 0, False: 570]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      0|                    false};
 3298|       |
 3299|      0|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 0, False: 570]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|      0|            bool zero_parsed = false;
 3302|      0|            auto it = apply_opt(
 3303|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|      0|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    190|        case 16:
  ------------------
  |  Branch (3307:9): [True: 190, False: 380]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    190|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    190|                    false};
 3311|       |
 3312|      0|        case 0:
  ------------------
  |  Branch (3312:9): [True: 0, False: 570]
  ------------------
 3313|       |            // detect base
 3314|      0|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    380|        default:
  ------------------
  |  Branch (3316:9): [True: 380, False: 190]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    380|            return {range.begin(), base, false};
 3319|    570|    }
 3320|    570|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    190|{
 2291|    190|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 190, False: 0]
  ------------------
 2292|    190|        return range.begin();
 2293|    190|    }
 2294|      0|    return *result;
 2295|    190|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    844|{
 2231|    844|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    844|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    844|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    844|        if (range.size() < str.size()) {
 2236|    844|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    844|        }
 2238|    844|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    844|            return unexpected(parse_error::error);
 2240|    844|        }
 2241|    844|        return ranges::next(range.begin(), str.size());
 2242|    844|    }
 2243|    844|    else {
 2244|    844|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    844|            if (ch < 'A' || ch > 'Z') {
 2246|    844|                return ch;
 2247|    844|            }
 2248|    844|            return static_cast<char_type>(ch +
 2249|    844|                                          static_cast<char_type>('a' - 'A'));
 2250|    844|        };
 2251|       |
 2252|    844|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    844|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    844|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    844|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    844|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 138, False: 706]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    138|    }                                                  \
  |  |  |  | 3667|    844|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    706|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    706|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    706|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    706|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 706, False: 0]
  |  |  ------------------
  ------------------
 2257|    706|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    706|                    return ascii_tolower(a) ==
 2259|    706|                           static_cast<detail::char_t<Range>>(b);
 2260|    706|                }))) {
 2261|    706|            return unexpected(parse_error::error);
 2262|    706|        }
 2263|       |
 2264|      0|        return it;
 2265|    706|    }
 2266|    844|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    844|{
 1857|    844|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    844|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    844|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    844|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    844|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    844|        if (sz < count) {
 1862|    844|            return unexpected(eof_error::eof);
 1863|    844|        }
 1864|       |
 1865|    844|        return ranges::next(range.begin(), count);
 1866|    844|    }
 1867|    844|    else {
 1868|    844|        auto it = range.begin();
 1869|    844|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 844]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.76k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.05k, False: 706]
  ------------------
 1874|  2.05k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 138, False: 1.91k]
  ------------------
 1875|    138|                return unexpected(eof_error::eof);
 1876|    138|            }
 1877|  2.05k|        }
 1878|       |
 1879|    706|        return it;
 1880|    844|    }
 1881|    844|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    844|{
 1095|    844|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    844|        return r.size();
 1097|    844|    }
 1098|    844|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    844|                           ranges::const_iterator_t<Range>,
 1100|    844|                           typename detail::basic_scan_buffer<
 1101|    844|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    844|        if constexpr (ranges::common_range<Range>) {
 1103|    844|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    844|        }
 1105|    844|        else {
 1106|    844|            if (r.begin().stores_parent()) {
 1107|    844|                return static_cast<size_t>(
 1108|    844|                    r.begin().parent()->chars_available() -
 1109|    844|                    r.begin().position());
 1110|    844|            }
 1111|    844|            return r.begin().contiguous_segment().size();
 1112|    844|        }
 1113|    844|    }
 1114|    844|    else {
 1115|    844|        return 0;
 1116|    844|    }
 1117|    844|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    706|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    706|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 0, False: 706]
  |  Branch (2245:29): [True: 706, False: 0]
  ------------------
 2246|    706|                return ch;
 2247|    706|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    706|        };
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.53k|{
  950|  1.53k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.53k|    return eof_error::good;
  954|  1.53k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  22.0k|{
  944|  22.0k|    return is_range_eof(r.begin(), r.end());
  945|  22.0k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    190|{
 3251|    190|    return read_matching_string_classic_nocase(range, "0x");
 3252|    190|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    570|{
 3360|    570|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    570|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    570|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    570|            return unexpected_scan_error(
 3365|    570|                scan_error::invalid_scanned_value,
 3366|    570|                "Failed to parse integer: No digits found");
 3367|    570|        }
 3368|    570|        return range.end();
 3369|    570|    }
 3370|    570|    else {
 3371|    570|        return read_while1_code_unit(range,
 3372|    570|                                     [&](char_type ch) noexcept {
 3373|    570|                                         return char_to_int(ch) < base;
 3374|    570|                                     })
 3375|    570|            .transform_error(map_parse_error_to_scan_error(
 3376|    570|                scan_error::invalid_scanned_value,
 3377|    570|                "Failed to parse integer: No digits found"));
 3378|    570|    }
 3379|    570|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    788|{
 1996|    788|    auto it = read_while_code_unit(range, pred);
 1997|    788|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 788, False: 0]
  ------------------
 1998|    788|        return unexpected(parse_error::error);
 1999|    788|    }
 2000|      0|    return it;
 2001|    788|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    788|{
 1976|    788|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    788|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    788|{
 1957|    788|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    788|        return std::find_if(range.begin(), range.end(), pred);
 1959|    788|    }
 1960|    788|    else {
 1961|    788|        auto first = range.begin();
 1962|    788|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 788, False: 0]
  ------------------
 1963|    788|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 788, False: 0]
  ------------------
 1964|    788|                return first;
 1965|    788|            }
 1966|    788|        }
 1967|      0|        return first;
 1968|    788|    }
 1969|    788|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  21.7k|        {
 2781|  21.7k|            return !(y == x);
 2782|  21.7k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    570|    {
  754|    570|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    570|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    570|              cvref<T> obj = *get<T>(fn);
  745|    570|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    570|                  obj(static_cast<decltype(args)>(args)...);
  747|    570|              }
  748|    570|              else {
  749|    570|                  return obj(static_cast<decltype(args)>(args)...);
  750|    570|              }
  751|    570|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    570|    {
  684|    570|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    570|            return static_cast<T*>(s.m_cp);
  686|    570|        }
  687|    570|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    570|            return static_cast<T*>(s.m_p);
  689|    570|        }
  690|    570|        else {
  691|    570|            return reinterpret_cast<T*>(s.m_fp);
  692|    570|        }
  693|    570|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    570|                                     [&](char_type ch) noexcept {
 3373|    570|                                         return char_to_int(ch) < base;
 3374|    570|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    570|        {
  662|    570|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    380|{
 1683|    380|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    380|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    380|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    380|        return string_view_wrapper{SCN_FWD(range)};
 1687|    380|    }
 1688|    380|    else {
 1689|    380|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    380|    }
 1691|    380|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    380|    {
 1537|    380|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    380|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    380|    {
 1621|    380|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    380|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    380|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    380|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    380|            m_storage.reset();
 1627|    380|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    380|        }
 1629|    380|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    380|                                          std::basic_string<CharT>>) {
 1631|    380|            m_storage.emplace(SCN_FWD(range));
 1632|    380|            m_view = string_view_type{*m_storage};
 1633|    380|        }
 1634|    380|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    380|                                          typename detail::basic_scan_buffer<
 1636|    380|                                              value_t>::forward_iterator> &&
 1637|    380|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    380|            auto beg_seg = range.begin().contiguous_segment();
 1639|    380|            auto end_seg = range.end().contiguous_segment();
 1640|    380|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    380|                             detail::to_address(end_seg.end()))) {
 1642|    380|                auto& str = m_storage.emplace();
 1643|    380|                str.reserve(range.end().position() - range.begin().position());
 1644|    380|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    380|                m_view = string_view_type{str};
 1646|    380|                return;
 1647|    380|            }
 1648|       |
 1649|    380|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    380|                                                            end_seg.data());
 1651|    380|            m_storage.reset();
 1652|    380|        }
 1653|    380|        else {
 1654|    380|            auto& str = m_storage.emplace();
 1655|    380|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    380|                str.reserve(range.size());
 1657|    380|            }
 1658|    380|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    380|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    380|                          std::back_inserter(str));
 1661|    380|            }
 1662|    380|            else {
 1663|    380|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    380|                     ++it) {
 1665|    380|                    str.push_back(*it);
 1666|    380|                }
 1667|    380|            }
 1668|    380|            m_view = string_view_type{str};
 1669|    380|        }
 1670|    380|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  51.4k|    {
 2413|  51.4k|        return m_current;
 2414|  51.4k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  51.4k|    {
 2417|  51.4k|        return m_count;
 2418|  51.4k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    392|    {
 5699|    392|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 378, False: 14]
  ------------------
 5700|    392|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 14]
  ------------------
 5701|    378|            return read_default(range, value, loc);
 5702|    378|        }
 5703|       |
 5704|     14|        reader_impl_for_int<CharT> reader{};
 5705|     14|        using integer_type =
 5706|     14|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     14|        integer_type tmp_value{};
 5708|     14|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     14|        value = static_cast<integer_type>(value);
 5710|     14|        return ret;
 5711|    392|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|    904|    {
 5683|    904|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    904|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    904|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    904|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    904|        }
 5687|    904|        else {
 5688|    904|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    904|        }
 5690|    904|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|    904|    {
 5564|    904|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    904|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    904|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    904|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    904|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 904]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    904|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    904|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    904|        ch = *range.begin();
 5566|    904|        return it;
 5567|    904|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.48k|{
 1846|  6.48k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.48k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.48k|    return ranges::next(range.begin());
 1851|  6.48k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   240k|    {
  296|   240k|        ++x;
  297|   240k|        return x;
  298|   240k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    416|    {
 3539|    416|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    416|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 416]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    416|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    416|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    416|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 416]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    416|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 416]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    416|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    416|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 406, False: 10]
  |  |  ------------------
  ------------------
 3565|    406|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    406|                    parse_integer_digits_without_thsep(
 3567|    406|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    406|                        prefix_result.parsed_base));
 3569|       |
 3570|    406|            auto buf = make_contiguous_buffer(
 3571|    406|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    406|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 406, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    406|    }                                                  \
  |  |  |  | 3667|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    406|        }
 3580|       |
 3581|     10|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     10|            localized_number_formatting_options<CharT>{loc};
 3586|     10|#endif
 3587|       |
 3588|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.77k|{
 3326|  2.77k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.77k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.77k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.77k|        parse_integer_base_prefix(
 3331|  2.77k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.77k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.77k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.77k|    else {
 3343|  2.77k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.77k]
  ------------------
 3344|  2.77k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.77k, False: 0]
  ------------------
 3345|  2.77k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.77k|        }
 3347|  2.77k|    }
 3348|       |
 3349|  2.77k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.77k, False: 0]
  ------------------
 3350|  2.77k|        sign = sign_type::plus_sign;
 3351|  2.77k|    }
 3352|  2.77k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.77k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.77k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.70k|{
 3141|  3.70k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.70k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.70k, False: 0]
  ------------------
 3143|  3.70k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.70k, False: 0]
  ------------------
 3144|  3.70k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.70k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.70k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.70k|{
 2272|  3.70k|    auto it = read_code_unit(range);
 2273|  3.70k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.41k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.41k, False: 3.70k]
  ------------------
 2278|  7.41k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.41k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.41k|    }
 2282|       |
 2283|  3.70k|    return unexpected(parse_error::error);
 2284|  3.70k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.77k|{
 3293|  2.77k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.77k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 2.76k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    912|        case 16:
  ------------------
  |  Branch (3307:9): [True: 912, False: 1.86k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    912|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    912|                    false};
 3311|       |
 3312|      6|        case 0:
  ------------------
  |  Branch (3312:9): [True: 6, False: 2.77k]
  ------------------
 3313|       |            // detect base
 3314|      6|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.83k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.83k, False: 938]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.83k|            return {range.begin(), base, false};
 3319|  2.77k|    }
 3320|  2.77k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    932|{
 2291|    932|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 932, False: 0]
  ------------------
 2292|    932|        return range.begin();
 2293|    932|    }
 2294|      0|    return *result;
 2295|    932|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     12|{
 3244|     12|    return read_matching_string_classic_nocase(range, "0b");
 3245|     12|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.73k|{
 2231|  3.73k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.73k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.73k|        if (range.size() < str.size()) {
 2236|  3.73k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.73k|        }
 2238|  3.73k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.73k|            return unexpected(parse_error::error);
 2240|  3.73k|        }
 2241|  3.73k|        return ranges::next(range.begin(), str.size());
 2242|  3.73k|    }
 2243|  3.73k|    else {
 2244|  3.73k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.73k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.73k|                return ch;
 2247|  3.73k|            }
 2248|  3.73k|            return static_cast<char_type>(ch +
 2249|  3.73k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.73k|        };
 2251|       |
 2252|  3.73k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  3.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|  3.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.73k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.73k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.73k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.73k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.73k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.73k|                    return ascii_tolower(a) ==
 2259|  3.73k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.73k|                }))) {
 2261|  3.73k|            return unexpected(parse_error::error);
 2262|  3.73k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.73k|    }
 2266|  3.73k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.73k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.73k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 8, False: 3.72k]
  |  Branch (2245:29): [True: 3.72k, False: 0]
  ------------------
 2246|  3.73k|                return ch;
 2247|  3.73k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.73k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     20|{
 3258|     20|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 20]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     20|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 20]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     20|    return unexpected(parse_error::error);
 3268|     20|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.87k|{
 2146|  1.87k|    auto it = read_code_unit(range);
 2147|  1.87k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.87k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.87k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.87k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.87k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.87k|        return unexpected(parse_error::error);
 2154|  1.87k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.87k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    918|{
 3251|    918|    return read_matching_string_classic_nocase(range, "0x");
 3252|    918|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|      6|{
 3274|      6|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 6]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|      6|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 6]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|      6|    {
 3281|      6|        bool zero_parsed{false};
 3282|      6|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 6]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|      6|    }
 3286|      6|    return {range.begin(), 10, false};
 3287|      6|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.75k|{
 3360|  2.75k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.75k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.75k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.75k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.75k|        return range.end();
 3369|  2.75k|    }
 3370|  2.75k|    else {
 3371|  2.75k|        return read_while1_code_unit(range,
 3372|  2.75k|                                     [&](char_type ch) noexcept {
 3373|  2.75k|                                         return char_to_int(ch) < base;
 3374|  2.75k|                                     })
 3375|  2.75k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.75k|                scan_error::invalid_scanned_value,
 3377|  2.75k|                "Failed to parse integer: No digits found"));
 3378|  2.75k|    }
 3379|  2.75k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     20|{
 3390|     20|    std::basic_string<CharT> output;
 3391|     20|    std::string thsep_indices;
 3392|     20|    auto it = range.begin();
 3393|     20|    bool digit_matched = false;
 3394|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 20, False: 0]
  ------------------
 3395|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 20]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 20, False: 0]
  ------------------
 3400|     20|            break;
 3401|     20|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     20|    }
 3407|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3408|     20|        return unexpected_scan_error(
 3409|     20|            scan_error::invalid_scanned_value,
 3410|     20|            "Failed to parse integer: No digits found");
 3411|     20|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     20|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  9.39k|{
 1683|  9.39k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  9.39k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  9.39k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  9.39k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  9.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  9.39k|    }
 1688|  9.39k|    else {
 1689|  9.39k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  9.39k|    }
 1691|  9.39k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  9.39k|    {
 1490|  9.39k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  10.6k|    {
 1503|  10.6k|        return sv;
 1504|  10.6k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    298|{
 5951|    298|    using char_type = detail::char_t<Range>;
 5952|    298|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    298|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 298, False: 0]
  ------------------
 5955|    298|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    298|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    298|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 274, False: 24]
  ------------------
 5959|    274|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    274|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 18, False: 256]
  ------------------
 5962|     18|                auto prefix_width =
 5963|     18|                    static_cast<std::ptrdiff_t>(
 5964|     18|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     18|                    ranges::distance(range.begin(), it);
 5966|     18|                return result_type{it, prefix_width};
 5967|     18|            }
 5968|    256|            return result_type{it, 0};
 5969|    274|        }
 5970|       |
 5971|     24|        auto max_width_view = take_width(range, max_width);
 5972|     24|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     24|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 24, False: 0]
  ------------------
 5975|     24|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     24|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     24|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    280|{
 1976|    280|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    280|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    382|{
 1957|    382|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    382|        return std::find_if(range.begin(), range.end(), pred);
 1959|    382|    }
 1960|    382|    else {
 1961|    382|        auto first = range.begin();
 1962|    382|        for (; first != range.end(); ++first) {
 1963|    382|            if (pred(*first)) {
 1964|    382|                return first;
 1965|    382|            }
 1966|    382|        }
 1967|    382|        return first;
 1968|    382|    }
 1969|    382|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    298|    {
  754|    298|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|    350|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    350|                  obj(static_cast<decltype(args)>(args)...);
  747|    350|              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|    350|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    350|            return static_cast<T*>(s.m_cp);
  686|    350|        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|    350|        }
  690|    350|        else {
  691|    350|            return reinterpret_cast<T*>(s.m_fp);
  692|    350|        }
  693|    350|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    350|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    298|        {
  667|    298|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     24|{
 1976|     24|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     24|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|     24|{
 1957|     24|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|     24|        return std::find_if(range.begin(), range.end(), pred);
 1959|     24|    }
 1960|     24|    else {
 1961|     24|        auto first = range.begin();
 1962|     24|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 24, False: 0]
  ------------------
 1963|     24|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 24, False: 0]
  ------------------
 1964|     24|                return first;
 1965|     24|            }
 1966|     24|        }
 1967|      0|        return first;
 1968|     24|    }
 1969|     24|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  1.70k|{
 2951|  1.70k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.53k, False: 172]
  ------------------
 2952|  1.53k|        auto it = read_while_classic_space(range);
 2953|  1.53k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.53k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.53k|        return it;
 2959|  1.53k|    }
 2960|       |
 2961|    172|    return read_while_classic_space(range);
 2962|  1.70k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  1.70k|{
 2117|  1.70k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.70k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.70k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.70k|        auto buf = make_contiguous_buffer(range);
 2121|  1.70k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.70k|        return ranges::next(range.begin(),
 2123|  1.70k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.70k|    }
 2125|  1.70k|    else {
 2126|  1.70k|        auto it = range.begin();
 2127|       |
 2128|  1.70k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.70k|            auto seg = get_contiguous_beginning(range);
 2130|  1.70k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.70k|                seg_it != seg.end()) {
 2132|  1.70k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.70k|            }
 2134|  1.70k|            ranges::advance(it, seg.size());
 2135|  1.70k|        }
 2136|       |
 2137|  1.70k|        return read_while_code_point(
 2138|  1.70k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.70k|    }
 2140|  1.70k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  1.70k|{
 2082|  1.70k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.70k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  1.70k|{
 2061|  1.70k|    auto it = range.begin();
 2062|  1.70k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.70k, False: 0]
  ------------------
 2063|  1.70k|        const auto val =
 2064|  1.70k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.70k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.70k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.70k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.70k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.70k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.70k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.70k, False: 0]
  ------------------
 2069|  1.70k|                return it;
 2070|  1.70k|            }
 2071|  1.70k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.70k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  20.4k|{
 1899|  20.4k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  20.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  20.4k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  20.4k|    auto it = range.begin();
 1903|  20.4k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  20.4k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  20.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.4k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  20.4k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 20.4k, False: 0]
  ------------------
 1912|  20.4k|        ++it;
 1913|  20.4k|        return {it, string_type(1, *range.begin())};
 1914|  20.4k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  20.4k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.70k|    {
  754|  1.70k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  1.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.70k|              cvref<T> obj = *get<T>(fn);
  745|  1.70k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.70k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.70k|              }
  748|  1.70k|              else {
  749|  1.70k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.70k|              }
  751|  1.70k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.70k|    {
  684|  1.70k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.70k|            return static_cast<T*>(s.m_cp);
  686|  1.70k|        }
  687|  1.70k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.70k|            return static_cast<T*>(s.m_p);
  689|  1.70k|        }
  690|  1.70k|        else {
  691|  1.70k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.70k|        }
  693|  1.70k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  1.70k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.70k|        {
  662|  1.70k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.38k|{
 2951|  7.38k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.11k, False: 274]
  ------------------
 2952|  7.11k|        auto it = read_while_classic_space(range);
 2953|  7.11k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.11k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.11k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.11k|        return it;
 2959|  7.11k|    }
 2960|       |
 2961|    274|    return read_while_classic_space(range);
 2962|  7.38k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  9.26k|{
 2117|  9.26k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  9.26k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  9.26k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  9.26k|        auto buf = make_contiguous_buffer(range);
 2121|  9.26k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  9.26k|        return ranges::next(range.begin(),
 2123|  9.26k|                            ranges::distance(buf.view().begin(), it));
 2124|  9.26k|    }
 2125|  9.26k|    else {
 2126|  9.26k|        auto it = range.begin();
 2127|       |
 2128|  9.26k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  9.26k|            auto seg = get_contiguous_beginning(range);
 2130|  9.26k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  9.26k|                seg_it != seg.end()) {
 2132|  9.26k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  9.26k|            }
 2134|  9.26k|            ranges::advance(it, seg.size());
 2135|  9.26k|        }
 2136|       |
 2137|  9.26k|        return read_while_code_point(
 2138|  9.26k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  9.26k|    }
 2140|  9.26k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  9.26k|{
 2082|  9.26k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  9.26k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  12.0k|{
 2061|  12.0k|    auto it = range.begin();
 2062|  46.0k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 43.4k, False: 2.58k]
  ------------------
 2063|  43.4k|        const auto val =
 2064|  43.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  43.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  43.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 43.4k, False: 0]
  |  |  ------------------
  ------------------
 2066|  43.4k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  43.4k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  43.4k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 9.42k, False: 34.0k]
  ------------------
 2069|  9.42k|                return it;
 2070|  9.42k|            }
 2071|  43.4k|        }
 2072|  34.0k|        it = val.iterator;
 2073|  34.0k|    }
 2074|       |
 2075|  2.58k|    return it;
 2076|  12.0k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  9.26k|    {
  754|  9.26k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  10.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.8k|              cvref<T> obj = *get<T>(fn);
  745|  10.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.8k|              }
  748|  10.8k|              else {
  749|  10.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.8k|              }
  751|  10.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  10.8k|    {
  684|  10.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.8k|            return static_cast<T*>(s.m_cp);
  686|  10.8k|        }
  687|  10.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.8k|            return static_cast<T*>(s.m_p);
  689|  10.8k|        }
  690|  10.8k|        else {
  691|  10.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.8k|        }
  693|  10.8k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  10.8k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  9.26k|        {
  662|  9.26k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.96k|    {
 3040|  1.96k|        reader_error_handler eh{};
 3041|  1.96k|        get_derived().check_specs_impl(specs, eh);
 3042|  1.96k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 780, False: 1.18k]
  |  |  ------------------
  ------------------
 3043|    780|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    780|        }
 3045|  1.18k|        return {};
 3046|  1.96k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  1.96k|    {
 3051|  1.96k|        return static_cast<Derived&>(*this);
 3052|  1.96k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  1.96k|    {
 3485|  1.96k|        detail::check_int_type_specs(specs, eh);
 3486|  1.96k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  2.23k|    {
 3035|  2.23k|        return true;
 3036|  2.23k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    190|    {
 3539|    190|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    190|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    190|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 190]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    190|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 190]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    190|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    190|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 190, False: 0]
  |  |  ------------------
  ------------------
 3565|    190|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    402|    {
 3539|    402|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    402|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    402|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 402]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    402|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 402]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    402|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    402|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 392, False: 10]
  |  |  ------------------
  ------------------
 3565|    392|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    392|                    parse_integer_digits_without_thsep(
 3567|    392|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    392|                        prefix_result.parsed_base));
 3569|       |
 3570|    392|            auto buf = make_contiguous_buffer(
 3571|    392|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    392|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 392, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    392|    }                                                  \
  |  |  |  | 3667|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    392|        }
 3580|       |
 3581|     10|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     10|            localized_number_formatting_options<CharT>{loc};
 3586|     10|#endif
 3587|       |
 3588|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    190|    {
 3539|    190|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    190|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    190|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 190]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    190|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 190]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    190|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    190|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 190, False: 0]
  |  |  ------------------
  ------------------
 3565|    190|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    906|    {
 3539|    906|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    906|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    906|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 906]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    906|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 906]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    906|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    906|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 906, False: 0]
  |  |  ------------------
  ------------------
 3565|    906|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    906|                    parse_integer_digits_without_thsep(
 3567|    906|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    906|                        prefix_result.parsed_base));
 3569|       |
 3570|    906|            auto buf = make_contiguous_buffer(
 3571|    906|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    906|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 906, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    906|    }                                                  \
  |  |  |  | 3667|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    906|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    982|    {
 3040|    982|        reader_error_handler eh{};
 3041|    982|        get_derived().check_specs_impl(specs, eh);
 3042|    982|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 622]
  |  |  ------------------
  ------------------
 3043|    360|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    360|        }
 3045|    622|        return {};
 3046|    982|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|    982|    {
 3051|    982|        return static_cast<Derived&>(*this);
 3052|    982|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|    982|    {
 4145|    982|        detail::check_float_type_specs(specs, eh);
 4146|    982|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.14k|    {
 3035|  1.14k|        return true;
 3036|  1.14k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    622|    {
 4217|    622|        unsigned options{};
 4218|    622|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 8, False: 614]
  ------------------
 4219|      8|            options |= float_reader_base::allow_thsep;
 4220|      8|        }
 4221|       |
 4222|    622|        SCN_GCC_COMPAT_PUSH
 4223|    622|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    622|        switch (specs.type) {
 4226|      4|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 4, False: 618]
  ------------------
 4227|      4|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      2|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 2, False: 620]
  ------------------
 4230|      2|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     42|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 42, False: 580]
  ------------------
 4233|     42|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 622]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    574|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 574, False: 48]
  ------------------
 4240|    574|                return options | float_reader_base::allow_scientific |
 4241|    574|                       float_reader_base::allow_fixed |
 4242|    574|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 622]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    622|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    622|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    622|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    622|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.14k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.29k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|    924|    {
 4057|    924|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 924, False: 0]
  ------------------
 4058|    924|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 924, False: 0]
  ------------------
 4059|    924|            return;
 4060|    924|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    104|    {
 1587|    104|        return m_storage.has_value();
 1588|    104|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|     52|    {
 1592|     52|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|     52|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     52|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|     52|        return *m_storage;
 1594|     52|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    218|    {
  763|    218|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    218|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    218|    {
 3705|    218|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 218]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    218|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    218|        auto it = sign_result.first;
 3708|    218|        m_sign = sign_result.second;
 3709|       |
 3710|    218|        auto digits_begin = it;
 3711|    218|        auto r = ranges::subrange{it, range.end()};
 3712|    218|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    218|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    218|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    218|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    218|                SCN_TRY_ASSIGN(
 3717|    218|                    it,
 3718|    218|                    do_read_source_impl(
 3719|    218|                        r,
 3720|    218|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    218|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    218|            }
 3723|    218|            else {
 3724|    218|                auto cb = [&](const auto& rr)
 3725|    218|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    218|                    auto res = read_all(rr);
 3727|    218|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    218|                        return unexpected_scan_error(
 3729|    218|                            scan_error::invalid_scanned_value,
 3730|    218|                            "Invalid float value");
 3731|    218|                    }
 3732|    218|                    return res;
 3733|    218|                };
 3734|    218|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    218|            }
 3736|    218|        }
 3737|    218|        else {
 3738|    218|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 218, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    218|    }                                                  \
  |  | 3667|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    218|    {
 4000|    218|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    218|        const bool allowed_nonhex =
 4002|    218|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    218|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    218|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 218, False: 0]
  |  Branch (4005:45): [True: 0, False: 218]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    218|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 218]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    218|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 218, False: 0]
  |  Branch (4014:45): [True: 0, False: 218]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    218|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 218]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    218|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 218, False: 0]
  |  Branch (4021:28): [True: 28, False: 190]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     28|            auto it = range.begin();
 4025|       |
 4026|     28|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 28]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     28|            else {
 4031|     28|                m_kind = float_kind::hex_without_prefix;
 4032|     28|            }
 4033|       |
 4034|     28|            return read_hex(ranges::subrange{it, range.end()});
 4035|     28|        }
 4036|    190|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 0, False: 190]
  |  Branch (4036:29): [True: 0, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      0|            m_kind = float_kind::generic;
 4040|      0|            return read_regular_float(range);
 4041|      0|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    190|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    190|        m_kind = float_kind::generic;
 4052|    190|        return read_regular(range);
 4053|    190|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    218|    {
 3811|    218|        auto it = range.begin();
 3812|    218|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 218, False: 0]
  ------------------
 3813|    218|            return unexpected(r.error());
 3814|    218|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    218|    {
 3834|    218|        auto it = range.begin();
 3835|    218|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 218, False: 0]
  ------------------
 3836|    218|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    218|                scan_error::invalid_scanned_value,
 3838|    218|                "Invalid floating-point NaN value"));
 3839|    218|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    218|    {
 3804|    218|        return read_matching_string_classic_nocase(range, "0x");
 3805|    218|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|     28|    {
 3904|     28|        auto it = range.begin();
 3905|       |
 3906|     28|        std::ptrdiff_t digits_count = 0;
 3907|     28|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|     28|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 3909|     28|            return r.transform_error(map_parse_error_to_scan_error(
 3910|     28|                scan_error::invalid_scanned_value,
 3911|     28|                "Invalid hexadecimal floating-point value"));
 3912|     28|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|     28|    {
 3789|     28|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28]
  |  |  |  Branch (859:45): [True: 0, False: 28]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|     28|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|     28|        return read_while1_code_unit(
 3798|     28|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|     28|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|     28|    {
  754|     28|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|     28|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     28|              cvref<T> obj = *get<T>(fn);
  745|     28|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     28|                  obj(static_cast<decltype(args)>(args)...);
  747|     28|              }
  748|     28|              else {
  749|     28|                  return obj(static_cast<decltype(args)>(args)...);
  750|     28|              }
  751|     28|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     28|    {
  684|     28|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     28|            return static_cast<T*>(s.m_cp);
  686|     28|        }
  687|     28|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     28|            return static_cast<T*>(s.m_p);
  689|     28|        }
  690|     28|        else {
  691|     28|            return reinterpret_cast<T*>(s.m_fp);
  692|     28|        }
  693|     28|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|     28|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|     28|        {
  662|     28|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    190|    {
 3944|    190|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    190|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 190, False: 0]
  |  Branch (3945:50): [True: 0, False: 190]
  ------------------
 3946|       |
 3947|    190|        auto it = ranges::begin(range);
 3948|    190|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    190|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    190|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  ------------------
  ------------------
 3952|    190|            return r.transform_error(
 3953|    190|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    190|                                              "Invalid floating-point value"));
 3955|    190|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    190|    {
 3774|    190|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  Branch (859:45): [True: 0, False: 190]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    190|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    190|        return read_while1_code_unit(
 3783|    190|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    190|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    190|    {
  754|    190|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    190|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    190|              cvref<T> obj = *get<T>(fn);
  745|    190|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    190|                  obj(static_cast<decltype(args)>(args)...);
  747|    190|              }
  748|    190|              else {
  749|    190|                  return obj(static_cast<decltype(args)>(args)...);
  750|    190|              }
  751|    190|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    190|    {
  684|    190|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    190|            return static_cast<T*>(s.m_cp);
  686|    190|        }
  687|    190|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    190|            return static_cast<T*>(s.m_p);
  689|    190|        }
  690|    190|        else {
  691|    190|            return reinterpret_cast<T*>(s.m_fp);
  692|    190|        }
  693|    190|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    190|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    190|        {
  662|    190|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    218|    {
 3665|    218|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    218|        return read_source_impl(range);
 3671|    218|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    930|    {
  763|    930|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    930|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|    930|    {
 3705|    930|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    930|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    930|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    930|        auto it = sign_result.first;
 3708|    930|        m_sign = sign_result.second;
 3709|       |
 3710|    930|        auto digits_begin = it;
 3711|    930|        auto r = ranges::subrange{it, range.end()};
 3712|    930|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    930|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    930|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 930]
  |  |  |  Branch (859:45): [True: 0, False: 930]
  |  |  |  Branch (859:45): [True: 0, False: 930]
  |  |  ------------------
  ------------------
 3715|    930|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|    930|            else {
 3724|    930|                auto cb = [&](const auto& rr)
 3725|    930|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    930|                    auto res = read_all(rr);
 3727|    930|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    930|                        return unexpected_scan_error(
 3729|    930|                            scan_error::invalid_scanned_value,
 3730|    930|                            "Invalid float value");
 3731|    930|                    }
 3732|    930|                    return res;
 3733|    930|                };
 3734|    930|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    930|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    930|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6, False: 924]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      6|    }                                                  \
  |  | 3667|    930|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    930|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    924|            }
 3736|    930|        }
 3737|    924|        else {
 3738|    924|            SCN_TRY_ASSIGN(
 3739|    924|                it,
 3740|    924|                do_read_source_impl(
 3741|    924|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    924|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    924|        }
 3744|       |
 3745|    924|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    924|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    924|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    924|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 924, False: 0]
  |  Branch (3747:48): [True: 924, False: 0]
  ------------------
 3748|    924|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 924, False: 0]
  ------------------
 3749|    924|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 924, False: 0]
  ------------------
 3750|    924|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    924|        }
 3752|       |
 3753|    924|        handle_separators();
 3754|       |
 3755|    924|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 924]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    924|        return it;
 3768|    924|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|    930|    {
 3811|    930|        auto it = range.begin();
 3812|    930|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 930, False: 0]
  ------------------
 3813|    930|            return unexpected(r.error());
 3814|    930|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|    930|    {
 3834|    930|        auto it = range.begin();
 3835|    930|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 930, False: 0]
  ------------------
 3836|    930|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    930|                scan_error::invalid_scanned_value,
 3838|    930|                "Invalid floating-point NaN value"));
 3839|    930|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    924|    {
 3804|    924|        return read_matching_string_classic_nocase(range, "0x");
 3805|    924|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      6|{
 1996|      6|    auto it = read_while_code_unit(range, pred);
 1997|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 6, False: 0]
  ------------------
 1998|      6|        return unexpected(parse_error::error);
 1999|      6|    }
 2000|      0|    return it;
 2001|      6|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|      6|    {
 3944|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 4]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|      6|        auto it = ranges::begin(range);
 3948|      6|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3952|      6|            return r.transform_error(
 3953|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|      6|                                              "Invalid floating-point value"));
 3955|      6|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|      6|    {
 3774|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|      6|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|      6|        return read_while1_code_unit(
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|    930|    {
 4000|    930|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    930|        const bool allowed_nonhex =
 4002|    930|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    930|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    930|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 930, False: 0]
  |  Branch (4005:45): [True: 0, False: 930]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    930|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 930]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    930|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 930, False: 0]
  |  Branch (4014:45): [True: 0, False: 930]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    930|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 930]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    930|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 924, False: 6]
  |  Branch (4021:28): [True: 14, False: 910]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     14|            auto it = range.begin();
 4025|       |
 4026|     14|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 14]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     14|            else {
 4031|     14|                m_kind = float_kind::hex_without_prefix;
 4032|     14|            }
 4033|       |
 4034|     14|            return read_hex(ranges::subrange{it, range.end()});
 4035|     14|        }
 4036|    916|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 6, False: 910]
  |  Branch (4036:29): [True: 6, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|      6|            m_kind = float_kind::generic;
 4040|      6|            return read_regular_float(range);
 4041|      6|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    910|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    910|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 910]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    910|        m_kind = float_kind::generic;
 4052|    910|        return read_regular(range);
 4053|    910|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    924|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    924|                    auto res = read_all(rr);
 3727|    924|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 924]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    924|                    return res;
 3733|    924|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    924|{
 1839|    924|    return ranges::next(range.begin(), range.end());
 1840|    924|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    924|    {
  313|    924|        ranges::advance(x, bound);
  314|    924|        return x;
  315|    924|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    924|    {
  275|    924|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    924|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    924|    {
 1577|    924|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    924|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    924|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    924|    {
 1621|    924|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    924|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    924|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    924|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    924|            m_storage.reset();
 1627|    924|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    924|        }
 1629|    924|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    924|                                          std::basic_string<CharT>>) {
 1631|    924|            m_storage.emplace(SCN_FWD(range));
 1632|    924|            m_view = string_view_type{*m_storage};
 1633|    924|        }
 1634|    924|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    924|                                          typename detail::basic_scan_buffer<
 1636|    924|                                              value_t>::forward_iterator> &&
 1637|    924|                           ranges::common_range<Range>) {
 1638|    924|            auto beg_seg = range.begin().contiguous_segment();
 1639|    924|            auto end_seg = range.end().contiguous_segment();
 1640|    924|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    924|                             detail::to_address(end_seg.end()))) {
 1642|    924|                auto& str = m_storage.emplace();
 1643|    924|                str.reserve(range.end().position() - range.begin().position());
 1644|    924|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    924|                m_view = string_view_type{str};
 1646|    924|                return;
 1647|    924|            }
 1648|       |
 1649|    924|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    924|                                                            end_seg.data());
 1651|    924|            m_storage.reset();
 1652|    924|        }
 1653|    924|        else {
 1654|    924|            auto& str = m_storage.emplace();
 1655|    924|            if constexpr (ranges::sized_range<Range>) {
 1656|    924|                str.reserve(range.size());
 1657|    924|            }
 1658|    924|            if constexpr (ranges::common_range<Range>) {
 1659|    924|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    924|                          std::back_inserter(str));
 1661|    924|            }
 1662|    924|            else {
 1663|    924|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    924|                     ++it) {
 1665|    924|                    str.push_back(*it);
 1666|    924|                }
 1667|    924|            }
 1668|    924|            m_view = string_view_type{str};
 1669|    924|        }
 1670|    924|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    922|    {
 3665|    922|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    922|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 922]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    922|        return read_source_impl(range);
 3671|    922|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    924|    {
 3691|    924|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    924|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    924|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    924|        const std::ptrdiff_t sign_len =
 3694|    924|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 924]
  ------------------
 3695|       |
 3696|    924|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    924|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    924|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    924|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 924, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    924|    }                                                  \
  |  |  |  | 3667|    924|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    924|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    218|    {
 4170|    218|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    218|#if !SCN_DISABLE_LOCALE
 4173|    218|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 0, False: 218]
  ------------------
 4174|      0|            return read_impl<Range>(
 4175|      0|                range, rd,
 4176|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      0|                },
 4179|      0|                value, loc);
 4180|      0|        }
 4181|    218|#endif
 4182|       |
 4183|    218|        return read_impl<Range>(
 4184|    218|            range, rd,
 4185|    218|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    218|                return r.read_source(SCN_FWD(args)...);
 4187|    218|            },
 4188|    218|            value);
 4189|    218|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    218|    {
 4206|    218|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    218|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 218, False: 0]
  |  |  ------------------
  ------------------
 4208|    218|            return unexpected(r.error());
 4209|    218|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    218|    {
  754|    218|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    218|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    218|              cvref<T> obj = *get<T>(fn);
  745|    218|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    218|                  obj(static_cast<decltype(args)>(args)...);
  747|    218|              }
  748|    218|              else {
  749|    218|                  return obj(static_cast<decltype(args)>(args)...);
  750|    218|              }
  751|    218|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    218|    {
  684|    218|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    218|            return static_cast<T*>(s.m_cp);
  686|    218|        }
  687|    218|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    218|            return static_cast<T*>(s.m_p);
  689|    218|        }
  690|    218|        else {
  691|    218|            return reinterpret_cast<T*>(s.m_fp);
  692|    218|        }
  693|    218|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    218|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    218|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    218|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    218|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    218|        {
  662|    218|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    404|    {
 4170|    404|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    404|#if !SCN_DISABLE_LOCALE
 4173|    404|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 396]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    396|#endif
 4182|       |
 4183|    396|        return read_impl<Range>(
 4184|    396|            range, rd,
 4185|    396|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    396|                return r.read_source(SCN_FWD(args)...);
 4187|    396|            },
 4188|    396|            value);
 4189|    404|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|    930|    {
 4206|    930|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    930|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    930|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 924]
  |  |  ------------------
  ------------------
 4208|      6|            return unexpected(r.error());
 4209|      6|        }
 4210|       |
 4211|    924|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    924|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    924|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    924|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 924, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    924|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    924|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    924|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    924|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    924|    }                                                  \
  |  |  |  | 3667|    924|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    924|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    396|    {
  754|    396|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    396|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    396|              cvref<T> obj = *get<T>(fn);
  745|    396|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    396|                  obj(static_cast<decltype(args)>(args)...);
  747|    396|              }
  748|    396|              else {
  749|    396|                  return obj(static_cast<decltype(args)>(args)...);
  750|    396|              }
  751|    396|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    396|    {
  684|    396|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    396|            return static_cast<T*>(s.m_cp);
  686|    396|        }
  687|    396|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    396|            return static_cast<T*>(s.m_p);
  689|    396|        }
  690|    396|        else {
  691|    396|            return reinterpret_cast<T*>(s.m_fp);
  692|    396|        }
  693|    396|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    396|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    396|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    396|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    396|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    396|        {
  662|    396|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  1.48k|{
 5809|  1.48k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.48k|        return reader_impl_for_bool<CharT>{};
 5811|  1.48k|    }
 5812|  1.48k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.48k|        return reader_impl_for_char<CharT>{};
 5814|  1.48k|    }
 5815|  1.48k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.48k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.48k|    }
 5818|  1.48k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.48k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.48k|    }
 5821|  1.48k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.48k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.48k|        return reader_impl_for_string<CharT>{};
 5824|  1.48k|    }
 5825|  1.48k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  1.48k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.48k|        return reader_impl_for_string<CharT>{};
 5828|  1.48k|    }
 5829|  1.48k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.48k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.48k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.48k|    }
 5833|  1.48k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.48k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.48k|    }
 5836|  1.48k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.48k|        return reader_impl_for_float<CharT>{};
 5838|  1.48k|    }
 5839|  1.48k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.48k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.48k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.48k|                       !std::is_same_v<T, bool>) {
 5843|  1.48k|        return reader_impl_for_int<CharT>{};
 5844|  1.48k|    }
 5845|  1.48k|    else {
 5846|  1.48k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.48k|    }
 5848|  1.48k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  4.46k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.88k|    {
 3040|  2.88k|        reader_error_handler eh{};
 3041|  2.88k|        get_derived().check_specs_impl(specs, eh);
 3042|  2.88k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192, False: 2.69k]
  |  |  ------------------
  ------------------
 3043|    192|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    192|        }
 3045|  2.69k|        return {};
 3046|  2.88k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  2.88k|    {
 3051|  2.88k|        return static_cast<Derived&>(*this);
 3052|  2.88k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  2.88k|    {
 5210|  2.88k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  2.88k|        SCN_GCC_PUSH
 5213|  2.88k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  2.88k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  2.88k|        SCN_CLANG_PUSH
 5217|  2.88k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  2.88k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  2.88k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 186, False: 2.70k]
  ------------------
 5221|  1.70k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.70k, False: 1.18k]
  ------------------
 5222|  1.70k|                m_type = reader_type::word;
 5223|  1.70k|                break;
 5224|       |
 5225|    138|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 138, False: 2.74k]
  ------------------
 5226|    138|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 102, False: 36]
  ------------------
 5227|    138|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 36]
  ------------------
 5228|    102|                    m_type = reader_type::custom_word;
 5229|    102|                }
 5230|     36|                else {
 5231|     36|                    m_type = reader_type::word;
 5232|     36|                }
 5233|    138|                break;
 5234|      0|            }
 5235|       |
 5236|      6|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 6, False: 2.88k]
  ------------------
 5237|      6|                m_type = reader_type::character;
 5238|      6|                break;
 5239|       |
 5240|      0|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 0, False: 2.88k]
  ------------------
 5241|      0|                m_type = reader_type::character_set;
 5242|      0|                break;
 5243|       |
 5244|    852|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 852, False: 2.03k]
  ------------------
 5245|    852|                m_type = reader_type::regex;
 5246|    852|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 2.88k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|  2.88k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  2.88k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  4.69k|    {
 5259|  4.69k|        return m_type == reader_type::word;
 5260|  4.69k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  4.08k|{
 1132|  4.08k|    auto it = src.begin();
 1133|  34.8k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 32.2k, False: 2.64k]
  ------------------
 1134|  32.2k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  32.2k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 32.2k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  32.2k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 32.2k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  32.2k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  32.2k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  32.2k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.44k, False: 30.8k]
  ------------------
 1144|  1.44k|            return false;
 1145|  1.44k|        }
 1146|  30.8k|        it += len;
 1147|  30.8k|    }
 1148|  2.64k|    return true;
 1149|  4.08k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     52|{
 2993|     52|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     52|        if (source.stores_allocated_string()) {
 2995|     52|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|     52|        }
 2997|     52|        else {
 2998|     52|            dest.assign(source.view());
 2999|     52|        }
 3000|     52|    }
 3001|     52|    else {
 3002|     52|        return transcode_impl(source.view(), dest);
 3003|     52|    }
 3004|       |
 3005|      0|    return {};
 3006|     52|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|    660|{
 2968|    660|    dst.clear();
 2969|    660|    transcode_valid_to_string(src, dst);
 2970|    660|    return {};
 2971|    660|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|    660|{
 1403|    660|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|    660|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    660|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    660|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|    660|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|    660|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|    660|            std::u32string tmp;
 1410|    660|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|    660|            return transcode_to_string_impl_32to16<true>(
 1412|    660|                std::u32string_view{tmp}, dest);
 1413|    660|        }
 1414|    660|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|    660|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|    660|        }
 1417|    660|    }
 1418|    660|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|    660|        if constexpr (sizeof(DestCharT) == 1) {
 1420|    660|            std::u32string tmp;
 1421|    660|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|    660|            return transcode_to_string_impl_32to8<true>(
 1423|    660|                std::u32string_view{tmp}, dest);
 1424|    660|        }
 1425|    660|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|    660|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|    660|        }
 1428|    660|    }
 1429|    660|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|    660|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|    660|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|    660|        }
 1433|    660|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|    660|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|    660|        }
 1436|    660|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    660|{
 1294|    660|    static_assert(sizeof(SourceCharT) == 4);
 1295|    660|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  4.98k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 4.98k, False: 660]
  ------------------
 1298|  4.98k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  4.98k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  4.98k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 4.17k, False: 810]
  ------------------
 1306|  4.17k|            dest.push_back(static_cast<char>(cp));
 1307|  4.17k|        }
 1308|    810|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 38, False: 772]
  ------------------
 1309|     38|            dest.push_back(
 1310|     38|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|     38|            dest.push_back(
 1312|     38|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|     38|        }
 1314|    772|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 468, False: 304]
  ------------------
 1315|    468|            dest.push_back(
 1316|    468|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    468|            dest.push_back(static_cast<char>(
 1318|    468|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    468|            dest.push_back(
 1320|    468|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    468|        }
 1322|    304|        else {
 1323|    304|            dest.push_back(
 1324|    304|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    304|            dest.push_back(static_cast<char>(
 1326|    304|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    304|            dest.push_back(static_cast<char>(
 1328|    304|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    304|            dest.push_back(
 1330|    304|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    304|        }
 1332|  4.98k|    }
 1333|    660|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    190|    {
 5277|    190|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    190|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    190|        return read_impl(range, specs, value);
 5279|    190|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    190|    {
 5295|    190|        SCN_CLANG_PUSH
 5296|    190|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    190|        switch (m_type) {
 5299|    190|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 190, False: 0]
  ------------------
 5300|    190|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 190]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 190]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 190]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 190]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 190]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 190]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    190|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    190|        }
 5331|       |
 5332|    190|        SCN_CLANG_POP
 5333|    190|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    190|    {
 4820|    190|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    190|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    190|{
 4752|    190|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    190|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    190|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 138, False: 52]
  ------------------
 4756|    138|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    138|                                     "Invalid encoding in scanned string");
 4758|    138|    }
 4759|     52|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     52|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     52|    return SCN_MOVE(result);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     52|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    570|{
 2088|    570|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    570|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    570|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    570|        auto buf = make_contiguous_buffer(range);
 2092|    570|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    570|        return ranges::next(range.begin(),
 2094|    570|                            ranges::distance(buf.view().begin(), it));
 2095|    570|    }
 2096|    570|    else {
 2097|    570|        auto it = range.begin();
 2098|       |
 2099|    570|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    570|            auto seg = get_contiguous_beginning(range);
 2101|    570|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    570|                seg_it != seg.end()) {
 2103|    570|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    570|            }
 2105|    570|            ranges::advance(it, seg.size());
 2106|    570|        }
 2107|       |
 2108|    570|        return read_until_code_point(
 2109|    570|            ranges::subrange{it, range.end()},
 2110|    570|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    570|    }
 2112|    570|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    570|{
 2061|    570|    auto it = range.begin();
 2062|  19.2k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 18.7k, False: 492]
  ------------------
 2063|  18.7k|        const auto val =
 2064|  18.7k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  18.7k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  18.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.7k, False: 0]
  |  |  ------------------
  ------------------
 2066|  18.7k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  18.7k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  18.7k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 78, False: 18.7k]
  ------------------
 2069|     78|                return it;
 2070|     78|            }
 2071|  18.7k|        }
 2072|  18.7k|        it = val.iterator;
 2073|  18.7k|    }
 2074|       |
 2075|    492|    return it;
 2076|    570|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    570|    {
  754|    570|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  18.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.7k|              cvref<T> obj = *get<T>(fn);
  745|  18.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.7k|              }
  748|  18.7k|              else {
  749|  18.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.7k|              }
  751|  18.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  18.7k|    {
  684|  18.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.7k|            return static_cast<T*>(s.m_cp);
  686|  18.7k|        }
  687|  18.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.7k|            return static_cast<T*>(s.m_p);
  689|  18.7k|        }
  690|  18.7k|        else {
  691|  18.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.7k|        }
  693|  18.7k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  18.7k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    570|        {
  662|    570|        }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    708|    {
 5277|    708|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    708|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    708|        return read_impl(range, specs, value);
 5279|    708|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    708|    {
 5295|    708|        SCN_CLANG_PUSH
 5296|    708|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    708|        switch (m_type) {
 5299|    390|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 390, False: 318]
  ------------------
 5300|    390|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 674]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 708]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 708]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    284|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 284, False: 424]
  ------------------
 5315|    284|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    284|                    range, specs.charset_string<SourceCharT>(),
 5317|    284|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 708]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 708]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    708|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    708|        }
 5331|       |
 5332|    708|        SCN_CLANG_POP
 5333|    708|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    916|    {
 4820|    916|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    916|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    950|{
 4752|    950|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    950|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    950|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 342, False: 608]
  ------------------
 4756|    342|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    342|                                     "Invalid encoding in scanned string");
 4758|    342|    }
 4759|    608|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    608|    static_cast<    \
  |  |  929|    608|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    608|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 608]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    608|    return SCN_MOVE(result);
  ------------------
  |  |  928|    608|    static_cast<    \
  |  |  929|    608|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    608|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    608|{
 3012|    608|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    608|        dest.assign(source.view());
 3014|    608|    }
 3015|    608|    else {
 3016|    608|        return transcode_impl(source.view(), dest);
 3017|    608|    }
 3018|       |
 3019|      0|    return {};
 3020|    608|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.74k|{
 2088|  2.74k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.74k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.74k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.74k|        auto buf = make_contiguous_buffer(range);
 2092|  2.74k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.74k|        return ranges::next(range.begin(),
 2094|  2.74k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.74k|    }
 2096|  2.74k|    else {
 2097|  2.74k|        auto it = range.begin();
 2098|       |
 2099|  2.74k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  2.74k|            auto seg = get_contiguous_beginning(range);
 2101|  2.74k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.74k|                seg_it != seg.end()) {
 2103|  2.74k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.74k|            }
 2105|  2.74k|            ranges::advance(it, seg.size());
 2106|  2.74k|        }
 2107|       |
 2108|  2.74k|        return read_until_code_point(
 2109|  2.74k|            ranges::subrange{it, range.end()},
 2110|  2.74k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.74k|    }
 2112|  2.74k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.74k|    {
  754|  2.74k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  32.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.6k|              cvref<T> obj = *get<T>(fn);
  745|  32.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.6k|              }
  748|  32.6k|              else {
  749|  32.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.6k|              }
  751|  32.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  32.6k|    {
  684|  32.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.6k|            return static_cast<T*>(s.m_cp);
  686|  32.6k|        }
  687|  32.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.6k|            return static_cast<T*>(s.m_p);
  689|  32.6k|        }
  690|  32.6k|        else {
  691|  32.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.6k|        }
  693|  32.6k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  32.6k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.74k|        {
  662|  2.74k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    572|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    572|              cvref<T> obj = *get<T>(fn);
  745|    572|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    572|                  obj(static_cast<decltype(args)>(args)...);
  747|    572|              }
  748|    572|              else {
  749|    572|                  return obj(static_cast<decltype(args)>(args)...);
  750|    572|              }
  751|    572|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    572|    {
  684|    572|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    572|            return static_cast<T*>(s.m_cp);
  686|    572|        }
  687|    572|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    572|            return static_cast<T*>(s.m_p);
  689|    572|        }
  690|    572|        else {
  691|    572|            return reinterpret_cast<T*>(s.m_fp);
  692|    572|        }
  693|    572|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    572|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|    284|    {
 4891|    284|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 284, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    284|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    284|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|    852|    {
 4913|    852|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  1.70k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|    852|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    852|            return unexpected_scan_error(
 4916|    852|                scan_error::invalid_scanned_value,
 4917|    852|                "Regex backend doesn't support wide strings as input");
 4918|    852|        }
 4919|    852|        else {
 4920|    852|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 852]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|    852|            auto input = get_as_contiguous(range);
 4928|    852|            SCN_TRY(it,
  ------------------
  |  | 3668|    852|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    852|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    852|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 852, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    852|    }                                                  \
  |  |  |  | 3667|    852|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|    852|        }
 4933|    852|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|    852|{
  959|    852|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    852|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    852|        return true;
  962|    852|    }
  963|    852|    else if constexpr (std::is_same_v<
  964|    852|                           ranges::const_iterator_t<Range>,
  965|    852|                           typename detail::basic_scan_buffer<
  966|    852|                               detail::char_t<Range>>::forward_iterator>) {
  967|    852|        auto beg = r.begin();
  968|    852|        if (!beg.stores_parent()) {
  969|    852|            return true;
  970|    852|        }
  971|    852|        return beg.parent()->is_contiguous();
  972|    852|    }
  973|    852|    else {
  974|    852|        return false;
  975|    852|    }
  976|    852|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|    852|{
 1065|    852|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|    852|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    852|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|    852|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|    852|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|    852|        return r;
 1070|    852|    }
 1071|    852|    else if constexpr (std::is_same_v<
 1072|    852|                           ranges::const_iterator_t<Range>,
 1073|    852|                           typename detail::basic_scan_buffer<
 1074|    852|                               detail::char_t<Range>>::forward_iterator>) {
 1075|    852|        if constexpr (ranges::common_range<Range>) {
 1076|    852|            return detail::make_string_view_from_pointers(
 1077|    852|                r.begin().to_contiguous_segment_iterator(),
 1078|    852|                r.end().to_contiguous_segment_iterator());
 1079|    852|        }
 1080|    852|        else {
 1081|    852|            return r.begin().contiguous_segment();
 1082|    852|        }
 1083|    852|    }
 1084|    852|    else {
 1085|    852|        SCN_EXPECT(false);
 1086|    852|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|    852|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|    852|    }
 1090|    852|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|    852|{
  981|    852|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|    852|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|    852|        return true;
  984|    852|    }
  985|    852|    else if constexpr (std::is_same_v<
  986|    852|                           ranges::const_iterator_t<Range>,
  987|    852|                           typename detail::basic_scan_buffer<
  988|    852|                               detail::char_t<Range>>::forward_iterator>) {
  989|    852|        auto beg = r.begin();
  990|    852|        if (beg.contiguous_segment().empty()) {
  991|    852|            return false;
  992|    852|        }
  993|    852|        if constexpr (ranges::common_range<Range>) {
  994|    852|            return beg.contiguous_segment().end() ==
  995|    852|                   ranges::end(r).contiguous_segment().end();
  996|    852|        }
  997|    852|        else {
  998|    852|            if (beg.stores_parent()) {
  999|    852|                return beg.contiguous_segment().end() ==
 1000|    852|                       beg.parent()->current_view().end();
 1001|    852|            }
 1002|    852|            return true;
 1003|    852|        }
 1004|    852|    }
 1005|    852|    else {
 1006|    852|        return false;
 1007|    852|    }
 1008|    852|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|    852|{
 4346|    852|    static_assert(ranges::contiguous_range<Input> &&
 4347|    852|                  ranges::borrowed_range<Input> &&
 4348|    852|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|    852|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|    852|    std::basic_regex<CharT> re{};
 4352|    852|    try {
 4353|    852|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|    852|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    852|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    852|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    852|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 852]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    852|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    852|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|    852|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|    852|                                     re_flags | std::regex_constants::nosubs};
 4356|    852|    }
 4357|    852|    catch (const std::regex_error& err) {
 4358|    606|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|    606|                                     "Invalid regex");
 4360|    606|    }
 4361|       |
 4362|    246|    std::match_results<const CharT*> matches{};
 4363|    246|    try {
 4364|    246|        bool found = std::regex_search(input.data(),
 4365|    246|                                       input.data() + input.size(), matches, re,
 4366|    246|                                       std::regex_constants::match_continuous);
 4367|    246|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 246, False: 0]
  |  Branch (4367:23): [True: 0, False: 0]
  ------------------
 4368|    246|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|    246|                                         "Regular expression didn't match");
 4370|    246|        }
 4371|    246|    }
 4372|    246|    catch (const std::regex_error& err) {
 4373|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|      0|                                     "Regex matching failed with an error");
 4375|      0|    }
 4376|       |
 4377|      0|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|    246|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  1.48k|{
 5809|  1.48k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.48k|        return reader_impl_for_bool<CharT>{};
 5811|  1.48k|    }
 5812|  1.48k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.48k|        return reader_impl_for_char<CharT>{};
 5814|  1.48k|    }
 5815|  1.48k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.48k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.48k|    }
 5818|  1.48k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.48k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.48k|    }
 5821|  1.48k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.48k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.48k|        return reader_impl_for_string<CharT>{};
 5824|  1.48k|    }
 5825|  1.48k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  1.48k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.48k|        return reader_impl_for_string<CharT>{};
 5828|  1.48k|    }
 5829|  1.48k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.48k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.48k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.48k|    }
 5833|  1.48k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.48k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.48k|    }
 5836|  1.48k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.48k|        return reader_impl_for_float<CharT>{};
 5838|  1.48k|    }
 5839|  1.48k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.48k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.48k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.48k|                       !std::is_same_v<T, bool>) {
 5843|  1.48k|        return reader_impl_for_int<CharT>{};
 5844|  1.48k|    }
 5845|  1.48k|    else {
 5846|  1.48k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.48k|    }
 5848|  1.48k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|     52|{
 2993|     52|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|     52|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 52, False: 0]
  ------------------
 2995|     52|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|     52|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|     52|    }
 3001|     52|    else {
 3002|     52|        return transcode_impl(source.view(), dest);
 3003|     52|    }
 3004|       |
 3005|     52|    return {};
 3006|     52|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    190|    {
 5277|    190|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    190|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    190|        return read_impl(range, specs, value);
 5279|    190|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    190|    {
 5295|    190|        SCN_CLANG_PUSH
 5296|    190|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    190|        switch (m_type) {
 5299|    190|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 190, False: 0]
  ------------------
 5300|    190|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 190]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 190]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 190]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 190]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 190]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 190]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    190|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    190|        }
 5331|       |
 5332|    190|        SCN_CLANG_POP
 5333|    190|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    190|    {
 4820|    190|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    190|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    190|{
 4752|    190|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    190|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    190|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 138, False: 52]
  ------------------
 4756|    138|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    138|                                     "Invalid encoding in scanned string");
 4758|    138|    }
 4759|     52|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     52|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     52|    return SCN_MOVE(result);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     52|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    708|    {
 5277|    708|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    708|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    708|        return read_impl(range, specs, value);
 5279|    708|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    708|    {
 5295|    708|        SCN_CLANG_PUSH
 5296|    708|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    708|        switch (m_type) {
 5299|    390|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 390, False: 318]
  ------------------
 5300|    390|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 674]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 708]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 708]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    284|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 284, False: 424]
  ------------------
 5315|    284|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    284|                    range, specs.charset_string<SourceCharT>(),
 5317|    284|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 708]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 708]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    708|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    708|        }
 5331|       |
 5332|    708|        SCN_CLANG_POP
 5333|    708|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|    916|    {
 4820|    916|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    916|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|    950|{
 4752|    950|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    950|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    950|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 342, False: 608]
  ------------------
 4756|    342|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    342|                                     "Invalid encoding in scanned string");
 4758|    342|    }
 4759|    608|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    608|    static_cast<    \
  |  |  929|    608|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    608|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 608]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    608|    return SCN_MOVE(result);
  ------------------
  |  |  928|    608|    static_cast<    \
  |  |  929|    608|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    608|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    608|{
 3012|    608|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    608|        dest.assign(source.view());
 3014|    608|    }
 3015|    608|    else {
 3016|    608|        return transcode_impl(source.view(), dest);
 3017|    608|    }
 3018|       |
 3019|    608|    return {};
 3020|    608|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    572|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    572|              cvref<T> obj = *get<T>(fn);
  745|    572|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    572|                  obj(static_cast<decltype(args)>(args)...);
  747|    572|              }
  748|    572|              else {
  749|    572|                  return obj(static_cast<decltype(args)>(args)...);
  750|    572|              }
  751|    572|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    572|    {
  684|    572|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    572|            return static_cast<T*>(s.m_cp);
  686|    572|        }
  687|    572|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    572|            return static_cast<T*>(s.m_p);
  689|    572|        }
  690|    572|        else {
  691|    572|            return reinterpret_cast<T*>(s.m_fp);
  692|    572|        }
  693|    572|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    572|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|    284|    {
 4891|    284|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 284, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    284|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    284|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  1.48k|{
 5809|  1.48k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  1.48k|        return reader_impl_for_bool<CharT>{};
 5811|  1.48k|    }
 5812|  1.48k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  1.48k|        return reader_impl_for_char<CharT>{};
 5814|  1.48k|    }
 5815|  1.48k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  1.48k|        return reader_impl_for_wchar<CharT>{};
 5817|  1.48k|    }
 5818|  1.48k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  1.48k|        return reader_impl_for_code_point<CharT>{};
 5820|  1.48k|    }
 5821|  1.48k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  1.48k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.48k|        return reader_impl_for_string<CharT>{};
 5824|  1.48k|    }
 5825|  1.48k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  1.48k|                       std::is_same_v<T, std::wstring>) {
 5827|  1.48k|        return reader_impl_for_string<CharT>{};
 5828|  1.48k|    }
 5829|  1.48k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  1.48k|                       std::is_same_v<T, wregex_matches>) {
 5831|  1.48k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  1.48k|    }
 5833|  1.48k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  1.48k|        return reader_impl_for_voidptr<CharT>{};
 5835|  1.48k|    }
 5836|  1.48k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  1.48k|        return reader_impl_for_float<CharT>{};
 5838|  1.48k|    }
 5839|  1.48k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  1.48k|                       !std::is_same_v<T, wchar_t> &&
 5841|  1.48k|                       !std::is_same_v<T, char32_t> &&
 5842|  1.48k|                       !std::is_same_v<T, bool>) {
 5843|  1.48k|        return reader_impl_for_int<CharT>{};
 5844|  1.48k|    }
 5845|  1.48k|    else {
 5846|  1.48k|        return reader_impl_for_monostate<CharT>{};
 5847|  1.48k|    }
 5848|  1.48k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    190|    {
 5277|    190|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    190|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    190|        return read_impl(range, specs, value);
 5279|    190|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    190|    {
 5295|    190|        SCN_CLANG_PUSH
 5296|    190|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    190|        switch (m_type) {
 5299|    190|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 190, False: 0]
  ------------------
 5300|    190|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 190]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 190]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 190]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 190]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 190]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 190]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    190|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    190|        }
 5331|       |
 5332|    190|        SCN_CLANG_POP
 5333|    190|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    190|    {
 4827|    190|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    190|                                     value);
 4829|    190|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    190|{
 4773|    190|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    190|    auto src = [&]() {
 4776|    190|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    190|            return make_contiguous_buffer(
 4778|    190|                ranges::subrange{range.begin().base(), result.base()});
 4779|    190|        }
 4780|    190|        else {
 4781|    190|            return make_contiguous_buffer(
 4782|    190|                ranges::subrange{range.begin(), result});
 4783|    190|        }
 4784|    190|    }();
 4785|    190|    using src_type = decltype(src);
 4786|       |
 4787|    190|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    190|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    190|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    190|                                     "Cannot read a string_view from "
 4796|    190|                                     "this source range (would require "
 4797|    190|                                     "transcoding)");
 4798|    190|    }
 4799|    190|    else {
 4800|    190|        const auto view = src.view();
 4801|    190|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    190|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 138, False: 52]
  ------------------
 4804|    138|            return unexpected_scan_error(
 4805|    138|                scan_error::invalid_scanned_value,
 4806|    138|                "Invalid encoding in scanned string_view");
 4807|    138|        }
 4808|       |
 4809|     52|        return SCN_MOVE(result);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    190|    }
 4811|    190|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    190|    auto src = [&]() {
 4776|    190|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    190|            return make_contiguous_buffer(
 4778|    190|                ranges::subrange{range.begin().base(), result.base()});
 4779|    190|        }
 4780|    190|        else {
 4781|    190|            return make_contiguous_buffer(
 4782|    190|                ranges::subrange{range.begin(), result});
 4783|    190|        }
 4784|    190|    }();
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|    708|    {
 5277|    708|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    708|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    708|        return read_impl(range, specs, value);
 5279|    708|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|    708|    {
 5295|    708|        SCN_CLANG_PUSH
 5296|    708|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    708|        switch (m_type) {
 5299|    390|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 390, False: 318]
  ------------------
 5300|    390|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 674]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 708]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 708]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|    284|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 284, False: 424]
  ------------------
 5315|    284|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|    284|                    range, specs.charset_string<SourceCharT>(),
 5317|    284|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 708]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 708]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    708|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    708|        }
 5331|       |
 5332|    708|        SCN_CLANG_POP
 5333|    708|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|    916|    {
 4827|    916|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    916|                                     value);
 4829|    916|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|    950|{
 4773|    950|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    950|    auto src = [&]() {
 4776|    950|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    950|            return make_contiguous_buffer(
 4778|    950|                ranges::subrange{range.begin().base(), result.base()});
 4779|    950|        }
 4780|    950|        else {
 4781|    950|            return make_contiguous_buffer(
 4782|    950|                ranges::subrange{range.begin(), result});
 4783|    950|        }
 4784|    950|    }();
 4785|    950|    using src_type = decltype(src);
 4786|       |
 4787|    950|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    950|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    950|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    950|                                     "Cannot read a string_view from "
 4796|    950|                                     "this source range (would require "
 4797|    950|                                     "transcoding)");
 4798|    950|    }
 4799|    950|    else {
 4800|    950|        const auto view = src.view();
 4801|    950|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    950|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 342, False: 608]
  ------------------
 4804|    342|            return unexpected_scan_error(
 4805|    342|                scan_error::invalid_scanned_value,
 4806|    342|                "Invalid encoding in scanned string_view");
 4807|    342|        }
 4808|       |
 4809|    608|        return SCN_MOVE(result);
  ------------------
  |  |  928|    608|    static_cast<    \
  |  |  929|    608|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    950|    }
 4811|    950|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|    950|    auto src = [&]() {
 4776|    950|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    950|            return make_contiguous_buffer(
 4778|    950|                ranges::subrange{range.begin().base(), result.base()});
 4779|    950|        }
 4780|    950|        else {
 4781|    950|            return make_contiguous_buffer(
 4782|    950|                ranges::subrange{range.begin(), result});
 4783|    950|        }
 4784|    950|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     34|    {
 4863|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 0]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    572|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    572|              cvref<T> obj = *get<T>(fn);
  745|    572|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    572|                  obj(static_cast<decltype(args)>(args)...);
  747|    572|              }
  748|    572|              else {
  749|    572|                  return obj(static_cast<decltype(args)>(args)...);
  750|    572|              }
  751|    572|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    572|    {
  684|    572|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    572|            return static_cast<T*>(s.m_cp);
  686|    572|        }
  687|    572|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    572|            return static_cast<T*>(s.m_p);
  689|    572|        }
  690|    572|        else {
  691|    572|            return reinterpret_cast<T*>(s.m_fp);
  692|    572|        }
  693|    572|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    572|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|    284|    {
 4902|    284|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 284, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    284|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    284|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    880|    {
 4100|    880|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 880]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    880|        return std::copysign(value, T{1.0});
 4104|    880|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|    924|    {
 4100|    924|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 924]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    924|        return std::copysign(value, T{1.0});
 4104|    924|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.86k|{
 5795|  5.86k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.86k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.86k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 652, False: 5.21k]
  ------------------
 5800|    652|        return range.begin();
 5801|    652|    }
 5802|       |
 5803|  5.21k|    return skip_classic_whitespace(range);
 5804|  5.86k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    652|    {
 3528|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    652|        return read_default_with_base(range, value, 10);
 3530|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    652|    {
 3528|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    652|        return read_default_with_base(range, value, 10);
 3530|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.17k|    {
 5748|  1.17k|        return true;
 5749|  1.17k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    868|    {
 5765|    868|        detail::format_specs specs{};
 5766|    868|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    868|        std::uintptr_t intvalue{};
 5769|    868|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    868|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    868|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    868|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    868|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 868, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    868|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    868|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    868|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    868|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    868|    }                                                  \
  |  |  |  | 3667|    868|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    868|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.42k|    {
 3035|  1.42k|        return true;
 3036|  1.42k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    652|    {
 5504|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    652|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    652|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.17k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    998|    {
 5355|    998|        scan_error err{scan_error::invalid_scanned_value,
 5356|    998|                       "Failed to read boolean"};
 5357|       |
 5358|    998|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 882, False: 116]
  ------------------
 5359|    882|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 882]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    882|            else {
 5363|    882|                err = r.error();
 5364|    882|            }
 5365|    882|        }
 5366|       |
 5367|    998|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 980, False: 18]
  ------------------
 5368|    980|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 980]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    980|            else {
 5372|    980|                err = r.error();
 5373|    980|            }
 5374|    980|        }
 5375|       |
 5376|    998|        return unexpected(err);
 5377|    998|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    896|    {
 5384|    896|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 896]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    896|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 896]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    896|        return unexpected_scan_error(
 5394|    896|            scan_error::invalid_scanned_value,
 5395|    896|            "Failed to read numeric boolean value: No match");
 5396|    896|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    980|    {
 5402|    980|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 980]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    980|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 980]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    980|        return unexpected_scan_error(
 5412|    980|            scan_error::invalid_scanned_value,
 5413|    980|            "Failed to read textual boolean value: No match");
 5414|    980|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.96k|{
 2194|  1.96k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.96k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.96k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.96k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 102, False: 1.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    102|    }                                                  \
  |  |  |  | 3667|  1.96k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.85k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.85k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.85k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.85k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.85k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.85k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.85k|            return unexpected(parse_error::error);
 2202|  1.85k|        }
 2203|      0|        return it;
 2204|  1.85k|    }
 2205|  1.85k|    else {
 2206|  1.85k|        auto range_it = range.begin();
 2207|  1.85k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.85k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.85k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.85k|                return unexpected(parse_error::error);
 2211|  1.85k|            }
 2212|  1.85k|        }
 2213|  1.85k|        return it;
 2214|  1.85k|    }
 2215|  1.85k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    652|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.17k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    652|    {
 4152|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    652|        float_reader<CharT> rd{};
 4155|    652|        return read_impl<Range>(
 4156|    652|            range, rd,
 4157|    652|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    652|                return r.read_source(SCN_FWD(args)...);
 4159|    652|            },
 4160|    652|            value);
 4161|    652|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    652|    {
  754|    652|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    652|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    652|              cvref<T> obj = *get<T>(fn);
  745|    652|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    652|                  obj(static_cast<decltype(args)>(args)...);
  747|    652|              }
  748|    652|              else {
  749|    652|                  return obj(static_cast<decltype(args)>(args)...);
  750|    652|              }
  751|    652|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    652|    {
  684|    652|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    652|            return static_cast<T*>(s.m_cp);
  686|    652|        }
  687|    652|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    652|            return static_cast<T*>(s.m_p);
  689|    652|        }
  690|    652|        else {
  691|    652|            return reinterpret_cast<T*>(s.m_fp);
  692|    652|        }
  693|    652|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    652|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    652|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    652|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    652|        {
  662|    652|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    652|    {
 5871|    652|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    652|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    652|                          basic_contiguous_scan_context<char_type>>) {
 5875|    652|            auto rd = make_reader<T, char_type>();
 5876|    652|            return impl(rd, range, value);
 5877|    652|        }
 5878|    652|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    652|            auto rd = make_reader<T, char_type>();
 5880|    652|            if (!is_segment_contiguous(range)) {
 5881|    652|                return impl(rd, range, value);
 5882|    652|            }
 5883|    652|            auto crange = get_as_contiguous(range);
 5884|    652|            SCN_TRY(it, impl(rd, crange, value));
 5885|    652|            return ranges::next(range.begin(),
 5886|    652|                                ranges::distance(crange.begin(), it));
 5887|    652|        }
 5888|    652|        else {
 5889|    652|            SCN_EXPECT(false);
 5890|    652|            SCN_UNREACHABLE;
 5891|    652|        }
 5892|    652|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    652|    {
 5863|    652|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    652|                        .transform_error(make_eof_scan_error));
 5865|    652|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    652|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    652|    {
 5266|    652|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    652|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    652|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    652|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  75.8k|    {
 2879|  75.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   352k|    {
 2883|   352k|        return m_current;
 2884|   352k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   407k|    {
 2888|   407k|        return m_range.end();
 2889|   407k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   130k|{
 1221|       |    // TODO: optimize
 1222|   130k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   130k|    auto res = get_next_code_point(str);
 1224|   130k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   130k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   133k|    {
 2903|   133k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   133k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   133k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 133k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   133k|        }
 2909|   133k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   133k|    static_cast<    \
  |  |  929|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   133k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   142k|    {
 2893|   142k|        return ranges::subrange{begin(), end()};
 2894|   142k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  19.6k|    {
 6037|  19.6k|        const bool need_skipped_width =
 6038|  19.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.65k, False: 18.0k]
  |  Branch (6038:33): [True: 4.43k, False: 13.5k]
  ------------------
 6039|  19.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  19.6k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 600, False: 19.0k]
  ------------------
 6043|  19.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 2.07k, False: 17.0k]
  ------------------
 6044|  2.67k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  2.67k|                             need_skipped_width);
 6046|  2.67k|        }
 6047|  17.0k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 16.3k, False: 662]
  |  Branch (6047:56): [True: 4.00k, False: 12.3k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  4.00k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 2.37k, False: 1.63k]
  ------------------
 6051|  2.37k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  2.37k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 96, False: 2.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     96|    }                                                  \
  |  |  |  | 3667|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  2.28k|                                  .transform_error(make_eof_scan_error));
 6054|  2.28k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  2.37k|            }
 6056|  3.26k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.26k|                            make_eof_scan_error));
 6058|       |
 6059|  3.26k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.01k, False: 614]
  ------------------
 6060|  1.01k|                return result_type{
 6061|  1.01k|                    it,
 6062|  1.01k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.01k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.01k|                                             .view())};
 6065|  1.01k|            }
 6066|    614|            return result_type{it, 0};
 6067|  3.26k|        }
 6068|       |
 6069|  12.9k|        return result_type{rng.begin(), 0};
 6070|  17.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  4.58k|    {
 6079|  4.58k|        const bool need_skipped_width =
 6080|  4.58k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 378, False: 4.20k]
  |  Branch (6080:33): [True: 1.18k, False: 3.02k]
  ------------------
 6081|  4.58k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  4.58k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 202, False: 4.38k]
  ------------------
 6084|  4.58k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 320, False: 4.06k]
  ------------------
 6085|    522|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|    522|                             specs.fill, need_skipped_width);
 6087|    522|        }
 6088|  4.06k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 3.82k, False: 238]
  ------------------
 6089|  4.06k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 3.45k, False: 372]
  ------------------
 6090|  4.06k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 212, False: 3.23k]
  |  Branch (6090:35): [True: 196, False: 16]
  ------------------
 6091|  3.45k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 462, False: 2.79k]
  ------------------
 6092|  3.25k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 388, False: 74]
  ------------------
 6093|    584|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 388, False: 196]
  ------------------
 6094|    388|                const auto initial_width =
 6095|    388|                    specs.precision - prefix_width - value_width;
 6096|    388|                auto max_width_view = take_width(rng, initial_width);
 6097|    388|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 388]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|    388|                                  .transform_error(make_eof_scan_error));
 6099|    388|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|    388|            }
 6101|    392|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    196|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    196|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    196|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 196]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    196|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    196|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    392|                            make_eof_scan_error));
 6103|       |
 6104|    392|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 196, False: 0]
  ------------------
 6105|    196|                return result_type{
 6106|    196|                    it,
 6107|    196|                    calculate_text_width(make_contiguous_buffer(
 6108|    196|                                             ranges::subrange{rng.begin(), it})
 6109|    196|                                             .view())};
 6110|    196|            }
 6111|      0|            return result_type{it, 0};
 6112|    392|        }
 6113|  3.47k|        return result_type{rng.begin(), 0};
 6114|  4.06k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6177|  5.49k|    {
 6178|  5.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.49k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.49k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.49k|            auto rd = make_reader<T, char_type>();
 6183|  5.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.90k, False: 590]
  |  |  ------------------
  ------------------
 6184|  4.90k|                return unexpected(e);
 6185|  4.90k|            }
 6186|       |
 6187|    590|            return impl(rd, range, value);
 6188|  5.49k|        }
 6189|  5.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.49k|            auto rd = make_reader<T, char_type>();
 6191|  5.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.49k|                return unexpected(e);
 6193|  5.49k|            }
 6194|       |
 6195|  5.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.49k|                specs.width != 0) {
 6197|  5.49k|                return impl(rd, range, value);
 6198|  5.49k|            }
 6199|       |
 6200|  5.49k|            auto crange = get_as_contiguous(range);
 6201|  5.49k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.49k|            return ranges::next(range.begin(),
 6203|  5.49k|                                ranges::distance(crange.begin(), it));
 6204|  5.49k|        }
 6205|  5.49k|        else {
 6206|  5.49k|            SCN_EXPECT(false);
 6207|  5.49k|            SCN_UNREACHABLE;
 6208|  5.49k|        }
 6209|  5.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    590|    {
 6120|    590|        const bool need_skipped_width =
 6121|    590|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 162, False: 428]
  |  Branch (6121:33): [True: 348, False: 80]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    590|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    590|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    572|        auto [it, prefix_width] = prefix_result;
 6126|    572|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    572|        std::ptrdiff_t value_width = 0;
 6130|    572|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 330, False: 242]
  ------------------
 6131|    330|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 328]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    328|            const auto initial_width = specs.precision - prefix_width;
 6139|    328|            auto max_width_view =
 6140|    328|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    328|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 328, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    328|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    328|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    328|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    328|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    328|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    242|        else {
 6146|    242|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    242|    }                                                  \
  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6177|  5.49k|    {
 6178|  5.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.49k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.49k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.49k|            auto rd = make_reader<T, char_type>();
 6183|  5.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.90k, False: 590]
  |  |  ------------------
  ------------------
 6184|  4.90k|                return unexpected(e);
 6185|  4.90k|            }
 6186|       |
 6187|    590|            return impl(rd, range, value);
 6188|  5.49k|        }
 6189|  5.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.49k|            auto rd = make_reader<T, char_type>();
 6191|  5.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.49k|                return unexpected(e);
 6193|  5.49k|            }
 6194|       |
 6195|  5.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.49k|                specs.width != 0) {
 6197|  5.49k|                return impl(rd, range, value);
 6198|  5.49k|            }
 6199|       |
 6200|  5.49k|            auto crange = get_as_contiguous(range);
 6201|  5.49k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.49k|            return ranges::next(range.begin(),
 6203|  5.49k|                                ranges::distance(crange.begin(), it));
 6204|  5.49k|        }
 6205|  5.49k|        else {
 6206|  5.49k|            SCN_EXPECT(false);
 6207|  5.49k|            SCN_UNREACHABLE;
 6208|  5.49k|        }
 6209|  5.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    590|    {
 6120|    590|        const bool need_skipped_width =
 6121|    590|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 162, False: 428]
  |  Branch (6121:33): [True: 348, False: 80]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    590|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    590|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    590|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    590|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    590|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 572]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    590|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    572|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    572|        auto [it, prefix_width] = prefix_result;
 6126|    572|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    572|        std::ptrdiff_t value_width = 0;
 6130|    572|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 330, False: 242]
  ------------------
 6131|    330|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 328]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    328|            const auto initial_width = specs.precision - prefix_width;
 6139|    328|            auto max_width_view =
 6140|    328|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    328|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 328, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    328|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    328|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    328|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    328|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    328|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    242|        else {
 6146|    242|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    242|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    242|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    242|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 242, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    242|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    242|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    242|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    242|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    242|    }                                                  \
  |  | 3667|    242|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    242|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6177|  5.45k|    {
 6178|  5.45k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.45k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.45k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.45k|            auto rd = make_reader<T, char_type>();
 6183|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.93k, False: 526]
  |  |  ------------------
  ------------------
 6184|  4.93k|                return unexpected(e);
 6185|  4.93k|            }
 6186|       |
 6187|    526|            return impl(rd, range, value);
 6188|  5.45k|        }
 6189|  5.45k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.45k|            auto rd = make_reader<T, char_type>();
 6191|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.45k|                return unexpected(e);
 6193|  5.45k|            }
 6194|       |
 6195|  5.45k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.45k|                specs.width != 0) {
 6197|  5.45k|                return impl(rd, range, value);
 6198|  5.45k|            }
 6199|       |
 6200|  5.45k|            auto crange = get_as_contiguous(range);
 6201|  5.45k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.45k|            return ranges::next(range.begin(),
 6203|  5.45k|                                ranges::distance(crange.begin(), it));
 6204|  5.45k|        }
 6205|  5.45k|        else {
 6206|  5.45k|            SCN_EXPECT(false);
 6207|  5.45k|            SCN_UNREACHABLE;
 6208|  5.45k|        }
 6209|  5.45k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  5.45k|    {
 5753|  5.45k|        reader_error_handler eh{};
 5754|  5.45k|        detail::check_pointer_type_specs(specs, eh);
 5755|  5.45k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.93k, False: 526]
  |  |  ------------------
  ------------------
 5756|  4.93k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  4.93k|        }
 5758|    526|        return {};
 5759|  5.45k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6119|    526|    {
 6120|    526|        const bool need_skipped_width =
 6121|    526|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 158, False: 368]
  |  Branch (6121:33): [True: 310, False: 58]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    526|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 522]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    522|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    522|        auto [it, prefix_width] = prefix_result;
 6126|    522|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    522|        std::ptrdiff_t value_width = 0;
 6130|    522|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 306, False: 216]
  ------------------
 6131|    306|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 306]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    306|            const auto initial_width = specs.precision - prefix_width;
 6139|    306|            auto max_width_view =
 6140|    306|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    306|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 306, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    306|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    216|        else {
 6146|    216|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    216|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    216|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    216|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 216, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    216|    }                                                  \
  |  | 3667|    216|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    306|    {
 5782|    306|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    306|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    306|        return read_default(range, value, loc);
 5784|    306|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    306|    {
 5765|    306|        detail::format_specs specs{};
 5766|    306|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    306|        std::uintptr_t intvalue{};
 5769|    306|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 306, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    306|    }                                                  \
  |  |  |  | 3667|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    306|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    216|    {
 5782|    216|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    216|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    216|        return read_default(range, value, loc);
 5784|    216|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6177|  5.49k|    {
 6178|  5.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.49k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.49k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.49k|            auto rd = make_reader<T, char_type>();
 6183|  5.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.71k, False: 776]
  |  |  ------------------
  ------------------
 6184|  4.71k|                return unexpected(e);
 6185|  4.71k|            }
 6186|       |
 6187|    776|            return impl(rd, range, value);
 6188|  5.49k|        }
 6189|  5.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.49k|            auto rd = make_reader<T, char_type>();
 6191|  5.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.49k|                return unexpected(e);
 6193|  5.49k|            }
 6194|       |
 6195|  5.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.49k|                specs.width != 0) {
 6197|  5.49k|                return impl(rd, range, value);
 6198|  5.49k|            }
 6199|       |
 6200|  5.49k|            auto crange = get_as_contiguous(range);
 6201|  5.49k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.49k|            return ranges::next(range.begin(),
 6203|  5.49k|                                ranges::distance(crange.begin(), it));
 6204|  5.49k|        }
 6205|  5.49k|        else {
 6206|  5.49k|            SCN_EXPECT(false);
 6207|  5.49k|            SCN_UNREACHABLE;
 6208|  5.49k|        }
 6209|  5.49k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.49k|    {
 3040|  5.49k|        reader_error_handler eh{};
 3041|  5.49k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.49k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.71k, False: 776]
  |  |  ------------------
  ------------------
 3043|  4.71k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.71k|        }
 3045|    776|        return {};
 3046|  5.49k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  5.49k|    {
 3051|  5.49k|        return static_cast<Derived&>(*this);
 3052|  5.49k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  5.49k|    {
 5497|  5.49k|        detail::check_bool_type_specs(specs, eh);
 5498|  5.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    776|    {
 6120|    776|        const bool need_skipped_width =
 6121|    776|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 170, False: 606]
  |  Branch (6121:33): [True: 414, False: 192]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    776|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    776|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    776|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    776|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    776|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 754]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    776|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    754|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    754|        auto [it, prefix_width] = prefix_result;
 6126|    754|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    754|        std::ptrdiff_t value_width = 0;
 6130|    754|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 392, False: 362]
  ------------------
 6131|    392|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 390]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    390|            const auto initial_width = specs.precision - prefix_width;
 6139|    390|            auto max_width_view =
 6140|    390|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    390|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    390|    }                                                  \
  |  |  |  | 3667|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    362|        else {
 6146|    362|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 362, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    362|    }                                                  \
  |  | 3667|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    390|    {
 5516|    390|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    390|#if !SCN_DISABLE_LOCALE
 5519|    390|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 378]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    378|#endif
 5523|       |
 5524|    378|        return rd.read_classic(range, value);
 5525|    390|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    752|    {
 5529|    752|        SCN_GCC_COMPAT_PUSH
 5530|    752|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    752|        switch (specs.type) {
 5533|    178|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 178, False: 574]
  ------------------
 5534|    178|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 742]
  ------------------
 5537|     18|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 744]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 8, False: 744]
  ------------------
 5539|     30|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 4, False: 748]
  ------------------
 5540|     40|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 10, False: 742]
  ------------------
 5541|     44|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 748]
  ------------------
 5542|     44|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    530|            default:
  ------------------
  |  Branch (5544:13): [True: 530, False: 222]
  ------------------
 5545|    530|                return bool_reader_base::allow_text |
 5546|    530|                       bool_reader_base::allow_numeric;
 5547|    752|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    752|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    330|    {
 5384|    330|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 330]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    330|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 330]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    330|        return unexpected_scan_error(
 5394|    330|            scan_error::invalid_scanned_value,
 5395|    330|            "Failed to read numeric boolean value: No match");
 5396|    330|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    660|{
 2146|    660|    auto it = read_code_unit(range);
 2147|    660|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    660|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 660, False: 0]
  |  |  ------------------
  ------------------
 2152|    660|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    660|        return unexpected(parse_error::error);
 2154|    660|    }
 2155|       |
 2156|      0|    return *it;
 2157|    660|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    744|{
 1857|    744|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    744|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    744|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    744|        if (sz < count) {
 1862|    744|            return unexpected(eof_error::eof);
 1863|    744|        }
 1864|       |
 1865|    744|        return ranges::next(range.begin(), count);
 1866|    744|    }
 1867|    744|    else {
 1868|    744|        auto it = range.begin();
 1869|    744|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 744]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.82k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.17k, False: 650]
  ------------------
 1874|  3.17k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 94, False: 3.08k]
  ------------------
 1875|     94|                return unexpected(eof_error::eof);
 1876|     94|            }
 1877|  3.17k|        }
 1878|       |
 1879|    650|        return it;
 1880|    744|    }
 1881|    744|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    744|{
 1095|    744|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    744|        return r.size();
 1097|    744|    }
 1098|    744|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    744|                           ranges::const_iterator_t<Range>,
 1100|    744|                           typename detail::basic_scan_buffer<
 1101|    744|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    744|        if constexpr (ranges::common_range<Range>) {
 1103|    744|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    744|        }
 1105|    744|        else {
 1106|    744|            if (r.begin().stores_parent()) {
 1107|    744|                return static_cast<size_t>(
 1108|    744|                    r.begin().parent()->chars_available() -
 1109|    744|                    r.begin().position());
 1110|    744|            }
 1111|    744|            return r.begin().contiguous_segment().size();
 1112|    744|        }
 1113|    744|    }
 1114|    744|    else {
 1115|    744|        return 0;
 1116|    744|    }
 1117|    744|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    378|    {
 5355|    378|        scan_error err{scan_error::invalid_scanned_value,
 5356|    378|                       "Failed to read boolean"};
 5357|       |
 5358|    378|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 320, False: 58]
  ------------------
 5359|    320|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 320]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    320|            else {
 5363|    320|                err = r.error();
 5364|    320|            }
 5365|    320|        }
 5366|       |
 5367|    378|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 362, False: 16]
  ------------------
 5368|    362|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 362]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    362|            else {
 5372|    362|                err = r.error();
 5373|    362|            }
 5374|    362|        }
 5375|       |
 5376|    378|        return unexpected(err);
 5377|    378|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    362|    {
 5402|    362|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 362]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    362|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 362]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    362|        return unexpected_scan_error(
 5412|    362|            scan_error::invalid_scanned_value,
 5413|    362|            "Failed to read textual boolean value: No match");
 5414|    362|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    724|{
 2194|    724|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    724|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    724|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    724|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    724|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 82, False: 642]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     82|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     82|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     82|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     82|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     82|    }                                                  \
  |  |  |  | 3667|    724|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    642|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    642|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    642|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    642|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    642|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    642|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 642, False: 0]
  |  |  ------------------
  ------------------
 2201|    642|            return unexpected(parse_error::error);
 2202|    642|        }
 2203|      0|        return it;
 2204|    642|    }
 2205|    642|    else {
 2206|    642|        auto range_it = range.begin();
 2207|    642|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    642|            if (SCN_UNLIKELY(*range_it !=
 2209|    642|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    642|                return unexpected(parse_error::error);
 2211|    642|            }
 2212|    642|        }
 2213|    642|        return it;
 2214|    642|    }
 2215|    642|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    362|    {
 5516|    362|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    362|#if !SCN_DISABLE_LOCALE
 5519|    362|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 16, False: 346]
  ------------------
 5520|     16|            return rd.read_localized(range, loc, value);
 5521|     16|        }
 5522|    346|#endif
 5523|       |
 5524|    346|        return rd.read_classic(range, value);
 5525|    362|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     16|    {
 5428|     16|        scan_error err{scan_error::invalid_scanned_value,
 5429|     16|                       "Failed to read boolean"};
 5430|       |
 5431|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 14, False: 2]
  ------------------
 5432|     14|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 14]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     14|            else {
 5436|     14|                err = r.error();
 5437|     14|            }
 5438|     14|        }
 5439|       |
 5440|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 8]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     16|        return unexpected(err);
 5457|     16|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6177|  5.45k|    {
 6178|  5.45k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.45k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.45k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.45k|            auto rd = make_reader<T, char_type>();
 6183|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.88k, False: 570]
  |  |  ------------------
  ------------------
 6184|  4.88k|                return unexpected(e);
 6185|  4.88k|            }
 6186|       |
 6187|    570|            return impl(rd, range, value);
 6188|  5.45k|        }
 6189|  5.45k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.45k|            auto rd = make_reader<T, char_type>();
 6191|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.45k|                return unexpected(e);
 6193|  5.45k|            }
 6194|       |
 6195|  5.45k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.45k|                specs.width != 0) {
 6197|  5.45k|                return impl(rd, range, value);
 6198|  5.45k|            }
 6199|       |
 6200|  5.45k|            auto crange = get_as_contiguous(range);
 6201|  5.45k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.45k|            return ranges::next(range.begin(),
 6203|  5.45k|                                ranges::distance(crange.begin(), it));
 6204|  5.45k|        }
 6205|  5.45k|        else {
 6206|  5.45k|            SCN_EXPECT(false);
 6207|  5.45k|            SCN_UNREACHABLE;
 6208|  5.45k|        }
 6209|  5.45k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    570|    {
 6120|    570|        const bool need_skipped_width =
 6121|    570|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 160, False: 410]
  |  Branch (6121:33): [True: 340, False: 70]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    570|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    570|        auto [it, prefix_width] = prefix_result;
 6126|    570|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    570|        std::ptrdiff_t value_width = 0;
 6130|    570|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 340, False: 230]
  ------------------
 6131|    340|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 2, False: 338]
  ------------------
 6132|      2|                return unexpected_scan_error(
 6133|      2|                    scan_error::invalid_scanned_value,
 6134|      2|                    "Too many spaces before value, precision exceeded before "
 6135|      2|                    "reading value");
 6136|      2|            }
 6137|       |
 6138|    338|            const auto initial_width = specs.precision - prefix_width;
 6139|    338|            auto max_width_view =
 6140|    338|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    338|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    338|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    338|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    338|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    338|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|    338|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    308|            it = w_it.base();
 6143|    308|            value_width = initial_width - w_it.count();
 6144|    308|        }
 6145|    230|        else {
 6146|    230|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18, False: 212]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     18|    }                                                  \
  |  | 3667|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    212|                                             specs, value, loc));
 6148|       |
 6149|    212|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 156, False: 56]
  ------------------
 6150|    156|                value_width = calculate_text_width(
 6151|    156|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    156|                        .view());
 6153|    156|            }
 6154|    212|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    520|        std::ptrdiff_t postfix_width = 0;
 6158|    520|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 520, False: 0]
  ------------------
 6159|    520|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    520|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    520|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    520|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    520|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 520]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    520|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    520|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    520|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    520|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    520|                                 value_width));
 6163|    520|            std::tie(it, postfix_width) = postfix_result;
 6164|    520|        }
 6165|       |
 6166|    520|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    520|                                                 value_width, postfix_width);
 6168|    520|            !e) {
  ------------------
  |  Branch (6168:13): [True: 144, False: 376]
  ------------------
 6169|    144|            return unexpected(e);
 6170|    144|        }
 6171|       |
 6172|    376|        return it;
 6173|    520|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6177|  5.49k|    {
 6178|  5.49k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.49k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.49k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.49k|            auto rd = make_reader<T, char_type>();
 6183|  5.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.89k, False: 598]
  |  |  ------------------
  ------------------
 6184|  4.89k|                return unexpected(e);
 6185|  4.89k|            }
 6186|       |
 6187|    598|            return impl(rd, range, value);
 6188|  5.49k|        }
 6189|  5.49k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.49k|            auto rd = make_reader<T, char_type>();
 6191|  5.49k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.49k|                return unexpected(e);
 6193|  5.49k|            }
 6194|       |
 6195|  5.49k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.49k|                specs.width != 0) {
 6197|  5.49k|                return impl(rd, range, value);
 6198|  5.49k|            }
 6199|       |
 6200|  5.49k|            auto crange = get_as_contiguous(range);
 6201|  5.49k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.49k|            return ranges::next(range.begin(),
 6203|  5.49k|                                ranges::distance(crange.begin(), it));
 6204|  5.49k|        }
 6205|  5.49k|        else {
 6206|  5.49k|            SCN_EXPECT(false);
 6207|  5.49k|            SCN_UNREACHABLE;
 6208|  5.49k|        }
 6209|  5.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    598|    {
 6120|    598|        const bool need_skipped_width =
 6121|    598|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 166, False: 432]
  |  Branch (6121:33): [True: 336, False: 96]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    598|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    598|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    598|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    598|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    598|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 588]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|    598|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    588|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    588|        auto [it, prefix_width] = prefix_result;
 6126|    588|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    588|        std::ptrdiff_t value_width = 0;
 6130|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 326, False: 262]
  ------------------
 6131|    326|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 326]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    326|            const auto initial_width = specs.precision - prefix_width;
 6139|    326|            auto max_width_view =
 6140|    326|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    326|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 326, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    326|    }                                                  \
  |  |  |  | 3667|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    262|        else {
 6146|    262|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    262|    }                                                  \
  |  | 3667|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.45k|    {
 6178|  5.45k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.45k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.45k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.45k|            auto rd = make_reader<T, char_type>();
 6183|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 5.34k]
  |  |  ------------------
  ------------------
 6184|    114|                return unexpected(e);
 6185|    114|            }
 6186|       |
 6187|  5.34k|            return impl(rd, range, value);
 6188|  5.45k|        }
 6189|  5.45k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.45k|            auto rd = make_reader<T, char_type>();
 6191|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.45k|                return unexpected(e);
 6193|  5.45k|            }
 6194|       |
 6195|  5.45k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.45k|                specs.width != 0) {
 6197|  5.45k|                return impl(rd, range, value);
 6198|  5.45k|            }
 6199|       |
 6200|  5.45k|            auto crange = get_as_contiguous(range);
 6201|  5.45k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.45k|            return ranges::next(range.begin(),
 6203|  5.45k|                                ranges::distance(crange.begin(), it));
 6204|  5.45k|        }
 6205|  5.45k|        else {
 6206|  5.45k|            SCN_EXPECT(false);
 6207|  5.45k|            SCN_UNREACHABLE;
 6208|  5.45k|        }
 6209|  5.45k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6119|  5.34k|    {
 6120|  5.34k|        const bool need_skipped_width =
 6121|  5.34k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 226, False: 5.11k]
  |  Branch (6121:33): [True: 778, False: 4.33k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.34k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 5.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|  5.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.33k|        auto [it, prefix_width] = prefix_result;
 6126|  5.33k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.33k|        std::ptrdiff_t value_width = 0;
 6130|  5.33k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 770, False: 4.56k]
  ------------------
 6131|    770|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 770]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    770|            const auto initial_width = specs.precision - prefix_width;
 6139|    770|            auto max_width_view =
 6140|    770|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    770|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    770|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    770|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    770|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    770|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 414, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    414|    }                                                  \
  |  |  |  | 3667|    770|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    356|            it = w_it.base();
 6143|    356|            value_width = initial_width - w_it.count();
 6144|    356|        }
 6145|  4.56k|        else {
 6146|  4.56k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.21k, False: 1.35k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.21k|    }                                                  \
  |  | 3667|  4.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.35k|                                             specs, value, loc));
 6148|       |
 6149|  1.35k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 192, False: 1.16k]
  ------------------
 6150|    192|                value_width = calculate_text_width(
 6151|    192|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    192|                        .view());
 6153|    192|            }
 6154|  1.35k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.71k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.71k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.35k, False: 356]
  ------------------
 6159|  1.35k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.35k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.35k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.35k|                                 value_width));
 6163|  1.35k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.35k|        }
 6165|       |
 6166|  1.71k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.71k|                                                 value_width, postfix_width);
 6168|  1.71k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 106, False: 1.60k]
  ------------------
 6169|    106|            return unexpected(e);
 6170|    106|        }
 6171|       |
 6172|  1.60k|        return it;
 6173|  1.71k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.45k|    {
 6178|  5.45k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.45k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.45k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.45k|            auto rd = make_reader<T, char_type>();
 6183|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 5.34k]
  |  |  ------------------
  ------------------
 6184|    114|                return unexpected(e);
 6185|    114|            }
 6186|       |
 6187|  5.34k|            return impl(rd, range, value);
 6188|  5.45k|        }
 6189|  5.45k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.45k|            auto rd = make_reader<T, char_type>();
 6191|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.45k|                return unexpected(e);
 6193|  5.45k|            }
 6194|       |
 6195|  5.45k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.45k|                specs.width != 0) {
 6197|  5.45k|                return impl(rd, range, value);
 6198|  5.45k|            }
 6199|       |
 6200|  5.45k|            auto crange = get_as_contiguous(range);
 6201|  5.45k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.45k|            return ranges::next(range.begin(),
 6203|  5.45k|                                ranges::distance(crange.begin(), it));
 6204|  5.45k|        }
 6205|  5.45k|        else {
 6206|  5.45k|            SCN_EXPECT(false);
 6207|  5.45k|            SCN_UNREACHABLE;
 6208|  5.45k|        }
 6209|  5.45k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  5.34k|    {
 6120|  5.34k|        const bool need_skipped_width =
 6121|  5.34k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 226, False: 5.11k]
  |  Branch (6121:33): [True: 778, False: 4.33k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.34k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 5.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|  5.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.33k|        auto [it, prefix_width] = prefix_result;
 6126|  5.33k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.33k|        std::ptrdiff_t value_width = 0;
 6130|  5.33k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 770, False: 4.56k]
  ------------------
 6131|    770|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 770]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    770|            const auto initial_width = specs.precision - prefix_width;
 6139|    770|            auto max_width_view =
 6140|    770|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    770|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    770|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    770|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    770|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    770|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 414, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    414|    }                                                  \
  |  |  |  | 3667|    770|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    356|            it = w_it.base();
 6143|    356|            value_width = initial_width - w_it.count();
 6144|    356|        }
 6145|  4.56k|        else {
 6146|  4.56k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.21k, False: 1.35k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.21k|    }                                                  \
  |  | 3667|  4.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.35k|                                             specs, value, loc));
 6148|       |
 6149|  1.35k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 192, False: 1.16k]
  ------------------
 6150|    192|                value_width = calculate_text_width(
 6151|    192|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    192|                        .view());
 6153|    192|            }
 6154|  1.35k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.71k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.71k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.35k, False: 356]
  ------------------
 6159|  1.35k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.35k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.35k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.35k|                                 value_width));
 6163|  1.35k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.35k|        }
 6165|       |
 6166|  1.71k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.71k|                                                 value_width, postfix_width);
 6168|  1.71k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 106, False: 1.60k]
  ------------------
 6169|    106|            return unexpected(e);
 6170|    106|        }
 6171|       |
 6172|  1.60k|        return it;
 6173|  1.71k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6177|  5.45k|    {
 6178|  5.45k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  5.45k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  5.45k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  5.45k|            auto rd = make_reader<T, char_type>();
 6183|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 5.34k]
  |  |  ------------------
  ------------------
 6184|    114|                return unexpected(e);
 6185|    114|            }
 6186|       |
 6187|  5.34k|            return impl(rd, range, value);
 6188|  5.45k|        }
 6189|  5.45k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  5.45k|            auto rd = make_reader<T, char_type>();
 6191|  5.45k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  5.45k|                return unexpected(e);
 6193|  5.45k|            }
 6194|       |
 6195|  5.45k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  5.45k|                specs.width != 0) {
 6197|  5.45k|                return impl(rd, range, value);
 6198|  5.45k|            }
 6199|       |
 6200|  5.45k|            auto crange = get_as_contiguous(range);
 6201|  5.45k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  5.45k|            return ranges::next(range.begin(),
 6203|  5.45k|                                ranges::distance(crange.begin(), it));
 6204|  5.45k|        }
 6205|  5.45k|        else {
 6206|  5.45k|            SCN_EXPECT(false);
 6207|  5.45k|            SCN_UNREACHABLE;
 6208|  5.45k|        }
 6209|  5.45k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|  5.34k|    {
 6120|  5.34k|        const bool need_skipped_width =
 6121|  5.34k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 226, False: 5.11k]
  |  Branch (6121:33): [True: 778, False: 4.33k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  5.34k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.34k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.34k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.34k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 5.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|  5.34k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  5.33k|        auto [it, prefix_width] = prefix_result;
 6126|  5.33k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  5.33k|        std::ptrdiff_t value_width = 0;
 6130|  5.33k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 770, False: 4.56k]
  ------------------
 6131|    770|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 770]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    770|            const auto initial_width = specs.precision - prefix_width;
 6139|    770|            auto max_width_view =
 6140|    770|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    770|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    770|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    770|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    770|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    770|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 414, False: 356]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    414|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    414|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    414|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    414|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    414|    }                                                  \
  |  |  |  | 3667|    770|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    356|            it = w_it.base();
 6143|    356|            value_width = initial_width - w_it.count();
 6144|    356|        }
 6145|  4.56k|        else {
 6146|  4.56k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  4.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  4.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.21k, False: 1.35k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.21k|    }                                                  \
  |  | 3667|  4.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  1.35k|                                             specs, value, loc));
 6148|       |
 6149|  1.35k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 192, False: 1.16k]
  ------------------
 6150|    192|                value_width = calculate_text_width(
 6151|    192|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    192|                        .view());
 6153|    192|            }
 6154|  1.35k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  1.71k|        std::ptrdiff_t postfix_width = 0;
 6158|  1.71k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 1.35k, False: 356]
  ------------------
 6159|  1.35k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  1.35k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  1.35k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  1.35k|                                 value_width));
 6163|  1.35k|            std::tie(it, postfix_width) = postfix_result;
 6164|  1.35k|        }
 6165|       |
 6166|  1.71k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  1.71k|                                                 value_width, postfix_width);
 6168|  1.71k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 106, False: 1.60k]
  ------------------
 6169|    106|            return unexpected(e);
 6170|    106|        }
 6171|       |
 6172|  1.60k|        return it;
 6173|  1.71k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  4.73k|{
 5795|  4.73k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.73k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  4.73k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 526, False: 4.20k]
  ------------------
 5800|    526|        return range.begin();
 5801|    526|    }
 5802|       |
 5803|  4.20k|    return skip_classic_whitespace(range);
 5804|  4.73k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    526|    {
 3528|    526|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    526|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    526|        return read_default_with_base(range, value, 10);
 3530|    526|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    526|    {
 3492|    526|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    526|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    526|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    526|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    526|                return unexpected_scan_error(
 3498|    526|                    scan_error::invalid_scanned_value,
 3499|    526|                    "Unexpected '-' sign when parsing an "
 3500|    526|                    "unsigned value");
 3501|    526|            }
 3502|    526|        }
 3503|       |
 3504|    526|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 526]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.05k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.05k|                parse_integer_digits_without_thsep(
 3511|  1.05k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.05k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.05k|        auto buf = make_contiguous_buffer(
 3515|  1.05k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.05k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 526, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    526|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    526|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    526|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    526|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    526|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.05k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    526|    {
 3528|    526|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    526|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    526|        return read_default_with_base(range, value, 10);
 3530|    526|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    526|    {
 3492|    526|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    526|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    526|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    526|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 526]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    526|        }
 3503|       |
 3504|    526|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 526]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.05k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.05k|                parse_integer_digits_without_thsep(
 3511|  1.05k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.05k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.05k|        auto buf = make_contiguous_buffer(
 3515|  1.05k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.05k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 526, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    526|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    526|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    526|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    526|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    526|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.05k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  1.09k|    {
 5748|  1.09k|        return true;
 5749|  1.09k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    906|    {
 5765|    906|        detail::format_specs specs{};
 5766|    906|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    906|        std::uintptr_t intvalue{};
 5769|    906|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 906, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    906|    }                                                  \
  |  |  |  | 3667|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    906|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.17k|    {
 3035|  1.17k|        return true;
 3036|  1.17k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    526|    {
 5504|    526|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    526|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    526|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    526|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|    964|    {
 5355|    964|        scan_error err{scan_error::invalid_scanned_value,
 5356|    964|                       "Failed to read boolean"};
 5357|       |
 5358|    964|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 918, False: 46]
  ------------------
 5359|    918|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 918]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    918|            else {
 5363|    918|                err = r.error();
 5364|    918|            }
 5365|    918|        }
 5366|       |
 5367|    964|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 950, False: 14]
  ------------------
 5368|    950|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 950]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    950|            else {
 5372|    950|                err = r.error();
 5373|    950|            }
 5374|    950|        }
 5375|       |
 5376|    964|        return unexpected(err);
 5377|    964|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    928|    {
 5384|    928|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 928]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    928|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 928]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    928|        return unexpected_scan_error(
 5394|    928|            scan_error::invalid_scanned_value,
 5395|    928|            "Failed to read numeric boolean value: No match");
 5396|    928|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|    950|    {
 5402|    950|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 950]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    950|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 950]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    950|        return unexpected_scan_error(
 5412|    950|            scan_error::invalid_scanned_value,
 5413|    950|            "Failed to read textual boolean value: No match");
 5414|    950|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  1.90k|{
 2194|  1.90k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 1.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    120|    }                                                  \
  |  |  |  | 3667|  1.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.78k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.78k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.78k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.78k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.78k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.78k|            return unexpected(parse_error::error);
 2202|  1.78k|        }
 2203|  1.78k|        return it;
 2204|  1.78k|    }
 2205|  1.78k|    else {
 2206|  1.78k|        auto range_it = range.begin();
 2207|  1.78k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.78k, False: 0]
  ------------------
 2208|  1.78k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.78k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.78k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.78k|                return unexpected(parse_error::error);
 2211|  1.78k|            }
 2212|  1.78k|        }
 2213|      0|        return it;
 2214|  1.78k|    }
 2215|  1.78k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    526|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    526|    {
 4152|    526|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    526|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    526|        float_reader<CharT> rd{};
 4155|    526|        return read_impl<Range>(
 4156|    526|            range, rd,
 4157|    526|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    526|                return r.read_source(SCN_FWD(args)...);
 4159|    526|            },
 4160|    526|            value);
 4161|    526|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    526|    {
  754|    526|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    526|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    526|              cvref<T> obj = *get<T>(fn);
  745|    526|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    526|                  obj(static_cast<decltype(args)>(args)...);
  747|    526|              }
  748|    526|              else {
  749|    526|                  return obj(static_cast<decltype(args)>(args)...);
  750|    526|              }
  751|    526|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    526|    {
  684|    526|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    526|            return static_cast<T*>(s.m_cp);
  686|    526|        }
  687|    526|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    526|            return static_cast<T*>(s.m_p);
  689|    526|        }
  690|    526|        else {
  691|    526|            return reinterpret_cast<T*>(s.m_fp);
  692|    526|        }
  693|    526|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    526|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    526|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    526|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    526|        {
  662|    526|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    526|    {
 5266|    526|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    526|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    526|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    526|    {
 5266|    526|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    526|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    526|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    526|    {
 5871|    526|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    526|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    526|                          basic_contiguous_scan_context<char_type>>) {
 5875|    526|            auto rd = make_reader<T, char_type>();
 5876|    526|            return impl(rd, range, value);
 5877|    526|        }
 5878|    526|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    526|            auto rd = make_reader<T, char_type>();
 5880|    526|            if (!is_segment_contiguous(range)) {
 5881|    526|                return impl(rd, range, value);
 5882|    526|            }
 5883|    526|            auto crange = get_as_contiguous(range);
 5884|    526|            SCN_TRY(it, impl(rd, crange, value));
 5885|    526|            return ranges::next(range.begin(),
 5886|    526|                                ranges::distance(crange.begin(), it));
 5887|    526|        }
 5888|    526|        else {
 5889|    526|            SCN_EXPECT(false);
 5890|    526|            SCN_UNREACHABLE;
 5891|    526|        }
 5892|    526|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    526|    {
 5863|    526|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    526|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    526|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    526|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    526|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 526]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    526|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    526|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    526|                        .transform_error(make_eof_scan_error));
 5865|    526|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    526|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    526|    {
 5266|    526|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    526|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    526|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    526|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   151k|    {
 2879|   151k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   464k|    {
 2883|   464k|        return m_current;
 2884|   464k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   550k|    {
 2888|   550k|        return m_range.end();
 2889|   550k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   296k|{
 1221|       |    // TODO: optimize
 1222|   296k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   296k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   296k|    auto res = get_next_code_point(str);
 1224|   296k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   296k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   238k|    {
 2903|   238k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   238k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   238k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 238k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   238k|        }
 2909|   238k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   238k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  15.6k|    {
 2893|  15.6k|        return ranges::subrange{begin(), end()};
 2894|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  6.29k|    {
 6037|  6.29k|        const bool need_skipped_width =
 6038|  6.29k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 3.37k, False: 2.92k]
  |  Branch (6038:33): [True: 1.73k, False: 1.18k]
  ------------------
 6039|  6.29k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  6.29k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 36, False: 6.26k]
  ------------------
 6043|  6.29k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 184, False: 6.07k]
  ------------------
 6044|    220|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    220|                             need_skipped_width);
 6046|    220|        }
 6047|  6.07k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 5.82k, False: 258]
  |  Branch (6047:56): [True: 4.43k, False: 1.38k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  4.43k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.53k, False: 2.90k]
  ------------------
 6051|  1.53k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.53k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.53k|                                  .transform_error(make_eof_scan_error));
 6054|  1.53k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.53k|            }
 6056|  5.80k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  5.80k|                            make_eof_scan_error));
 6058|       |
 6059|  5.80k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 2.22k, False: 678]
  ------------------
 6060|  2.22k|                return result_type{
 6061|  2.22k|                    it,
 6062|  2.22k|                    calculate_text_width(make_contiguous_buffer(
 6063|  2.22k|                                             ranges::subrange{rng.begin(), it})
 6064|  2.22k|                                             .view())};
 6065|  2.22k|            }
 6066|    678|            return result_type{it, 0};
 6067|  5.80k|        }
 6068|       |
 6069|  1.64k|        return result_type{rng.begin(), 0};
 6070|  6.07k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|    994|    {
 6079|    994|        const bool need_skipped_width =
 6080|    994|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 472, False: 522]
  |  Branch (6080:33): [True: 334, False: 188]
  ------------------
 6081|    994|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|    994|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 48, False: 946]
  ------------------
 6084|    994|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 30, False: 916]
  ------------------
 6085|     78|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|     78|                             specs.fill, need_skipped_width);
 6087|     78|        }
 6088|    916|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 906, False: 10]
  ------------------
 6089|    916|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 534, False: 372]
  ------------------
 6090|    916|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 276, False: 258]
  |  Branch (6090:35): [True: 274, False: 2]
  ------------------
 6091|    534|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 188, False: 72]
  ------------------
 6092|    446|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 172, False: 16]
  ------------------
 6093|    446|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 172, False: 274]
  ------------------
 6094|    172|                const auto initial_width =
 6095|    172|                    specs.precision - prefix_width - value_width;
 6096|    172|                auto max_width_view = take_width(rng, initial_width);
 6097|    172|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    172|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    172|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    172|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 172]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    172|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    172|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|    172|                                  .transform_error(make_eof_scan_error));
 6099|    172|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|    172|            }
 6101|    548|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    548|                            make_eof_scan_error));
 6103|       |
 6104|    548|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 274, False: 0]
  ------------------
 6105|    274|                return result_type{
 6106|    274|                    it,
 6107|    274|                    calculate_text_width(make_contiguous_buffer(
 6108|    274|                                             ranges::subrange{rng.begin(), it})
 6109|    274|                                             .view())};
 6110|    274|            }
 6111|      0|            return result_type{it, 0};
 6112|    548|        }
 6113|    470|        return result_type{rng.begin(), 0};
 6114|    916|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6177|    982|    {
 6178|    982|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    982|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    982|                          basic_contiguous_scan_context<char_type>>) {
 6182|    982|            auto rd = make_reader<T, char_type>();
 6183|    982|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 592]
  |  |  ------------------
  ------------------
 6184|    390|                return unexpected(e);
 6185|    390|            }
 6186|       |
 6187|    592|            return impl(rd, range, value);
 6188|    982|        }
 6189|    982|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    982|            auto rd = make_reader<T, char_type>();
 6191|    982|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    982|                return unexpected(e);
 6193|    982|            }
 6194|       |
 6195|    982|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    982|                specs.width != 0) {
 6197|    982|                return impl(rd, range, value);
 6198|    982|            }
 6199|       |
 6200|    982|            auto crange = get_as_contiguous(range);
 6201|    982|            SCN_TRY(it, impl(rd, crange, value));
 6202|    982|            return ranges::next(range.begin(),
 6203|    982|                                ranges::distance(crange.begin(), it));
 6204|    982|        }
 6205|    982|        else {
 6206|    982|            SCN_EXPECT(false);
 6207|    982|            SCN_UNREACHABLE;
 6208|    982|        }
 6209|    982|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    592|    {
 6120|    592|        const bool need_skipped_width =
 6121|    592|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 282, False: 310]
  |  Branch (6121:33): [True: 190, False: 120]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    592|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    592|        auto [it, prefix_width] = prefix_result;
 6126|    592|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    592|        std::ptrdiff_t value_width = 0;
 6130|    592|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 402]
  ------------------
 6131|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 190]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    190|            const auto initial_width = specs.precision - prefix_width;
 6139|    190|            auto max_width_view =
 6140|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    402|        else {
 6146|    402|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 402, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    402|    }                                                  \
  |  | 3667|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6177|    982|    {
 6178|    982|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    982|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    982|                          basic_contiguous_scan_context<char_type>>) {
 6182|    982|            auto rd = make_reader<T, char_type>();
 6183|    982|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 390, False: 592]
  |  |  ------------------
  ------------------
 6184|    390|                return unexpected(e);
 6185|    390|            }
 6186|       |
 6187|    592|            return impl(rd, range, value);
 6188|    982|        }
 6189|    982|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    982|            auto rd = make_reader<T, char_type>();
 6191|    982|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    982|                return unexpected(e);
 6193|    982|            }
 6194|       |
 6195|    982|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    982|                specs.width != 0) {
 6197|    982|                return impl(rd, range, value);
 6198|    982|            }
 6199|       |
 6200|    982|            auto crange = get_as_contiguous(range);
 6201|    982|            SCN_TRY(it, impl(rd, crange, value));
 6202|    982|            return ranges::next(range.begin(),
 6203|    982|                                ranges::distance(crange.begin(), it));
 6204|    982|        }
 6205|    982|        else {
 6206|    982|            SCN_EXPECT(false);
 6207|    982|            SCN_UNREACHABLE;
 6208|    982|        }
 6209|    982|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    592|    {
 6120|    592|        const bool need_skipped_width =
 6121|    592|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 282, False: 310]
  |  Branch (6121:33): [True: 190, False: 120]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    592|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    592|        auto [it, prefix_width] = prefix_result;
 6126|    592|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    592|        std::ptrdiff_t value_width = 0;
 6130|    592|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 402]
  ------------------
 6131|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 190]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    190|            const auto initial_width = specs.precision - prefix_width;
 6139|    190|            auto max_width_view =
 6140|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    402|        else {
 6146|    402|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 402, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    402|    }                                                  \
  |  | 3667|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6177|    962|    {
 6178|    962|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    962|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    962|                          basic_contiguous_scan_context<char_type>>) {
 6182|    962|            auto rd = make_reader<T, char_type>();
 6183|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 392, False: 570]
  |  |  ------------------
  ------------------
 6184|    392|                return unexpected(e);
 6185|    392|            }
 6186|       |
 6187|    570|            return impl(rd, range, value);
 6188|    962|        }
 6189|    962|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    962|            auto rd = make_reader<T, char_type>();
 6191|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    962|                return unexpected(e);
 6193|    962|            }
 6194|       |
 6195|    962|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    962|                specs.width != 0) {
 6197|    962|                return impl(rd, range, value);
 6198|    962|            }
 6199|       |
 6200|    962|            auto crange = get_as_contiguous(range);
 6201|    962|            SCN_TRY(it, impl(rd, crange, value));
 6202|    962|            return ranges::next(range.begin(),
 6203|    962|                                ranges::distance(crange.begin(), it));
 6204|    962|        }
 6205|    962|        else {
 6206|    962|            SCN_EXPECT(false);
 6207|    962|            SCN_UNREACHABLE;
 6208|    962|        }
 6209|    962|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|    962|    {
 5753|    962|        reader_error_handler eh{};
 5754|    962|        detail::check_pointer_type_specs(specs, eh);
 5755|    962|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 392, False: 570]
  |  |  ------------------
  ------------------
 5756|    392|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|    392|        }
 5758|    570|        return {};
 5759|    962|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6119|    570|    {
 6120|    570|        const bool need_skipped_width =
 6121|    570|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 280, False: 290]
  |  Branch (6121:33): [True: 190, False: 100]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    570|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    570|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    570|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    570|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    570|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 570]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    570|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    570|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    570|        auto [it, prefix_width] = prefix_result;
 6126|    570|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    570|        std::ptrdiff_t value_width = 0;
 6130|    570|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 380]
  ------------------
 6131|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 190]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    190|            const auto initial_width = specs.precision - prefix_width;
 6139|    190|            auto max_width_view =
 6140|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    380|        else {
 6146|    380|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 380, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    380|    }                                                  \
  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    190|    {
 5782|    190|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    190|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    190|        return read_default(range, value, loc);
 5784|    190|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    190|    {
 5765|    190|        detail::format_specs specs{};
 5766|    190|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    190|        std::uintptr_t intvalue{};
 5769|    190|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    190|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    380|    {
 5782|    380|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    380|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    380|        return read_default(range, value, loc);
 5784|    380|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6177|    982|    {
 6178|    982|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    982|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    982|                          basic_contiguous_scan_context<char_type>>) {
 6182|    982|            auto rd = make_reader<T, char_type>();
 6183|    982|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 646]
  |  |  ------------------
  ------------------
 6184|    336|                return unexpected(e);
 6185|    336|            }
 6186|       |
 6187|    646|            return impl(rd, range, value);
 6188|    982|        }
 6189|    982|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    982|            auto rd = make_reader<T, char_type>();
 6191|    982|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    982|                return unexpected(e);
 6193|    982|            }
 6194|       |
 6195|    982|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    982|                specs.width != 0) {
 6197|    982|                return impl(rd, range, value);
 6198|    982|            }
 6199|       |
 6200|    982|            auto crange = get_as_contiguous(range);
 6201|    982|            SCN_TRY(it, impl(rd, crange, value));
 6202|    982|            return ranges::next(range.begin(),
 6203|    982|                                ranges::distance(crange.begin(), it));
 6204|    982|        }
 6205|    982|        else {
 6206|    982|            SCN_EXPECT(false);
 6207|    982|            SCN_UNREACHABLE;
 6208|    982|        }
 6209|    982|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    982|    {
 3040|    982|        reader_error_handler eh{};
 3041|    982|        get_derived().check_specs_impl(specs, eh);
 3042|    982|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 646]
  |  |  ------------------
  ------------------
 3043|    336|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    336|        }
 3045|    646|        return {};
 3046|    982|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|    982|    {
 3051|    982|        return static_cast<Derived&>(*this);
 3052|    982|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|    982|    {
 5497|    982|        detail::check_bool_type_specs(specs, eh);
 5498|    982|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    646|    {
 6120|    646|        const bool need_skipped_width =
 6121|    646|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 284, False: 362]
  |  Branch (6121:33): [True: 190, False: 172]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    646|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    646|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    646|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    646|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    646|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 646]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    646|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    646|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    646|        auto [it, prefix_width] = prefix_result;
 6126|    646|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    646|        std::ptrdiff_t value_width = 0;
 6130|    646|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 456]
  ------------------
 6131|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 190]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    190|            const auto initial_width = specs.precision - prefix_width;
 6139|    190|            auto max_width_view =
 6140|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    456|        else {
 6146|    456|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    456|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    456|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    456|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 456, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    456|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    456|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    456|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    456|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    456|    }                                                  \
  |  | 3667|    456|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    456|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    190|    {
 5516|    190|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    190|#if !SCN_DISABLE_LOCALE
 5519|    190|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 0, False: 190]
  ------------------
 5520|      0|            return rd.read_localized(range, loc, value);
 5521|      0|        }
 5522|    190|#endif
 5523|       |
 5524|    190|        return rd.read_classic(range, value);
 5525|    190|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    646|    {
 5529|    646|        SCN_GCC_COMPAT_PUSH
 5530|    646|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    646|        switch (specs.type) {
 5533|     54|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 54, False: 592]
  ------------------
 5534|     54|                return bool_reader_base::allow_text;
 5535|       |
 5536|      2|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 2, False: 644]
  ------------------
 5537|      4|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 2, False: 644]
  ------------------
 5538|      6|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 2, False: 644]
  ------------------
 5539|      8|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 2, False: 644]
  ------------------
 5540|     14|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 6, False: 640]
  ------------------
 5541|     18|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 642]
  ------------------
 5542|     18|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    574|            default:
  ------------------
  |  Branch (5544:13): [True: 574, False: 72]
  ------------------
 5545|    574|                return bool_reader_base::allow_text |
 5546|    574|                       bool_reader_base::allow_numeric;
 5547|    646|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    646|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    190|    {
 5384|    190|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 190]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    190|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 190]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    190|        return unexpected_scan_error(
 5394|    190|            scan_error::invalid_scanned_value,
 5395|    190|            "Failed to read numeric boolean value: No match");
 5396|    190|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    380|{
 2146|    380|    auto it = read_code_unit(range);
 2147|    380|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 380]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    380|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 380, False: 0]
  |  |  ------------------
  ------------------
 2152|    380|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    380|        return unexpected(parse_error::error);
 2154|    380|    }
 2155|       |
 2156|      0|    return *it;
 2157|    380|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    380|{
 1857|    380|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    380|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    380|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    380|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    380|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    380|        if (sz < count) {
 1862|    380|            return unexpected(eof_error::eof);
 1863|    380|        }
 1864|       |
 1865|    380|        return ranges::next(range.begin(), count);
 1866|    380|    }
 1867|    380|    else {
 1868|    380|        auto it = range.begin();
 1869|    380|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 380]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  1.90k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.59k, False: 308]
  ------------------
 1874|  1.59k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 72, False: 1.52k]
  ------------------
 1875|     72|                return unexpected(eof_error::eof);
 1876|     72|            }
 1877|  1.59k|        }
 1878|       |
 1879|    308|        return it;
 1880|    380|    }
 1881|    380|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    380|{
 1095|    380|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    380|        return r.size();
 1097|    380|    }
 1098|    380|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    380|                           ranges::const_iterator_t<Range>,
 1100|    380|                           typename detail::basic_scan_buffer<
 1101|    380|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    380|        if constexpr (ranges::common_range<Range>) {
 1103|    380|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    380|        }
 1105|    380|        else {
 1106|    380|            if (r.begin().stores_parent()) {
 1107|    380|                return static_cast<size_t>(
 1108|    380|                    r.begin().parent()->chars_available() -
 1109|    380|                    r.begin().position());
 1110|    380|            }
 1111|    380|            return r.begin().contiguous_segment().size();
 1112|    380|        }
 1113|    380|    }
 1114|    380|    else {
 1115|    380|        return 0;
 1116|    380|    }
 1117|    380|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    190|    {
 5355|    190|        scan_error err{scan_error::invalid_scanned_value,
 5356|    190|                       "Failed to read boolean"};
 5357|       |
 5358|    190|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 190, False: 0]
  ------------------
 5359|    190|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 190]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    190|            else {
 5363|    190|                err = r.error();
 5364|    190|            }
 5365|    190|        }
 5366|       |
 5367|    190|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 190, False: 0]
  ------------------
 5368|    190|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 190]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    190|            else {
 5372|    190|                err = r.error();
 5373|    190|            }
 5374|    190|        }
 5375|       |
 5376|    190|        return unexpected(err);
 5377|    190|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    190|    {
 5402|    190|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 190]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    190|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 190]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    190|        return unexpected_scan_error(
 5412|    190|            scan_error::invalid_scanned_value,
 5413|    190|            "Failed to read textual boolean value: No match");
 5414|    190|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    380|{
 2194|    380|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    308|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    308|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    308|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    308|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    308|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    308|            return unexpected(parse_error::error);
 2202|    308|        }
 2203|    308|        return it;
 2204|    308|    }
 2205|    308|    else {
 2206|    308|        auto range_it = range.begin();
 2207|    308|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 308, False: 0]
  ------------------
 2208|    308|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 308, False: 0]
  |  |  ------------------
  ------------------
 2209|    308|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    308|                return unexpected(parse_error::error);
 2211|    308|            }
 2212|    308|        }
 2213|      0|        return it;
 2214|    308|    }
 2215|    308|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    456|    {
 5516|    456|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    456|#if !SCN_DISABLE_LOCALE
 5519|    456|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 18, False: 438]
  ------------------
 5520|     18|            return rd.read_localized(range, loc, value);
 5521|     18|        }
 5522|    438|#endif
 5523|       |
 5524|    438|        return rd.read_classic(range, value);
 5525|    456|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     18|    {
 5428|     18|        scan_error err{scan_error::invalid_scanned_value,
 5429|     18|                       "Failed to read boolean"};
 5430|       |
 5431|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 8]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 14, False: 4]
  ------------------
 5441|     14|            auto stdloc = loc.get<std::locale>();
 5442|     14|            const auto& numpunct =
 5443|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     14|            const auto truename = numpunct.truename();
 5445|     14|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     14|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 14]
  ------------------
 5448|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     14|            else {
 5452|     14|                err = r.error();
 5453|     14|            }
 5454|     14|        }
 5455|       |
 5456|     18|        return unexpected(err);
 5457|     18|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     14|    {
 5468|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     14|        const auto shorter = std::pair{
 5470|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 14, False: 0]
  ------------------
 5471|     14|        const auto longer = std::pair{
 5472|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 14]
  ------------------
 5473|       |
 5474|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 14]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 14]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     14|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     14|                                     "read_textual: No match");
 5485|     14|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     28|{
 2179|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     26|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     26|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     26|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     26|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2185|     26|        return unexpected(parse_error::error);
 2186|     26|    }
 2187|      0|    return it;
 2188|     26|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6177|    962|    {
 6178|    962|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    962|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    962|                          basic_contiguous_scan_context<char_type>>) {
 6182|    962|            auto rd = make_reader<T, char_type>();
 6183|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 380, False: 582]
  |  |  ------------------
  ------------------
 6184|    380|                return unexpected(e);
 6185|    380|            }
 6186|       |
 6187|    582|            return impl(rd, range, value);
 6188|    962|        }
 6189|    962|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    962|            auto rd = make_reader<T, char_type>();
 6191|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    962|                return unexpected(e);
 6193|    962|            }
 6194|       |
 6195|    962|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    962|                specs.width != 0) {
 6197|    962|                return impl(rd, range, value);
 6198|    962|            }
 6199|       |
 6200|    962|            auto crange = get_as_contiguous(range);
 6201|    962|            SCN_TRY(it, impl(rd, crange, value));
 6202|    962|            return ranges::next(range.begin(),
 6203|    962|                                ranges::distance(crange.begin(), it));
 6204|    962|        }
 6205|    962|        else {
 6206|    962|            SCN_EXPECT(false);
 6207|    962|            SCN_UNREACHABLE;
 6208|    962|        }
 6209|    962|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    582|    {
 6120|    582|        const bool need_skipped_width =
 6121|    582|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 282, False: 300]
  |  Branch (6121:33): [True: 190, False: 110]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    582|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    582|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    582|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    582|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 582]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    582|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    582|        auto [it, prefix_width] = prefix_result;
 6126|    582|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    582|        std::ptrdiff_t value_width = 0;
 6130|    582|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 392]
  ------------------
 6131|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 190]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    190|            const auto initial_width = specs.precision - prefix_width;
 6139|    190|            auto max_width_view =
 6140|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|    190|            it = w_it.base();
 6143|    190|            value_width = initial_width - w_it.count();
 6144|    190|        }
 6145|    392|        else {
 6146|    392|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 14, False: 378]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     14|    }                                                  \
  |  | 3667|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    378|                                             specs, value, loc));
 6148|       |
 6149|    378|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 280, False: 98]
  ------------------
 6150|    280|                value_width = calculate_text_width(
 6151|    280|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    280|                        .view());
 6153|    280|            }
 6154|    378|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    568|        std::ptrdiff_t postfix_width = 0;
 6158|    568|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 568, False: 0]
  ------------------
 6159|    568|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 568]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    568|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    568|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    568|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    568|                                 value_width));
 6163|    568|            std::tie(it, postfix_width) = postfix_result;
 6164|    568|        }
 6165|       |
 6166|    568|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    568|                                                 value_width, postfix_width);
 6168|    568|            !e) {
  ------------------
  |  Branch (6168:13): [True: 278, False: 290]
  ------------------
 6169|    278|            return unexpected(e);
 6170|    278|        }
 6171|       |
 6172|    290|        return it;
 6173|    568|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6177|    982|    {
 6178|    982|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    982|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    982|                          basic_contiguous_scan_context<char_type>>) {
 6182|    982|            auto rd = make_reader<T, char_type>();
 6183|    982|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 622]
  |  |  ------------------
  ------------------
 6184|    360|                return unexpected(e);
 6185|    360|            }
 6186|       |
 6187|    622|            return impl(rd, range, value);
 6188|    982|        }
 6189|    982|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    982|            auto rd = make_reader<T, char_type>();
 6191|    982|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    982|                return unexpected(e);
 6193|    982|            }
 6194|       |
 6195|    982|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    982|                specs.width != 0) {
 6197|    982|                return impl(rd, range, value);
 6198|    982|            }
 6199|       |
 6200|    982|            auto crange = get_as_contiguous(range);
 6201|    982|            SCN_TRY(it, impl(rd, crange, value));
 6202|    982|            return ranges::next(range.begin(),
 6203|    982|                                ranges::distance(crange.begin(), it));
 6204|    982|        }
 6205|    982|        else {
 6206|    982|            SCN_EXPECT(false);
 6207|    982|            SCN_UNREACHABLE;
 6208|    982|        }
 6209|    982|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|    622|    {
 6120|    622|        const bool need_skipped_width =
 6121|    622|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 284, False: 338]
  |  Branch (6121:33): [True: 218, False: 120]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    622|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    622|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    622|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    622|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    622|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 622]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    622|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    622|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    622|        auto [it, prefix_width] = prefix_result;
 6126|    622|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    622|        std::ptrdiff_t value_width = 0;
 6130|    622|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 218, False: 404]
  ------------------
 6131|    218|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 218]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    218|            const auto initial_width = specs.precision - prefix_width;
 6139|    218|            auto max_width_view =
 6140|    218|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    218|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    218|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    218|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    218|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    218|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 218, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    218|    }                                                  \
  |  |  |  | 3667|    218|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|    404|        else {
 6146|    404|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 404, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    404|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    404|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    404|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    404|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    404|    }                                                  \
  |  | 3667|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|      0|                                             specs, value, loc));
 6148|       |
 6149|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 0]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|      0|        }
 6155|       |
 6156|       |        // Read postfix
 6157|      0|        std::ptrdiff_t postfix_width = 0;
 6158|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 0, False: 0]
  ------------------
 6159|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6162|      0|                                 value_width));
 6163|      0|            std::tie(it, postfix_width) = postfix_result;
 6164|      0|        }
 6165|       |
 6166|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|      0|                                                 value_width, postfix_width);
 6168|      0|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 0]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|      0|        return it;
 6173|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|    962|    {
 6178|    962|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    962|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    962|                          basic_contiguous_scan_context<char_type>>) {
 6182|    962|            auto rd = make_reader<T, char_type>();
 6183|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 898]
  |  |  ------------------
  ------------------
 6184|     64|                return unexpected(e);
 6185|     64|            }
 6186|       |
 6187|    898|            return impl(rd, range, value);
 6188|    962|        }
 6189|    962|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    962|            auto rd = make_reader<T, char_type>();
 6191|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    962|                return unexpected(e);
 6193|    962|            }
 6194|       |
 6195|    962|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    962|                specs.width != 0) {
 6197|    962|                return impl(rd, range, value);
 6198|    962|            }
 6199|       |
 6200|    962|            auto crange = get_as_contiguous(range);
 6201|    962|            SCN_TRY(it, impl(rd, crange, value));
 6202|    962|            return ranges::next(range.begin(),
 6203|    962|                                ranges::distance(crange.begin(), it));
 6204|    962|        }
 6205|    962|        else {
 6206|    962|            SCN_EXPECT(false);
 6207|    962|            SCN_UNREACHABLE;
 6208|    962|        }
 6209|    962|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|    898|    {
 6120|    898|        const bool need_skipped_width =
 6121|    898|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 560, False: 338]
  |  Branch (6121:33): [True: 190, False: 148]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    898|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    898|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    898|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    898|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    898|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 898]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    898|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    898|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    898|        auto [it, prefix_width] = prefix_result;
 6126|    898|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    898|        std::ptrdiff_t value_width = 0;
 6130|    898|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 708]
  ------------------
 6131|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 190]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    190|            const auto initial_width = specs.precision - prefix_width;
 6139|    190|            auto max_width_view =
 6140|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 138, False: 52]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    138|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     52|            it = w_it.base();
 6143|     52|            value_width = initial_width - w_it.count();
 6144|     52|        }
 6145|    708|        else {
 6146|    708|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 360, False: 348]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    360|    }                                                  \
  |  | 3667|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    348|                                             specs, value, loc));
 6148|       |
 6149|    348|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 264, False: 84]
  ------------------
 6150|    264|                value_width = calculate_text_width(
 6151|    264|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    264|                        .view());
 6153|    264|            }
 6154|    348|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    400|        std::ptrdiff_t postfix_width = 0;
 6158|    400|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 142, False: 258]
  ------------------
 6159|    142|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    142|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    142|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    142|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 142]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    142|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    142|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    142|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    142|                                 value_width));
 6163|    142|            std::tie(it, postfix_width) = postfix_result;
 6164|    142|        }
 6165|       |
 6166|    400|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    400|                                                 value_width, postfix_width);
 6168|    400|            !e) {
  ------------------
  |  Branch (6168:13): [True: 18, False: 382]
  ------------------
 6169|     18|            return unexpected(e);
 6170|     18|        }
 6171|       |
 6172|    382|        return it;
 6173|    400|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|    962|    {
 6178|    962|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    962|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    962|                          basic_contiguous_scan_context<char_type>>) {
 6182|    962|            auto rd = make_reader<T, char_type>();
 6183|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 898]
  |  |  ------------------
  ------------------
 6184|     64|                return unexpected(e);
 6185|     64|            }
 6186|       |
 6187|    898|            return impl(rd, range, value);
 6188|    962|        }
 6189|    962|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    962|            auto rd = make_reader<T, char_type>();
 6191|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    962|                return unexpected(e);
 6193|    962|            }
 6194|       |
 6195|    962|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    962|                specs.width != 0) {
 6197|    962|                return impl(rd, range, value);
 6198|    962|            }
 6199|       |
 6200|    962|            auto crange = get_as_contiguous(range);
 6201|    962|            SCN_TRY(it, impl(rd, crange, value));
 6202|    962|            return ranges::next(range.begin(),
 6203|    962|                                ranges::distance(crange.begin(), it));
 6204|    962|        }
 6205|    962|        else {
 6206|    962|            SCN_EXPECT(false);
 6207|    962|            SCN_UNREACHABLE;
 6208|    962|        }
 6209|    962|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6119|    898|    {
 6120|    898|        const bool need_skipped_width =
 6121|    898|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 560, False: 338]
  |  Branch (6121:33): [True: 190, False: 148]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    898|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    898|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    898|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    898|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    898|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 898]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    898|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    898|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    898|        auto [it, prefix_width] = prefix_result;
 6126|    898|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    898|        std::ptrdiff_t value_width = 0;
 6130|    898|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 708]
  ------------------
 6131|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 190]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    190|            const auto initial_width = specs.precision - prefix_width;
 6139|    190|            auto max_width_view =
 6140|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 138, False: 52]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    138|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     52|            it = w_it.base();
 6143|     52|            value_width = initial_width - w_it.count();
 6144|     52|        }
 6145|    708|        else {
 6146|    708|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 360, False: 348]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    360|    }                                                  \
  |  | 3667|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    348|                                             specs, value, loc));
 6148|       |
 6149|    348|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 264, False: 84]
  ------------------
 6150|    264|                value_width = calculate_text_width(
 6151|    264|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    264|                        .view());
 6153|    264|            }
 6154|    348|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    400|        std::ptrdiff_t postfix_width = 0;
 6158|    400|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 142, False: 258]
  ------------------
 6159|    142|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    142|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    142|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    142|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 142]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    142|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    142|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    142|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    142|                                 value_width));
 6163|    142|            std::tie(it, postfix_width) = postfix_result;
 6164|    142|        }
 6165|       |
 6166|    400|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    400|                                                 value_width, postfix_width);
 6168|    400|            !e) {
  ------------------
  |  Branch (6168:13): [True: 18, False: 382]
  ------------------
 6169|     18|            return unexpected(e);
 6170|     18|        }
 6171|       |
 6172|    382|        return it;
 6173|    400|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6177|    962|    {
 6178|    962|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|    962|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|    962|                          basic_contiguous_scan_context<char_type>>) {
 6182|    962|            auto rd = make_reader<T, char_type>();
 6183|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 898]
  |  |  ------------------
  ------------------
 6184|     64|                return unexpected(e);
 6185|     64|            }
 6186|       |
 6187|    898|            return impl(rd, range, value);
 6188|    962|        }
 6189|    962|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|    962|            auto rd = make_reader<T, char_type>();
 6191|    962|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|    962|                return unexpected(e);
 6193|    962|            }
 6194|       |
 6195|    962|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|    962|                specs.width != 0) {
 6197|    962|                return impl(rd, range, value);
 6198|    962|            }
 6199|       |
 6200|    962|            auto crange = get_as_contiguous(range);
 6201|    962|            SCN_TRY(it, impl(rd, crange, value));
 6202|    962|            return ranges::next(range.begin(),
 6203|    962|                                ranges::distance(crange.begin(), it));
 6204|    962|        }
 6205|    962|        else {
 6206|    962|            SCN_EXPECT(false);
 6207|    962|            SCN_UNREACHABLE;
 6208|    962|        }
 6209|    962|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6119|    898|    {
 6120|    898|        const bool need_skipped_width =
 6121|    898|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 560, False: 338]
  |  Branch (6121:33): [True: 190, False: 148]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|    898|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    898|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    898|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    898|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    898|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 898]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    898|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    898|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|    898|        auto [it, prefix_width] = prefix_result;
 6126|    898|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|    898|        std::ptrdiff_t value_width = 0;
 6130|    898|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 190, False: 708]
  ------------------
 6131|    190|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 190]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|    190|            const auto initial_width = specs.precision - prefix_width;
 6139|    190|            auto max_width_view =
 6140|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 138, False: 52]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    138|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|     52|            it = w_it.base();
 6143|     52|            value_width = initial_width - w_it.count();
 6144|     52|        }
 6145|    708|        else {
 6146|    708|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 360, False: 348]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    360|    }                                                  \
  |  | 3667|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    708|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|    348|                                             specs, value, loc));
 6148|       |
 6149|    348|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 264, False: 84]
  ------------------
 6150|    264|                value_width = calculate_text_width(
 6151|    264|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|    264|                        .view());
 6153|    264|            }
 6154|    348|        }
 6155|       |
 6156|       |        // Read postfix
 6157|    400|        std::ptrdiff_t postfix_width = 0;
 6158|    400|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 142, False: 258]
  ------------------
 6159|    142|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    142|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    142|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    142|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    142|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 142]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    142|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|    142|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|    142|                                 rd.skip_ws_before_read(), prefix_width,
 6162|    142|                                 value_width));
 6163|    142|            std::tie(it, postfix_width) = postfix_result;
 6164|    142|        }
 6165|       |
 6166|    400|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|    400|                                                 value_width, postfix_width);
 6168|    400|            !e) {
  ------------------
  |  Branch (6168:13): [True: 18, False: 382]
  ------------------
 6169|     18|            return unexpected(e);
 6170|     18|        }
 6171|       |
 6172|    382|        return it;
 6173|    400|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    652|    {
 3492|    652|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    652|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    652|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    652|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    652|                return unexpected_scan_error(
 3498|    652|                    scan_error::invalid_scanned_value,
 3499|    652|                    "Unexpected '-' sign when parsing an "
 3500|    652|                    "unsigned value");
 3501|    652|            }
 3502|    652|        }
 3503|       |
 3504|    652|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 652]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.30k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.30k|                parse_integer_digits_without_thsep(
 3511|  1.30k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.30k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.30k|        auto buf = make_contiguous_buffer(
 3515|  1.30k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.30k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 652, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    652|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    652|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    652|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    652|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    652|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.30k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    652|    {
 3492|    652|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    652|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    652|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    652|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 652]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    652|        }
 3503|       |
 3504|    652|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 652]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.30k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 652]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    652|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.30k|                parse_integer_digits_without_thsep(
 3511|  1.30k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.30k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.30k|        auto buf = make_contiguous_buffer(
 3515|  1.30k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.30k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    652|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    652|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    652|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    652|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 652, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    652|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    652|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    652|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    652|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    652|    }                                                  \
  |  |  |  | 3667|    652|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.30k|    }

LLVMFuzzerTestOneInput:
   68|  4.21k|{
   69|  4.21k|    scn::fuzz::run(data, size);
   70|  4.21k|    return 0;
   71|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.21k|{
   52|  4.21k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.21k]
  |  Branch (52:35): [True: 0, False: 4.21k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.21k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.21k|    run_for_source(sv);
   59|  4.21k|    run_for_source(wsv_reinterpret);
   60|  4.21k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.21k, False: 0]
  ------------------
   61|  4.21k|        run_for_source(wsv_transcode);
   62|  4.21k|    }
   63|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.21k|{
   37|  4.21k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.21k|    run_for_type<char_type>(source);
   40|  4.21k|    run_for_type<int>(source);
   41|  4.21k|    run_for_type<unsigned>(source);
   42|  4.21k|    run_for_type<double>(source);
   43|  4.21k|    run_for_type<bool>(source);
   44|  4.21k|    run_for_type<void*>(source);
   45|  4.21k|    run_for_type<std::string>(source);
   46|  4.21k|    run_for_type<std::wstring>(source);
   47|  4.21k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.21k|{
   25|  4.21k|    {
   26|  4.21k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.21k|    }
   28|  4.21k|    {
   29|  4.21k|        auto _ =
   30|  4.21k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.21k|    }
   32|  4.21k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  8.43k|{
   37|  8.43k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.43k|    run_for_type<char_type>(source);
   40|  8.43k|    run_for_type<int>(source);
   41|  8.43k|    run_for_type<unsigned>(source);
   42|  8.43k|    run_for_type<double>(source);
   43|  8.43k|    run_for_type<bool>(source);
   44|  8.43k|    run_for_type<void*>(source);
   45|  8.43k|    run_for_type<std::string>(source);
   46|  8.43k|    run_for_type<std::wstring>(source);
   47|  8.43k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  8.43k|{
   25|  8.43k|    {
   26|  8.43k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.43k|    }
   28|  8.43k|    {
   29|  8.43k|        auto _ =
   30|  8.43k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.43k|    }
   32|  8.43k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.21k|{
   52|  4.21k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.21k|    string_buffer.resize(size);
   56|  4.21k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.21k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.21k|    const auto wsv_reinterpret_size =
   61|  4.21k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 86, False: 4.13k]
  ------------------
   62|  4.21k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.21k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.21k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.21k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.21k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.21k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.21k|}

